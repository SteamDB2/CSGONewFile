$*map%d
$ORIGIN
%s %s %s %s %s %s %s %s %s
%s.%03d
%s/%s
%s|%d
(stack variable!)
(telemetry)buffer size
(telemetry)context switches(tevent)
(telemetry)network bytes
(telemetry)processing time(ms)
(telemetry)tick (ms)
(telemetry/flipBufferPointers)explicit
(telemetry/flipBufferPointers)space
(telemetry/flipBufferPointers)trickle
(telemetry/send)send
*** WARNING: String table too small, overflow!!! ***
.
/home/telemetry/devel/projects/telemetry/src/sdk/tmcore.cpp
/proc/self/cmdline
2.0P(CHECKED)
<corrupt>
<stack variable!>
<telemetry:io>
<telemetry>
<tmZone>
<tmio>
<unnamed>
<unregistered ELF>
FILE
GCC: (Ubuntu/Linaro 4.6.4-1ubuntu1~12.04) 4.6.4
GLIBC_2.0
GLIBC_2.1
GLIBC_2.1.3
GLIBC_2.2
GLIBC_2.3
GLIBC_2.3.3
GLIBC_2.3.4
GNU
S32 itmCoreGetStati(HTELEMETRY, TmStat)
TCP(RAD)
Telemetry[ERROR]: %s Attempting to reinitialize a valid context!  You must call tmShutdownContext first!
Telemetry[ERROR]: %s Invalid parameter(s)
Telemetry[ERROR]: %s Not enough memory, Telemetry requires at least %d bytes
Telemetry[ERROR]: %s Telemetry uninitialized
Telemetry[LOG]: %s ...tmio thread running
Telemetry[LOG]: %s Attempting to connect (timeout = %d ms)
Telemetry[LOG]: %s Closing network connections
Telemetry[LOG]: %s Connection established
Telemetry[LOG]: %s Creating connection
Telemetry[LOG]: %s Data collection connection closed (reason=%d,remotely=%d)
Telemetry[LOG]: %s Emulated tools version %d
Telemetry[LOG]: %s Found corrupt string!
Telemetry[LOG]: %s Handshake received
Telemetry[LOG]: %s Initializing networking system (TMOF_INIT_NETWORKING)
Telemetry[LOG]: %s Stack var! ref = 0x%p var = 0x%p
Telemetry[LOG]: %s Starting tmio thread
Telemetry[LOG]: %s Telemetry base context size: %d bytes
Telemetry[LOG]: %s Using tools version 0x%x
Telemetry[LOG]: %s Waiting for disconnect
Telemetry[LOG]: %s Waiting for handshake
Telemetry[LOG]: %s Waiting for io connection to close
Telemetry[LOG]: %s build: Sep 12 2014 10:36:13
Telemetry[LOG]: %s clearing map signature %d (%s) : %s
Telemetry[LOG]: %s cmd: 0x%x size: 0x%x
Telemetry[LOG]: %s done
Telemetry[LOG]: %s finding map signatures
Telemetry[LOG]: %s found %d map signatures
Telemetry[LOG]: %s found map signatures
Telemetry[LOG]: %s tick [v%d]%d @ 0x%llx
Telemetry[LOG]: %s tmOpen - (%s)%s (%s), %s:%d
Telemetry[LOG]: %s version: 2.0P(CHECKED)
Telemetry[WARNING]: %s Application logical path '%s' is an invalid name
Telemetry[WARNING]: %s Application name '%s' is an invalid name (must be alphanumeric and not contain spaces)
Telemetry[WARNING]: %s Bad handshake, disconnecting
Telemetry[WARNING]: %s Called tmSetLockStateMinTime with corrupt buffer
Telemetry[WARNING]: %s Context size > 4MB...this may impact performance!  1-2MB recommended!
Telemetry[WARNING]: %s Could not connect!
Telemetry[WARNING]: %s Could not start system networking subsystem!
Telemetry[WARNING]: %s Dynamic strings not allowed for value string!
Telemetry[WARNING]: %s Failed to create connection
Telemetry[WARNING]: %s Failed to open network connection.
Telemetry[WARNING]: %s Failed to send TM_APP_MAGIC
Telemetry[WARNING]: %s Handshake indicates server side failure with msg '%s'
Telemetry[WARNING]: %s Invalid buffer parameter
Telemetry[WARNING]: %s Invalid connection type '%d'
Telemetry[WARNING]: %s Invalid context
Telemetry[WARNING]: %s Invalid context passed to tmCoreGetPlatformInformation
Telemetry[WARNING]: %s Invalid information type
Telemetry[WARNING]: %s Invalid lock result '%d' passed to tmCoreEndTryLock
Telemetry[WARNING]: %s Invalid lock state '%d'
Telemetry[WARNING]: %s Invalid parameter
Telemetry[WARNING]: %s Invalid parameter '%d', assuming %d
Telemetry[WARNING]: %s Invalid parameter value %d passed to tmSetParameter
Telemetry[WARNING]: %s Invalid pointer passed to tmCoreGetPlatformInformation
Telemetry[WARNING]: %s Invalid socket buffer size parameter
Telemetry[WARNING]: %s Invalid value %d for TMP_LOCK_MIN_TIME
Telemetry[WARNING]: %s Invalid value %d for TMP_TELEMETRY_PREFERRED_CPU
Telemetry[WARNING]: %s Missing handshake, disconnecting
Telemetry[WARNING]: %s Mutex name table full
Telemetry[WARNING]: %s NULL format specifier passed
Telemetry[WARNING]: %s NULL key or value passed
Telemetry[WARNING]: %s NULL name specified
Telemetry[WARNING]: %s NULL passed for name or desc
Telemetry[WARNING]: %s NULL passed for name or file
Telemetry[WARNING]: %s NULL string passed
Telemetry[WARNING]: %s Negative zone total
Telemetry[WARNING]: %s Stack variable passed for description!
Telemetry[WARNING]: %s Stack variable passed for name!
Telemetry[WARNING]: %s Stack variable specified for name
Telemetry[WARNING]: %s Stack variable used for format string
Telemetry[WARNING]: %s Stack variable used for location
Telemetry[WARNING]: %s Stack variable used for name
Telemetry[WARNING]: %s Telemetry already shut down
Telemetry[WARNING]: %s Telemetry uninitialized
Telemetry[WARNING]: %s Timed out waiting for handshake
Telemetry[WARNING]: %s TmStringTable_Put - capacity over 50%%
Telemetry[WARNING]: %s Unknown option '%d'
Telemetry[WARNING]: %s Unknown protocol version 0x%x!
Telemetry[WARNING]: %s Unknown server cmd 0x%x
Telemetry[WARNING]: %s User timer precision is too low!  Microsecond accurate timer is required!
Telemetry[WARNING]: %s mismatched format codes!
Telemetry[WARNING]: %s tmCheckDebugZoneLevel has been deprecated and is disabled!
Telemetry[WARNING]: %s tmCoreStartup called multiple times
Telemetry[WARNING]: %s tmSetDebugZoneLevel has been deprecated and is disabled!
Telemetry[WARNING]: %s tmUnwindToDebugZoneLevel has been deprecated and is disabled!
TmConnectionStatus itmCoreGetConnectionStatus(HTELEMETRY)
TmErrorCode TmIo::openNetworkConnections(TmContext*, int, int)
TmErrorCode itmCoreGetLastError(HTELEMETRY)
TmErrorCode itmCoreGetPlatformInformation(void*, TmPlatformInformation, void*, U32)
TmErrorCode itmCoreGetSessionName(HTELEMETRY, char*, int)
TmErrorCode itmCoreInitializeContext(TmContext**, void*, U32)
TmErrorCode itmCoreOpen(HTELEMETRY, const char*, const char*, const char*, TmConnectionType, U16, U32, int)
TmErrorCode itmCoreStartup()
USER
_Jv_RegisterClasses
__bss_start
__cxa_finalize
__errno_location
__gmon_start__
__memcpy_chk
__printf_chk
__snprintf_chk
__sprintf_chk
__vsprintf_chk
_edata
_end
_fini
accept
backtrace
bind
bool TmContext::processServerCommands_noLock(int)
bool sIsStackVar(const void*, const void*)
connect
const char* itmCoreDynamicString(HTELEMETRY, const char*)
dladdr
fclose
fcntl
fflush
fgets
fopen
fread
free
freeifaddrs
fwrite
gethostbyname
gethostbyname failed
gethostname
getifaddrs
getlogin_r
getpid
getsockopt
gettimeofday
inet_ntoa
int itmCoreGetCallStack(HTELEMETRY, TmCallStack*)
int itmCoreGetCallStackR(HTELEMETRY, TmCallStack*)
int itmCoreIsEnabled(HTELEMETRY, TmOption)
int itmCoreIsPaused(HTELEMETRY)
int itmCoreSendCallStack(HTELEMETRY, const TmCallStack*, int)
int itmCoreSetLockStateMinTime(HTELEMETRY, void*, const void*, TmLockState, const char*, U32, TmFormatCode*, const char*, ...)
int sSetLockStateV(TmContext*, void*, U64, TmLockState, U64, const char*, U32, TmFormatCode*, const char*, char**)
libc.so.6
libdl.so.2
libpthread.so.0
listen
localdisk
long long unsigned int TmIo::putString(unsigned int, const char*, TmOutputBuffer&)
lsof -p %d
malloc
memcpy
memmove
memset
mmap
pclose
perror
popen
process
pthread_attr_destroy
pthread_attr_init
pthread_attr_setstacksize
pthread_create
pthread_detach
pthread_getschedparam
pthread_getspecific
pthread_join
pthread_key_create
pthread_mutex_destroy
pthread_mutex_init
pthread_mutex_lock
pthread_mutex_timedlock
pthread_mutex_trylock
pthread_mutex_unlock
pthread_mutexattr_init
pthread_mutexattr_settype
pthread_self
pthread_setaffinity_np
pthread_setschedparam
pthread_setspecific
pthread_timedjoin_np
pthread_tryjoin_np
pthread_yield
puts
rb
readlink
recv
rrSocket: accept failed with error 0x%x
rrSocket: connect() failed (%d)
rrSocket: could not bind socket (0x%x)
rrSocket: error when recving, errno = 0x%x
rrSocket: select() failed (%d)
rrSocket: send failure, ENOTCONN
rrSocket: send failure, connection aborted
rrSocket: send failure, connection was reset
rrSocket: send failure, error = %d
rrSocket: send failure, not socket
rrSocket: send failure, out of buffer space
rrSocket: send failure, would block
rrSocket: socket() failed with error %d
rrSocketStartup!
rrSockett: getsockopt reported %d while getting connection status
sched_get_priority_max
sched_get_priority_min
select
sem_destroy
sem_init
sem_post
sem_timedwait
sem_trywait
sem_wait
send
setsockopt
setsockopt(SO_RCVBUF): failed with error %d
setsockopt(SO_SNDBUF): failed with error %d
socket
sscanf
static U32 TmIo::sCommThreadFunc(TmIo*)
static void TmContext::sThreadNameV(TmContext*, U32, TmFormatCode*, const char*, char**)
stdout
strlen
strtol
sysconf
telemetry/buffer size
telemetry/context switches(tevent)
telemetry/network bytes
telemetry/processing_time
telemetry_lockWriteBuffer
tmGetAPI
tmTick
tmdata
usleep
vfprintf
void TmIo::closeNetworkConnections()
void itmCoreAlloc(HTELEMETRY, const void*, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreBeginTimeSpan(HTELEMETRY, U64, U32, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreCheckDebugZoneLevel(HTELEMETRY, int)
void itmCoreClearStaticString(HTELEMETRY, const char*)
void itmCoreClose(HTELEMETRY)
void itmCoreEmitAccumulationZone(HTELEMETRY, U64*, U64, U32, U32, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreEnable(HTELEMETRY, TmOption, int)
void itmCoreEndTimeSpan(HTELEMETRY, U64, U32, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreEndTryLock(HTELEMETRY, U64, const char*, int, TmFormatCode*, const void*, TmLockResult)
void itmCoreFlush(HTELEMETRY)
void itmCoreFree(HTELEMETRY, const void*, const char*, int, TmFormatCode*)
void itmCoreLeave(HTELEMETRY, U64, U32, const char*, int)
void itmCoreLockName(HTELEMETRY, const void*, TmFormatCode*, const char*, ...)
void itmCoreMessage(HTELEMETRY, U32, U32, TmFormatCode*, const char*, ...)
void itmCorePause(HTELEMETRY, int)
void itmCoreSetDebugZoneLevel(HTELEMETRY, int)
void itmCoreSetLockState(HTELEMETRY, const void*, TmLockState, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreSetParameter(HTELEMETRY, TmParameter, const void*)
void itmCoreSetServerConfiguration(HTELEMETRY, TmServerConfiguration, const void*)
void itmCoreSetTimelineSectionName(HTELEMETRY, TmFormatCode*, const char*, ...)
void itmCoreSetVariable(HTELEMETRY, const char*, TmFormatCode*, const char*, ...)
void itmCoreShutdown()
void itmCoreShutdownContext(HTELEMETRY)
void itmCoreSignalLockCount(HTELEMETRY, const char*, U32, const void*, U32, TmFormatCode*, const char*, ...)
void itmCoreThreadName(HTELEMETRY, U32, TmFormatCode*, const char*, ...)
void itmCoreTick(HTELEMETRY)
void itmCoreTryLock(HTELEMETRY, U64*, U64, const char*, U32, const void*, TmFormatCode*, const char*, ...)
void itmCoreUnwindToDebugZoneLevel(HTELEMETRY, int)
void itmCoreUpdateSymbolData(HTELEMETRY)
void sCoreAllocV(TmContext*, const void*, U64, const char*, U32, TmFormatCode*, const char*, char**)
void sCoreDisjointBlobV(HTELEMETRY, int, const void**, const int*, const char*, TmFormatCode*, const char*, char**)
void sCoreEmitAccumulationZoneV(TmContext*, U64*, U64, U32, U32, const char*, U32, TmFormatCode*, const char*, char**)
void sCoreEnterV(HTELEMETRY, U64*, U32, U64, U32, const char*, U32, TmFormatCode*, const char*, char**)
void sCoreLockNameV(TmContext*, U64, TmFormatCode*, const char*, char**)
void sCoreMessageV(TmContext*, U32, U32, TmFormatCode*, const char*, char**)
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = double, int type = 1, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = float, int type = 0, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = int, int type = 2, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = long long int, int type = 4, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = long long unsigned int, int type = 5, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = unsigned int, int type = 3, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCoreSetTimelineSectionNameV(TmContext*, TmFormatCode*, const char*, char**)
void sCoreSetVariableV(TmContext*, const char*, TmFormatCode*, const char*, char**)
void sCoreSignalLockCount(TmContext*, const char*, U32, const void*, U32, TmFormatCode*, const char*, char**)
void sCoreTryLockV(TmContext*, U64, U64, const char*, U32, const void*, TmFormatCode*, const char*, char**)
waiting for data
wb
zD/proc/%i/exe
