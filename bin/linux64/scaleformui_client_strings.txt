
!
!!! ExecuteEvent finished '%s' = %p for %s
!!! ExecuteEvent started '%s' = %p for %s
!@
!P
!`
"
"  mapped to "
" - GFX file format expected
" is created
"%s"
"%s" = "%s"
"></img>
"@
"P
#
#;
#@
#P
#bML
#base
#base is NULL
#empty#
#include
#include is NULL
#int#
#version 120uniform mat4 cxmul;uniform mat4 cxmul1;uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_original = texture2D(tex[int(0.0)], tc0);vec4 fcolor_source   = texture2D(tex[int(1.0)], tc1);gl_FragColor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);}
#version 120uniform mat4 mvp;attribute vec2 atc;attribute vec4 pos;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc = atc;}
#version 120uniform mat4 mvp;attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = (pos) * ( mvp);color = acolor;factor = afactor;}
#version 120uniform mat4 mvp;attribute vec4 acolor;attribute vec4 pos;varying vec4 color;void main() {gl_Position = (pos) * ( mvp);color = acolor;}
#version 120uniform mat4 mvp;attribute vec4 pos;void main() {gl_Position = (pos) * ( mvp);}
#version 120uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 120uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 120uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 pos;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);}
#version 120uniform mat4 mvp;uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( mvp);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc = atc;}
#version 120uniform mat4 vfmuniforms[24];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);color = acolor;}
#version 120uniform mat4 vfmuniforms[24];attribute vec4 pos;attribute float vbatch;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[144];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc = atc;fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);vcolor = acolor * vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];tc = atc;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 2.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
#version 120uniform sampler2D srctex;uniform sampler2D tex;varying vec2 tc;void main() {vec4 fchannels = texture2D(tex, tc);gl_FragColor  = texture2D(srctex, vec2(fchannels.r, 0.125));gl_FragColor += texture2D(srctex, vec2(fchannels.g, 0.375));gl_FragColor += texture2D(srctex, vec2(fchannels.b, 0.625));gl_FragColor += texture2D(srctex, vec2(fchannels.a, 0.875));}
#version 120uniform sampler2D tex;varying vec2 tc;varying vec4 vcolor;void main() {vec4 c = vcolor;c.a = c.a * texture2D(tex, tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec2 tc;varying vec4 vcolor;void main() {vec4 c = vcolor;c.a = c.a * texture2D(tex, tc).a;gl_FragColor = c;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec2 tc;varying vec4 vcolor;void main() {vec4 c = vcolor;c.a = c.a * texture2D(tex, tc).a;gl_FragColor = c;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);vec4 diff = fcolor0 - fcolor1;vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));gl_FragColor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );}
#version 120uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;gl_FragColor.a = 1.0;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
#version 120uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;gl_FragColor.a = inAlpha;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
#version 120uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;gl_FragColor.a = 1.0;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
#version 120uniform sampler2D tex[3];varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;gl_FragColor.a = inAlpha;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
#version 120uniform sampler2D tex[3];varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
#version 120uniform sampler2D tex[3];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor = gl_FragColor;}
#version 120uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec2 atc;attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc = atc;fucxadd = cxadd;fucxmul = cxmul;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = (pos) * ( mvp);vcolor = acolor * cxmul + cxadd;tc = atc;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( mvp);color = acolor;fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec4 acolor;attribute vec4 pos;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( mvp);color = acolor;fucxadd = cxadd;fucxmul = cxmul;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( mvp);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec2 atc;attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc = atc;fucxadd = cxadd;fucxmul = cxmul;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);vcolor = acolor * cxmul + cxadd;tc = atc;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 pos;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;fucxadd = cxadd;fucxmul = cxmul;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;}
#version 120uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 120uniform vec4 cxmul;void main() {gl_FragColor = cxmul;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 cxmul;void main() {gl_FragColor = cxmul;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 cxmul;void main() {gl_FragColor = cxmul;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);float  i = 0.0;for (i = -fsize.x; i <= fsize.x; i++){{color += texture2D(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);float  i = 0.0;for (i = -fsize.x; i <= fsize.x; i++){{color += texture2D(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120uniform vec4 mvp[2];attribute vec2 atc;attribute vec4 pos;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc = atc;}
#version 120uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;factor = afactor;}
#version 120uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 pos;varying vec4 color;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;}
#version 120uniform vec4 mvp[2];attribute vec4 pos;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);}
#version 120uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 120uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 120uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 pos;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);}
#version 120uniform vec4 mvp[2];uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);factor = afactor;}
#version 120uniform vec4 mvp[2];uniform vec4 texgen[4];attribute vec4 pos;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);}
#version 120uniform vec4 mvp[2];uniform vec4 texgen[6];attribute vec4 pos;varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);tc2.x = dot(pos, texgen[int(4.0)]);tc2.y = dot(pos, texgen[int(5.0)]);}
#version 120uniform vec4 vfuniforms[144];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform vec4 vfuniforms[144];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);factor = afactor;}
#version 120uniform vec4 vfuniforms[144];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform vec4 vfuniforms[144];attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];}
#version 120uniform vec4 vfuniforms[192];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform vec4 vfuniforms[48];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);tc = atc;}
#version 120uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;factor = afactor;}
#version 120uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;}
#version 120uniform vec4 vfuniforms[48];attribute vec4 pos;attribute float vbatch;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);}
#version 120uniform vec4 vfuniforms[96];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);tc = atc;fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
#version 120uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];tc = atc;}
#version 120uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
#version 120uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 120uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
#version 120uniform vec4 vfuniforms[96];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
#version 120uniform vec4 vfuniforms[96];attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);}
#version 120varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;void main() {gl_FragColor = color;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;void main() {gl_FragColor = color;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 factor;void main() {gl_FragColor = color;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;void main() {gl_FragColor = color;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
#version 120varying vec4 color;void main() {gl_FragColor = color;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;out vec4 fcolor;void main() {fcolor = color;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;out vec4 fcolor;void main() {fcolor = color;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 factor;out vec4 fcolor;void main() {fcolor = color;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;out vec4 fcolor;void main() {fcolor = color;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enablein vec4 color;out vec4 fcolor;void main() {fcolor = color;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];in vec2 atc;in vec4 pos;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc = atc;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);color = acolor;factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];in vec4 acolor;in vec4 pos;out vec4 color;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);color = acolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];in vec4 pos;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[144];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc0;out vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec2 atc;in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc = atc;fucxadd = vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)];}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec2 atc;in vec4 pos;out vec2 tc;out vec4 vcolor;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);vcolor = acolor * vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)] + vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];tc = atc;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 pos;out vec4 color;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)];}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 pos;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc0;out vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 3.0)]);factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec2 tc;in vec4 vcolor;out vec4 fcolor;void main() {vec4 c = vcolor;c.a = c.a * texture(tex, tc).r;fcolor = c;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec2 tc;in vec4 vcolor;out vec4 fcolor;void main() {vec4 c = vcolor;c.a = c.a * texture(tex, tc).r;fcolor = c;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec2 tc;in vec4 vcolor;out vec4 fcolor;void main() {vec4 c = vcolor;c.a = c.a * texture(tex, tc).r;fcolor = c;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 cxmul;out vec4 fcolor;void main() {fcolor = cxmul;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 cxmul;out vec4 fcolor;void main() {fcolor = cxmul;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 cxmul;out vec4 fcolor;void main() {fcolor = cxmul;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[144];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[144];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc0;out vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 3.0)]);factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[144];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[144];in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[192];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc0;out vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 2.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(gl_InstanceID * 8.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 8.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[48];in vec2 atc;in vec4 pos;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);tc = atc;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[48];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[48];in vec4 acolor;in vec4 pos;out vec4 color;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[48];in vec4 pos;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[96];in vec2 atc;in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);tc = atc;fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[96];in vec4 acolor;in vec2 atc;in vec4 pos;out vec2 tc;out vec4 vcolor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);vcolor = acolor * vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)] + vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];tc = atc;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[96];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[96];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[96];in vec4 acolor;in vec4 pos;out vec4 color;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[96];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150#extension GL_ARB_draw_instanced : enableuniform vec4 vfuniforms[96];in vec4 pos;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);}
#version 150in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;out vec4 fcolor;void main() {fcolor = color;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;out vec4 fcolor;void main() {fcolor = color;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 factor;out vec4 fcolor;void main() {fcolor = color;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150in vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150in vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150in vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150in vec4 color;in vec4 fucxadd;in vec4 fucxmul;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150in vec4 color;out vec4 fcolor;void main() {fcolor = color;fcolor = fcolor;}
#version 150in vec4 color;out vec4 fcolor;void main() {fcolor = color;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150in vec4 color;out vec4 fcolor;void main() {fcolor = color;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform mat4 cxmul;uniform mat4 cxmul1;uniform sampler2D tex[2];in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor_original = texture(tex[int(0.0)], tc0);vec4 fcolor_source   = texture(tex[int(1.0)], tc1);fcolor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);}
#version 150uniform mat4 mvp;in vec2 atc;in vec4 pos;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc = atc;}
#version 150uniform mat4 mvp;in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;void main() {gl_Position = (pos) * ( mvp);color = acolor;factor = afactor;}
#version 150uniform mat4 mvp;in vec4 acolor;in vec4 pos;out vec4 color;void main() {gl_Position = (pos) * ( mvp);color = acolor;}
#version 150uniform mat4 mvp;in vec4 pos;void main() {gl_Position = (pos) * ( mvp);}
#version 150uniform mat4 mvp;uniform vec4 texgen[2];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 150uniform mat4 mvp;uniform vec4 texgen[2];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 150uniform mat4 mvp;uniform vec4 texgen[2];in vec4 pos;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);}
#version 150uniform mat4 mvp;uniform vec4 texgen[4];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc0;out vec2 tc1;void main() {gl_Position = (pos) * ( mvp);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];in vec2 atc;in vec4 pos;in float vbatch;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc = atc;}
#version 150uniform mat4 vfmuniforms[24];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];in vec4 acolor;in vec4 pos;in float vbatch;out vec4 color;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);color = acolor;}
#version 150uniform mat4 vfmuniforms[24];in vec4 pos;in float vbatch;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[144];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc0;out vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec2 atc;in vec4 pos;in float vbatch;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc = atc;fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec2 atc;in vec4 pos;in float vbatch;out vec2 tc;out vec4 vcolor;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);vcolor = acolor * vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];tc = atc;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 2.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 pos;in float vbatch;out vec4 color;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];in vec4 pos;in float vbatch;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc0;out vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];in vec4 pos;in float vbatch;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
#version 150uniform sampler2D srctex;uniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {vec4 fchannels = texture(tex, tc);fcolor  = texture(srctex, vec2(fchannels.r, 0.125));fcolor += texture(srctex, vec2(fchannels.g, 0.375));fcolor += texture(srctex, vec2(fchannels.b, 0.625));fcolor += texture(srctex, vec2(fchannels.a, 0.875));}
#version 150uniform sampler2D tex;in vec2 tc;in vec4 vcolor;out vec4 fcolor;void main() {vec4 c = vcolor;c.a = c.a * texture(tex, tc).r;fcolor = c;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec2 tc;in vec4 vcolor;out vec4 fcolor;void main() {vec4 c = vcolor;c.a = c.a * texture(tex, tc).r;fcolor = c;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec2 tc;in vec4 vcolor;out vec4 fcolor;void main() {vec4 c = vcolor;c.a = c.a * texture(tex, tc).r;fcolor = c;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 color;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex,tc);vec4 fcolor1 = color;fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);vec4 diff = fcolor0 - fcolor1;vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));fcolor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );}
#version 150uniform sampler2D tex[2];in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor_org = texture(tex[int(0.0)], tc0);vec4 fcolor_src = texture(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;fcolor.a = 1.0;fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);}
#version 150uniform sampler2D tex[2];in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor_org = texture(tex[int(0.0)], tc0);vec4 fcolor_src = texture(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;fcolor.a = inAlpha;fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);}
#version 150uniform sampler2D tex[2];in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor_org = texture(tex[int(0.0)], tc0);vec4 fcolor_src = texture(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[2];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc0;in vec2 tc1;out vec4 fcolor;void main() {vec4 fcolor0 = texture(tex[int(0.0)], tc0);vec4 fcolor1 = texture(tex[int(1.0)], tc1);fcolor = mix(fcolor1, fcolor0, factor.r);fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec2 tc0;in vec2 tc1;in vec2 tc2;out vec4 fcolor;void main() {vec4 fcolor_org = texture(tex[int(0.0)], tc0);vec4 fcolor_src = texture(tex[int(1.0)], tc1);vec4 fcolor_alp = texture(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;fcolor.a = 1.0;fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);}
#version 150uniform sampler2D tex[3];in vec2 tc0;in vec2 tc1;in vec2 tc2;out vec4 fcolor;void main() {vec4 fcolor_org = texture(tex[int(0.0)], tc0);vec4 fcolor_src = texture(tex[int(1.0)], tc1);vec4 fcolor_alp = texture(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;fcolor.a = inAlpha;fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);}
#version 150uniform sampler2D tex[3];in vec2 tc0;in vec2 tc1;in vec2 tc2;out vec4 fcolor;void main() {vec4 fcolor_org = texture(tex[int(0.0)], tc0);vec4 fcolor_src = texture(tex[int(1.0)], tc1);vec4 fcolor_alp = texture(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);}
#version 150uniform sampler2D tex[3];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150uniform sampler2D tex[3];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 factor;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.a *= factor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform sampler2D tex[4];in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture(tex[int(3.0)], tc).r;fcolor = c;fcolor = fcolor * fucxmul + fucxadd;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);fcolor = fcolor;}
#version 150uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);fcolor.a *= factor.a;fcolor = fcolor;}
#version 150uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;in vec4 factor;in vec2 tc;out vec4 fcolor;void main() {fcolor = texture(tex,tc);fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);fcolor.a *= factor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;in vec2 atc;in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc = atc;fucxadd = cxadd;fucxmul = cxmul;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;in vec4 acolor;in vec2 atc;in vec4 pos;out vec2 tc;out vec4 vcolor;void main() {gl_Position = (pos) * ( mvp);vcolor = acolor * cxmul + cxadd;tc = atc;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = (pos) * ( mvp);color = acolor;fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;in vec4 acolor;in vec4 pos;out vec4 color;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = (pos) * ( mvp);color = acolor;fucxadd = cxadd;fucxmul = cxmul;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[4];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc0;out vec2 tc1;void main() {gl_Position = (pos) * ( mvp);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];in vec2 atc;in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc = atc;fucxadd = cxadd;fucxmul = cxmul;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];in vec4 acolor;in vec2 atc;in vec4 pos;out vec2 tc;out vec4 vcolor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);vcolor = acolor * cxmul + cxadd;tc = atc;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];in vec4 acolor;in vec4 pos;out vec4 color;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;fucxadd = cxadd;fucxmul = cxmul;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];in vec4 pos;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;}
#version 150uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[4];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc0;out vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
#version 150uniform vec4 cxmul;out vec4 fcolor;void main() {fcolor = cxmul;fcolor = fcolor;}
#version 150uniform vec4 cxmul;out vec4 fcolor;void main() {fcolor = cxmul;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 cxmul;out vec4 fcolor;void main() {fcolor = cxmul;fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);float  i = 0.0;for (i = -fsize.x; i <= fsize.x; i++){{color += textureLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.fcolor = color * fsize.w;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);float  i = 0.0;for (i = -fsize.x; i <= fsize.x; i++){{color += textureLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.fcolor = color * fsize.w;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.fcolor = color * fsize.w;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.fcolor = color * fsize.w;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);fcolor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);fcolor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);fcolor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);fcolor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;fcolor = scolor * clamp(fcolor.a * fsize.z, 0.0, 1.0);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.fcolor = color * fsize.w;fcolor = scolor * clamp(fcolor.a * fsize.z, 0.0, 1.0);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - fcolor.a - fcolor.r);fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r));fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - fcolor.a - fcolor.r);fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r));fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);fcolor -= knockout;fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);fcolor = (scolor * fcolor.a + scolor2 * fcolor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D tex;uniform vec4 texscale;in vec4 fucxadd;in vec4 fucxmul;in vec2 tc;out vec4 fcolor;void main() {fcolor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.fcolor = color * fsize.w;fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);fcolor = (scolor * fcolor.a + scolor2 * fcolor.r);fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;fcolor += fucxadd * fcolor.a;fcolor.rgb = fcolor.rgb * fcolor.a;fcolor = fcolor;}
#version 150uniform vec4 mvp[2];in vec2 atc;in vec4 pos;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc = atc;}
#version 150uniform vec4 mvp[2];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;factor = afactor;}
#version 150uniform vec4 mvp[2];in vec4 acolor;in vec4 pos;out vec4 color;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;}
#version 150uniform vec4 mvp[2];in vec4 pos;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);}
#version 150uniform vec4 mvp[2];uniform vec4 texgen[2];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 150uniform vec4 mvp[2];uniform vec4 texgen[2];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
#version 150uniform vec4 mvp[2];uniform vec4 texgen[2];in vec4 pos;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);}
#version 150uniform vec4 mvp[2];uniform vec4 texgen[4];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc0;out vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);factor = afactor;}
#version 150uniform vec4 mvp[2];uniform vec4 texgen[4];in vec4 pos;out vec2 tc0;out vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);}
#version 150uniform vec4 mvp[2];uniform vec4 texgen[6];in vec4 pos;out vec2 tc0;out vec2 tc1;out vec2 tc2;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);tc2.x = dot(pos, texgen[int(4.0)]);tc2.y = dot(pos, texgen[int(5.0)]);}
#version 150uniform vec4 vfuniforms[144];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform vec4 vfuniforms[144];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc0;out vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);factor = afactor;}
#version 150uniform vec4 vfuniforms[144];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform vec4 vfuniforms[144];in vec4 pos;in float vbatch;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];}
#version 150uniform vec4 vfuniforms[192];in vec4 afactor;in vec4 pos;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc0;out vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform vec4 vfuniforms[48];in vec2 atc;in vec4 pos;in float vbatch;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);tc = atc;}
#version 150uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;factor = afactor;}
#version 150uniform vec4 vfuniforms[48];in vec4 acolor;in vec4 pos;in float vbatch;out vec4 color;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;}
#version 150uniform vec4 vfuniforms[48];in vec4 pos;in float vbatch;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);}
#version 150uniform vec4 vfuniforms[96];in vec2 atc;in vec4 pos;in float vbatch;out vec4 fucxadd;out vec4 fucxmul;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);tc = atc;fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
#version 150uniform vec4 vfuniforms[96];in vec4 acolor;in vec2 atc;in vec4 pos;in float vbatch;out vec2 tc;out vec4 vcolor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];tc = atc;}
#version 150uniform vec4 vfuniforms[96];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150uniform vec4 vfuniforms[96];in vec4 acolor;in vec4 afactor;in vec4 pos;out vec4 color;out vec4 factor;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
#version 150uniform vec4 vfuniforms[96];in vec4 acolor;in vec4 pos;in float vbatch;out vec4 color;out vec4 fucxadd;out vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
#version 150uniform vec4 vfuniforms[96];in vec4 afactor;in vec4 pos;out vec4 factor;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
#version 150uniform vec4 vfuniforms[96];in vec4 pos;in float vbatch;out vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);}
$
$@
$IMECandidateListFont
$P
$tI
$version
%
%%.%if%s
%-80s
%-80s - %.80s
%.*s%s%s
%.10g
%.11g
%.12g
%.13g
%.14g
%.1g
%.2g
%.3g
%.4g
%.5g
%.6g
%.7g
%.8g
%.9g
%0.f
%3d %3d %3d %3d %3d %3d %3d %3d
%4u %4u %4u %4u %4u %4u %4u %4u
%@
%P
%c=%d ~%d%%
%d %d %d %d
%d total counted strings.
%d.%d
%f %f %f %f
%hd
%hu
%i %i %i %i
%i%s
%ld%c
%lg
%lld
%llu
%ls [wstring, len = %d]
%p Depth = %d
%s %s %s %s
%s ...<truncated>
%s%d
%s,
%s.attachBitmap() failed - depth (%d) must be >= 0
%s.attachBitmap() failed - no image set in BitmapData.
%s.attachBitmap() failed - the argument is not a BitmapData.
%s.attachMovie("%s") failed - depth (%d) must be >= 0
%s.attachMovie() failed - "%s" is not a movieclip.
%s.attachMovie() failed - export name "%s" is not found.
%s.removeMovieClip() failed - depth must be >= 0
%s.setImageSubstitutions() failed for #%d element - 'image' is not specified or not a BitmapData
%s.setImageSubstitutions() failed for #%d element - image has one zero dimension
%s.setImageSubstitutions() failed for #%d element - length of subString should not exceed 15 characters
%s.setImageSubstitutions() failed for #%d element - subString should be specified
%s.setImageSubstitutions() failed: parameter should be either 'null', object or array
%s/%s
%s/bin/%s
%s::CreateNewObject returned NULL during creation of %s class instance.
%sGFxShaders-%08x.cache
&
&#35;
&#36;
&#92;
&@
&ACC=f
&AE=f
&AElig;
&AR=1.0
&AVD=f
&Aacute;
&Acirc;
&Agrave;
&Aring;
&Atilde;
&Auml;
&COL=color
&Ccedil;
&DEB=f
&DP=72
&ETH;
&EV=f
&Eacute;
&Ecirc;
&Egrave;
&Euml;
&IME=
&Iacute;
&Icirc;
&Igrave;
&Iuml;
&L=en
&LFD=f
&M=
&MP3=f
&Ntilde;
&OS=
&Oacute;
&Ocirc;
&Ograve;
&Oslash;
&Otilde;
&Ouml;
&PR=f
&PT=External
&R=
&SA=f
&SB=f
&SP=f
&SV=f
&THORN;
&Uacute;
&Ucirc;
&Ugrave;
&Uuml;
&V=
&VE=f
&WD=f
&Yacute;
&aacute;
&acirc;
&acute;
&aelig;
&agrave;
&amp;
&apos;
&aring;
&atilde;
&auml;
&brvbar;
&ccedil;
&cedil;
&cent;
&copy;
&curren;
&deg;
&divide;
&eacute;
&ecirc;
&egrave;
&eth;
&euml;
&euro;
&frac12;
&frac14;
&frac34;
&gt;
&iacute;
&icirc;
&iexcl;
&igrave;
&iquest;
&iuml;
&laquo;
&lt;
&macr;
&mdash;
&micro;
&middot;
&nbsp;
&ndash;
&not;
&ntilde;
&oacute;
&ocirc;
&ograve;
&ordf;
&ordm;
&oslash;
&otilde;
&ouml;
&para;
&plusmn;
&pound;
&quot;
&raquo;
&reg;
&sect;
&shy;
&sup1;
&sup2;
&sup3;
&szlig;
&thorn;
&times;
&trade;
&uacute;
&ucirc;
&ugrave;
&uml;
&uuml;
&yacute;
&yen;
&yuml;
'
(
( def. "%s" )
(%zu) Descend: %s, (%s), %s
(%zu) readdir failed to find '%s' in '%s'
(*%s*),
(>q
(@
(P
(a=
(knN
(none)
(redMultiplier=
(scolor * color.a + scolor2 * color.r)
(scolor * color.a)
(truncated)
(x=
)
) memory error
) stream error
) unknown error
) version error
)!@#$%^&*(
):
)@
)P
*
*         +| {0:4.4} {1:4.4}|| {2:4.4} {3:4.4}|| {4:4.4} {5:4.4}|| {6:4.4} {7:4.4}|
** Encountered stale cubemap! Please rebuild the following vtf:
*** Encountered VTF file with an invalid full header!
*** Encountered VTF file with an invalid minor version!
*** Encountered VTF file with an invalid version!
*** Encountered VTF invalid texture size!
*** Encountered VTF non-square cubemap!
*** Encountered VTF volume texture cubemap!
*** Error unserializing VTF file... is the file empty?
*** Tried to load a non-VTF file as a VTF file!
*** Unable to serialize... have no image data!
*** no tag loader for type %d
*0"Z
*@
*Bytes@%p*
*N9Scaleform3GFx3AS212_GLOBAL__N_119CandidateListLoaderE
*P
*ZN9Scaleform3GFx16MovieBindProcess13FinishBindingEvE16ImagePackVisitor
*ZN9Scaleform3GFx3AS212SharedObject18ComputeSizeInBytesEPNS1_11EnvironmentEE17DataSizeEstimator
*ZN9Scaleform3GFx3AS212SharedObject5FlushEPNS1_11EnvironmentEPNS0_19SharedObjectVisitorEE10DataWriter
*ZN9Scaleform3GFx3AS213AsBroadcaster16BroadcastMessageEPNS1_11EnvironmentEPNS1_15ObjectInterfaceERKNS0_8ASStringEiiE19LocalInvokeCallback
*ZN9Scaleform3GFx3AS213GlobalContext4InitEPNS0_9MovieImplEE13MemberVisitor
*ZN9Scaleform3GFx3AS213LoadVarsProto8ToStringERKNS1_6FnCallEE13MemberVisitor
*ZN9Scaleform3GFx3AS215MovieClipObject12Set__proto__EPNS1_15ASStringContextEPNS1_6ObjectEE13MemberVisitor
*ZN9Scaleform3GFx3AS216ExecutionContext15EnumerateOpCodeEiE18EnumerateOpVisitor
*ZN9Scaleform3GFx3AS221TextFieldCtorFunction11GetFontListERKNS1_6FnCallEE12FontsVisitor
*ZN9Scaleform3GFx3AS29AvmSprite17InitObjectMembersERKNS1_6FnCallEE11InitVisitor
*ZN9Scaleform3GFx3AS2L24GAS_GlobalASSetPropFlagsERKNS1_6FnCallEE13MemberVisitor
*ZN9Scaleform3GFx6Stream20ReadStringWithLengthEPNS_6StringEE12StringReader
*ZNK9Scaleform3GFx23AS2ValueObjectInterface12VisitMembersEPvPNS0_5Value15ObjectInterface10ObjVisitorEbE12VisitorProxy
*ZNK9Scaleform3GFx3AS29AvmSprite12VisitMembersEPNS1_15ASStringContextEPNS1_15ObjectInterface13MemberVisitorEjPKS5_E7Visitor
+
+0000
+@
+Infinity
+OQv
+P
,
, '
, alphaMultiplier=
, alphaOffset=
, b=
, blueMultiplier=
, blueOffset=
, c=
, d=
, greenMultiplier=
, greenOffset=
, height=
, redOffset=
, tx=
, ty=
, width=
, y=
,%03d
,@
,P
-
-- action conditions %X
-- actions in button
-- actions in frame %d
-- init actions for sprite %d
-- sprite END, char id = %d --
-------------- %s = %s
---------------Tag type = %d, Tag length = %d
---------------Tag type = %d, Tag length = %d, offset = %d
---enumerate - Push: %s
-->
-./
-@
-Infinity
-P
-allowdebug
-customswf
-customswf: %s
-ignoreswf
-sfstats
-valveinternal
-xlsp
.
.%c
...
.@
.Ee
.\
.dds
.forcepack
.gfx
.pfm
.prototype
.psd
.pvr
.sif
/
/>
/P8i
/home/buildbot/buildslave/csgo_pcbeta_client_linux/build/src/public/tier0/tslist.h
0
0.85
01234567
0123456789
0123456789*+
0123456789ABCDEF
0123456789ABCDEFlibpng warning: %s
0123456789abcdef
0@
0P
0p@
0x%016llX
0x{0:x}
0x{0:x}-0x{1:x}
1
1.2.5
1.5.13
10ConCommand
10CursorSlot
10IAppSystem
11CVTFTexture
11IRefCounted
11IVTFTexture
12CEmptyConVar
12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE
12IScaleformUI
13CCallbackBase
13CCallbackImplILi12EE
13CCallbackImplILi20EE
13ISFTextObject
14CBaseAppSystemI12IScaleformUIE
14ConCommandBase
14SFUIMemoryFile
15CCallbackManualI15ScaleformUIImpl19AvatarImageLoaded_tLb0EE
15CCallbackManualI15ScaleformUIImpl20PersonaStateChange_tLb0EE
15CMemberFunctor0IP18CParallelProcessorI26KMeansQuantizationWorkUnit21CFuncJobItemProcessorIS1_ELi1EEMS4_FvvE12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor0IP18CParallelProcessorIi27CMemberFuncJobItemProcessorIi11CCallQueueTI8CTSQueueIP8CFunctorLb0EEES7_ELi1EEMS9_FvvE12CRefCounted1IS4_20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor0IP22CParallelLoopProcessorI13FloatBitMap_t31CLoopMemberFuncJobItemProcessorIS1_S1_S1_EEMS4_FvvE12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor0IP22CParallelLoopProcessorI25FloatBitmapResampleInfo_t25CLoopFuncJobItemProcessorIS1_EEMS4_FvvE12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor6IP13CSOAContainerMS0_FviiiiiU8__vectorfEiiiiiS2_12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor7IP13CSOAContainerMS0_FviiiiPKS0_iiEiiiiS3_ii12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor7IP13CSOAContainerMS0_FviiiiiiiEiiiiiii12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CTier0AppSystemI12IScaleformUIE
15CTier1AppSystemI12IScaleformUILi0EE
15CTier2AppSystemI12IScaleformUILi0EE
15CTier3AppSystemI12IScaleformUILi0EE
15DeviceCallbacks
15ScaleformUIImpl
16CDefaultAccessor
16CDllDemandLoader
16IUIMarshalHelper
16SFTextObjectImpl
16ScaleformUIImage
17FlashArrayVisitor
18CScaleformSysAlloc
18CUtlCharConversion
18FlashObjectVisitor
18ScaleformClipboard
18ScaleformUILogging
19CUtlNoEscConversion
19ScaleformFileOpener
19TextBoxArrayVisitor
1@
1P
2
20CRefCountServiceBaseILb1E6CRefMTE
20ConVar_ServerBounded
21CUtlCStringConversion
21IKeyValuesDumpContext
22CScaleformImageCreator
22ScaleformMovieUserData
22ScaleformUIAvatarImage
23CSplitScreenAddedConVar
23IConCommandBaseAccessor
23ScaleformCallbackHolder
256 levels of recursion is reached
25ScaleformUIInventoryImage
26ScaleformTranslatorAdapter
26ScaleformUIChromeHTMLImage
27IKeyValuesDumpContextAsText
28CScaleFormThreadCommandQueue
28IShaderDeviceDependentObject
29CKeyValuesDumpContextAsDevMsg
2@
2P
3
31ScaleformFunctionHandlerAdapter
3@
3P
4
4.2.23
4@
4P
5
5@
5P
6
6"
60.0
6@
6ConVar
7
7@
7IConVar
8
8@
8BaseSlot
8CFmtStrNILi256ELb0EE
8CFunctor
8P
8d  15-Jan-2012
8safezonex
9
9@
9CCallbackI15ScaleformUIImpl19AvatarImageLoaded_tLb0EE
9CCallbackI15ScaleformUIImpl20PersonaStateChange_tLb0EE
9MovieSlot
9P
:
: {0}.
:+<_>?~
:./
:/
:1X:
:@
:P
:X1:
;
;0
;=,-./`
;@
;P
<
<!--
</
</A>
</B>
</FONT>
</I>
</U>
</a>
</b>
</h1>
</i>
</pre>
</s>
</script>
</u>
</ul>
<<
<< NULL >>
<?
<@
<A HREF="{0}">
<B>
<FONT
<I>
<IMG SRC="
<P
<TEXTFORMAT
<U>
<b>
<bad type>
<br>
<disasm is disabled>
<h1>
<i>
<img src="
<invalid>
<li>
<noname>
<pre>
<s>
<u>
<ul>
<undefined>
<unknown>
=
========== MOVIE VIEW FUNCTIONS FOR %s ======
========== RENDERER FUNCTIONS ===============
=@
=P
>
>!h
><
></TEXTFORMAT>
>>
>@
>jm
?
?"N
?(3w
?>
?@
?MovieView_CreateObject(%s) called with numArgs different than SFVALUEARRAY size
@
@&LH
@(
@0
@@
@C-- action record:
@P
@P@
@Q@
@R@
@S@
@T@
@U@
@V@
@W@
@X@
@Y@
@Z@
@[@
@\@
@]@
@^@
@_@
@`@
@initialize@
@keyPress@
@n@
@p@
@wKA
A
A':
A0
A@
ABCDEFGHIJKLMNOPQRSTUVWXYZ
ALIGN
ALIGN="
ALIGN_TYPE is wrong, please fix
ALPHA="#{0:X:.2}"
ALPHANUMERIC_FULL
ALPHANUMERIC_HALF
ANSI
APPSYSTEM: In ConnectInterfaces(), s_nRegistrationCount is %d!
ARROW
ASCII conversion buffer too small
ASSetPropFlags
ASnative
ATI1N
ATI2N
Action buffer dict length exceeded
ActionScript Memory leaks in movie '%s', including %d string nodes
ActionScript version mismatched between main and import '%s' files
ActionScriptMismatch
Actionscript passed an undefined param to BaseSlot::GetPlayerColorObject!
Actionscript passed an undefined param to BaseSlot::Translate!
AddFrameName(%d, '%s') -- frame is out of range (frameCount = %d; skipping
AddFrameName(%d, '%s') -- frame name already assigned to frame %d; overriding
AddInputConsumer
Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d
Amp
An extra frame is found for sprite id = %d, framecnt = %d, actual frames = %d
An image with resource id %d is not found in resource table.
Application built with libpng-
Application must supply a known background gamma
Application transferred too few scanlines
Application transferred too many scanlines
Applying FontMap: "
Apr
Arial
Arial Unicode MS
Arithmetic table 0x%02x was not defined
Array.sort - sorting failed, check your sort functor
AsBroadcaster
Ascent = %d, Descent = %d, Leading = %d
At marker 0x%02x, recovery action %d
Attempt to set buffer size beyond max ignored
Attempt to write read-only property %s.%s, ignored
Attempted to remove SF Global Object which is not installed!
Aug
AutoSize = %d, Selectable = %d, Border = %d, Html = %d, UseDeviceFont = %d
Avatar image for user %llX cached [refcount=%d]
Avatar image for user %llX released [refcount=%d]
Avatar image for user %llX reloaded
AvmSprite::SpriteGotoAndPlay needs one arg
AvmSprite::SpriteGotoAndStop needs one arg
B
B(
B0
B@
BASELINE
BGR565
BGR888_BLUESCREEN
BGRA1010102
BGRA4444
BGRA5551
BLOCKINDENT
BLOCKINDENT="{0}"
BP
Backing store not supported
Bad expression operator: '%c%c', expected C style operator
Bad expression token: %c
BaseSlot::Init(%s,%d)
BaseSlot::Unload slot=%d
BeginFrame
BevelFilter
BitmapChar = %d
BitmapData
BitmapData::LoadBitmap: LoadMovieImageCallback failed to load image "%s"
BitmapFilter
BlendCubeMapFaceEdges: unsupported image format (%d)
Blending mip%d %dx%d to
BlurFilter
Bogus DAC index %d
Bogus DAC value 0x%x
Bogus DHT index %d
Bogus DQT index %d
Bogus Huffman table definition
Bogus JPEG colorspace
Bogus buffer control mode
Bogus input colorspace
Bogus marker length
Bogus message code %d
Bogus sampling factors
Bogus virtual array access
Bold
Breaking '%s' in '%s'
Buffer error in compressed datastream
Buffer passed to JPEG library is too small
BuiltDebug
Button
C
C0
C@
CASEINSENSITIVE
CCIR601 sampling not implemented yet
CCommand::Tokenize: Encountered command which overflows the argument buffer.. Clamped!
CCommand::Tokenize: Encountered command which overflows the tokenizer buffer.. Skipping!
CENTER
CHINESE
CKeyValuesTokenReader::SeekBackOneToken: It is only possible to seek back one token at a time
CLASS
COLOR
COLOR="#{0:X:.6}"
COLORCORRECTION_VERSION_1
CRC error
CSMTextSettings, id = %d
CSOAContainer::SetAttributeType - ERROR, trying to change type of previously-defined attribute %d!
CThreadEvent::CThreadEvent(bool)
CThreadEvent::Set()
CThreadFastMutex::Lock(unsigned int, unsigned int) volatile
CThreadRWLock::LockForWrite()
CThreadRWLock::UnlockWrite()
CThreadRWLock::WaitForRead()
CThreadSpinRWLock::SpinLockForRead()
CThreadSpinRWLock::SpinLockForWrite()
CThreadSyncObject::~CThreadSyncObject()
CUtlBlockMemory overflow!
CUtlBuffer::VaPrintf: String overflowed buffer [%d]
CUtlFixedMemory overflow!
CUtlLinkedList overflow! (exhausted index range)
CUtlLinkedList overflow! (exhausted memory allocator)
CUtlRBTree overflow!
CUtlStreamBuffer does not support TEXT_BUFFER's use CUtlBuffer
CUtlSymbol::AddString
CUtlSymbol::Find
CVProfNode::EnterScope()
CVProfNode::ExitScope()
CVProfNode::GetSubNode(char const*, int, char const*, int)
CW
CWE
CXXABI_1.3
Call to NULL read function
Call to NULL write function
CallFrame('%d') - unknown frame
CallFunction - attempt to call invalid function
Can't add Average filter after starting
Can't add Paeth filter after starting
Can't add Up filter after starting
Can't create or decode image.
Can't discard critical data on CRC error
Can't load image %s - appropriate reader is not installed.
Can't set both read_data_fn and write_data_fn in the same structure
Can't write sCAL (buffer too small)
Can't write tRNS with an alpha channel
Canceled
Cannot quantize more than %d color components
Cannot quantize to fewer than %d colors
Cannot quantize to more than %d colors
Cannot transcode due to multiple use of quantization table %d
Caution: quantization tables are too coarse for baseline JPEG
CharId = %d, Depth = %d
CharTyped
Chrome HTML image for id %llX cached [refcount=%d]
Chrome HTML image for id %llX released [refcount=%d]
CkeyValuesTokenReader::SeekBackOneToken: No tokens read yet
Closed temporary file %s
CodePage = %s, Italic = %d, Bold = %d
ColorMatrixFilter
CommandLine
Component %d: %dhx%dv q=%d
Component %d: dc=%d ac=%d
Component index %d: mismatching sampling ratio %d:%d, %d:%d, %c
Compression window is being reset to 512
ConMsg(char const*, ...)
ConVar(%s) defined with infinite float value (%s)
ConVarRef %s doesn't point to an existing ConVar
Conditional Error: %s
ConsoleCommand
ConsoleCommandExecute
Copyright (C) 2012, Thomas G. Lane, Guido Vollbeding
Corrupt JPEG data: %u extraneous bytes before marker 0x%02x
Corrupt JPEG data: bad Huffman code
Corrupt JPEG data: bad arithmetic code
Corrupt JPEG data: found marker 0x%02x instead of RST%d
Corrupt JPEG data: premature end of data segment
Corrupted file %s, kerning table of the font '%s' is longer than tagLength.
Corrupted shape detected in file %s
Could not read tag DefineCompactedFont. Broken gfx file.
CreateInterface
D
D(
D0
D15S1
D16
D16_SHADOW
D24FS8
D24X4S4
D24X8
D24X8_SHADOW
D32
D@
DBG_PATHMATCH
DCT coefficient out of range
DCT scaled block size %dx%d not supported
DELETEKEY
DEMO
DESCENDING
DLOPEN Error:%s
DP
DXT1_ONEBITALPHA
DXT1_RUNTIME
DXT3_RUNTIME
DXT5_RUNTIME
Data error in compressed datastream
DebugTextureInfo001
Dec
Decompression Error
Decompression error
DefBitsLossless2: tagInfo.TagType = %d, id = %d, fmt = %d, w = %d, h = %d
Default image loader failed to load '%s'
Define Arithmetic Table 0x%02x: 0x%02x
Define Huffman Table 0x%02x
Define Quantization Table %d  precision %d
Define Restart Interval %u
DefineBinaryData: CharId = %d
DefineExternalGradientImage: tagInfo.TagType = %d, id = 0x%X, fmt = %d, name = '%s', size = %d
DefineExternalImage: tagInfo.TagType = %d, id = 0x%X, fmt = %d, name = '%s', exp = '%s', w = %d, h = %d
DenyInputToGame
Deprecated tag 1004 - DefineGradientMapLoader encountered, ignored
Depth must be 1 for cubemaps!
DevMsg
DevMsg(char const*, ...)
DevWarning(char const*, ...)
Didn't expect more than one scan
Disable Scaleform verbose mode.
DisableAnalogStickNavigation
Displacement Range: (%g, %g)
DisplayObjContainer::ReplaceDisplayObject() - unknown cid = %d
Don't know how to export Resource '%s'
Down
DrawProcessedComplexMeshes
DrawProcessedPrimitive
DropShadowFilter
Duplicate PLTE chunk
Duplicate bKGD chunk
Duplicate cHRM chunk
Duplicate gAMA chunk
Duplicate hIST chunk
Duplicate iCCP chunk
Duplicate oFFs chunk
Duplicate pCAL chunk
Duplicate pHYs chunk
Duplicate sBIT chunk
Duplicate sCAL chunk
Duplicate sRGB chunk
Duplicate tIME chunk
Duplicate tRNS chunk
E
E0
E@
EMPTY - ok for slot zero only!
EW
EXT_texture_compression_s3tc
EditTextChar, id = %d
EditTextChar, varname = %s, text = %s
Embedded profile length in iCCP chunk is negative
Embedded profile length too large in iCCP chunk
Empty JPEG image (DNL not supported)
Empty font: "
Empty input file
Empty language field in iTXt chunk
Enable Scaleform verbose mode.
Enable/disable Scaleform verbose mode.
End Of Image
EndMaskSubmit
Error
Error getting avatar image: playerID(%llu), iIndex(%d)
Error getting chrome HTML image: imageID(%llu), iIndex(%d)
Error getting inventory image: iItemID(%llu), iIndex(%d)
Error in loading candidate list from
Error loading %s!
Error: GFxLoader cannot open '%s' for writing. writing is not supported
Error: GFxLoader failed to open '%s'
Error: GFxZlibState is not set - can't load zipped image data
Error: Null or invalid 'this' is used for a method of %s class.
Error: Too few parameters for Object.registerClass (%d)
EventSystem001
Exceeded size limit while expanding chunk
ExportInfo: tagType = %d, tool ver = %d.%d, imgfmt = %d, prefix = '%s', swfname = '%s', flags = 0x%X
Exported      : "{0}" {1} found.
Exported      : "{0}" {1} not found.
ExternalInterface
ExternalInterface.call - handler is not installed.
Extra compressed data
Extra compression data
F
F@
FACE
FACE="{0}"
FALSE
FCVAR_NEVER_AS_STRING
FSCommand:
Failed loading SWF "%s": ActionScript version mismatch
Failed loading SWF file "
Failed loading URL "%s"
Failed to bind SWF file "
Failed to create temporary file %s
Failed to load %s
Failed to load SWF file "
Failed to load image '
Failed to read the default avatar image file (%s)
Failed to read the default inventory image file (%s)
Feb
FillStyle read type = 0x%X
FlagType = %s, GridFit = %s
FloatBitMap_t: Error loading %s
FloatBitMap_t: Error opening %s
FloatBitMap_t::LoadFromBuffer: Received improper buffer size, skipping!
FloatBitMap_t::LoadFromBuffer: Unsupported color format, skipping!
FloatBitMap_t::WriteToBuffer: Received improper buffer size, skipping!
FloatBitMap_t::WriteToBuffer: Unsupported color format, skipping!
FmtStrVSNPrintf truncated to %d without QUIET_TRUNCATION specified!
Font "
Font '%s%s%s' has no hinting chars (any of 'HEFTUVWXZ' and 'zxvwy'). Auto-Hinting disabled.
Font '%s%s%s': No hinting chars (any of 'HEFTUVWXZ' and 'zxvwy'). Auto-Hinting disabled.
Font id = %d is referring to non-font resource in text field id = %d, def text = '%s'
Font not found.
Font: id = %d
FontHeight = %f
FontLib not installed.
FontProvider not installed.
FontTextureInfo: tagInfo.TagType = %d, id = 0x%X, fmt = %d, name = '%s', w = %d, h = %d
ForceResize
Fractional sampling not implemented yet
Frame %d: Null NextPattern after %p, count = %d
Freed EMS handle %u
Freed XMS handle %u
Fri
Function
G
G0
G@
GAME
GAMECONSOLE
GAMEEVENTSMANAGER002
GCC: (Ubuntu 4.8.1-2ubuntu1~12.04+steamrt2+srt1) 4.8.1
GCC: (Ubuntu 4.8.2-19ubuntu1) 4.8.2
GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3
GFxShaders.cache
GFxShadersV2
GFx_ButtonLoader - AS2 support is not installed. Actions are skipped.
GFx_ButtonLoader - AS3 Button shouldn't have AS2 actions. Skipped.
GFx_DefineBitsJpeg2Loader: charid = %d pos = 0x%x
GFx_DefineBitsJpeg3Loader: charid = %d pos = %d
GFx_DefineBitsJpeg4Loader: charid = %d pos = %d deblocking = %d
GFx_DefineFontInfoLoader - can't find FontResource w/ id %d
GFx_DoActionLoader - AS2 support is not installed. Tag is skipped.
GFx_DoActionLoader - DoAction tag shouldn't appear in AS3 swf. Tag is skipped.
GFx_DoInitActionLoader - AS2 support is not installed. Tag is skipped.
GFx_DoInitActionLoader - DoInitAction tag shouldn't appear in AS3 swf. Tag is skipped.
GFx_InflateWrapper() Inflate() returned %d
GFx_InflateWrapper() InflateEnd() return %d
GFx_InflateWrapper() inflateInit() returned %d
GFx_PlaceObject2Loader - AS2 support is not installed. Tag is skipped.
GFx_PlaceObject3Loader - AS2 support is not installed. Tag is skipped.
GFx_ReadFillStyles: count = %d
GFx_ReadStrokeStyles: count = %d
GFx_ReadStrokeStyles: count2 = %d
GFx_RemoveObjectLoader - AS2 support is not installed. Tag is skipped.
GLIBCXX_3.4
GLIBC_2.11
GLIBC_2.14
GLIBC_2.15
GLIBC_2.2.5
GLIBC_2.3
GLIBC_2.3.2
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.7
GL_ARB_get_program_binary
GL_ARB_sync
GNU
GameInterface
GameUISystemMgr001
GetCPUInformation
GetClipboardText
GetConvarBoolean
GetConvarNumber
GetConvarNumberMax
GetConvarNumberMin
GetConvarString
GetPAXAvatarFromName
GetPlayerColorObject
GetVariable failed: can't resolve the path "%s"
GetVariableRaw("%s") failed, returning UNDEFINED.
Getter method is null.
GlowFilter
GlyphRecords: count = %d
H
H(
H0
H@
HAND
HEIGHT
HEIGHT="{0}"
HF
HIGH
HP
HREF
HSPACE
HSPACE="{0}"
HasBlending, %d
HasColor
HasFilters
HasFont: font id = %d
HasFontClass: font class = %s
HasLayout = %d, CodePage = %s, Italic = %d, Bold = %d
HasLayout: alignment = %d, leftmarg = %f, rightmarg = %f, indent = %f, leading = %f
HasMaxLength: len = %d
Height and width must be equal for cubemaps!
Hide
HideCursor
HitTest
Huffman code size table overflow
Huffman table 0x%02x was not defined
I
I0
I@
IA88
IBEAM
ID="{0}"
IDirect3DDevice9::GetViewport(_D3DVIEWPORT9*)
IDirect3DDevice9::RestoreGLState()
IDirect3DDevice9::SaveGLState()
IMEManager001
IMG
INPUTSWAPAB
INTZ
INVALID
Ignoring PLTE chunk in grayscale PNG
Ignoring attempt to set cHRM RGB triangle with zero area
Ignoring attempt to set negative chromaticity value
Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8
Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8
Ignoring attempt to write bKGD chunk out-of-range for bit_depth
Ignoring attempt to write tRNS chunk out-of-range for bit_depth
Ignoring cHRM chunk with negative chromaticities
Ignoring gAMA chunk with out of range gamma
Ignoring iCCP chunk with declared size = @1 and actual length = @2
Ignoring incorrect cHRM value when sRGB is also present
Ignoring incorrect cHRM white(@1,@2) r(@3,@4)g(@5,@6)b(@7,@8) when sRGB is also present
Ignoring incorrect gAMA value @1 when sRGB is also present
Ignoring invalid time value
Ignoring nonzero compression type in iCCP chunk
Ignoring request to write a PLTE chunk in grayscale PNG
IiGM
Image '%s' wasn't created in ProcessImageTags
Image dimensions must be multiple of 4!
Image file handler registry is not installed - can't load image data
Image file handler registry is not installed - can't load jpeg image data
Image height exceeds user limit in IHDR
Image height is zero in IHDR
Image is not created.
Image is null in ImageShapeCharacterDef ctor.
Image is too high to process with png_read_png()
Image resource creation failed - ImageCreator not installed
Image too wide for this implementation
Image width exceeds user limit in IHDR
Image width is zero in IHDR
ImageCreator is not installed,failed to load image "%s"
ImageCreator is null in BeginBitmapFill
ImageCreator is null in ImageShapeCharacterDef ctor
ImageCreator is null in ProceedImageSubstitution
ImageCreator is null in ProcessImageTags
ImageCreator is null in UpdateImageSubstitution
ImageCreator::LoadProtocolImage failed to load image "%s"
ImageFormat %d not supported by ScaleformUIImage, using RGBA8888!
Import failed - resource '%s' is not exported from movie '%s'
Imports       : "{0}" {1} found in "{2}".
Imports       : "{0}" {1} import delegates to font library.
Imports       : "{0}" {1} not found.
Improper call to JPEG library in state %d
Incomplete compressed datastream
Inconsistent progression sequence for component %d coefficient %d
Incorrect IEND chunk length
Incorrect bKGD chunk index value
Incorrect bKGD chunk length
Incorrect cHRM chunk length
Incorrect gAMA chunk length
Incorrect hIST chunk length
Incorrect oFFs chunk length
Incorrect pHYs chunk length
Incorrect sBIT chunk length
Incorrect sRGB chunk length
Incorrect tIME chunk length
Incorrect tRNS chunk length
Index out of range for SFVALUEARRAY
InfoPanel
InitSlot
Input file read error
InputStackSystemVersion001
InputSystemVersion001
InstallChangeCallback called with NULL callback, ignoring!!!
InstallChangeCallback ignoring duplicate change callback!!!
Insufficient memory (case %d)
Insufficient memory for hIST chunk data
Insufficient memory for pCAL parameter
Insufficient memory for pCAL params
Insufficient memory for pCAL purpose
Insufficient memory for pCAL units
Insufficient memory to process iCCP chunk
Insufficient memory to process iCCP profile
Insufficient memory to process text chunk
Insufficient memory to store iTXt chunk
Insufficient memory to store text
Insufficient memory to store zTXt chunk
Interlace handling should be turned on when using png_read_image
Internal
Invalid GetProperty query, property number %d
Invalid IHDR chunk
Invalid IHDR data
Invalid JPEG file structure: SOS before SOF
Invalid JPEG file structure: missing SOS marker
Invalid JPEG file structure: two SOF markers
Invalid JPEG file structure: two SOI markers
Invalid PLTE after IDAT
Invalid SOS parameters for sequential JPEG
Invalid SWF file: failed to load frame #%d since total frames counter is %d
Invalid SWF file: failed to load init action frame #%d since total frames counter is %d
Invalid SWF file: failed to load sprite's frame #%d since total frames counter is %d
Invalid SetProperty request, property number %d
Invalid attempt to read row data
Invalid bKGD after IDAT
Invalid background palette index
Invalid bit depth for RGB image
Invalid bit depth for RGBA image
Invalid bit depth for grayscale image
Invalid bit depth for grayscale+alpha image
Invalid bit depth for paletted image
Invalid bit depth in IHDR
Invalid cHRM after IDAT
Invalid cHRM blue point
Invalid cHRM green point
Invalid cHRM red point
Invalid cHRM white point
Invalid color quantization mode change
Invalid color type in IHDR
Invalid color type/bit depth combination in IHDR
Invalid component ID %d in SOS
Invalid compression type specified
Invalid crop request
Invalid file name passed to DLCHelper::AppendDLCKeyValues (%s)
Invalid filter method in IHDR
Invalid filter type specified
Invalid format for pCAL parameter
Invalid gAMA after IDAT
Invalid hIST after IDAT
Invalid iCCP after IDAT
Invalid image color type specified
Invalid image height in IHDR
Invalid image width in IHDR
Invalid interlace type specified
Invalid local register %d, stack only has %d entries
Invalid memory pool code %d
Invalid movie clip path; neither string nor object
Invalid nominal size for DefineCompactedFont, font %s. Broken gfx file.
Invalid number of colors in palette
Invalid number of histogram entries specified
Invalid number of transparent colors specified
Invalid oFFs after IDAT
Invalid or corrupt default avatar image (%s)
Invalid or corrupt default inventory image (%s)
Invalid pCAL after IDAT
Invalid pCAL data
Invalid pCAL equation type
Invalid pCAL parameters for equation type
Invalid pHYs after IDAT
Invalid palette chunk
Invalid palette length
Invalid palette size, hIST allocation skipped
Invalid path '%s'
Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d
Invalid progressive parameters at scan script entry %d
Invalid sBIT after IDAT
Invalid sBIT depth specified
Invalid sCAL after IDAT
Invalid sCAL chunk ignored: bad height format
Invalid sCAL chunk ignored: bad width format
Invalid sCAL chunk ignored: non-positive height
Invalid sCAL chunk ignored: non-positive width
Invalid sCAL height
Invalid sCAL height ignored
Invalid sCAL ignored: invalid unit
Invalid sCAL unit
Invalid sCAL width
Invalid sCAL width ignored
Invalid sPLT after IDAT
Invalid sRGB after IDAT
Invalid sRGB rendering intent specified
Invalid scan script at entry %d
Invalid tRNS after IDAT
Invalid time specified for tIME chunk
Invalid zlib compression method or flags in IDAT
Invalid zlib compression method or flags in non-IDAT chunk
Inventory image for item %llX cached [refcount=%d]
Inventory image for item %llX released [refcount=%d]
InvokeParsed('%s','%s') - invalid char '%c'
InvokeParsed('%s','%s') - invalid format '%%%c'
InvokeParsed('%s','%s') - invalid format '%%h%c'
InvokeParsed('%s','%s') - invalid format '%%l%c'
Italic
J
J(
J0
J@
JAPANESE_HIRAGANA
JAPANESE_KATAKANA_FULL
JAPANESE_KATAKANA_HALF
JFIF APP0 marker: version %d.%02d, density %dx%d  %d
JFIF extension marker: JPEG-compressed thumbnail image, length %u
JFIF extension marker: RGB thumbnail image, length %u
JFIF extension marker: palette thumbnail image, length %u
JFIF extension marker: type 0x%02x, length %u
JP
JPEG datastream contains no image
JPEG parameter struct mismatch: library thinks size is %u, caller expects %u
JPEGMEM
JUSTIFY
Jan
Jpeg System is not installed - can't load jpeg image data
Jul
Jun
K
K@
KB
KERNING
KERNING="{0:sw:1:0}"
KEY_0
KEY_1
KEY_2
KEY_3
KEY_4
KEY_5
KEY_6
KEY_7
KEY_8
KEY_9
KEY_A
KEY_APOSTROPHE
KEY_APP
KEY_B
KEY_BACKQUOTE
KEY_BACKSLASH
KEY_BACKSPACE
KEY_BREAK
KEY_C
KEY_CAPSLOCK
KEY_CAPSLOCKTOGGLE
KEY_COMMA
KEY_D
KEY_DELETE
KEY_DOWN
KEY_E
KEY_END
KEY_ENTER
KEY_EQUAL
KEY_ESCAPE
KEY_F
KEY_F1
KEY_F10
KEY_F11
KEY_F12
KEY_F2
KEY_F3
KEY_F4
KEY_F5
KEY_F6
KEY_F7
KEY_F8
KEY_F9
KEY_G
KEY_H
KEY_HOME
KEY_I
KEY_INSERT
KEY_J
KEY_K
KEY_L
KEY_LALT
KEY_LBRACKET
KEY_LCONTROL
KEY_LEFT
KEY_LSHIFT
KEY_LWIN
KEY_M
KEY_MINUS
KEY_N
KEY_NONE
KEY_NUMLOCK
KEY_NUMLOCKTOGGLE
KEY_O
KEY_P
KEY_PAD_0
KEY_PAD_1
KEY_PAD_2
KEY_PAD_3
KEY_PAD_4
KEY_PAD_5
KEY_PAD_6
KEY_PAD_7
KEY_PAD_8
KEY_PAD_9
KEY_PAD_DECIMAL
KEY_PAD_DIVIDE
KEY_PAD_ENTER
KEY_PAD_MINUS
KEY_PAD_MULTIPLY
KEY_PAD_PLUS
KEY_PAGEDOWN
KEY_PAGEUP
KEY_PERIOD
KEY_Q
KEY_R
KEY_RALT
KEY_RBRACKET
KEY_RCONTROL
KEY_RIGHT
KEY_RSHIFT
KEY_RWIN
KEY_S
KEY_SCROLLLOCK
KEY_SCROLLLOCKTOGGLE
KEY_SEMICOLON
KEY_SLASH
KEY_SPACE
KEY_T
KEY_TAB
KEY_U
KEY_UP
KEY_V
KEY_W
KEY_X
KEY_XBUTTON_A
KEY_XBUTTON_B
KEY_XBUTTON_BACK
KEY_XBUTTON_DOWN
KEY_XBUTTON_FIREMODE_SELECTOR_1
KEY_XBUTTON_FIREMODE_SELECTOR_2
KEY_XBUTTON_FIREMODE_SELECTOR_3
KEY_XBUTTON_INACTIVE_START
KEY_XBUTTON_LEFT
KEY_XBUTTON_LEFT_SHOULDER
KEY_XBUTTON_LTRIGGER
KEY_XBUTTON_PUMP_ACTION
KEY_XBUTTON_RELOAD
KEY_XBUTTON_RIGHT
KEY_XBUTTON_RIGHT_SHOULDER
KEY_XBUTTON_ROLL_LEFT
KEY_XBUTTON_ROLL_RIGHT
KEY_XBUTTON_RTRIGGER
KEY_XBUTTON_START
KEY_XBUTTON_STICK1
KEY_XBUTTON_STICK2
KEY_XBUTTON_TRIGGER
KEY_XBUTTON_UP
KEY_XBUTTON_X
KEY_XBUTTON_Y
KEY_XSTICK1_DOWN
KEY_XSTICK1_LEFT
KEY_XSTICK1_RIGHT
KEY_XSTICK1_UP
KEY_XSTICK2_DOWN
KEY_XSTICK2_LEFT
KEY_XSTICK2_RIGHT
KEY_XSTICK2_UP
KEY_Y
KEY_Z
KNQ
KOREAN
KV Conditional Evaluation Error
KerningCount = %d
Key
KeyDownEvent
KeyIsDown needs one Argument (the key code)
KeyIsToggled needs one Argument (the key code)
KeyUpEvent
KeyValues Error: %s in file %s line %d
KeyValues::ParseIncludedKeys: Couldn't load included keyvalue file %s
KeyValues::RecursiveSaveToFile: TODO, missing code for TYPE_COLOR.
KeyValues::SaveToFile: couldn't open file "%s" in path "%s".
KeyValuesSystem
L
L(
L0
L@
LB
LCD
LEADING
LEADING="{0}"
LEFTMARGIN
LEFTMARGIN="{0}"
LETTERSPACING
LETTERSPACING="{0}"
LE_BGRA8888
LE_BGRX8888
LI
LINEAR_A8
LINEAR_ABGR8888
LINEAR_ARGB8888
LINEAR_BGR888
LINEAR_BGRA8888
LINEAR_BGRX5551
LINEAR_BGRX8888
LINEAR_D24S8
LINEAR_DXT1
LINEAR_DXT3
LINEAR_DXT5
LINEAR_I8
LINEAR_RGB888
LINEAR_RGBA16161616
LINEAR_RGBA8888
LINUX
LINUX 8,0,0,0
LMb#
LN10
LN2
LOCALE
LOG10E
LOG2E
LOG_GENERAL
LOWVIOLENCE
LP
Label[%d] = { %d, "%s" }
LangCode = %d
Leaked string content: %s
LoadFromBuffer: missing {
LoadKVFile
LoadVars
LoadVars.addRequestHeader is not implemented.
LoadVars.send is not implemented.
LoadVars.sendAndLoad is not implemented.
Loader - Stream-end tag hit, but not at the end of the file yet; stopping for safety
Loader - unable to read compressed SWF data; GFxZlibState is not set.
Loader failed to open "
Loader failed to open '%s'
Loader failed to open '%s', FileOpener not installe
Loader failed to open '%s', FileOpener not installed
Loader read failed - file does not start with a SWF header
Loader read failed - no mExporterInfo tag in GFX file header
LocManager
Localize_001
LockInputToSlot
LoggingSystem_IsChannelEnabled
LoggingSystem_Log
LoggingSystem_LogDirect
LoggingSystem_RegisterLoggingChannel
Logic Error in CExpressionEvaluator
Lowered '%s' -> '%s'
M
M0@
M@
MATCHFRAMEWORK_001
MAX_ALLOC_CHUNK is wrong, please fix
MAX_VALUE
MB
MDLCache004
MGiI
MIN_VALUE
MNG features are not allowed in a PNG datastream
MOUSE_4
MOUSE_5
MOUSE_LEFT
MOUSE_MIDDLE
MOUSE_RIGHT
MOUSE_WHEEL_DOWN
MOUSE_WHEEL_UP
MakeStringSafe
Malformed iCCP chunk
Malformed iTXt chunk
Mar
MatSystemSurface006
Matched '%s' -> '%s'
MaterialSystemHardwareConfig013
Math
Maximum supported image dimension is %u pixels
May
MemAllocScratch
MemFreeScratch
Memory allocation failed while processing sCAL
MeshSystem001
Miscellaneous marker 0x%02x, length %u
Missing "%s" glyph '%c' (0x%x) in "%s".Font has %u glyphs, ranges %s.Search log: %s
Missing Huffman code table entry
Missing IHDR before IDAT
Missing IHDR before PLTE
Missing IHDR before bKGD
Missing IHDR before cHRM
Missing IHDR before gAMA
Missing IHDR before hIST
Missing IHDR before iCCP
Missing IHDR before iTXt
Missing IHDR before oFFs
Missing IHDR before pCAL
Missing IHDR before pHYs
Missing IHDR before sBIT
Missing IHDR before sCAL
Missing IHDR before sPLT
Missing IHDR before sRGB
Missing IHDR before tEXt
Missing IHDR before tRNS
Missing IHDR before zTXt
Missing PLTE before IDAT
Missing PLTE before bKGD
Missing PLTE before hIST
Missing PLTE before tRNS
Missing font "%s" in "%s". Search log:%s
Module %s is a debug build
Mon
MorphCharacterDef, first shape:
MorphCharacterDef, second shape:
Mouse
Movie resource: "{0}" {1} found, requires faux
Movie resource: "{0}" {1} found.
Movie resource: "{0}" {1} not found.
Movie resource: "{0}" {1} ref found, requires FontLib/Map/Provider.
MovieClipLoader
MovieData "
MovieDef  "
MovieImpl::GotoLabeledFrame('%s') unknown label
MovieView "
Msg
N
N9Scaleform10MemoryFileE
N9Scaleform10MemoryHeap12LimitHandlerE
N9Scaleform10MemoryHeapE
N9Scaleform11FmtResourceE
N9Scaleform11NumericBaseE
N9Scaleform12BufferedFileE
N9Scaleform12MemItemExtraE
N9Scaleform12MemoryHeapMHE
N9Scaleform12RefCountBaseINS_12MemItemExtraELi2EEE
N9Scaleform12RefCountBaseINS_18AmpMovieObjectDescELi2EEE
N9Scaleform12RefCountBaseINS_3GFx10ASUserDataELi2EEE
N9Scaleform12RefCountBaseINS_3GFx10LoadStatesELi2EEE
N9Scaleform12RefCountBaseINS_3GFx10LoaderImplELi2EEE
N9Scaleform12RefCountBaseINS_3GFx11ResourceLib12ResourceSlotELi2EEE
N9Scaleform12RefCountBaseINS_3GFx11ResourceLibELi2EEE
N9Scaleform12RefCountBaseINS_3GFx12ASIMEManagerELi513EEE
N9Scaleform12RefCountBaseINS_3GFx12MovieDataDef16LoadTaskDataBaseELi264EEE
N9Scaleform12RefCountBaseINS_3GFx12MovieDefImpl12BindTaskDataELi2EEE
N9Scaleform12RefCountBaseINS_3GFx12StateBagImplELi2EEE
N9Scaleform12RefCountBaseINS_3GFx13KeyboardStateELi2EEE
N9Scaleform12RefCountBaseINS_3GFx13MemoryContextELi2EEE
N9Scaleform12RefCountBaseINS_3GFx14LoadUpdateSyncELi264EEE
N9Scaleform12RefCountBaseINS_3GFx15ASMovieRootBaseELi327EEE
N9Scaleform12RefCountBaseINS_3GFx15ASStringManagerELi324EEE
N9Scaleform12RefCountBaseINS_3GFx15FunctionHandlerELi2EEE
N9Scaleform12RefCountBaseINS_3GFx15ResourceLibBaseELi2EEE
N9Scaleform12RefCountBaseINS_3GFx16ButtonActionBaseELi258EEE
N9Scaleform12RefCountBaseINS_3GFx18GFxMovieDefImplKeyELi2EEE
N9Scaleform12RefCountBaseINS_3GFx18MovieDefBindStatesELi2EEE
N9Scaleform12RefCountBaseINS_3GFx19ASIntervalTimerIntfELi323EEE
N9Scaleform12RefCountBaseINS_3GFx20ImageFileInfoKeyDataELi2EEE
N9Scaleform12RefCountBaseINS_3GFx24GFxSystemFontResourceKeyELi261EEE
N9Scaleform12RefCountBaseINS_3GFx26GFxMovieDataDefFileKeyDataELi2EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP11ServerStateELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP12FuncTreeItemELi2EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP12FunctionDescELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP12MovieProfileELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP12ProfileFrameELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP18MovieFunctionStatsELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP20MovieSourceLineStatsELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP21MovieInstructionStats17ScriptBufferStatsELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP21MovieInstructionStatsELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP22MovieFunctionTreeStatsELi2EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP9ImageInfoELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP9ViewStats22BufferInstructionTimesELi582EEE
N9Scaleform12RefCountBaseINS_3GFx3AS213XMLFileLoaderELi326EEE
N9Scaleform12RefCountBaseINS_3GFx3AS215ASCSSFileLoaderELi2EEE
N9Scaleform12RefCountBaseINS_3GFx3AS216ActionBufferDataELi263EEE
N9Scaleform12RefCountBaseINS_3GFx3AS217RefCountCollectorILi323EEELi323EEE
N9Scaleform12RefCountBaseINS_3GFx3XML13ParserHandlerELi326EEE
N9Scaleform12RefCountBaseINS_3GFx4TaskELi2EEE
N9Scaleform12RefCountBaseINS_3GFx5MovieELi327EEE
N9Scaleform12RefCountBaseINS_3GFx5StateELi2EEE
N9Scaleform12RefCountBaseINS_3GFx9MovieImpl17WideStringStorageELi327EEE
N9Scaleform12RefCountBaseINS_3LogELi2EEE
N9Scaleform12RefCountBaseINS_4FileELi2EEE
N9Scaleform12RefCountBaseINS_6Render10GlyphCacheELi2EEE
N9Scaleform12RefCountBaseINS_6Render10RenderSyncELi2EEE
N9Scaleform12RefCountBaseINS_6Render10Renderer2DELi65EEE
N9Scaleform12RefCountBaseINS_6Render10TextLayoutELi74EEE
N9Scaleform12RefCountBaseINS_6Render11ComplexFillELi71EEE
N9Scaleform12RefCountBaseINS_6Render11ContextImpl11ContextLockELi69EEE
N9Scaleform12RefCountBaseINS_6Render11ContextImpl8RTHandle10HandleDataELi69EEE
N9Scaleform12RefCountBaseINS_6Render11ImageUpdateELi2EEE
N9Scaleform12RefCountBaseINS_6Render11MatrixStateELi65EEE
N9Scaleform12RefCountBaseINS_6Render12GradientDataELi257EEE
N9Scaleform12RefCountBaseINS_6Render12TextureGlyphELi2EEE
N9Scaleform12RefCountBaseINS_6Render13MaskPrimitiveELi67EEE
N9Scaleform12RefCountBaseINS_6Render13ThreadCommandELi2EEE
N9Scaleform12RefCountBaseINS_6Render13UserDataState4DataELi2EEE
N9Scaleform12RefCountBaseINS_6Render14DICommandQueueELi2EEE
N9Scaleform12RefCountBaseINS_6Render14MatrixPoolImpl10MatrixPoolELi73EEE
N9Scaleform12RefCountBaseINS_6Render14MeshKeyManagerELi65EEE
N9Scaleform12RefCountBaseINS_6Render14MorphShapeDataELi71EEE
N9Scaleform12RefCountBaseINS_6Render14Scale9GridDataELi2EEE
N9Scaleform12RefCountBaseINS_6Render14Scale9GridInfoELi71EEE
N9Scaleform12RefCountBaseINS_6Render14Scale9GridRectELi71EEE
N9Scaleform12RefCountBaseINS_6Render14StereoImplBaseELi2EEE
N9Scaleform12RefCountBaseINS_6Render14TextureManagerELi72EEE
N9Scaleform12RefCountBaseINS_6Render15FilterPrimitiveELi67EEE
N9Scaleform12RefCountBaseINS_6Render17UserDataPrimitiveELi67EEE
N9Scaleform12RefCountBaseINS_6Render18ShapeDataInterfaceELi71EEE
N9Scaleform12RefCountBaseINS_6Render18SystemVertexFormatELi2EEE
N9Scaleform12RefCountBaseINS_6Render19DepthStencilSurfaceELi72EEE
N9Scaleform12RefCountBaseINS_6Render19MeshProvider_RCImplELi2EEE
N9Scaleform12RefCountBaseINS_6Render19RenderBufferManagerELi72EEE
N9Scaleform12RefCountBaseINS_6Render19TextureManagerLocksELi72EEE
N9Scaleform12RefCountBaseINS_6Render20DrawableImageContextELi2EEE
N9Scaleform12RefCountBaseINS_6Render20PrimitiveFillManagerELi71EEE
N9Scaleform12RefCountBaseINS_6Render21ViewMatrix3DPrimitiveELi67EEE
N9Scaleform12RefCountBaseINS_6Render22FontCacheHandleManagerELi75EEE
N9Scaleform12RefCountBaseINS_6Render27ProjectionMatrix3DPrimitiveELi67EEE
N9Scaleform12RefCountBaseINS_6Render3HALELi65EEE
N9Scaleform12RefCountBaseINS_6Render4FontELi75EEE
N9Scaleform12RefCountBaseINS_6Render4JPEG9ExtraDataELi2EEE
N9Scaleform12RefCountBaseINS_6Render4RectIfEELi2EEE
N9Scaleform12RefCountBaseINS_6Render4Text10FontHandleELi74EEE
N9Scaleform12RefCountBaseINS_6Render4Text13EditorKitBaseELi74EEE
N9Scaleform12RefCountBaseINS_6Render4Text15FontManagerBaseELi74EEE
N9Scaleform12RefCountBaseINS_6Render4Text21CompositionStringBaseELi74EEE
N9Scaleform12RefCountBaseINS_6Render4Text7DocViewELi74EEE
N9Scaleform12RefCountBaseINS_6Render6FilterELi2EEE
N9Scaleform12RefCountBaseINS_6Render7TextureELi72EEE
N9Scaleform12RefCountBaseINS_6Render8MeshBaseELi68EEE
N9Scaleform12RefCountBaseINS_6Render9FilterSetELi2EEE
N9Scaleform12RefCountBaseINS_6Render9Matrix3x4IfEELi2EEE
N9Scaleform12RefCountBaseINS_6Render9Matrix4x4IfEELi2EEE
N9Scaleform12RefCountBaseINS_6Render9PrimitiveELi67EEE
N9Scaleform12RefCountBaseINS_7MemItemELi2EEE
N9Scaleform12RefCountBaseINS_8AmpStatsELi2EEE
N9Scaleform12RefCountBaseINS_8WaitableELi2EEE
N9Scaleform12RefCountImplE
N9Scaleform12StrFormatterE
N9Scaleform12SysAllocBaseE
N9Scaleform12UnopenedFileE
N9Scaleform13BoolFormatterE
N9Scaleform13FileConstantsE
N9Scaleform13LongFormatterE
N9Scaleform13RefCountBaseVINS_6Render5ImageELi3EEE
N9Scaleform13RefCountVImplE
N9Scaleform15DoubleFormatterE
N9Scaleform15NewOverrideBaseILi2EEE
N9Scaleform15NewOverrideBaseILi323EEE
N9Scaleform15NewOverrideBaseILi65EEE
N9Scaleform15NewOverrideBaseILi71EEE
N9Scaleform15NewOverrideBaseILi72EEE
N9Scaleform15RefCountBaseNTSINS_3GFx13CompactedFontINS_16ArrayPagedLH_PODIhLi12ELi256ELi261EEEEELi261EEE
N9Scaleform15RefCountBaseNTSINS_3GFx13CompactedFontINS_17ArrayUnsafeLH_PODIhLi261EEEEELi261EEE
N9Scaleform15RefCountBaseNTSINS_3GFx13FontCompactorELi261EEE
N9Scaleform15RefCountBaseNTSINS_3GFx14DrawingContextELi322EEE
N9Scaleform15RefCountBaseNTSINS_3GFx15FontGlyphPackerELi2EEE
N9Scaleform15RefCountBaseNTSINS_3GFx16ResourceFileInfoELi2EEE
N9Scaleform15RefCountBaseNTSINS_3GFx16TextureGlyphDataELi261EEE
N9Scaleform15RefCountBaseNTSINS_3GFx17FontManagerStatesELi327EEE
N9Scaleform15RefCountBaseNTSINS_3GFx19SharedObjectVisitorELi2EEE
N9Scaleform15RefCountBaseNTSINS_3GFx20SubImageResourceInfoELi2EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3AS212ActionBufferELi323EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3AS213GlobalContextELi323EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML13ObjectManagerELi326EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML4NodeELi326EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML6PrefixELi326EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML8RootNodeELi326EEE
N9Scaleform15RefCountBaseNTSINS_6Render11GlyphRasterELi75EEE
N9Scaleform15RefCountBaseNTSINS_6Render13PrimitiveFillELi71EEE
N9Scaleform15RefCountBaseNTSINS_6Render4Text10StyledTextELi74EEE
N9Scaleform15RefCountBaseNTSINS_6Render4Text10TextFilterELi74EEE
N9Scaleform15RefCountBaseNTSINS_6Render4Text7DocView16DocumentListenerELi74EEE
N9Scaleform15RefCountBaseNTSINS_6Render4Text9AllocatorELi74EEE
N9Scaleform15RefCountBaseNTSINS_6Render4Text9ImageDescELi74EEE
N9Scaleform15RefCountBaseNTSINS_6Render6BundleELi67EEE
N9Scaleform15RefCountNTSImplE
N9Scaleform15SwitchFormatterE
N9Scaleform16AcquireInterfaceE
N9Scaleform16RefCountImplCoreE
N9Scaleform17ResourceFormatterE
N9Scaleform18AmpMovieObjectDescE
N9Scaleform19RefCountNTSImplCoreE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi257EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi258EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi261EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi263EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi264EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi2EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi323EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi324EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi326EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi327EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi513EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi578EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi582EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi65EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi67EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi68EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi69EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi71EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi72EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi73EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi74EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi75EEE
N9Scaleform20RefCountBaseStatImplINS_13RefCountVImplELi3EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi261EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi2EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi322EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi323EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi326EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi327EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi67EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi71EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi74EEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi75EEE
N9Scaleform20RefCountBaseStatImplINS_23RefCountWeakSupportImplELi322EEE
N9Scaleform23DefaultAcquireInterfaceE
N9Scaleform23RefCountBaseWeakSupportINS_3GFx17DisplayObjectBaseELi322EEE
N9Scaleform23RefCountWeakSupportImplE
N9Scaleform26SemaphoreWaitableIncrementE
N9Scaleform34Mutex_AreadyLockedAcquireInterfaceE
N9Scaleform3GFx10AS2SupportE
N9Scaleform3GFx10ASUserDataE
N9Scaleform3GFx10ExecuteTagE
N9Scaleform3GFx10FileOpenerE
N9Scaleform3GFx10FontHandleE
N9Scaleform3GFx10LoadStatesE
N9Scaleform3GFx10LoaderImplE
N9Scaleform3GFx10LoaderTaskE
N9Scaleform3GFx10TextKeyMapE
N9Scaleform3GFx10TranslatorE
N9Scaleform3GFx10URLBuilderE
N9Scaleform3GFx11DisplayList13MemberVisitorE
N9Scaleform3GFx11FontManagerE
N9Scaleform3GFx11LoadProcessE
N9Scaleform3GFx11ResourceKey12KeyInterfaceE
N9Scaleform3GFx11ResourceLib12ResourceSlotE
N9Scaleform3GFx11ResourceLibE
N9Scaleform3GFx11TimelineDefE
N9Scaleform3GFx11ZlibSupportE
N9Scaleform3GFx12ASIMEManager14IMEFuncHandlerE
N9Scaleform3GFx12ASIMEManagerE
N9Scaleform3GFx12CharacterDefE
N9Scaleform3GFx12FontResourceE
N9Scaleform3GFx12ImageCreatorE
N9Scaleform3GFx12LoadVarsTaskE
N9Scaleform3GFx12MovieDataDef12LoadTaskDataE
N9Scaleform3GFx12MovieDataDef16LoadTaskDataBaseE
N9Scaleform3GFx12MovieDataDefE
N9Scaleform3GFx12MovieDefImpl12BindTaskDataE
N9Scaleform3GFx12MovieDefImplE
N9Scaleform3GFx12ParseControlE
N9Scaleform3GFx12ResourceData13DataInterfaceE
N9Scaleform3GFx12StateBagImplE
N9Scaleform3GFx12TextFieldDefE
N9Scaleform3GFx13ActionControlE
N9Scaleform3GFx13AvmButtonBaseE
N9Scaleform3GFx13AvmSpriteBaseE
N9Scaleform3GFx13CompactedFontINS_16ArrayPagedLH_PODIhLi12ELi256ELi261EEEEE
N9Scaleform3GFx13CompactedFontINS_17ArrayUnsafeLH_PODIhLi261EEEEE
N9Scaleform3GFx13DisplayObjectE
N9Scaleform3GFx13FontCompactorE
N9Scaleform3GFx13FontDataBoundE
N9Scaleform3GFx13ImageFileInfoE
N9Scaleform3GFx13ImageResource13ImageDelegateE
N9Scaleform3GFx13ImageResourceE
N9Scaleform3GFx13KeyboardState9IListenerE
N9Scaleform3GFx13KeyboardStateE
N9Scaleform3GFx13MemoryContextE
N9Scaleform3GFx13ShapeDataBaseE
N9Scaleform3GFx13StaticTextDefE
N9Scaleform3GFx13TextClipboardE
N9Scaleform3GFx13TimelineIODefE
N9Scaleform3GFx14ActionPriorityE
N9Scaleform3GFx14DrawingContext11PackedShapeE
N9Scaleform3GFx14DrawingContextE
N9Scaleform3GFx14ExternalLibPtrE
N9Scaleform3GFx14FileOpenerBaseE
N9Scaleform3GFx14IMEManagerBaseE
N9Scaleform3GFx14LoadBinaryTaskE
N9Scaleform3GFx14LoadQueueEntryE
N9Scaleform3GFx14LoadUpdateSyncE
N9Scaleform3GFx14PlaceObjectTagE
N9Scaleform3GFx14ResourceReportE
N9Scaleform3GFx15ASMovieRootBaseE
N9Scaleform3GFx15ASStringManagerE
N9Scaleform3GFx15FontGlyphPackerE
N9Scaleform3GFx15FunctionHandlerE
N9Scaleform3GFx15PlaceObject2TagE
N9Scaleform3GFx15PlaceObject3TagE
N9Scaleform3GFx15RemoveObjectTagE
N9Scaleform3GFx15ResourceLibBaseE
N9Scaleform3GFx15ResourceWeakLibE
N9Scaleform3GFx15ZlibImageSourceE
N9Scaleform3GFx15ZlibSupportBaseE
N9Scaleform3GFx16AvmTextFieldBaseE
N9Scaleform3GFx16ButtonActionBaseE
N9Scaleform3GFx16LoadQueueEntryMTE
N9Scaleform3GFx16MovieBindProcessE
N9Scaleform3GFx16MovieDefRootNodeE
N9Scaleform3GFx16MoviePreloadTaskE
N9Scaleform3GFx16PlaceObject2TagaE
N9Scaleform3GFx16RemoveObject2TagE
N9Scaleform3GFx16ResourceFileInfoE
N9Scaleform3GFx16SubImageResourceE
N9Scaleform3GFx16TextureGlyphData19TextureGlyphVisitorE
N9Scaleform3GFx16TextureGlyphDataE
N9Scaleform3GFx17AvmDisplayObjBaseE
N9Scaleform3GFx17DisplayObjectBaseE
N9Scaleform3GFx17FileTypeConstantsE
N9Scaleform3GFx17FontManagerStatesE
N9Scaleform3GFx17InteractiveObjectE
N9Scaleform3GFx17MorphCharacterDefE
N9Scaleform3GFx18ConstShapeNoStylesE
N9Scaleform3GFx18GFxMovieDefImplKeyE
N9Scaleform3GFx18GFxPlaceObjectBaseE
N9Scaleform3GFx18MovieDefBindStatesE
N9Scaleform3GFx18MovieImageLoadTaskE
N9Scaleform3GFx18TextureGlyphBinderE
N9Scaleform3GFx19ASIntervalTimerIntfE
N9Scaleform3GFx19DisplayObjContainerE
N9Scaleform3GFx19FontResourceCreatorE
N9Scaleform3GFx19SharedObjectVisitorE
N9Scaleform3GFx19StaticTextCharacterE
N9Scaleform3GFx20ConstShapeWithStylesE
N9Scaleform3GFx20FontDataCompactedGfxE
N9Scaleform3GFx20FontDataCompactedSwfE
N9Scaleform3GFx20GFxInitImportActionsE
N9Scaleform3GFx20ImageFileInfoKeyDataE
N9Scaleform3GFx20ImageResourceCreatorE
N9Scaleform3GFx20SubImageResourceInfoE
N9Scaleform3GFx20SwfShapeCharacterDefE
N9Scaleform3GFx21AvmInteractiveObjBaseE
N9Scaleform3GFx21ImageFileKeyInterfaceE
N9Scaleform3GFx21MemoryBufferZlibImageE
N9Scaleform3GFx21SetBackgroundColorTagE
N9Scaleform3GFx21ShapeBaseCharacterDefE
N9Scaleform3GFx22GFxPlaceObjectUnpackedE
N9Scaleform3GFx22ImageShapeCharacterDefE
N9Scaleform3GFx22StaticTextSnapshotData12GlyphVisitorE
N9Scaleform3GFx23AS2ValueObjectInterfaceE
N9Scaleform3GFx23DefaultFontLibNameStateE
N9Scaleform3GFx23SubImageResourceCreatorE
N9Scaleform3GFx24GFxSystemFontResourceKeyE
N9Scaleform3GFx24ImageFileHandlerRegistryE
N9Scaleform3GFx24ImageFileResourceCreatorE
N9Scaleform3GFx25LoadQueueEntryMT_LoadVarsE
N9Scaleform3GFx26AvmDisplayObjContainerBaseE
N9Scaleform3GFx26GFxMovieDataDefFileKeyDataE
N9Scaleform3GFx27GFxMovieDefImplKeyInterfaceE
N9Scaleform3GFx27LoadQueueEntryMT_LoadBinaryE
N9Scaleform3GFx31GFxMovieDataDefFileKeyInterfaceE
N9Scaleform3GFx33GFxSystemFontResourceKeyInterfaceE
N9Scaleform3GFx3AMP11ServerStateE
N9Scaleform3GFx3AMP12FuncTreeItemE
N9Scaleform3GFx3AMP12FunctionDescE
N9Scaleform3GFx3AMP12MovieProfile10MarkerInfoE
N9Scaleform3GFx3AMP12MovieProfileE
N9Scaleform3GFx3AMP12ProfileFrameE
N9Scaleform3GFx3AMP18MovieFunctionStatsE
N9Scaleform3GFx3AMP20MovieSourceLineStatsE
N9Scaleform3GFx3AMP21MovieInstructionStats17ScriptBufferStatsE
N9Scaleform3GFx3AMP21MovieInstructionStatsE
N9Scaleform3GFx3AMP22MovieFunctionTreeStatsE
N9Scaleform3GFx3AMP9ImageInfoE
N9Scaleform3GFx3AMP9ViewStats22BufferInstructionTimesE
N9Scaleform3GFx3AMP9ViewStatsE
N9Scaleform3GFx3AS210ArrayProtoE
N9Scaleform3GFx3AS210BitmapDataE
N9Scaleform3GFx3AS210ColorProtoE
N9Scaleform3GFx3AS210DateObjectE
N9Scaleform3GFx3AS210IMEManagerE
N9Scaleform3GFx3AS210LocalFrameE
N9Scaleform3GFx3AS210MouseProtoE
N9Scaleform3GFx3AS210PointProtoE
N9Scaleform3GFx3AS210StageProtoE
N9Scaleform3GFx3AS211ArrayObjectE
N9Scaleform3GFx3AS211ButtonProtoE
N9Scaleform3GFx3AS211ColorObjectE
N9Scaleform3GFx3AS211DoActionTagE
N9Scaleform3GFx3AS211EnvironmentE
N9Scaleform3GFx3AS211GASImeProtoE
N9Scaleform3GFx3AS211MatrixProtoE
N9Scaleform3GFx3AS211MouseObjectE
N9Scaleform3GFx3AS211NumberProtoE
N9Scaleform3GFx3AS211ObjectProtoE
N9Scaleform3GFx3AS211PointObjectE
N9Scaleform3GFx3AS211StageObjectE
N9Scaleform3GFx3AS211StringProtoE
N9Scaleform3GFx3AS211SuperObjectE
N9Scaleform3GFx3AS212ActionBufferE
N9Scaleform3GFx3AS212ActionLoggerE
N9Scaleform3GFx3AS212AvmCharacterE
N9Scaleform3GFx3AS212AvmTextField9CSSHolderE
N9Scaleform3GFx3AS212AvmTextFieldE
N9Scaleform3GFx3AS212BooleanProtoE
N9Scaleform3GFx3AS212ButtonActionE
N9Scaleform3GFx3AS212ButtonObjectE
N9Scaleform3GFx3AS212MatrixObjectE
N9Scaleform3GFx3AS212NumberObjectE
N9Scaleform3GFx3AS212SharedObjectE
N9Scaleform3GFx3AS212StringObjectE
N9Scaleform3GFx3AS212XMLShadowRefE
N9Scaleform3GFx3AS212XmlNodeProtoE
N9Scaleform3GFx3AS213AsBroadcaster14InvokeCallbackE
N9Scaleform3GFx3AS213AsBroadcasterE
N9Scaleform3GFx3AS213BooleanObjectE
N9Scaleform3GFx3AS213FunctionProtoE
N9Scaleform3GFx3AS213GlobalContextE
N9Scaleform3GFx3AS213IntervalTimerE
N9Scaleform3GFx3AS213LoadVarsProtoE
N9Scaleform3GFx3AS213MouseListenerE
N9Scaleform3GFx3AS213ValuePropertyE
N9Scaleform3GFx3AS213XMLFileLoaderE
N9Scaleform3GFx3AS213XmlNodeObjectE
N9Scaleform3GFx3AS214ASRefCountBaseINS1_10LocalFrameEEE
N9Scaleform3GFx3AS214ASRefCountBaseINS1_13ValuePropertyEEE
N9Scaleform3GFx3AS214ASRefCountBaseINS1_6ObjectEEE
N9Scaleform3GFx3AS214AmpMarkerProtoE
N9Scaleform3GFx3AS214FunctionObjectE
N9Scaleform3GFx3AS214LoadVarsObjectE
N9Scaleform3GFx3AS214MovieClipProtoE
N9Scaleform3GFx3AS214PlaceObject2EHE
N9Scaleform3GFx3AS214PlaceObject3EHE
N9Scaleform3GFx3AS214RectangleProtoE
N9Scaleform3GFx3AS214RefCountBaseGCILi323EEE
N9Scaleform3GFx3AS214RemoveObjectEHE
N9Scaleform3GFx3AS214SelectionProtoE
N9Scaleform3GFx3AS214TextFieldProtoE
N9Scaleform3GFx3AS214TransformProtoE
N9Scaleform3GFx3AS215ASCSSFileLoaderE
N9Scaleform3GFx3AS215BitmapDataProtoE
N9Scaleform3GFx3AS215BlurFilterProtoE
N9Scaleform3GFx3AS215CFunctionObjectE
N9Scaleform3GFx3AS215DoInitActionTagE
N9Scaleform3GFx3AS215GASGlobalObjectE
N9Scaleform3GFx3AS215GlowFilterProtoE
N9Scaleform3GFx3AS215KeyCtorFunctionE
N9Scaleform3GFx3AS215MovieClipLoaderE
N9Scaleform3GFx3AS215MovieClipObjectE
N9Scaleform3GFx3AS215ObjectInterface13MemberVisitorE
N9Scaleform3GFx3AS215ObjectInterfaceE
N9Scaleform3GFx3AS215PlaceObject2EHaE
N9Scaleform3GFx3AS215RectangleObjectE
N9Scaleform3GFx3AS215RemoveObject2EHE
N9Scaleform3GFx3AS215SharedObjectPtrE
N9Scaleform3GFx3AS215StyleSheetProtoE
N9Scaleform3GFx3AS215TextFieldObjectE
N9Scaleform3GFx3AS215TextFormatProtoE
N9Scaleform3GFx3AS215TransformObjectE
N9Scaleform3GFx3AS215XmlCtorFunctionE
N9Scaleform3GFx3AS216ActionBufferDataE
N9Scaleform3GFx3AS216AsFunctionObjectE
N9Scaleform3GFx3AS216BevelFilterProtoE
N9Scaleform3GFx3AS216BlurFilterObjectE
N9Scaleform3GFx3AS216CSSStringBuilderE
N9Scaleform3GFx3AS216DateCtorFunctionE
N9Scaleform3GFx3AS216GASPrototypeBaseE
N9Scaleform3GFx3AS216GlowFilterObjectE
N9Scaleform3GFx3AS216MathCtorFunctionE
N9Scaleform3GFx3AS216StyleSheetObjectE
N9Scaleform3GFx3AS216TextFormatObjectE
N9Scaleform3GFx3AS216XMLPrefixQuerierE
N9Scaleform3GFx3AS217ArrayCtorFunctionE
N9Scaleform3GFx3AS217BevelFilterObjectE
N9Scaleform3GFx3AS217BitmapFilterProtoE
N9Scaleform3GFx3AS217ColorCtorFunctionE
N9Scaleform3GFx3AS217ExternalInterfaceE
N9Scaleform3GFx3AS217GFxAS2LoadCSSTaskE
N9Scaleform3GFx3AS217GFxAS2LoadXMLTaskE
N9Scaleform3GFx3AS217GenericDisplayObjE
N9Scaleform3GFx3AS217MemoryContextImpl9HeapLimitE
N9Scaleform3GFx3AS217MemoryContextImplE
N9Scaleform3GFx3AS217MouseCtorFunction19LocalInvokeCallbackE
N9Scaleform3GFx3AS217MouseCtorFunctionE
N9Scaleform3GFx3AS217PointCtorFunctionE
N9Scaleform3GFx3AS217RefCountCollectorILi323EE4RootE
N9Scaleform3GFx3AS217RefCountCollectorILi323EEE
N9Scaleform3GFx3AS217SharedObjectProtoE
N9Scaleform3GFx3AS217StageCtorFunctionE
N9Scaleform3GFx3AS217TextSnapshotProtoE
N9Scaleform3GFx3AS217XMLFileLoaderImplE
N9Scaleform3GFx3AS218AsBroadcasterProtoE
N9Scaleform3GFx3AS218BitmapFilterObjectE
N9Scaleform3GFx3AS218ButtonCtorFunctionE
N9Scaleform3GFx3AS218GASImeCtorFunctionE
N9Scaleform3GFx3AS218NumberCtorFunctionE
N9Scaleform3GFx3AS218ObjectCtorFunctionE
N9Scaleform3GFx3AS218StringCtorFunctionE
N9Scaleform3GFx3AS218TextSnapshotObjectE
N9Scaleform3GFx3AS219ASRefCountCollectorE
N9Scaleform3GFx3AS219BooleanCtorFunctionE
N9Scaleform3GFx3AS219CSSTextFormatLoaderE
N9Scaleform3GFx3AS219ColorTransformProtoE
N9Scaleform3GFx3AS219XmlNodeCtorFunctionE
N9Scaleform3GFx3AS220ColorTransformObjectE
N9Scaleform3GFx3AS220FunctionCtorFunctionE
N9Scaleform3GFx3AS220GFxAS2LoadQueueEntryE
N9Scaleform3GFx3AS220MovieClipLoaderProtoE
N9Scaleform3GFx3AS221AmpMarkerCtorFunctionE
N9Scaleform3GFx3AS221DropShadowFilterProtoE
N9Scaleform3GFx3AS221GASMatrixCtorFunctionE
N9Scaleform3GFx3AS221GASSharedObjectLoaderE
N9Scaleform3GFx3AS221MovieClipCtorFunctionE
N9Scaleform3GFx3AS221RectangleCtorFunctionE
N9Scaleform3GFx3AS221SelectionCtorFunctionE
N9Scaleform3GFx3AS221TextFieldCtorFunctionE
N9Scaleform3GFx3AS221TransformCtorFunctionE
N9Scaleform3GFx3AS222BitmapDataCtorFunctionE
N9Scaleform3GFx3AS222BlurFilterCtorFunctionE
N9Scaleform3GFx3AS222ColorMatrixFilterProtoE
N9Scaleform3GFx3AS222DropShadowFilterObjectE
N9Scaleform3GFx3AS222ExternalInterfaceProtoE
N9Scaleform3GFx3AS222GlowFilterCtorFunctionE
N9Scaleform3GFx3AS222StyleSheetCtorFunctionE
N9Scaleform3GFx3AS222TextFormatCtorFunctionE
N9Scaleform3GFx3AS223BevelFilterCtorFunctionE
N9Scaleform3GFx3AS223ColorMatrixFilterObjectE
N9Scaleform3GFx3AS224BitmapFilterCtorFunctionE
N9Scaleform3GFx3AS224CapabilitiesCtorFunctionE
N9Scaleform3GFx3AS224SharedObjectCtorFunctionE
N9Scaleform3GFx3AS224TextSnapshotCtorFunctionE
N9Scaleform3GFx3AS225AsBroadcasterCtorFunctionE
N9Scaleform3GFx3AS225UserDefinedFunctionObjectE
N9Scaleform3GFx3AS225XMLAttributeStringBuilderE
N9Scaleform3GFx3AS226CSSFileLoaderAndParserImplE
N9Scaleform3GFx3AS226ColorTransformCtorFunctionE
N9Scaleform3GFx3AS226XMLFileLoaderAndParserImplE
N9Scaleform3GFx3AS227GASTextSnapshotGlyphVisitorE
N9Scaleform3GFx3AS227MovieClipLoaderCtorFunctionE
N9Scaleform3GFx3AS228DropShadowFilterCtorFunctionE
N9Scaleform3GFx3AS229ColorMatrixFilterCtorFunctionE
N9Scaleform3GFx3AS229ExternalInterfaceCtorFunctionE
N9Scaleform3GFx3AS229GASLoadVarsLoaderCtorFunctionE
N9Scaleform3GFx3AS230GFxAS2LoadQueueEntryMT_LoadCSSE
N9Scaleform3GFx3AS230GFxAS2LoadQueueEntryMT_LoadXMLE
N9Scaleform3GFx3AS232GFxAS2LoadQueueEntryMT_LoadMovieE
N9Scaleform3GFx3AS24MathE
N9Scaleform3GFx3AS26FnCallE
N9Scaleform3GFx3AS26GASImeE
N9Scaleform3GFx3AS26ObjectE
N9Scaleform3GFx3AS28KeyProtoE
N9Scaleform3GFx3AS28XmlProtoE
N9Scaleform3GFx3AS29AmpMarkerE
N9Scaleform3GFx3AS29AvmButtonE
N9Scaleform3GFx3AS29AvmSpriteE
N9Scaleform3GFx3AS29DateProtoE
N9Scaleform3GFx3AS29KeyObjectE
N9Scaleform3GFx3AS29MathProtoE
N9Scaleform3GFx3AS29MovieRoot13StickyVarNodeE
N9Scaleform3GFx3AS29MovieRootE
N9Scaleform3GFx3AS29PrototypeINS1_10BitmapDataENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_10DateObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_11ArrayObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_11ColorObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_11MouseObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_11PointObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_11StageObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_12ButtonObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_12MatrixObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_12NumberObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_12SharedObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_12StringObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_13AsBroadcasterENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_13BooleanObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_13XmlNodeObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_14LoadVarsObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_15MovieClipLoaderENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_15MovieClipObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_15RectangleObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_15TextFieldObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_15TransformObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_16BlurFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_16GlowFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_16StyleSheetObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_16TextFormatObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_17BevelFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_17ExternalInterfaceENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_18BitmapFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_18TextSnapshotObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_20ColorTransformObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_22DropShadowFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_23ColorMatrixFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_4MathENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_6GASImeENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_6ObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_9AmpMarkerENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_9KeyObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_9SelectionENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29PrototypeINS1_9XmlObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29SelectionE
N9Scaleform3GFx3AS29XmlObjectE
N9Scaleform3GFx3XML10DOMBuilderE
N9Scaleform3GFx3XML11ElementNodeE
N9Scaleform3GFx3XML13ObjectManagerE
N9Scaleform3GFx3XML13ParserHandlerE
N9Scaleform3GFx3XML13ShadowRefBaseE
N9Scaleform3GFx3XML4NodeE
N9Scaleform3GFx3XML6PrefixE
N9Scaleform3GFx3XML8DocumentE
N9Scaleform3GFx3XML8RootNodeE
N9Scaleform3GFx3XML8TextNodeE
N9Scaleform3GFx4TaskE
N9Scaleform3GFx4Text10CSSHandlerIwEE
N9Scaleform3GFx4Text12StyleManagerE
N9Scaleform3GFx4Text17CompositionStringE
N9Scaleform3GFx4Text22TextStyleParserHandlerIwEE
N9Scaleform3GFx4Text26TextStyleParserHandlerBaseE
N9Scaleform3GFx4Text9EditorKitE
N9Scaleform3GFx5MovieE
N9Scaleform3GFx5StateE
N9Scaleform3GFx5Value15ObjectInterface10ArrVisitorE
N9Scaleform3GFx5Value15ObjectInterface10ObjVisitorE
N9Scaleform3GFx5Value15ObjectInterfaceE
N9Scaleform3GFx6ButtonE
N9Scaleform3GFx6LoaderE
N9Scaleform3GFx6SpriteE
N9Scaleform3GFx6StreamE
N9Scaleform3GFx7FontLibE
N9Scaleform3GFx7FontMapE
N9Scaleform3GFx7LogBaseINS0_10LoaderImplEEE
N9Scaleform3GFx7LogBaseINS0_11LoadProcessEEE
N9Scaleform3GFx7LogBaseINS0_12StateBagImplEEE
N9Scaleform3GFx7LogBaseINS0_17DisplayObjectBaseEEE
N9Scaleform3GFx7LogBaseINS0_3AS211EnvironmentEEE
N9Scaleform3GFx7LogBaseINS0_3AS212ActionLoggerEEE
N9Scaleform3GFx7LogBaseINS0_3AS26FnCallEEE
N9Scaleform3GFx7LogBaseINS0_6StreamEEE
N9Scaleform3GFx7LogBaseINS0_8LogStateEEE
N9Scaleform3GFx8FontDataE
N9Scaleform3GFx8LogStateE
N9Scaleform3GFx8MovieDef15ResourceVisitorE
N9Scaleform3GFx8MovieDefE
N9Scaleform3GFx8ResourceE
N9Scaleform3GFx8StateBagE
N9Scaleform3GFx8ZLibFileE
N9Scaleform3GFx9ASSupportE
N9Scaleform3GFx9ButtonDefE
N9Scaleform3GFx9MovieImpl13StickyVarNodeE
N9Scaleform3GFx9MovieImpl17WideStringStorageE
N9Scaleform3GFx9MovieImplE
N9Scaleform3GFx9SpriteDefE
N9Scaleform3GFx9TextField13CSSHolderBaseE
N9Scaleform3GFx9TextField20TextDocumentListenerE
N9Scaleform3GFx9TextFieldE
N9Scaleform3LogE
N9Scaleform3PtrINS_3GFx3AS212SharedObjectEEE
N9Scaleform4FileE
N9Scaleform5EventE
N9Scaleform5MutexE
N9Scaleform6Render10BlurFilterE
N9Scaleform6Render10GlowFilterE
N9Scaleform6Render10GlyphCache13EvictNotifierE
N9Scaleform6Render10GlyphCacheE
N9Scaleform6Render10GlyphShapeE
N9Scaleform6Render10MaskBundleE
N9Scaleform6Render10MaskEffectE
N9Scaleform6Render10MeshBufferE
N9Scaleform6Render10MeshKeySetE
N9Scaleform6Render10RasterizerE
N9Scaleform6Render10RenderSyncE
N9Scaleform6Render10Renderer2DE
N9Scaleform6Render10SKI_FilterE
N9Scaleform6Render10TextLayoutE
N9Scaleform6Render10VertexPathE
N9Scaleform6Render11BevelFilterE
N9Scaleform6Render11CacheEffectE
N9Scaleform6Render11ComplexFillE
N9Scaleform6Render11ComplexMeshE
N9Scaleform6Render11ContextImpl11ContextLockE
N9Scaleform6Render11ContextImpl12RenderNotify14ServiceCommandE
N9Scaleform6Render11ContextImpl12RenderNotifyE
N9Scaleform6Render11ContextImpl20ContextCaptureNotifyE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_13TreeContainer8NodeDataENS0_8TreeNode8NodeDataEEE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_8TreeRoot8NodeDataENS0_13TreeContainer8NodeDataEEE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_8TreeText8NodeDataENS0_8TreeNode8NodeDataEEE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_9TreeShape8NodeDataENS0_8TreeNode8NodeDataEEE
N9Scaleform6Render11ContextImpl8RTHandle10HandleDataE
N9Scaleform6Render11ContextImpl9EntryDataE
N9Scaleform6Render11GlyphFitterE
N9Scaleform6Render11GlyphRasterE
N9Scaleform6Render11ImageSourceE
N9Scaleform6Render11ImageUpdateE
N9Scaleform6Render11MatrixStateE
N9Scaleform6Render11RenderEventE
N9Scaleform6Render11SKI_MaskEnd12RQII_EndMaskE
N9Scaleform6Render11SKI_MaskEndE
N9Scaleform6Render11TessellatorE
N9Scaleform6Render12FilterBundleE
N9Scaleform6Render12FilterEffectE
N9Scaleform6Render12GradientDataE
N9Scaleform6Render12Matrix3x4RefIfEE
N9Scaleform6Render12Matrix4x4RefIfEE
N9Scaleform6Render12MeshProviderE
N9Scaleform6Render12RenderBuffer16RenderTargetDataE
N9Scaleform6Render12RenderBufferE
N9Scaleform6Render12RenderTargetE
N9Scaleform6Render12SKI_UserDataE
N9Scaleform6Render12ShadowFilterE
N9Scaleform6Render12StrokeScalerE
N9Scaleform6Render12StrokeSorterE
N9Scaleform6Render12StrokerTypesE
N9Scaleform6Render12TextureGlyphE
N9Scaleform6Render12TextureImageE
N9Scaleform6Render12VertexOutputE
N9Scaleform6Render13DICommandImplINS0_14DICommand_DrawENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_15DICommand_ClearENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_15DICommand_NoiseENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_17DICommand_HitTestENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_18DICommand_FillRectENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_FloodFillENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_GetPixelsENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_HistogramENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_SetPixelsENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_20DICommand_GetPixel32ENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_20DICommand_SetPixel32ENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_21DICommand_PerlinNoiseENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_23DICommand_CreateTextureENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_23DICommand_PixelDissolveENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_28DICommand_GetColorBoundsRectENS0_9DICommandEEE
N9Scaleform6Render13DrawableImageE
N9Scaleform6Render13GradientImageE
N9Scaleform6Render13ImageDelegateE
N9Scaleform6Render13ImageSwizzlerE
N9Scaleform6Render13MaskNodeState9InterfaceE
N9Scaleform6Render13MaskPrimitiveE
N9Scaleform6Render13Matrix3x4DataIfEE
N9Scaleform6Render13Matrix4x4DataIfEE
N9Scaleform6Render13PrimitiveFillE
N9Scaleform6Render13RBGenericImpl12RenderTargetE
N9Scaleform6Render13RBGenericImpl18DepthStencilBufferE
N9Scaleform6Render13RBGenericImpl19RenderBufferManagerE
N9Scaleform6Render13RBGenericImpl9CacheDataE
N9Scaleform6Render13SKI_BlendMode14RQII_BlendModeE
N9Scaleform6Render13SKI_BlendModeE
N9Scaleform6Render13SKI_MaskStartE
N9Scaleform6Render13SKI_PrimitiveE
N9Scaleform6Render13TextureFormatE
N9Scaleform6Render13ThreadCommandE
N9Scaleform6Render13TreeCacheNodeE
N9Scaleform6Render13TreeCacheRootE
N9Scaleform6Render13TreeCacheTextE
N9Scaleform6Render13TreeContainer8NodeDataE
N9Scaleform6Render13UserDataState4DataE
N9Scaleform6Render14BlurFilterImplE
N9Scaleform6Render14DICommandQueue14ExecuteCommandE
N9Scaleform6Render14DICommandQueueE
N9Scaleform6Render14DICommand_DrawE
N9Scaleform6Render14DrawableBundleE
N9Scaleform6Render14MatrixPoolImpl10MatrixPoolE
N9Scaleform6Render14MatrixPoolImpl16HMatrixConstantsE
N9Scaleform6Render14MeshKeyManagerE
N9Scaleform6Render14MorphShapeDataE
N9Scaleform6Render14Renderer2DImplE
N9Scaleform6Render14Scale9GridDataE
N9Scaleform6Render14Scale9GridInfoE
N9Scaleform6Render14Scale9GridRectE
N9Scaleform6Render14ShapeDataFloatE
N9Scaleform6Render14StereoImplBaseE
N9Scaleform6Render14TextureManager14ServiceCommandE
N9Scaleform6Render14TextureManagerE
N9Scaleform6Render14TreeCacheShapeE
N9Scaleform6Render14UserDataBundleE
N9Scaleform6Render14UserDataEffectE
N9Scaleform6Render15BlendModeEffectE
N9Scaleform6Render15DICommand_ClearE
N9Scaleform6Render15DICommand_MergeE
N9Scaleform6Render15DICommand_NoiseE
N9Scaleform6Render15FileImageSourceE
N9Scaleform6Render15FilterPrimitiveE
N9Scaleform6Render15ImageFileReaderE
N9Scaleform6Render15ImageFileWriterE
N9Scaleform6Render15ImageUpdateSyncE
N9Scaleform6Render15MeshCacheConfigE
N9Scaleform6Render15MeshStagingNodeE
N9Scaleform6Render15PrimitiveBundleE
N9Scaleform6Render15RenderQueueItem9InterfaceE
N9Scaleform6Render15ShapeDataPackedINS_11ArrayLH_PODIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform6Render15ShapeDataPackedINS_7ArrayDHIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform6Render15TransformerBaseE
N9Scaleform6Render16DICommand_ScrollE
N9Scaleform6Render16GlyphCacheConfigE
N9Scaleform6Render16ImageFileHandlerE
N9Scaleform6Render16MeshVertexOutputE
N9Scaleform6Render16SKI_ViewMatrix3DE
N9Scaleform6Render16ShapeDataFloatMPE
N9Scaleform6Render16SortKeyInterfaceE
N9Scaleform6Render16TextMeshProviderE
N9Scaleform6Render16VectorGlyphShapeE
N9Scaleform6Render17ColorMatrixFilterE
N9Scaleform6Render17DICommand_CompareE
N9Scaleform6Render17DICommand_HitTestE
N9Scaleform6Render17GlyphTextureImageE
N9Scaleform6Render17HALEndDisplayItemE
N9Scaleform6Render17MappedTextureBaseE
N9Scaleform6Render17MemoryBufferImageE
N9Scaleform6Render17MorphInterpolatorE
N9Scaleform6Render17SKI_TextPrimitiveE
N9Scaleform6Render17ShapeMeshProviderE
N9Scaleform6Render17TreeCacheMeshBaseE
N9Scaleform6Render17UserDataPrimitiveE
N9Scaleform6Render18DICommand_FillRectE
N9Scaleform6Render18DepthStencilBufferE
N9Scaleform6Render18GlyphEvictNotifierE
N9Scaleform6Render18ShapeDataInterfaceE
N9Scaleform6Render18SystemVertexFormatE
N9Scaleform6Render18TextLayerPrimitiveE
N9Scaleform6Render18ThreadCommandQueueE
N9Scaleform6Render18TransformerWrapperINS0_14Scale9GridInfoEEE
N9Scaleform6Render18TransformerWrapperINS0_9Matrix2x4IfEEEE
N9Scaleform6Render18TreeCacheContainerE
N9Scaleform6Render18ViewMatrix3DBundleE
N9Scaleform6Render18ViewMatrix3DEffectE
N9Scaleform6Render18WrapperImageSourceE
N9Scaleform6Render19CacheAsBitmapFilterE
N9Scaleform6Render19DICommand_FloodFillE
N9Scaleform6Render19DICommand_GetPixelsE
N9Scaleform6Render19DICommand_HistogramE
N9Scaleform6Render19DICommand_SetPixelsE
N9Scaleform6Render19DICommand_ThresholdE
N9Scaleform6Render19DepthStencilSurfaceE
N9Scaleform6Render19HALBeginDisplayItemE
N9Scaleform6Render19MeshProvider_RCImplE
N9Scaleform6Render19RenderBufferManagerE
N9Scaleform6Render19ShapeDataFloatTemplINS_11ArrayLH_PODIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform6Render19ShapeDataFloatTemplINS_5ArrayIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform6Render19TextPrimitiveBundleE
N9Scaleform6Render19TextureManagerLocksE
N9Scaleform6Render19TreeCacheShapeLayerE
N9Scaleform6Render20DICommand_CopyPixelsE
N9Scaleform6Render20DICommand_GetPixel32E
N9Scaleform6Render20DICommand_PaletteMapE
N9Scaleform6Render20DICommand_SetPixel32E
N9Scaleform6Render20DICommand_SourceRectE
N9Scaleform6Render20DrawableImageContextE
N9Scaleform6Render20PrimitiveFillManagerE
N9Scaleform6Render20SKI_ComplexPrimitiveE
N9Scaleform6Render21DICommand_ApplyFilterE
N9Scaleform6Render21DICommand_CopyChannelE
N9Scaleform6Render21DICommand_PerlinNoiseE
N9Scaleform6Render21ImageFileReader_MixinINS0_3DDS10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render21ImageFileReader_MixinINS0_3PNG10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render21ImageFileReader_MixinINS0_3SIF10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render21ImageFileReader_MixinINS0_3TGA10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render21ImageFileReader_MixinINS0_4JPEG10FileReaderENS2_14AbstractReaderEEE
N9Scaleform6Render21ImageFileWriter_MixinINS0_3PNG10FileWriterENS0_15ImageFileWriterEEE
N9Scaleform6Render21OrigScale9ParentState9InterfaceE
N9Scaleform6Render21ViewMatrix3DPrimitiveE
N9Scaleform6Render22ComplexPrimitiveBundleE
N9Scaleform6Render22FontCacheHandleManagerE
N9Scaleform6Render22SKI_ProjectionMatrix3DE
N9Scaleform6Render23ComplexMeshVertexOutputE
N9Scaleform6Render23DICommand_CreateTextureE
N9Scaleform6Render23DICommand_PixelDissolveE
N9Scaleform6Render23MeshProvider_KeySupportE
N9Scaleform6Render24DICommand_ColorTransformE
N9Scaleform6Render24DICommand_SourceRectImplINS0_15DICommand_MergeEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_16DICommand_ScrollEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_17DICommand_CompareEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_19DICommand_ThresholdEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_20DICommand_CopyPixelsEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_20DICommand_PaletteMapEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_21DICommand_ApplyFilterEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_21DICommand_CopyChannelEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_24DICommand_ColorTransformEEE
N9Scaleform6Render24ImageFileHandlerRegistryE
N9Scaleform6Render24ProjectionMatrix3DBundleE
N9Scaleform6Render24ProjectionMatrix3DEffectE
N9Scaleform6Render27ProjectionMatrix3DPrimitiveE
N9Scaleform6Render28DICommand_GetColorBoundsRectE
N9Scaleform6Render29SortKeyInterface_RefCountImplE
N9Scaleform6Render2GL10ExtensionsE
N9Scaleform6Render2GL10MeshBufferE
N9Scaleform6Render2GL10RenderSyncE
N9Scaleform6Render2GL11MatrixStateE
N9Scaleform6Render2GL13MappedTextureE
N9Scaleform6Render2GL13TextureFormatE
N9Scaleform6Render2GL14TextureManagerE
N9Scaleform6Render2GL16RenderTargetDataE
N9Scaleform6Render2GL19DepthStencilSurfaceE
N9Scaleform6Render2GL3HALE
N9Scaleform6Render2GL7TextureE
N9Scaleform6Render2GL9MeshCacheE
N9Scaleform6Render33DestroyDrawableImageThreadCommandE
N9Scaleform6Render3DDS10FileReaderE
N9Scaleform6Render3DDS18DDSFileImageSourceE
N9Scaleform6Render3HALE
N9Scaleform6Render3PNG10FileReaderE
N9Scaleform6Render3PNG10FileWriterE
N9Scaleform6Render3PNG11LibPNGInputE
N9Scaleform6Render3PNG17MemoryBufferImageE
N9Scaleform6Render3PNG18PNGFileImageSourceE
N9Scaleform6Render3PNG5InputE
N9Scaleform6Render3SIF10FileReaderE
N9Scaleform6Render3SIF18SIFFileImageSourceE
N9Scaleform6Render3TGA10FileReaderE
N9Scaleform6Render3TGA18TGAFileImageSourceE
N9Scaleform6Render4FontE
N9Scaleform6Render4JPEG10FileReaderE
N9Scaleform6Render4JPEG11ImageSourceE
N9Scaleform6Render4JPEG12TablesHeaderE
N9Scaleform6Render4JPEG14AbstractReaderE
N9Scaleform6Render4JPEG17MemoryBufferImageE
N9Scaleform6Render4JPEG18WrapperImageSourceE
N9Scaleform6Render4JPEG21JPEGInputImpl_jpeglibE
N9Scaleform6Render4JPEG5InputE
N9Scaleform6Render4JPEG9ExtraDataE
N9Scaleform6Render4MeshE
N9Scaleform6Render4RectIfEE
N9Scaleform6Render4Text10FontHandleE
N9Scaleform6Render4Text10StyledTextE
N9Scaleform6Render4Text10TextFilterE
N9Scaleform6Render4Text13EditorKitBaseE
N9Scaleform6Render4Text15FontManagerBaseE
N9Scaleform6Render4Text16HTMLImageTagDescE
N9Scaleform6Render4Text16StyleManagerBaseE
N9Scaleform6Render4Text21CompositionStringBaseE
N9Scaleform6Render4Text7DocView12DocumentTextE
N9Scaleform6Render4Text7DocView16DocumentListenerE
N9Scaleform6Render4Text7DocViewE
N9Scaleform6Render4Text9AllocatorE
N9Scaleform6Render4Text9ImageDescE
N9Scaleform6Render5ImageE
N9Scaleform6Render6BundleE
N9Scaleform6Render6FilterE
N9Scaleform6Render7RectRefIfEE
N9Scaleform6Render7StrokerE
N9Scaleform6Render7TextureE
N9Scaleform6Render8MeshBaseE
N9Scaleform6Render8RawImageE
N9Scaleform6Render8RectDataIfEE
N9Scaleform6Render8SubImageE
N9Scaleform6Render8TessBaseE
N9Scaleform6Render8TreeNode8NodeDataE
N9Scaleform6Render8TreeRoot8NodeDataE
N9Scaleform6Render8TreeText8NodeDataE
N9Scaleform6Render9CacheBaseE
N9Scaleform6Render9DICommandE
N9Scaleform6Render9FilterSetE
N9Scaleform6Render9HALNotifyE
N9Scaleform6Render9HairlinerE
N9Scaleform6Render9ImageBaseE
N9Scaleform6Render9Matrix3x4IfEE
N9Scaleform6Render9Matrix4x4IfEE
N9Scaleform6Render9MeshCacheE
N9Scaleform6Render9PrimitiveE
N9Scaleform6Render9ShaderHALINS0_2GL13ShaderManagerENS2_15ShaderInterfaceEEE
N9Scaleform6Render9StateData15Interface_ValueE
N9Scaleform6Render9StateData22Interface_RefCountImplE
N9Scaleform6Render9StateData9InterfaceE
N9Scaleform6Render9StrokerAAE
N9Scaleform6Render9TreeShape8NodeDataE
N9Scaleform6String10InitStructE
N9Scaleform6ThreadE
N9Scaleform7MemItemE
N9Scaleform7SysFileE
N9Scaleform8AmpStatsE
N9Scaleform8FILEFileE
N9Scaleform8ListNodeINS_10MemoryHeapEEE
N9Scaleform8ListNodeINS_3GFx14DrawingContextEEE
N9Scaleform8ListNodeINS_3GFx16MovieDefRootNodeEEE
N9Scaleform8ListNodeINS_6Render10MeshBufferEEE
N9Scaleform8ListNodeINS_6Render10MeshKeySetEEE
N9Scaleform8ListNodeINS_6Render11ContextImpl20ContextCaptureNotifyEEE
N9Scaleform8ListNodeINS_6Render11ContextImpl8RTHandle10HandleDataEEE
N9Scaleform8ListNodeINS_6Render13DrawableImageEEE
N9Scaleform8ListNodeINS_6Render13RBGenericImpl9CacheDataEEE
N9Scaleform8ListNodeINS_6Render13TreeCacheNodeEEE
N9Scaleform8ListNodeINS_6Render14DICommandQueueEEE
N9Scaleform8ListNodeINS_6Render15MeshStagingNodeEEE
N9Scaleform8ListNodeINS_6Render16TextMeshProviderEEE
N9Scaleform8ListNodeINS_6Render16VectorGlyphShapeEEE
N9Scaleform8ListNodeINS_6Render19DepthStencilSurfaceEEE
N9Scaleform8ListNodeINS_6Render7TextureEEE
N9Scaleform8ListNodeINS_6Render9HALNotifyEEE
N9Scaleform8SysAllocE
N9Scaleform8WaitableE
N9Scaleform9FormatterE
N9Scaleform9MsgFormatE
N9Scaleform9SemaphoreE
N@
NEGATIVE_INFINITY
NULL pathToVar passed to SetVariable/SetDouble()
NULL row buffer
NULLATI2ATI1$
NUMERIC
NV_NULL
Name = %s
Name = %s, %d glyphs
NetConnection
NetStream
NetworkSystemVersion001
No IDATs written into file
No XML parser state set for movie!
No image in file
No memory for pCAL params
No memory for pCAL purpose
No memory for sPLT palettes
No memory to process iTXt chunk
No memory to process text chunk
No space in chunk cache for iTXt
No space in chunk cache for sPLT
No space in chunk cache for tEXt
No space in chunk cache for unknown chunk
No space in chunk cache for zTXt
No such file
No user event handler interface is installed; Mouse.hide failed.
No user event handler interface is installed; Mouse.setCursorType failed.
No user event handler interface is installed; Mouse.show failed.
None
Normal
Not a JPEG file: starts with 0x%02x 0x%02x
Not a PNG file
Not enough image data
Not enough memory to decompress chunk
Not enough memory to process iTXt chunk
Not enough memory to process text chunk
Not enough memory to process zTXt chunk
Not implemented yet
Note: SWF Frame Rate = %f, Frames = %d
Nov
Null pRoot in %p - %p node
Null pRoot in %p - %p node - at chain loop %d
NumFonts = %d
O
O*9y
O@
OSX
Obtained EMS handle %u
Obtained XMS handle %u
Oct
Only compression method 8 is supported by PNG
Only compression windows <= 32k supported by PNG
Only compression windows >= 256 supported by PNG
Opened temporary file %s
Out of Memory
Out of memory processing zTXt chunk
Out of memory while procesing keyword
Out of memory while processing sCAL chunk
Out of memory while processing sPLT chunk
Out of memory while processing unknown chunk
Out of place IHDR
Out of place cHRM chunk
Out of place gAMA chunk
Out of place iCCP chunk
Out of place sBIT chunk
Out of place sRGB chunk
Out of place tIME chunk
Out of range gamma value ignored
Output file write error --- out of disk space?
Outputs Scaleform 4 mesh cache stats
Over
P
P0
P8
P?isLanguageBar
P@
PF%d %d-1.000000
PGDN
PGUP
PNG file corrupted by ASCII conversion
PNG fixed point integer out of range
PNG unsigned integer out of range
POSITIVE_INFINITY
POSIX
PP
PS3
PadPixels = %d, nominal glyph size = %d, numTexGlyphs = %d
PanoramaTextServices001
PanoramaUIClient001
PanoramaUIEngine001
Param %d: %s (%s)
Physics2 Interface ActorMgr v0.1
Physics2 Interface ResourceMgr v0.1
Physics2 Interface v0.3
Pixel
PlaceObject
PlaceObject2Tag
PlaceObject3Tag
Plat_ExitProcess
Plat_IsInDebugSession
PlatformCode
PlaySound
PopMask
Potential overflow in png_zalloc()
Pp@
Premature end of JPEG file
Premature end of input file
ProcessDeclDict(%d, %d) - DeclDict was already processed at %d
ProcessImageTags: can't find a resource for export name '%s'
ProcessImageTags: can't load the image '%s'
Profile size field missing from iCCP chunk
PushMask_BeginSubmit
Q
Q@
QC,A
Quantization table 0x%02x was not defined
Quantizing to %d = %d*%d*%d colors
Quantizing to %d colors
QueuedLoaderVersion001
R
R0
R16F
R32F
R@
RETURNINDEXEDARRAY
RG1616F
RG3232F
RGB323232F
RGB565
RGB888_BLUESCREEN
RGBA1010102
RGBA16161616F
RGBA32323232F
RGBA: {0} {1} {2} {3}
RGBX8888
RIGHTMARGIN
RIGHTMARGIN="{0}"
RP
RST%d
RandomFloat
RandomSeed
Read Error.
Read failed on temporary file
Read from EMS failed
Read from XMS failed
Read palette index exceeding num_palette
ReadToken overflow
Recursive import detected. Import stack:%s
RecursiveLoadFromBuffer:  got EOF instead of keyname
RecursiveLoadFromBuffer:  got NULL key
RecursiveLoadFromBuffer:  got conditional between key and value
RecursiveLoadFromBuffer:  got empty keyname
RecursiveLoadFromBuffer:  got } in key
RecursiveLoadFromBuffer:  recursion overflow
Registered fonts: "
RemoveInputConsumer
RemoveObject(%d, %d)
RemoveObject2(%d)
RenderDevice001
RenderDeviceMgr001
RenderHardwareConfig001
RenderSystemSurface001
Render_ShapeMeshProvider: More than 65535 vertices, the shape cannot be displayed
ReplaceGlyphs
RequestElement
Requested feature was omitted at compile time
Resource for font class = '%s' is not found in text field id = %d, def text = '%s'
Resource for font id = %d is not found in text field id = %d, def text = '%s'
ResourceSystem004
Retrieval of the TextField.filters property is not implemented.
Row has too many bytes to allocate in memory
S
S@
SBR
SDLMgrInterface001
SF (Action):
SF (Debug):
SF (Parse):
SF (Render):
SF (Script):
SF Global Object %s has NULL table!
SF Global Object %s is already installed!
SFText_TextBoxList
SIF
SIZE
SIZE="{0}"
SPAN
SQRT1_2
SQRT2
SRC
SSE and SSE2 are required.
STEAMAPPLIST_INTERFACE_VERSION001
STEAMAPPS_INTERFACE_VERSION008
STEAMHTMLSURFACE_INTERFACE_VERSION_003
STEAMHTTP_INTERFACE_VERSION002
STEAMINVENTORY_INTERFACE_V001
STEAMMUSICREMOTE_INTERFACE_VERSION001
STEAMMUSIC_INTERFACE_VERSION001
STEAMREMOTESTORAGE_INTERFACE_VERSION013
STEAMSCREENSHOTS_INTERFACE_VERSION002
STEAMUGC_INTERFACE_VERSION008
STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001
STEAMUSERSTATS_INTERFACE_VERSION011
STEAMVIDEO_INTERFACE_V001
SWF File version = %d, File length = %d
SWF file is compressed.
Sampling factors too large for interleaved scan
Sat
SaveKVFile
Scale9Grid for resource=%d has negative height %f
Scale9Grid for resource=%d has negative width %f
Scale9GridLoader, id=%d, x1=%d, y1=%d, x2=%d, y2=%d
Scaleform
Scaleform IME
Scaleform Linux
Scaleform::Render::DrawableImage
ScaleformAS
ScaleformParse
ScaleformScript
ScaleformUI missing expected interface
ScaleformUI002
ScaleformUIImpl::DenyInputToGame(%d)
ScaleformUIImpl::DenyInputToGameFromFlash(%d,%d) m_SlotDeniesInputRefCount[%d]=%d
ScaleformUIImpl::HideCursor  want=%d  cl_mouseenable=%s
ScaleformUIImpl::HideCursor  want=%d  cl_mouseenable=true  InnerHideCursor
ScaleformUIImpl::InitSlot( %d, %s) refcount=%d
ScaleformUIImpl::InstallGlobalObject( %d, %s)
ScaleformUIImpl::RequestElement( %d, %s)
ScaleformUIImpl::ShowCursor  want=%d  cl_mouseenable=false
ScaleformUIImpl::ShowCursor  want=%d  cl_mouseenable=false InnerShowCursor
ScaleformUIImpl::Value_GetDisplayInfo: Passed a null typed Value*!
ScaleformUIImpl::Value_SetDisplayInfo: Passed a null typed Value*!
Scales hud elements
Scan script does not transmit all data
Scene and Frame Label Data, numscenes = %d
SceneSystem_001
Scene[%d] = { %d, "%s" }
Searching FontLib without [Device] flag: "
Searching FontLib: "
Searching FontProvider: "
Searching again without [Device] flag:
Searching for font: "
Second parameter of Object.registerClass(%s, %s) should be function or null
Seconds before mouse cursor hides itself due to inactivity
Seek failed on temporary file
Selected %d colors for quantization
Self recursive import detected in '%s'
SendIMEMessage
SendLangBarMessage
SendUIEvent
Sep
SetBackgroundColor: (%d %d %d)
SetClipboardText
SetConvar
SetCursorShape
SetTabIndex (unused)
SetToControllerUI
SetVariable failed: can't resolve the path "%s"
Setter method is null.
ShaderApi029
ShaderDeviceMgr001
ShapeCharacter read: curved edge   = %4g %4g - %4g %4g - %4g %4g
ShapeCharacter read: fill0 = %d
ShapeCharacter read: fill1 = %d
ShapeCharacter read: line = %d
ShapeCharacter read: more fill styles
ShapeCharacter read: moveto %4g %4g
ShapeCharacter read: nfillbits = %d, nlinebits = %d
ShapeCharacter read: straight edge = %4g %4g - %4g %4g
ShapeLoader: id = %d
ShapeMorphLoader: id = %d
SharedObject
ShiftJIS
Show
ShowCursor
ShowFrame
ShowFrame (sprite, char id = %d)
ShutdownSlot
Smoothing not supported with nonstandard sampling ratios
SoundSystem001
SourceNode = %p, parent = %p
Sprite::AddDisplayObject() - unknown cid = %d
Ss=%d, Se=%d, Ah=%d, Al=%d
Stage
Start Of Frame 0x%02x: width=%u, height=%u, components=%d
Start Of Scan: %d components
Start of Image
Static text uses imported font! FontId = %d, import name = %s
SteamAPI_GetHSteamPipe
SteamAPI_GetHSteamUser
SteamAPI_InitSafe
SteamAPI_RegisterCallback
SteamAPI_UnregisterCallback
SteamClient017
SteamController003
SteamFriends015
SteamInternal_CreateInterface
SteamMatchMaking009
SteamMatchMakingServers002
SteamNetworking005
SteamUser019
SteamUtils008
String %d: ref:%d %s
StyleSheet
Sun
Suspension not allowed here
System
T
T0
T@
TABSTOPS
TABSTOPS="
TARGET
TEXGLYPH[%d]: uvBnd.x1 = %f, uvBnd.y1 = %f, uvBnd.x2 = %f, uvBnd.y2 = %f
TF<)
TP
TR
TRUE
TU
Tag 'DefineBinaryData' (87) is not supported, potentially 'TLF text' fields are used. Switch to 'Classic Text'.
Text compression window is being reset to 512
Text style with undefined font; FontId = %d
TextCharacter, id = %d
TextHeight = %g
The current tint applied to the Scaleform UI
The percentage of the screen height that is considered safe from overscan
The percentage of the screen width that is considered safe from overscan
Thinkness = %f, Sharpnesss = %f
ThreadGetCurrentId
ThreadInterlockedCompareExchangePointer
ThreadInterlockedExchangePointer
ThreadSleep
Thu
Times New Roman
Too many IDATs found
Too many bytes for PNG signature
Too many color components: %d, max %d
Truncated iTXt chunk
Truncated zTXt chunk
Truncating incorrect info tRNS chunk length
Truncating incorrect tRNS chunk length
Truncating profile to actual length in iCCP chunk
Tue
U
U@
UC
UCS-2LE
UCS-4LE
UISlot
UNIQUESORT
UNKNOWN
URLNotFound
UTC
UTF-32LE
UTF-8
UV88
UVLX8888
UVWQ8888
Unable to read file %s
Unable to read file %s!
Unaccounted
Unexpected marker 0x%02x
Unicode
Uninitialized row
Unknown
Unknown APP0 marker (not JFIF), length %u
Unknown APP14 marker (not Adobe), length %u
Unknown Adobe color transform code %d
Unknown compression method in IHDR
Unknown compression type @1
Unknown compression type in iCCP chunk
Unknown compression type in zTXt chunk
Unknown custom filter method
Unknown error
Unknown file format at URL "
Unknown filter heuristic method
Unknown filter method in IHDR
Unknown freer parameter in png_data_freer
Unknown iTXt compression type or method
Unknown interlace method in IHDR
Unknown row filter for method 0
Unknown sRGB intent
Unknown zlib error
UnlockInput
Unmatched %s
Unnamed
Unrecognized component IDs %d %d %d, assuming YCbCr
Unrecognized equation type for pCAL chunk
Unrecognized unit type for oFFs chunk
Unrecognized unit type for pHYs chunk
Unsupported JPEG data precision %d
Unsupported JPEG process: SOF type 0x%02x
Unsupported color conversion request
Unsupported marker type 0x%02x
Up
UpdateSafeZone
UpdateTint
V
V@
VAvi001
VBAllocTracker001
VBik001
VDataCache003
VDmeMakeFileUtils001
VENGINE_GAMEUIFUNCS_VERSION005
VEngineClient014
VEngineCvar007
VFileSystem017
VGUI_Input005
VGUI_Panel009
VGUI_Scheme010
VGUI_Surface031
VGUI_System010
VGUI_ivgui008
VGy#
VMDLLIB001
VMaterialSystem080
VMaterialSystem2_001
VNewAsyncFileSystem001
VP4002
VPhysicsCollision007
VPrecacheSystem001
VProcessUtils002
VResourceAccessControl001
VSPACE
VSPACE="{0}"
VSoundEmitter003
VStudioRender026
VTF
VTFFileBaseHeader_t
VTFFileHeaderPS3_t
VTFFileHeaderV7_1_t
VTFFileHeaderV7_2_t
VTFFileHeaderV7_3_t
VTFFileHeaderX360_t
VTFFileHeader_t
V_AppendSlash: ran out of space on %s.
V_MakeAbsolutePath: _getcwd failed.
V_UTF8ToUnicode
V_UnicodeToUTF8
Valid palette required for paletted images
Value_Invoke(%s) called with numArgs=%i but SFVALUEARRAY size=%i
ValveKeyTable
Virtual array controller messed up
W
W@
WIDTH
WIDTH="{0}"
WIN32
WINDOWS
Warning
Warning! Encountered old format VTF file; please rebuild it!
Warning:  %s = '%s' is infinite, clamping value.
Warning: Increase raster glyph cache capacity - see GlyphCacheParams
Warning: Raster glyph is too big - increase GlyphCacheParams.MaxSlotHeight
Warning: thumbnail image size does not match data length %u
Warning: unknown JFIF revision number %d.%02d
We failed to load the avatar image for user %llX
We failed to load the inventory image for item %llX
We failed to update the chrome HTML image for item %llX
We failed to update the inventory image for item %llX
Wed
Width is too large for libpng to process pixels
WordWrap = %d, Multiline = %d, Password = %d, ReadOnly = %d
WorldRendererMgr001
Write Error
Write Error.
Write failed on temporary file --- out of disk space?
Write to EMS failed
Write to XMS failed
WriteMiniDump
Writing zero-length unknown chunk
Wrong JPEG library version: library is %d, caller expects %d
Wrote palette index exceeding num_palette
X
X0
X360
X@
XB
XML.addRequestHeader is not implemented.
XML.send is not implemented.
XML.sendAndLoad is not implemented.
XMLNode
XMLNode::appendChild - trying to add a child that is not of type XMLNode
XMLNode::appendChild - trying to add a child that is the root of the current tree
XMLNode::appendChild - trying to add a child to a text node
XMLNodeCtorFunction::GlobalCtor - malformed XMLNode object
XMLNodeCtorFunction::GlobalCtor - node type not specified
XMLNodeObject::SetMember - cannot set attributes of a malformed node
XMLNodeObject::SetMember - cannot set attributes of node type %d. Only type 1 allowed
XMLNodeObject::SetMember - cannot set nodeName of a malformed node
XMLNodeObject::SetMember - cannot set nodeName of node type %d. Only type 1 allowed
XMLNodeObject::SetMember - cannot set nodeValue of a malformed node
XMLNodeProto::GetNamespaceForPrefix - only element nodes support this method.
XOffset = %g
XP
Y
Y@
YOffset = %g
Z
Z"0*
Z0
Z@
ZEo^
ZP
Zero length keyword
Zero length tRNS chunk
ZlibState is not set - can't load zipped image data
[
[%.3f server clamped to %.3f]
[%d]
[%s]
[*]
[/b]
[/code]
[/h1]
[/i]
[/img]
[/list]
[/s]
[/u]
[/url]
[@
[Bold,Device]
[Bold,Italic,Device]
[Bold,Italic]
[Bold]
[Device]
[Italic]
[\]'
[b]
[code]
[h1]
[i]
[img]
[list]
[no zlib message]
[object Object]
[property]
[resolveHandler]
[s]
[type Function]
[type Object]
[u]
[url=
\
\0
\@
\P
]
]@
^
^@
^oEZ
_
_@
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
_Jv_RegisterClasses
_ResourceLib_Images
_ZSt9terminatev@@GLIBCXX_3.4
_ZTVN10__cxxabiv117__class_type_infoE@@CXXABI_1.3
_ZTVN10__cxxabiv120__si_class_type_infoE@@CXXABI_1.3
_ZTVN10__cxxabiv121__vmi_class_type_infoE@@CXXABI_1.3
__acos_finite
__acos_finite@@GLIBC_2.15
__acosf_finite
__acosf_finite@@GLIBC_2.15
__asin_finite
__asin_finite@@GLIBC_2.15
__atan2_finite
__atan2_finite@@GLIBC_2.15
__atan2f_finite
__atan2f_finite@@GLIBC_2.15
__bss_start
__constructor__
__ctype_b_loc
__ctype_b_loc@@GLIBC_2.3
__ctype_tolower_loc
__ctype_tolower_loc@@GLIBC_2.3
__cxa_atexit
__cxa_atexit@@GLIBC_2.2.5
__cxa_finalize
__cxa_finalize@@GLIBC_2.2.5
__cxa_guard_abort
__cxa_guard_abort@@CXXABI_1.3
__cxa_guard_acquire
__cxa_guard_acquire@@CXXABI_1.3
__cxa_guard_release
__cxa_guard_release@@CXXABI_1.3
__dynamic_cast
__dynamic_cast@@CXXABI_1.3
__errno_location
__errno_location@@GLIBC_2.2.5
__exp_finite
__exp_finite@@GLIBC_2.15
__expf_finite
__expf_finite@@GLIBC_2.15
__fprintf_chk
__fprintf_chk@@GLIBC_2.3.4
__gmon_start__
__gxx_personality_v0
__gxx_personality_v0@@CXXABI_1.3
__isoc99_sscanf
__isoc99_sscanf@@GLIBC_2.7
__log_finite
__log_finite@@GLIBC_2.15
__longjmp_chk
__longjmp_chk@@GLIBC_2.11
__lxstat
__lxstat64
__lxstat64@@GLIBC_2.2.5
__lxstat@@GLIBC_2.2.5
__memcpy_chk
__memcpy_chk@@GLIBC_2.3.4
__memset_chk
__memset_chk@@GLIBC_2.3.4
__pow_finite
__pow_finite@@GLIBC_2.15
__printf_chk
__printf_chk@@GLIBC_2.3.4
__proto__
__pthread_key_create
__pthread_key_create@@GLIBC_2.2.5
__resolve
__sprintf_chk
__sprintf_chk@@GLIBC_2.3.4
__stack_chk_fail
__stack_chk_fail@@GLIBC_2.4
__stpcpy_chk
__stpcpy_chk@@GLIBC_2.3.4
__strcpy_chk
__strcpy_chk@@GLIBC_2.3.4
__strncpy_chk
__strncpy_chk@@GLIBC_2.3.4
__swprintf_chk
__swprintf_chk@@GLIBC_2.4
__vsnprintf_chk
__vsnprintf_chk@@GLIBC_2.3.4
__vsprintf_chk
__vsprintf_chk@@GLIBC_2.3.4
__vswprintf_chk
__vswprintf_chk@@GLIBC_2.4
__xmknod
__xmknod@@GLIBC_2.2.5
__xstat
__xstat64
__xstat64@@GLIBC_2.2.5
__xstat@@GLIBC_2.2.5
_alpha
_array_
_client.so
_currentframe
_dlc%d.%s
_down
_droptarget
_edata
_end
_fini
_focusrect
_framesloaded
_global
_global.gfx_ime_candidate_list_path
_global.gfx_ime_candidate_list_state
_glyphs
_height
_highquality
_init
_level
_level0
_level0 unloaded - no further playback possible
_level0.
_level{0}
_listeners
_lockroot
_matrix3d
_name
_name_
_over
_parent
_perspfov
_quality
_root
_rotation
_setjmp
_setjmp@@GLIBC_2.2.5
_soundbuftime
_target
_totalframes
_up
_url
_valveinternal
_visible
_width
_x
_xlsp
_xmouse
_xrotation
_xscale
_y
_ymouse
_yrotation
_yscale
_z
_zscale
`
`@
`P
``@
`n@
`p@
a
a+b
a:active
a:hover
a:link
a\">
aa
abcdefghijklmnopqrstuvwxyz
abort@@GLIBC_2.2.5
abs
access
access@@GLIBC_2.2.5
acolor
acos
acos@@GLIBC_2.2.5
acosf
acosf@@GLIBC_2.2.5
action
addCallback
addListener
addMarker
addProperty
addRequestHeader
adler32
adler32_combine
adler32_combine64
advanced
afactor
alphaMultiplier
alphaOffset
alwaysEnableArrowKeys
alwaysEnableKeyboardPress
alwaysShowSelection
antiAliasType
appendChild
appendHtml
appendText
application/x-www-form-urlencoded
apply
archive
arguments
array
ascent
asfunction:
asin
asin@@GLIBC_2.2.5
at
atan
atan2
atan2@@GLIBC_2.2.5
atan2f
atan2f@@GLIBC_2.2.5
atan@@GLIBC_2.2.5
atc
attachBitmap
attachMovie
attribute vec2 intc%d;
attribute vec4 pos;void main(void){  vec4 opos = pos;  opos.x = dot(pos, mvp[0]);  opos.y = dot(pos, mvp[1]);  gl_Position = opos;
attributes
autoFit
autoSize
avHardwareDisable
available
b
b;!l
bP
ba
backgroundColor
bad adaptive filter value
baseLineX
baseLineY
baseline
bb
begin text records
beginBitmapFill
beginDisplay
beginFill
beginGradientFill
bevel
bin/
blendMode
block
blockIndent
blueMultiplier
blueOffset
blurStrength
blurX
blurY
bolditalic
border
borderColor
borrow
bottom
bottomRight
bottomScroll
bound rect:
box
br
broadcastMessage
buffer error
bullet
bumpScale
but running with
button GFxCharacter loader: CharId = %d
bytes
bytesLoaded
bytesTotal
c
c0
cHRM Blue X
cHRM Blue Y
cHRM Green X
cHRM Green Y
cHRM Red X
cHRM Red Y
cHRM Red Z
cHRM White X
cHRM White Y
c]$8
c]^7
cacheAsBitmap
call
callee
caller
capabilities
captureFocus
caretIndex
cbrtf
cbrtf@@GLIBC_2.2.5
ceil
ceil@@GLIBC_2.2.5
ceilf
ceilf@@GLIBC_2.2.5
center
charAt
charCodeAt
chdir
chdir@@GLIBC_2.2.5
cheat
childNodes
chmod
chmod@@GLIBC_2.2.5
chown@@GLIBC_2.2.5
cl_teammate_color_1
cl_teammate_color_2
cl_teammate_color_3
cl_teammate_color_4
cl_teammate_color_5
clauseSegment
clear
clearInterval
clearTimeout
client
clientcmd_can_execute
clone
cloneNode
closedir
closedir@@GLIBC_2.2.5
closure
color *= (1.0 - base.a);  gl_FragColor = color * cxmul + cxadd * color.a;}
color *= samples;
color += texture2D(tex, tc%d);
color = %s * (1.0-base.a) + base;
color = (scolor * (color.a) + scolor2 * (color.r)           + base * (1.0 - color.a - color.r)) * base.a;
color = color * samples;
color = mix(scolor, base, color.a) * base.a;
color = scolor * (1-color.a) * base.a;
color.a += texture2D(tex, tc%d).a;
color.ar = clamp((1.0 - color.ar) - (1.0 - color.ra) * 0.5, 0.0,1.0);
color.r += texture2D(tex, tc%d).a;
color:
colorTransform
compositionSegment
compressedSize
concat
concatenatedColorTransform
concatenatedMatrix
condenseWhite
confirm
conflicting calls to set alpha mode and background
constructor
contains
containsPoint
containsRectangle
contentType
continueAnimation
convertboolean
convertedSegment
convertint
convertnumber
convertstring
convertstringw
convertuint
copyToClipboard
corner0x
corner0y
corner1x
corner1y
corner2x
corner2y
corner3x
corner3y
cos@@GLIBC_2.2.5
crc32
crc32_combine
crc32_combine64
createBox
createElement
createEmptyMovieClip
createGradientBox
createTextField
createTextNode
cursortimeout
curveTo
cutToClipboard
cxadd
cxform:
cxmul
cxmul1
d
dP
darken
data error
decode
deflate
deflate 1.2.5 Copyright 1995-2010 Jean-loup Gailly and Mark Adler
deflateBound
deflateCopy
deflateEnd
deflateInit2_
deflateInit_
deflateParams
deflatePrime
deflateReset
deflateSetDictionary
deflateSetHeader
deflateTune
deflate_copyright
delete
deltaTransformPoint
demo_avatars/CSGO_AVATAR_%d.dds
depth
descent
dev_scaleform_debug
dev_scaleform_verbose_off
dev_scaleform_verbose_on
dev_scaleform_verbose_toggle
developer
difference
disableBatching
disableFocusAutoRelease
disableFocusKeys
disableFocusRolloverEvent
disableIME
displayobject
distance
ditheredSingle
ditheredThick
dl_iterate_phdr
dl_iterate_phdr@@GLIBC_2.2.5
dlclose
dlclose@@GLIBC_2.2.5
dlerror
dlerror@@GLIBC_2.2.5
dlopen
dlopen@@GLIBC_2.2.5
dlsym
dlsym@@GLIBC_2.2.5
doConversion
docTypeDecl
dotted
duplicateMovieClip
dynamic
e
eaFO
edgeaaMode
embedFonts
enabled
encoding="
end text records
endFill
english
equals
erase
error in user chunk
exactFit
exit@@GLIBC_2.2.5
exp
exp@@GLIBC_2.2.5
export: count = %d
export: id = %d, name = %s
extra interior spaces removed from keyword
extreme cHRM chunk cannot be converted to tristimulus values
f
failed to dlopen %s error=%s
false
fauxBold
fauxItalic
fclose
fclose@@GLIBC_2.2.5
fcolor
fff?
fflush
fflush@@GLIBC_2.2.5
file error
fileTypeString
findFocus
findText
firstChild
fit
fixed point overflow ignored
flags
flash.display
flash.external
flash.filters
flash.geom
float( %f )
floor
floor@@GLIBC_2.2.5
floorf
floorf@@GLIBC_2.2.5
flush
fmod
fmod@@GLIBC_2.2.5
focusEnabled
focusGroupMask
font
font-family
font-size
font-style
font-weight
fontFamily
fontScaleFactor
fontSize
fontStyle
fontWeight
fontlib
fopen
fopen64
fopen64@@GLIBC_2.2.5
fopen@@GLIBC_2.2.5
fputc
fputc@@GLIBC_2.2.5
frameLabelCount = %d
frames = %d
fread
fread@@GLIBC_2.2.5
free
free@@GLIBC_2.2.5
freopen
freopen@@GLIBC_2.2.5
frexp
frexp@@GLIBC_2.2.5
fromCharCode
fseek
fseek@@GLIBC_2.2.5
fsize
ftell
ftell@@GLIBC_2.2.5
fwrite
fwrite@@GLIBC_2.2.5
g
g_VProfCurrentProfile
g_pMemAlloc
g_pThreadPool
game
gamma table being rebuilt
gc^A
getAscii
getBeginIndex
getBounds
getButtonsState
getBytesLoaded
getBytesTotal
getCaretIndex
getCharBoundaries
getCharIndexAtPoint
getCode
getCompositionString
getControllerFocusGroup
getControllerMaskByFocusGroup
getConversionMode
getCount
getDate
getDay
getDepth
getEnabled
getEndIndex
getExactCharBoundaries
getFirstCharInParagraph
getFocus
getFocusArray
getFocusBitmask
getFontList
getFullYear
getHours
getIMECandidateListStyle
getIMECompositionStringStyle
getInputLanguage
getInstanceAtDepth
getLineIndexAtPoint
getLineIndexOfChar
getLineLength
getLineMetrics
getLineOffset
getLineText
getLocal
getMilliseconds
getMinutes
getModalClip
getMonth
getNamespaceForPrefix
getNewTextFormat
getNextHighestDepth
getPosition
getPrefixForNamespace
getProgress
getRGB
getRect
getSWFVersion
getSeconds
getSelected
getSelectedText
getSize
getStyle
getStyleNames
getText
getTextExtent
getTextFormat
getTextRunInfo
getTextSnapshot
getTime
getTimezoneOffset
getTopMostEntity
getTransform
getUTCDate
getUTCDay
getUTCFullYear
getUTCHours
getUTCMilliseconds
getUTCMinutes
getUTCMonth
getUTCSeconds
getUTCYear
getYear
get_crc_table
getcwd
getcwd@@GLIBC_2.2.5
getenv
getenv@@GLIBC_2.2.5
gettimeofday
gettimeofday@@GLIBC_2.2.5
gfxArg
gfxExtensions
gfxLanguage
gfxPlayer
gfxVersion
gfxfontlib.swf
glActiveTexture
glActiveTextureARB
glActiveTextureEXT
glAttachShader
glAttachShaderARB
glAttachShaderEXT
glBindAttribLocation
glBindAttribLocationARB
glBindAttribLocationEXT
glBindBuffer
glBindBufferARB
glBindBufferEXT
glBindFragDataLocation
glBindFragDataLocationARB
glBindFragDataLocationEXT
glBindFramebuffer
glBindFramebufferARB
glBindFramebufferEXT
glBindProgramPipeline
glBindProgramPipelineARB
glBindProgramPipelineEXT
glBindRenderbuffer
glBindRenderbufferARB
glBindRenderbufferEXT
glBindTexture
glBindVertexArray
glBindVertexArrayARB
glBindVertexArrayEXT
glBlendEquation
glBlendEquationARB
glBlendEquationEXT
glBlendFunc
glBlendFuncSeparate
glBlendFuncSeparateARB
glBlendFuncSeparateEXT
glBufferData
glBufferDataARB
glBufferDataEXT
glBufferSubData
glBufferSubDataARB
glBufferSubDataEXT
glCheckFramebufferStatus
glCheckFramebufferStatusARB
glCheckFramebufferStatusEXT
glClear
glClearColor
glClearStencil
glClientWaitSync
glClientWaitSyncARB
glClientWaitSyncEXT
glColorMask
glCompileShader
glCompileShaderARB
glCompileShaderEXT
glCompressedTexImage2D
glCompressedTexImage2DARB
glCompressedTexImage2DEXT
glCreateProgram
glCreateProgramARB
glCreateProgramEXT
glCreateShader
glCreateShaderARB
glCreateShaderEXT
glDeleteBuffers
glDeleteBuffersARB
glDeleteBuffersEXT
glDeleteFramebuffers
glDeleteFramebuffersARB
glDeleteFramebuffersEXT
glDeleteProgram
glDeleteProgramARB
glDeleteProgramEXT
glDeleteProgramPipelines
glDeleteProgramPipelinesARB
glDeleteProgramPipelinesEXT
glDeleteRenderbuffers
glDeleteRenderbuffersARB
glDeleteRenderbuffersEXT
glDeleteShader
glDeleteShaderARB
glDeleteShaderEXT
glDeleteSync
glDeleteSyncARB
glDeleteSyncEXT
glDeleteTextures
glDeleteVertexArrays
glDeleteVertexArraysARB
glDeleteVertexArraysEXT
glDisable
glDisableVertexAttribArray
glDisableVertexAttribArrayARB
glDisableVertexAttribArrayEXT
glDrawArrays
glDrawElements
glDrawElementsInstanced
glDrawElementsInstancedARB
glDrawElementsInstancedEXT
glEnable
glEnableVertexAttribArray
glEnableVertexAttribArrayARB
glEnableVertexAttribArrayEXT
glFenceSync
glFenceSyncARB
glFenceSyncEXT
glFlush
glFlushMappedBufferRange
glFlushMappedBufferRangeARB
glFlushMappedBufferRangeEXT
glFramebufferRenderbuffer
glFramebufferRenderbufferARB
glFramebufferRenderbufferEXT
glFramebufferTexture2D
glFramebufferTexture2DARB
glFramebufferTexture2DEXT
glGenBuffers
glGenBuffersARB
glGenBuffersEXT
glGenFramebuffers
glGenFramebuffersARB
glGenFramebuffersEXT
glGenProgramPipelines
glGenProgramPipelinesARB
glGenProgramPipelinesEXT
glGenRenderbuffers
glGenRenderbuffersARB
glGenRenderbuffersEXT
glGenTextures
glGenVertexArrays
glGenVertexArraysARB
glGenVertexArraysEXT
glGenerateMipmap
glGenerateMipmapARB
glGenerateMipmapEXT
glGetActiveUniform
glGetActiveUniformARB
glGetActiveUniformEXT
glGetAttribLocation
glGetAttribLocationARB
glGetAttribLocationEXT
glGetError
glGetFloatv
glGetFragDataLocation
glGetFragDataLocationARB
glGetFragDataLocationEXT
glGetFramebufferAttachmentParameteriv
glGetFramebufferAttachmentParameterivARB
glGetFramebufferAttachmentParameterivEXT
glGetIntegerv
glGetProgramBinary
glGetProgramBinaryARB
glGetProgramBinaryEXT
glGetProgramInfoLog
glGetProgramInfoLogARB
glGetProgramInfoLogEXT
glGetProgramPipelineInfoLog
glGetProgramPipelineInfoLogARB
glGetProgramPipelineInfoLogEXT
glGetProgramPipelineiv
glGetProgramPipelineivARB
glGetProgramPipelineivEXT
glGetProgramiv
glGetProgramivARB
glGetProgramivEXT
glGetRenderbufferParameteriv
glGetRenderbufferParameterivARB
glGetRenderbufferParameterivEXT
glGetShaderInfoLog
glGetShaderInfoLogARB
glGetShaderInfoLogEXT
glGetShaderiv
glGetShaderivARB
glGetShaderivEXT
glGetString
glGetStringi
glGetStringiARB
glGetStringiEXT
glGetSynciv
glGetSyncivARB
glGetSyncivEXT
glGetTexLevelParameteriv
glGetTexParameteriv
glGetUniformLocation
glGetUniformLocationARB
glGetUniformLocationEXT
glIsFramebuffer
glIsFramebufferARB
glIsFramebufferEXT
glIsProgram
glIsProgramARB
glIsProgramEXT
glIsRenderbuffer
glIsRenderbufferARB
glIsRenderbufferEXT
glLinkProgram
glLinkProgramARB
glLinkProgramEXT
glMapBuffer
glMapBufferARB
glMapBufferEXT
glMapBufferRange
glMapBufferRangeARB
glMapBufferRangeEXT
glPixelStorei
glProgramBinary
glProgramBinaryARB
glProgramBinaryEXT
glProgramParameteri
glProgramParameteriARB
glProgramParameteriEXT
glProgramUniform1fv
glProgramUniform1fvARB
glProgramUniform1fvEXT
glProgramUniform1iv
glProgramUniform1ivARB
glProgramUniform1ivEXT
glProgramUniform2fv
glProgramUniform2fvARB
glProgramUniform2fvEXT
glProgramUniform3fv
glProgramUniform3fvARB
glProgramUniform3fvEXT
glProgramUniform4fv
glProgramUniform4fvARB
glProgramUniform4fvEXT
glProgramUniformMatrix4fv
glProgramUniformMatrix4fvARB
glProgramUniformMatrix4fvEXT
glReadPixels
glRenderbufferStorage
glRenderbufferStorageARB
glRenderbufferStorageEXT
glScissor
glShaderSource
glShaderSourceARB
glShaderSourceEXT
glStencilFunc
glStencilMask
glStencilOp
glStringMarkerGREMEDY
glStringMarkerGREMEDYARB
glStringMarkerGREMEDYEXT
glTexImage2D
glTexParameteri
glTexSubImage2D
glUniform1f
glUniform1fARB
glUniform1fEXT
glUniform1fv
glUniform1fvARB
glUniform1fvEXT
glUniform1i
glUniform1iARB
glUniform1iEXT
glUniform1iv
glUniform1ivARB
glUniform1ivEXT
glUniform2f
glUniform2fARB
glUniform2fEXT
glUniform2fv
glUniform2fvARB
glUniform2fvEXT
glUniform3fv
glUniform3fvARB
glUniform3fvEXT
glUniform4fv
glUniform4fvARB
glUniform4fvEXT
glUniformMatrix4fv
glUniformMatrix4fvARB
glUniformMatrix4fvEXT
glUnmapBuffer
glUnmapBufferARB
glUnmapBufferEXT
glUseProgram
glUseProgramARB
glUseProgramEXT
glUseProgramStages
glUseProgramStagesARB
glUseProgramStagesEXT
glVertexAttribPointer
glVertexAttribPointerARB
glVertexAttribPointerEXT
glViewport
glXGetProcAddressARB
gl_FragColor = %s;}
gl_FragColor = color * cxmul + cxadd * color.a;}
globalToLocal
gmtime
gmtime@@GLIBC_2.2.5
gotoAndPlay
gotoAndStop
gradients: numGradients = %d
greenMultiplier
greenOffset
h
hP
hardlight
hasAccessibility
hasAudio
hasAudioEncoder
hasChildNodes
hasEmbeddedVideo
hasIME
hasMP3
hasOwnProperty
hasPrinting
hasScreenBroadcast
hasScreenPlayback
hasStreamingAudio
hasStreamingVideo
hasVideoEncoder
hd=<
header crc mismatch
headerSize
hide
hideObject
highlightAlpha
highlightColor
hitArea
hitTest
hitTestDisable
hitTestTextNearPos
horizontal
html
htmlText
hud_scaling
i
i8P/
iconv
iconv@@GLIBC_2.2.5
iconv_close
iconv_close@@GLIBC_2.2.5
iconv_open
iconv_open@@GLIBC_2.2.5
idMap
identity
if1R
ifFrameLoaded
ignoreWhite
ignoring out of range rgb_to_gray coefficients
image
image not found
imageFormat
imecommand
img
img://
img://avatar_
img://chrome_
img://inventory_
img://itemdata_
img://loadfile:
img://loadjpeg:
img://stringtables:
imgps://
imgps://chrome_
import: id = %d, name = %s
importAssets2: SourceUrl = %s, count = %d
importAssets: SourceUrl = %s, count = %d
inactiveSelectionBkgColor
inactiveSelectionTextColor
incompatible version
incorrect data check
incorrect header check
incorrect length check
indexBackgroundColor
indexInRun
indexOf
inflate
inflate 1.2.5 Copyright 1995-2010 Mark Adler
inflateCopy
inflateEnd
inflateGetHeader
inflateInit2_
inflateInit_
inflateMark
inflatePoint
inflatePrime
inflateReset
inflateReset2
inflateSetDictionary
inflateSync
inflateSyncPoint
inflateUndermine
inflate_copyright
initialize
inline
inner
input
insertBefore
instance{0}
insufficient memory
int( %d = 0x%X )
intc%d
internal error handling cHRM coefficients
internal error handling cHRM->XYZ
internal error in png_XYZ_from_xy
internal row logic error
internal row size calculation error
internal row width error
internal sequential row size calculation error
internal write transform logic error
interpolate
intersection
intersects
invalid alpha mode
invalid background gamma type
invalid bit length repeat
invalid block type
invalid chunk type
invalid chunklength
invalid code -- missing end-of-block
invalid code lengths set
invalid distance code
invalid distance too far back
invalid distances set
invalid error action to rgb_to_gray
invalid keyword character 0x@1
invalid literal/length code
invalid literal/lengths set
invalid stored block lengths
invalid user transform pixel depth
invalid window size
invert
isDebugger
isDown
isEmpty
isFinite
isNaN
isPropertyEnumerable
isPrototypeOf
isStatusWindow
isToggled
isalnum
isalnum@@GLIBC_2.2.5
iscntrl
iscntrl@@GLIBC_2.2.5
isprint
isprint@@GLIBC_2.2.5
isspace
isspace@@GLIBC_2.2.5
iswalnum
iswalnum@@GLIBC_2.2.5
iswalpha
iswalpha@@GLIBC_2.2.5
iswspace
iswspace@@GLIBC_2.2.5
italicbold
j
jP
join
joystick
justify
k
kerning
keyword length must be 1 - 79 characters
kh9F
knockout
l
l!;b
lP
language
lastChild
lastIndexOf
lchown
lchown@@GLIBC_2.2.5
ld-linux-x86-64.so.2
leading
leading spaces removed from keyword
leftMargin
length exceeds PNG maxima
letter-spacing
letterSpacing
libGL.so.1
libc.so.6
libdl.so.2
libm.so.6
libpng does not support gamma+background+rgb_to_gray
libpng error: %s
libpng version 1.5.13 - September 27, 2012
libpng version 1.5.13 - September 27, 2012Copyright (c) 1998-2012 Glenn Randers-PehrsonCopyright (c) 1996-1997 Andreas DilgerCopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.
libpthread.so.0
libstdc++.so.6
libsteam_api.so
libtier0_client.so
libtogl_client.so
libvstdlib_client.so
lighten
lineGradientStyle
lineTo
linearRGB
link@@GLIBC_2.2.5
loadBitmap
loadVariables
localFileReadDisable
localName
localToGlobal
localeCompare
localeconv
localeconv@@GLIBC_2.2.5
log
log@@GLIBC_2.2.5
lowConfSegment
lowResImageFormat
lowResImageHeight
lowResImageSample
lowResImageWidth
m
malformed sPLT chunk
malloc
malloc@@GLIBC_2.2.5
manufacturer
margin-left
margin-right
marginLeft
marginRight
mat:
materials/vgui/avatar_default_64.vtf
materials/vgui/inventory_default.vtf
matrix
matrixType
matrix_a
matrix_b
matrix_c
matrix_d
matrix_tx
matrix_ty
max
max. %f
maxChars
maxhscroll
maxscroll
mbstowcs
mbstowcs@@GLIBC_2.2.5
memcmp
memcmp@@GLIBC_2.2.5
memcpy
memcpy@@GLIBC_2.14
memmove
memmove@@GLIBC_2.2.5
memset
memset@@GLIBC_2.2.5
menu
menu_cancel
menu_select
metadata: %s
min
min. %f
mipSkipCount
miter
mj>
mkdir
mkdir@@GLIBC_2.2.5
mkfifo
mkfifo@@GLIBC_2.2.5
modalClip
modf
modf@@GLIBC_2.2.5
morph fill style begin color:
morph fill style end color:
morph fill style type = 0x%X
morph fsr BitmapChar = %d
morph fsr: numGradients = %d
mount
mount@@GLIBC_2.2.5
mouseWheelEnabled
moveFocus
moveFocus - invalid string id for key: '%s'
moveTo
movieclip
multiline
multiply
mvp
n
namespaceURI
need dictionary
nextFrame
nextSibling
noAdvance
noAutoSelection
noBorder
noInvisibleAdvance
noScale
noTranslate
nodeName
nodeType
nodeValue
none
normal
normalize
notconnected
notify
null
numControllers
numFocusGroups
numFrames
numLines
numMipLevels
numResources
o
offset
offsetPoint
offset[%d] = %d
offset[0] = %d
okOP
onChanged
onConstruct
onData
onDisplayStatusWindow
onDragOut
onDragOutAux
onDragOver
onDragOverAux
onEnterFrame
onHTTPStatus
onIMEComposition
onKeyDown
onKeyUp
onKillFocus
onLoad
onLoadComplete
onLoadError
onLoadInit
onLoadProgress
onLoadStart
onMouseDown
onMouseMove
onMouseUp
onMouseWheel
onPress
onPressAux
onRelease
onReleaseAux
onReleaseOutside
onReleaseOutsideAux
onRemoveStatusWindow
onResize
onRollOut
onRollOver
onScroller
onSetConversionStatus
onSetCurrentInputLanguage
onSetFocus
onSetIMEName
onSetSupportedIMEs
onSetSupportedLanguages
onSockClose
onSockConnect
onSockData
onSockXML
onSwitchLanguage
onUnload
onXMLData
onXMLLoad
open64@@GLIBC_2.2.5
open@@GLIBC_2.2.5
opendir
opendir@@GLIBC_2.2.5
options
originalRect
outer
outline
output gamma out of expected range
overlay
p
p@
p@gamma value
pD
pP
parentNode
parseCSS
parseFloat
parseInt
parseXML
password
pasteFromClipboard
phraseLengthAdj
pixelAspectRatio
pixelBounds
playerType
pm"U
png_do_encode_alpha: unexpected call
png_do_quantize returned rowbytes=0
png_do_rgb_to_gray found nongray pixel
png_inflate logic error
png_set_background
png_set_gAMA
png_write_info was never called before png_write_row
polar
pop
pos
post
pow
pow@@GLIBC_2.2.5
pp@
pre
prefix
preloadDataSize
prevFrame
previousSibling
pthread_attr_destroy
pthread_attr_destroy@@GLIBC_2.2.5
pthread_attr_init
pthread_attr_init@@GLIBC_2.2.5
pthread_attr_setdetachstate
pthread_attr_setdetachstate@@GLIBC_2.2.5
pthread_attr_setschedparam
pthread_attr_setschedparam@@GLIBC_2.2.5
pthread_attr_setstacksize
pthread_attr_setstacksize@@GLIBC_2.2.5
pthread_cond_broadcast
pthread_cond_broadcast@@GLIBC_2.3.2
pthread_cond_destroy
pthread_cond_destroy@@GLIBC_2.3.2
pthread_cond_init
pthread_cond_init@@GLIBC_2.3.2
pthread_cond_signal
pthread_cond_signal@@GLIBC_2.3.2
pthread_cond_timedwait
pthread_cond_timedwait@@GLIBC_2.3.2
pthread_cond_wait
pthread_cond_wait@@GLIBC_2.3.2
pthread_create
pthread_create@@GLIBC_2.2.5
pthread_exit
pthread_exit@@GLIBC_2.2.5
pthread_mutex_destroy
pthread_mutex_destroy@@GLIBC_2.2.5
pthread_mutex_init
pthread_mutex_init@@GLIBC_2.2.5
pthread_mutex_lock
pthread_mutex_lock@@GLIBC_2.2.5
pthread_mutex_trylock
pthread_mutex_trylock@@GLIBC_2.2.5
pthread_mutex_unlock
pthread_mutex_unlock@@GLIBC_2.2.5
pthread_mutexattr_init
pthread_mutexattr_init@@GLIBC_2.2.5
pthread_mutexattr_settype
pthread_mutexattr_settype@@GLIBC_2.2.5
pthread_once
pthread_once@@GLIBC_2.2.5
pthread_self
pthread_self@@GLIBC_2.2.5
ptr( 0x%p )
push
putchar
putchar@@GLIBC_2.2.5
q
q>(
r
r+b
rP
r_drawscaleform
radial
rand
rand@@GLIBC_2.2.5
random
rb
read font "%s"
readdir64
readdir64@@GLIBC_2.2.5
reading DefineCompactedFont:
reading DefineFont
reading DefineFont2:
reading DefineFont3:
reading DefineFontInfo
reading DefineFontInfo2
reading code table at offset %d
readingWindowBackgroundColor
readingWindowFontSize
readingWindowTextColor
realpath
realpath@@GLIBC_2.3
rectangle
redMultiplier
redOffset
reflectivity
registerClass
removeListener
removeMovieClip
removeMovieClip("%s") failed - depth must be >= 0
removeNode
removeTextField
rename
rename@@GLIBC_2.2.5
rendererFloat
rendererString
replaceSel
replaceText
replicated
resource/flash/fontlib.swf
resource/flash/fontlib_extra.swf
resource/flash/fontmapping.cfg
restrict
reverse
rewind
rewind@@GLIBC_2.2.5
rgb
rgb to gray green coefficient
rgb to gray red coefficient
rightMargin
rmdir
rmdir@@GLIBC_2.2.5
rotate
s
sCAL chunk too short
sPLT chunk has bad length
sPLT chunk requires too much memory
sPLT chunk too long
s_pInterfaceRegs
safeRect
safezoney
samples
scale9Grid
scaleMode
scaleform: illegal attempt to set %s to type number# 0x%x
scaleform: script called GetConvar* with %d args
scaleform: script called GetConvar* with bad first argument
scaleform: script called GetPAXAvatarFromName with %d args
scaleform: script called GetPAXAvatarFromName with bad first argument
scaleform: script called setconver with %d args
scaleform: script called setconver with bad first argument
scaleformui
scandir
scandir@@GLIBC_2.2.5
scolor
scolor2
screen
screenColor
screenDPI
screenResolutionX
screenResolutionY
script
scripts/controller_options.txt
scrollRect
selectable
selected
selectedIndexBackgroundColor
selectedTextBackgroundColor
selectedTextColor
selectionBeginIndex
selectionBkgColor
selectionEndIndex
selectionTextColor
send
sendAndLoad
sep
separate_shader_objects
sequential row overflow
serverString
server_can_execute
setCompositionString
setControllerFocusGroup
setConversionMode
setCursorType
setDate
setEmpty
setEnabled
setFocus
setFullYear
setHours
setIMECandidateListStyle
setIMECompositionStringStyle
setImageSubstitutions
setInterval
setMask
setMilliseconds
setMinutes
setModalClip
setMonth
setNewTextFormat
setRGB
setSeconds
setSelectColor
setSelected
setSelection
setStyle
setTextFormat
setTime
setTimeout
setTransform
setUTCDate
setUTCFullYear
setUTCHours
setUTCMilliseconds
setUTCMinutes
setUTCMonth
setUTCSeconds
setUTCYear
setYear
sf4_meshcache_stats
sf_ui_tint
sfuievent
sfuievent action=%s data=%d slot=%d
shadowAlpha
shadowAngle
shadowBlurX
shadowBlurY
shadowColor
shadowDistance
shadowHideObject
shadowKnockOut
shadowOutline
shadowQuality
shadowStrength
shadowStyle
shifttab
show
showAll
showMenu
shrink
sin@@GLIBC_2.2.5
sincos
sincos@@GLIBC_2.2.5
sincosf
sincosf@@GLIBC_2.2.5
sinf
sinf@@GLIBC_2.2.5
single
singleplayer
sleep@@GLIBC_2.2.5
slice
slot
sort
sortOn
splice
split
sprite  char id = %d
sqrt
sqrt@@GLIBC_2.2.5
sqrtf
sqrtf@@GLIBC_2.2.5
square
srctex
srctexscale
ss_added
sscanf@@GLIBC_2.2.5
standalone="no"
standalone="yes"
startDrag
startFrame
status
std::terminate()
stderr
stderr@@GLIBC_2.2.5
steam://openurl/
steam://openurl_external/
stop
stopDrag
strcasecmp
strcasecmp@@GLIBC_2.2.5
strcasestr
strcasestr@@GLIBC_2.2.5
strchr
strchr@@GLIBC_2.2.5
strcmp
strcmp@@GLIBC_2.2.5
strcpy
strcpy@@GLIBC_2.2.5
strcspn
strcspn@@GLIBC_2.2.5
strdup
strdup@@GLIBC_2.2.5
stream
stream end
strength
strlen
strlen@@GLIBC_2.2.5
strncasecmp
strncasecmp@@GLIBC_2.2.5
strncat
strncat@@GLIBC_2.2.5
strncmp
strncmp@@GLIBC_2.2.5
strncpy
strncpy@@GLIBC_2.2.5
strnlen
strnlen@@GLIBC_2.2.5
strpbrk
strpbrk@@GLIBC_2.2.5
strrchr
strrchr@@GLIBC_2.2.5
strspn
strspn@@GLIBC_2.2.5
strstr
strstr@@GLIBC_2.2.5
strtod
strtod@@GLIBC_2.2.5
strtol
strtol@@GLIBC_2.2.5
strtoll
strtoll@@GLIBC_2.2.5
strtoul
strtoul@@GLIBC_2.2.5
strtoull
strtoull@@GLIBC_2.2.5
stub
styleSheet
sub%dx%d.tga
subString
submrg%dx%d.tga
substr
substring
subtract
super
sv_reliableavatardata
swapDepths
swscanf
swscanf@@GLIBC_2.2.5
symlink
symlink@@GLIBC_2.2.5
t
t%
tP
tRNS chunk has out-of-range samples for bit_depth
tRNS chunk not allowed with alpha channel
tabChildren
tabEnabled
tabIndex
tabStops
tag %d: DoInitActionLoader
tan@@GLIBC_2.2.5
tanf
tanf@@GLIBC_2.2.5
tc%d = intc%d * srctexscale;
tc%d = intc%d * texscale;
texgen
text
text compression mode is out of range
text style change
text-align
text-decoration
text-indent
textAlign
textAutoSize
textColor
textDecoration
textFieldHeight
textFieldWidth
textHeight
textIndent
textWidth
thick
this
timer
toLowerCase
toString
toUpperCase
tolower
tolower@@GLIBC_2.2.5
too many length or distance symbols
topLeft
topmostLevel
toupper
toupper@@GLIBC_2.2.5
towlower
towlower@@GLIBC_2.2.5
towupper
towupper@@GLIBC_2.2.5
trace
trackAsMenu
trailing spaces removed from keyword
transform
transformPoint
translate
true
trunc
trunc@@GLIBC_2.2.5
u
u64( %lld = 0x%llX )
undefined
underline
underlineColor
underlineStyle
unescape
unescapeSpecialHTML
uniform mat4 cxmul;uniform mat4 cxmul1;uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_original = texture2D(tex[int(0.0)], tc0);vec4 fcolor_source   = texture2D(tex[int(1.0)], tc1);gl_FragColor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);}
uniform mat4 mvp;attribute vec2 atc;attribute vec4 pos;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc = atc;}
uniform mat4 mvp;attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = (pos) * ( mvp);color = acolor;factor = afactor;}
uniform mat4 mvp;attribute vec4 acolor;attribute vec4 pos;varying vec4 color;void main() {gl_Position = (pos) * ( mvp);color = acolor;}
uniform mat4 mvp;attribute vec4 pos;void main() {gl_Position = (pos) * ( mvp);}
uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 pos;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);}
uniform mat4 mvp;uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( mvp);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);factor = afactor;}
uniform mat4 vfmuniforms[24];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc = atc;}
uniform mat4 vfmuniforms[24];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;factor = afactor;}
uniform mat4 vfmuniforms[24];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);color = acolor;}
uniform mat4 vfmuniforms[24];attribute vec4 pos;attribute float vbatch;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[144];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc = atc;fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);vcolor = acolor * vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];tc = atc;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 2.0 + 1.0+ 0.1)];factor = afactor;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);color = acolor;fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);factor = afactor;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[48];attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);factor = afactor;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
uniform mat4 vfmuniforms[24];uniform vec4 vfuniforms[96];attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
uniform sampler2D srctex;uniform sampler2D tex;varying vec2 tc;void main() {vec4 fchannels = texture2D(tex, tc);gl_FragColor  = texture2D(srctex, vec2(fchannels.r, 0.125));gl_FragColor += texture2D(srctex, vec2(fchannels.g, 0.375));gl_FragColor += texture2D(srctex, vec2(fchannels.b, 0.625));gl_FragColor += texture2D(srctex, vec2(fchannels.a, 0.875));}
uniform sampler2D tex;uniform vec2 texscale;uniform vec4 cxmul;uniform vec4 cxadd;uniform float samples;
uniform sampler2D tex;varying vec2 tc;varying vec4 vcolor;void main() {vec4 c = vcolor;c.a = c.a * texture2D(tex, tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec2 tc;varying vec4 vcolor;void main() {vec4 c = vcolor;c.a = c.a * texture2D(tex, tc).a;gl_FragColor = c;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec2 tc;varying vec4 vcolor;void main() {vec4 c = vcolor;c.a = c.a * texture2D(tex, tc).a;gl_FragColor = c;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {vec4 fcolor0 = texture2D(tex,tc);vec4 fcolor1 = color;gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);vec4 diff = fcolor0 - fcolor1;vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));gl_FragColor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );}
uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;gl_FragColor.a = 1.0;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;gl_FragColor.a = inAlpha;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
uniform sampler2D tex[2];varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);float inAlpha = fcolor_src.a;gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[2];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);gl_FragColor = mix(fcolor1, fcolor0, factor.r);gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;gl_FragColor.a = 1.0;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
uniform sampler2D tex[3];varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;gl_FragColor.a = inAlpha;gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
uniform sampler2D tex[3];varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);float inAlpha = fcolor_src.a * fcolor_alp.a;gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);}
uniform sampler2D tex[3];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[3];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = 1.0;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform sampler2D tex[4];varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);vec4 c = vec4(c0,c0,c0,c0);vec4 U = vec4(U0,U0,U0,U0);vec4 V = vec4(V0,V0,V0,V0);c += V * vec4(1.596, -0.813, 0.0, 0.0);c += U * vec4(0.0, -0.392, 2.017, 0.0);c.a = texture2D(tex[int(3.0)], tc).a;gl_FragColor = c;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform vec2 srctexscale;
uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor = gl_FragColor;}
uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
uniform vec4 cxadd;uniform mat4 cxmul;uniform sampler2D tex;varying vec4 factor;varying vec2 tc;void main() {gl_FragColor = texture2D(tex,tc);gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec2 atc;attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc = atc;fucxadd = cxadd;fucxmul = cxmul;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = (pos) * ( mvp);vcolor = acolor * cxmul + cxadd;tc = atc;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( mvp);color = acolor;fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;attribute vec4 acolor;attribute vec4 pos;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = (pos) * ( mvp);color = acolor;fucxadd = cxadd;fucxmul = cxmul;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[2];attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = (pos) * ( mvp);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform mat4 mvp;uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = (pos) * ( mvp);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec2 atc;attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc = atc;fucxadd = cxadd;fucxmul = cxmul;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);vcolor = acolor * cxmul + cxadd;tc = atc;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 pos;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;fucxadd = cxadd;fucxmul = cxmul;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 pos;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);fucxadd = cxadd;fucxmul = cxmul;}
uniform vec4 cxadd;uniform vec4 cxmul;uniform vec4 mvp[2];uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);fucxadd = cxadd;fucxmul = cxmul;factor = afactor;}
uniform vec4 cxmul;void main() {gl_FragColor = cxmul;gl_FragColor = gl_FragColor;}
uniform vec4 cxmul;void main() {gl_FragColor = cxmul;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 cxmul;void main() {gl_FragColor = cxmul;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);float  i = 0.0;for (i = -fsize.x; i <= fsize.x; i++){{color += texture2DLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);float  i = 0.0;for (i = -fsize.x; i <= fsize.x; i++){{color += texture2DLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + i * texscale.xy, 0.0);}} // EndBox1/2.gl_FragColor = color * fsize.w;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);gl_FragColor = mix(base, scolor, lerpval) * base.a;vec4 knockout = base * (1.0-lerpval) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;vec4 knockout = base;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor -= knockout;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D srctex;uniform vec4 srctexscale;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);vec4 knockout = base;gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 fsize;uniform vec4 offset;uniform vec4 scolor;uniform vec4 scolor2;uniform sampler2D tex;uniform vec4 texscale;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);vec4 color = vec4(0.0, 0.0, 0.0, 0.0);vec2 i = vec2(0.0, 0.0);for (i.x = -fsize.x; i.x <= fsize.x; i.x++){for (i.y = -fsize.y; i.y <= fsize.y; i.y++){color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;}} // EndBox2.gl_FragColor = color * fsize.w;gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
uniform vec4 mvp[2];attribute vec2 atc;attribute vec4 pos;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc = atc;}
uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;factor = afactor;}
uniform vec4 mvp[2];attribute vec4 acolor;attribute vec4 pos;varying vec4 color;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;}
uniform vec4 mvp[2];attribute vec4 pos;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);}
uniform vec4 mvp[2];uniform vec2 texscale;
uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);color = acolor;tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);factor = afactor;}
uniform vec4 mvp[2];uniform vec4 texgen[2];attribute vec4 pos;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc.x = dot(pos, texgen[int(0.0)]);tc.y = dot(pos, texgen[int(1.0)]);}
uniform vec4 mvp[2];uniform vec4 texgen[4];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);factor = afactor;}
uniform vec4 mvp[2];uniform vec4 texgen[4];attribute vec4 pos;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);}
uniform vec4 mvp[2];uniform vec4 texgen[6];attribute vec4 pos;varying vec2 tc0;varying vec2 tc1;varying vec2 tc2;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, mvp[int(0.0)]);gl_Position.y = dot(pos, mvp[int(1.0)]);tc0.x = dot(pos, texgen[int(0.0)]);tc0.y = dot(pos, texgen[int(1.0)]);tc1.x = dot(pos, texgen[int(2.0)]);tc1.y = dot(pos, texgen[int(3.0)]);tc2.x = dot(pos, texgen[int(4.0)]);tc2.y = dot(pos, texgen[int(5.0)]);}
uniform vec4 scolor2;
uniform vec4 scolor;uniform sampler2D srctex;
uniform vec4 vfuniforms[144];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
uniform vec4 vfuniforms[144];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);factor = afactor;}
uniform vec4 vfuniforms[144];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];factor = afactor;}
uniform vec4 vfuniforms[144];attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];}
uniform vec4 vfuniforms[192];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc0;varying vec2 tc1;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];factor = afactor;}
uniform vec4 vfuniforms[48];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);tc = atc;}
uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;factor = afactor;}
uniform vec4 vfuniforms[48];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);color = acolor;}
uniform vec4 vfuniforms[48];attribute vec4 pos;attribute float vbatch;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);}
uniform vec4 vfuniforms[96];attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec4 fucxadd;varying vec4 fucxmul;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);tc = atc;fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec2 atc;attribute vec4 pos;attribute float vbatch;varying vec2 tc;varying vec4 vcolor;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];tc = atc;}
uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);color = acolor;tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 afactor;attribute vec4 pos;varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];factor = afactor;}
uniform vec4 vfuniforms[96];attribute vec4 acolor;attribute vec4 pos;attribute float vbatch;varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);color = acolor;fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];}
uniform vec4 vfuniforms[96];attribute vec4 afactor;attribute vec4 pos;varying vec4 factor;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);factor = afactor;}
uniform vec4 vfuniforms[96];attribute vec4 pos;attribute float vbatch;varying vec2 tc;void main() {gl_Position = vec4(0.0,0,0.0,1);gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);}
union
unknown
unknown compression method
unknown critical chunk
unknown header flags set
unlink
unlink@@GLIBC_2.2.5
unloadClip
unloadMovie
unshift
unwatch
update
updateAfterEvent
updateImageSubstitution
useHandCursor
useRichTextClipboard
user
usleep
usleep@@GLIBC_2.2.5
utime
utime@@GLIBC_2.2.5
utimes
utimes@@GLIBC_2.2.5
uvOrigin.x = %f, uvOrigin.y = %f
v
vQO+
valueOf
variable
varying   vec2 tc%d;
varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;void main() {gl_FragColor = color;gl_FragColor.a *= factor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;void main() {gl_FragColor = color;gl_FragColor.a *= factor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 factor;void main() {gl_FragColor = color;gl_FragColor.a *= factor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;gl_FragColor += fucxadd * gl_FragColor.a;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;varying vec4 fucxadd;varying vec4 fucxmul;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor * fucxmul + fucxadd;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
varying vec4 color;void main() {gl_FragColor = color;gl_FragColor = gl_FragColor;}
varying vec4 color;void main() {gl_FragColor = color;gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;gl_FragColor = gl_FragColor;}
varying vec4 color;void main() {gl_FragColor = color;gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);gl_FragColor = gl_FragColor;}
vbatch
vec4 base = texture2D(srctex, tc%d);
vertical
verticalAlign
verticalAutoSize
vfmuniforms
vfuniforms
visibleRect
void main(void){  vec4 color = vec4(0);
vtable for __cxxabiv1::__class_type_info
vtable for __cxxabiv1::__si_class_type_info
vtable for __cxxabiv1::__vmi_class_type_info
w
w+b
w3(?
wa+
wantControllerShown
wb
wcscasecmp
wcscasecmp@@GLIBC_2.2.5
wcschr
wcschr@@GLIBC_2.2.5
wcscmp
wcscmp@@GLIBC_2.2.5
wcscoll
wcscoll@@GLIBC_2.2.5
wcslen
wcslen@@GLIBC_2.2.5
wcsncat
wcsncat@@GLIBC_2.2.5
wcsncpy
wcsncpy@@GLIBC_2.2.5
wcstof
wcstof@@GLIBC_2.2.5
wcstol
wcstol@@GLIBC_2.2.5
wcstombs
wcstombs@@GLIBC_2.2.5
will be generated from "
windowlessDisable
with %d x %d thumbnail image
wordWrap
x
xMax
xMin
xP
xml version="
xmlDecl
xmlns
y
y9*O
yMax
yMin
z
zD
zError
zP
z_errmsg
zero length keyword
zlib failed to initialize compressor (
zlib failed to reset compressor: @1(@2): @3
zlib memory error
zlib stream error
zlib version error
zlibCompileFlags
zlibVersion
zstream already in use (internal error)
zstream not in use (internal error)
{
{0:sw:,:}{1}
{0} ({1}) from {2} ({3}): {4} times
{0} : {1}
{0} {1} {2:2} {3:02}:{4:02}:{5:02} GMT{6:+03}{7:02} {8}
{0}</MemItem>
{0}<MemItem Name="{1}" Value={2}>
{0}<MemItem Name="{1}">
{|}"
{}()':
|
|P
}
~

D
