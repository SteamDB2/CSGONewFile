 A _DYNAMIC
 A _GLOBAL_OFFSET_TABLE_
 A __bss_start
 A _edata
 A _end
 B AIExtendedSaveHeader_t_DataDescInit::g_DataMapHolder
 B AIN_NO_DEST
 B AIScheduleState_t_DataDescInit::g_DataMapHolder
 B AISquadEnemyInfo_t_DataDescInit::g_DataMapHolder
 B AI_EnemyInfo_t::s_Allocator
 B AI_EnemyInfo_t_DataDescInit::g_DataMapHolder
 B AI_FollowNavInfo_t_DataDescInit::g_DataMapHolder
 B AI_FollowParams_t_DataDescInit::g_DataMapHolder
 B AI_FreePassParams_t_DataDescInit::g_DataMapHolder
 B AI_LeadArgs_t_DataDescInit::g_DataMapHolder
 B AI_ResponseParams_DataDescInit::g_DataMapHolder
 B AI_Response_DataDescInit::g_DataMapHolder
 B AI_StandoffParams_t_DataDescInit::g_DataMapHolder
 B AI_Waypoint_t::s_Allocator
 B AI_Waypoint_t_DataDescInit::g_DataMapHolder
 B BotChatterInterface::m_encourageTimer
 B BotChatterInterface::m_radioSilenceInterval
 B CAISound_DataDescInit::g_DataMapHolder
 B CAI_AccelDecay_DataDescInit::g_DataMapHolder
 B CAI_AllySpeechManager::gm_pSpeechManager
 B CAI_AllySpeechManager_DataDescInit::g_DataMapHolder
 B CAI_AssaultBehavior::gm_ClassScheduleIdSpace
 B CAI_AssaultBehavior_DataDescInit::g_DataMapHolder
 B CAI_AssaultGoal_DataDescInit::g_DataMapHolder
 B CAI_BaseActor_DataDescInit::g_DataMapHolder
 B CAI_BaseFlyingBot_DataDescInit::g_DataMapHolder
 B CAI_BaseNPC::gm_ClassScheduleIdSpace
 B CAI_BaseNPC::gm_SchedulingSymbols
 B CAI_BaseNPC::gm_SquadSlotIdSpace
 B CAI_BaseNPC::gm_SquadSlotNamespace
 B CAI_BaseNPC::gm_flLastThinkRebalanceTime
 B CAI_BaseNPC::gm_flTimeLastSpawn
 B CAI_BaseNPC::gm_iszPlayerSquad
 B CAI_BaseNPC::gm_nSpawnedThisFrame
 B CAI_BaseNPC::m_AnyUpdateEnemyPosTimer
 B CAI_BaseNPC::m_iNumActivities
 B CAI_BaseNPC::m_iNumEvents
 B CAI_BaseNPC::m_nDebugBits
 B CAI_BaseNPC::m_pActivitySR
 B CAI_BaseNPC::m_pDebugNPC
 B CAI_BaseNPC::m_pEventSR
 B CAI_BaseNPC_DataDescInit::g_DataMapHolder
 B CAI_BasePhysicsFlyingBot_DataDescInit::g_DataMapHolder
 B CAI_BattleLine_DataDescInit::g_DataMapHolder
 B CAI_BehaviorBase_DataDescInit::g_DataMapHolder
 B CAI_BlendedMotor_DataDescInit::g_DataMapHolder
 B CAI_ChangeHintGroup_DataDescInit::g_DataMapHolder
 B CAI_ChangeTarget_DataDescInit::g_DataMapHolder
 B CAI_DynamicLink::gm_bInitialized
 B CAI_DynamicLink::m_pAllDynamicLinks
 B CAI_DynamicLinkController_DataDescInit::g_DataMapHolder
 B CAI_DynamicLink_DataDescInit::g_DataMapHolder
 B CAI_Enemies_DataDescInit::g_DataMapHolder
 B CAI_Expresser_DataDescInit::g_DataMapHolder
 B CAI_FollowBehavior::gm_ClassScheduleIdSpace
 B CAI_FollowBehavior_DataDescInit::g_DataMapHolder
 B CAI_FollowGoal_DataDescInit::g_DataMapHolder
 B CAI_FreePass_DataDescInit::g_DataMapHolder
 B CAI_GoalEntity_DataDescInit::g_DataMapHolder
 B CAI_HintManager::gm_pAllHints
 B CAI_HintManager::gm_pLastFoundHint
 B CAI_Hint_DataDescInit::g_DataMapHolder
 B CAI_InterestTarget_t_DataDescInit::g_DataMapHolder
 B CAI_LeadBehavior::gm_ClassScheduleIdSpace
 B CAI_LeadBehavior_DataDescInit::g_DataMapHolder
 B CAI_LeadGoal_DataDescInit::g_DataMapHolder
 B CAI_LeadGoal_Weapon_DataDescInit::g_DataMapHolder
 B CAI_LocalNavigator_DataDescInit::g_DataMapHolder
 B CAI_LookTarget_DataDescInit::g_DataMapHolder
 B CAI_Motor_DataDescInit::g_DataMapHolder
 B CAI_MoveAndShootOverlay_DataDescInit::g_DataMapHolder
 B CAI_MoveMonitor_DataDescInit::g_DataMapHolder
 B CAI_MoveProbe_DataDescInit::g_DataMapHolder
 B CAI_Navigator_DataDescInit::g_DataMapHolder
 B CAI_NetworkEditTools::m_bAirEditMode
 B CAI_NetworkEditTools::m_bLinkEditMode
 B CAI_NetworkEditTools::m_iHullDrawNum
 B CAI_NetworkEditTools::m_pLastDeletedNode
 B CAI_NetworkManager::gm_fNetworksLoaded
 B CAI_NetworkManager_DataDescInit::g_DataMapHolder
 B CAI_Path::gm_InvalidWaypoint
 B CAI_Path_DataDescInit::g_DataMapHolder
 B CAI_Pathfinder_DataDescInit::g_DataMapHolder
 B CAI_PlayerAlly::gm_ClassScheduleIdSpace
 B CAI_PlayerAlly::gm_SquadSlotIdSpace
 B CAI_PlayerAlly_DataDescInit::g_DataMapHolder
 B CAI_ProxTester_DataDescInit::g_DataMapHolder
 B CAI_RappelBehavior::gm_ClassScheduleIdSpace
 B CAI_RappelBehavior_DataDescInit::g_DataMapHolder
 B CAI_ScriptConditions_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSchedule_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSentence_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSequence_DataDescInit::g_DataMapHolder
 B CAI_Senses_DataDescInit::g_DataMapHolder
 B CAI_SentenceBase_DataDescInit::g_DataMapHolder
 B CAI_ShotRegulator_DataDescInit::g_DataMapHolder
 B CAI_SpeechFilter_DataDescInit::g_DataMapHolder
 B CAI_Squad_DataDescInit::g_DataMapHolder
 B CAI_StandoffBehavior::gm_ClassScheduleIdSpace
 B CAI_StandoffBehavior_DataDescInit::g_DataMapHolder
 B CAI_StandoffGoal_DataDescInit::g_DataMapHolder
 B CAI_TacticalServices_DataDescInit::g_DataMapHolder
 B CAI_TestHull::pTestHull
 B CAI_TrackPather_DataDescInit::g_DataMapHolder
 B CAK47_PredDataDescInit::g_PredMapHolder
 B CAmbientGeneric_DataDescInit::g_DataMapHolder
 B CAnimationLayer_DataDescInit::g_DataMapHolder
 B CAreaPortal_DataDescInit::g_DataMapHolder
 B CAssaultPoint_DataDescInit::g_DataMapHolder
 B CBaseAnimatingOverlay_DataDescInit::g_DataMapHolder
 B CBaseAnimatingOverlay_PredDataDescInit::g_PredMapHolder
 B CBaseAnimating_DataDescInit::g_DataMapHolder
 B CBaseAnimating_PredDataDescInit::g_PredMapHolder
 B CBaseButton_DataDescInit::g_DataMapHolder
 B CBaseCSGrenadeProjectile_DataDescInit::g_DataMapHolder
 B CBaseCSGrenade_DataDescInit::g_DataMapHolder
 B CBaseCSGrenade_PredDataDescInit::g_PredMapHolder
 B CBaseCombatCharacter::m_DefaultRelationship
 B CBaseCombatCharacter::m_lastInteraction
 B CBaseCombatCharacter_DataDescInit::g_DataMapHolder
 B CBaseCombatCharacter_PredDataDescInit::g_PredMapHolder
 B CBaseCombatWeapon_DataDescInit::g_DataMapHolder
 B CBaseCombatWeapon_PredDataDescInit::g_PredMapHolder
 B CBaseDMStart_DataDescInit::g_DataMapHolder
 B CBaseDoor_DataDescInit::g_DataMapHolder
 B CBaseEntity::m_bAllowPrecache
 B CBaseEntity::m_bDebugPause
 B CBaseEntity::m_bInDebugSelect
 B CBaseEntity::m_pPredictionPlayer
 B CBaseEntityOutput_DataDescInit::g_DataMapHolder
 B CBaseEntity_DataDescInit::g_DataMapHolder
 B CBaseEntity_PredDataDescInit::g_PredMapHolder
 B CBaseFilter_DataDescInit::g_DataMapHolder
 B CBaseFire_DataDescInit::g_DataMapHolder
 B CBaseFlex_DataDescInit::g_DataMapHolder
 B CBaseFlex_PredDataDescInit::g_PredMapHolder
 B CBaseGrenade_DataDescInit::g_DataMapHolder
 B CBaseGrenade_PredDataDescInit::g_PredMapHolder
 B CBaseMoveBehavior_DataDescInit::g_DataMapHolder
 B CBaseParticleEntity_PredDataDescInit::g_PredMapHolder
 B CBasePlatTrain_DataDescInit::g_DataMapHolder
 B CBasePlayer::s_PlayerEdict
 B CBasePlayer_DataDescInit::g_DataMapHolder
 B CBasePlayer_PredDataDescInit::g_PredMapHolder
 B CBasePropDoor_DataDescInit::g_DataMapHolder
 B CBaseServerVehicle_DataDescInit::g_DataMapHolder
 B CBaseTempEntity::s_pTempEntities
 B CBaseToggle_DataDescInit::g_DataMapHolder
 B CBaseTrigger_DataDescInit::g_DataMapHolder
 B CBaseVPhysicsTrigger_DataDescInit::g_DataMapHolder
 B CBaseViewModel_DataDescInit::g_DataMapHolder
 B CBaseViewModel_PredDataDescInit::g_PredMapHolder
 B CBeam_DataDescInit::g_DataMapHolder
 B CBeam_PredDataDescInit::g_PredMapHolder
 B CBlendingCycler_DataDescInit::g_DataMapHolder
 B CBlood_DataDescInit::g_DataMapHolder
 B CBombTarget_DataDescInit::g_DataMapHolder
 B CBoneFollower_DataDescInit::g_DataMapHolder
 B CBreakableProp_DataDescInit::g_DataMapHolder
 B CBreakableSurface_DataDescInit::g_DataMapHolder
 B CBreakable_DataDescInit::g_DataMapHolder
 B CBubbling_DataDescInit::g_DataMapHolder
 B CBuyZone_DataDescInit::g_DataMapHolder
 B CC4_PredDataDescInit::g_PredMapHolder
 B CCSBot::m_partInfo
 B CCSBotManager::m_isMapDataLoaded
 B CCSBot_DataDescInit::g_DataMapHolder
 B CCSPlayerResource_DataDescInit::g_DataMapHolder
 B CCSPlayer_DataDescInit::g_DataMapHolder
 B CCSPlayer_PredDataDescInit::g_PredMapHolder
 B CChangeLevel_DataDescInit::g_DataMapHolder
 B CCollisionProperty_DataDescInit::g_DataMapHolder
 B CCollisionProperty_PredDataDescInit::g_PredMapHolder
 B CConstantForceController_DataDescInit::g_DataMapHolder
 B CConstraintAnchor_DataDescInit::g_DataMapHolder
 B CCopyRecipientFilter_DataDescInit::g_DataMapHolder
 B CCredits_DataDescInit::g_DataMapHolder
 B CCycler_DataDescInit::g_DataMapHolder
 B CDEagle_PredDataDescInit::g_PredMapHolder
 B CDecal_DataDescInit::g_DataMapHolder
 B CDynamicLight_DataDescInit::g_DataMapHolder
 B CDynamicProp_DataDescInit::g_DataMapHolder
 B CEmbers_DataDescInit::g_DataMapHolder
 B CEntityClassList<CPhysicsNPCSolver>::m_pClassList
 B CEntityClassList<CPointCamera>::m_pClassList
 B CEntityClassList<CSkyCamera>::m_pClassList
 B CEntityDissolve_DataDescInit::g_DataMapHolder
 B CEntityFlame_DataDescInit::g_DataMapHolder
 B CEntityParticleTrail_DataDescInit::g_DataMapHolder
 B CEnvBeam_DataDescInit::g_DataMapHolder
 B CEnvBeverage_DataDescInit::g_DataMapHolder
 B CEnvDustPuff_DataDescInit::g_DataMapHolder
 B CEnvEffectsScript_DataDescInit::g_DataMapHolder
 B CEnvEntityMaker_DataDescInit::g_DataMapHolder
 B CEnvExplosion_DataDescInit::g_DataMapHolder
 B CEnvFade_DataDescInit::g_DataMapHolder
 B CEnvFireSensor_DataDescInit::g_DataMapHolder
 B CEnvFireSource_DataDescInit::g_DataMapHolder
 B CEnvFunnel_DataDescInit::g_DataMapHolder
 B CEnvGlobal_DataDescInit::g_DataMapHolder
 B CEnvGunfire_DataDescInit::g_DataMapHolder
 B CEnvHudHint_DataDescInit::g_DataMapHolder
 B CEnvLaser_DataDescInit::g_DataMapHolder
 B CEnvMicrophone_DataDescInit::g_DataMapHolder
 B CEnvMuzzleFlash_DataDescInit::g_DataMapHolder
 B CEnvParticleScript_DataDescInit::g_DataMapHolder
 B CEnvPlayerSurfaceTrigger_DataDescInit::g_DataMapHolder
 B CEnvQuadraticBeam_DataDescInit::g_DataMapHolder
 B CEnvScreenOverlay_DataDescInit::g_DataMapHolder
 B CEnvShake_DataDescInit::g_DataMapHolder
 B CEnvShooter_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeProxy_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeTriggerable_DataDescInit::g_DataMapHolder
 B CEnvSoundscape_DataDescInit::g_DataMapHolder
 B CEnvSpark_DataDescInit::g_DataMapHolder
 B CEnvSplash_DataDescInit::g_DataMapHolder
 B CEnvTracer_DataDescInit::g_DataMapHolder
 B CEnvWind_DataDescInit::g_DataMapHolder
 B CEnvZoom_DataDescInit::g_DataMapHolder
 B CEventAction::s_iNextIDStamp
 B CEventAction_DataDescInit::g_DataMapHolder
 B CEventQueue_DataDescInit::g_DataMapHolder
 B CFilterClass_DataDescInit::g_DataMapHolder
 B CFilterMultiple_DataDescInit::g_DataMapHolder
 B CFilterName_DataDescInit::g_DataMapHolder
 B CFireSmoke_DataDescInit::g_DataMapHolder
 B CFire_DataDescInit::g_DataMapHolder
 B CFishPool_DataDescInit::g_DataMapHolder
 B CFish_DataDescInit::g_DataMapHolder
 B CFlashbang_DataDescInit::g_DataMapHolder
 B CFlashbang_PredDataDescInit::g_PredMapHolder
 B CFlexCycler_DataDescInit::g_DataMapHolder
 B CFlextalkActor_DataDescInit::g_DataMapHolder
 B CFogController::s_pFogController
 B CFogController_DataDescInit::g_DataMapHolder
 B CFourWheelVehiclePhysics_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalBase_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalWindow_DataDescInit::g_DataMapHolder
 B CFuncBrush_DataDescInit::g_DataMapHolder
 B CFuncConveyor_DataDescInit::g_DataMapHolder
 B CFuncLadder::s_Ladders
 B CFuncLadder_DataDescInit::g_DataMapHolder
 B CFuncMonitor_DataDescInit::g_DataMapHolder
 B CFuncMoveLinear_DataDescInit::g_DataMapHolder
 B CFuncOccluder_DataDescInit::g_DataMapHolder
 B CFuncPlatRot_DataDescInit::g_DataMapHolder
 B CFuncPlat_DataDescInit::g_DataMapHolder
 B CFuncRotating_DataDescInit::g_DataMapHolder
 B CFuncSmokeVolume_DataDescInit::g_DataMapHolder
 B CFuncTankTrain_DataDescInit::g_DataMapHolder
 B CFuncTrackAuto_DataDescInit::g_DataMapHolder
 B CFuncTrackChange_DataDescInit::g_DataMapHolder
 B CFuncTrackTrain_DataDescInit::g_DataMapHolder
 B CFuncTrainControls_DataDescInit::g_DataMapHolder
 B CFuncTrain_DataDescInit::g_DataMapHolder
 B CFuncVPhysicsClip_DataDescInit::g_DataMapHolder
 B CFuncWallToggle_DataDescInit::g_DataMapHolder
 B CFuncWall_DataDescInit::g_DataMapHolder
 B CFunc_Dust_DataDescInit::g_DataMapHolder
 B CFunc_LOD_DataDescInit::g_DataMapHolder
 B CGameEnd_DataDescInit::g_DataMapHolder
 B CGamePlayerEquip_DataDescInit::g_DataMapHolder
 B CGamePlayerZone_DataDescInit::g_DataMapHolder
 B CGameRulesProxy::s_pGameRulesProxy
 B CGameRulesRegister::s_pHead
 B CGameScore_DataDescInit::g_DataMapHolder
 B CGameText_DataDescInit::g_DataMapHolder
 B CGameUI_DataDescInit::g_DataMapHolder
 B CGameWeaponManager_DataDescInit::g_DataMapHolder
 B CGenericActor_DataDescInit::g_DataMapHolder
 B CGibShooter_DataDescInit::g_DataMapHolder
 B CGib_DataDescInit::g_DataMapHolder
 B CGlobalState_DataDescInit::g_DataMapHolder
 B CGunTarget_DataDescInit::g_DataMapHolder
 B CHEGrenade_DataDescInit::g_DataMapHolder
 B CHEGrenade_PredDataDescInit::g_PredMapHolder
 B CHostageRescueZone_DataDescInit::g_DataMapHolder
 B CHostage_DataDescInit::g_DataMapHolder
 B CInfoCameraLink_DataDescInit::g_DataMapHolder
 B CInfoLightingRelative_DataDescInit::g_DataMapHolder
 B CInfoViewParameters_DataDescInit::g_DataMapHolder
 B CInstancedSceneEntity_DataDescInit::g_DataMapHolder
 B CItemDefuser_DataDescInit::g_DataMapHolder
 B CItemSoda_DataDescInit::g_DataMapHolder
 B CItem_DataDescInit::g_DataMapHolder
 B CKeepUpright_DataDescInit::g_DataMapHolder
 B CKnife_DataDescInit::g_DataMapHolder
 B CKnife_PredDataDescInit::g_PredMapHolder
 B CLightGlow_DataDescInit::g_DataMapHolder
 B CLight_DataDescInit::g_DataMapHolder
 B CLogicAuto_DataDescInit::g_DataMapHolder
 B CLogicAutosave_DataDescInit::g_DataMapHolder
 B CLogicBranch_DataDescInit::g_DataMapHolder
 B CLogicCase_DataDescInit::g_DataMapHolder
 B CLogicCollisionPair_DataDescInit::g_DataMapHolder
 B CLogicCompareInteger_DataDescInit::g_DataMapHolder
 B CLogicCompare_DataDescInit::g_DataMapHolder
 B CLogicLineToEntity_DataDescInit::g_DataMapHolder
 B CLogicMeasureMovement_DataDescInit::g_DataMapHolder
 B CLogicNavigation_DataDescInit::g_DataMapHolder
 B CLogicRelay_DataDescInit::g_DataMapHolder
 B CMaterialModifyControl_DataDescInit::g_DataMapHolder
 B CMathColorBlend_DataDescInit::g_DataMapHolder
 B CMathCounter_DataDescInit::g_DataMapHolder
 B CMathRemap_DataDescInit::g_DataMapHolder
 B CMemoryPool::g_ReportFunc
 B CMessageEntity_DataDescInit::g_DataMapHolder
 B CMessage_DataDescInit::g_DataMapHolder
 B CMomentaryRotButton_DataDescInit::g_DataMapHolder
 B CMotorController_DataDescInit::g_DataMapHolder
 B CMovementSpeedMod_DataDescInit::g_DataMapHolder
 B CMultiDamage_DataDescInit::g_DataMapHolder
 B CMultiSource_DataDescInit::g_DataMapHolder
 B CNPC_Furniture_DataDescInit::g_DataMapHolder
 B CNPC_VehicleDriver::gm_ClassScheduleIdSpace
 B CNPC_VehicleDriver::gm_SquadSlotIdSpace
 B CNPC_VehicleDriver_DataDescInit::g_DataMapHolder
 B CNavArea::m_isReset
 B CNavArea::m_openList
 B CNavNode::m_list
 B CNavNode::m_listLength
 B CNodeEnt::m_nNodeCount
 B CNodeEnt_DataDescInit::g_DataMapHolder
 B COrnamentProp_DataDescInit::g_DataMapHolder
 B CParticleFire_DataDescInit::g_DataMapHolder
 B CParticleLight_DataDescInit::g_DataMapHolder
 B CPathCorner_DataDescInit::g_DataMapHolder
 B CPathKeyFrame_DataDescInit::g_DataMapHolder
 B CPathTrack::s_bIsIterating
 B CPathTrack::s_nCurrIterVal
 B CPathTrack_DataDescInit::g_DataMapHolder
 B CPhysBoxMultiplayer_DataDescInit::g_DataMapHolder
 B CPhysBox_DataDescInit::g_DataMapHolder
 B CPhysConstraintSystem_DataDescInit::g_DataMapHolder
 B CPhysConstraint_DataDescInit::g_DataMapHolder
 B CPhysConvert_DataDescInit::g_DataMapHolder
 B CPhysExplosion_DataDescInit::g_DataMapHolder
 B CPhysForce_DataDescInit::g_DataMapHolder
 B CPhysHinge_DataDescInit::g_DataMapHolder
 B CPhysImpact_DataDescInit::g_DataMapHolder
 B CPhysLength_DataDescInit::g_DataMapHolder
 B CPhysMagnet_DataDescInit::g_DataMapHolder
 B CPhysMotor_DataDescInit::g_DataMapHolder
 B CPhysPulley_DataDescInit::g_DataMapHolder
 B CPhysSlideConstraint_DataDescInit::g_DataMapHolder
 B CPhysThruster_DataDescInit::g_DataMapHolder
 B CPhysTorque_DataDescInit::g_DataMapHolder
 B CPhysicsCannister_DataDescInit::g_DataMapHolder
 B CPhysicsEntitySolver_DataDescInit::g_DataMapHolder
 B CPhysicsNPCSolver_DataDescInit::g_DataMapHolder
 B CPhysicsPropMultiplayer_DataDescInit::g_DataMapHolder
 B CPhysicsPropRespawnable_DataDescInit::g_DataMapHolder
 B CPhysicsProp_DataDescInit::g_DataMapHolder
 B CPhysicsShake_DataDescInit::g_DataMapHolder
 B CPhysicsSpring_DataDescInit::g_DataMapHolder
 B CPhysicsWind_DataDescInit::g_DataMapHolder
 B CPhysicsWire_DataDescInit::g_DataMapHolder
 B CPlantedC4_DataDescInit::g_DataMapHolder
 B CPlantedC4_PredDataDescInit::g_PredMapHolder
 B CPlasma_DataDescInit::g_DataMapHolder
 B CPlayerLocalData_DataDescInit::g_DataMapHolder
 B CPlayerLocalData_PredDataDescInit::g_PredMapHolder
 B CPlayerResource_DataDescInit::g_DataMapHolder
 B CPlayerState_DataDescInit::g_DataMapHolder
 B CPlayerState_PredDataDescInit::g_PredMapHolder
 B CPointAngleSensor_DataDescInit::g_DataMapHolder
 B CPointAngularVelocitySensor_DataDescInit::g_DataMapHolder
 B CPointCamera_DataDescInit::g_DataMapHolder
 B CPointClientCommand_DataDescInit::g_DataMapHolder
 B CPointDevShotCamera_DataDescInit::g_DataMapHolder
 B CPointHurt_DataDescInit::g_DataMapHolder
 B CPointPlayerMoveConstraint_DataDescInit::g_DataMapHolder
 B CPointServerCommand_DataDescInit::g_DataMapHolder
 B CPointSpotlight_DataDescInit::g_DataMapHolder
 B CPointTeleport_DataDescInit::g_DataMapHolder
 B CPointTemplate_DataDescInit::g_DataMapHolder
 B CPrecipitation_DataDescInit::g_DataMapHolder
 B CProjectedDecal_DataDescInit::g_DataMapHolder
 B CPropDoorRotating_DataDescInit::g_DataMapHolder
 B CPropJeep_DataDescInit::g_DataMapHolder
 B CPropVehicleDriveable_DataDescInit::g_DataMapHolder
 B CPropVehicle_DataDescInit::g_DataMapHolder
 B CPushBlockerEnum::s_nEnumCount
 B CRagdollBoogie_DataDescInit::g_DataMapHolder
 B CRagdollConstraint_DataDescInit::g_DataMapHolder
 B CRagdollMagnet_DataDescInit::g_DataMapHolder
 B CRagdollManager_DataDescInit::g_DataMapHolder
 B CRagdollPropAttached_DataDescInit::g_DataMapHolder
 B CRagdollProp_DataDescInit::g_DataMapHolder
 B CRallyPoint_DataDescInit::g_DataMapHolder
 B CRandSimTimer_DataDescInit::g_DataMapHolder
 B CRandStopwatch_DataDescInit::g_DataMapHolder
 B CRevertSaved_DataDescInit::g_DataMapHolder
 B CRopeAnchor_DataDescInit::g_DataMapHolder
 B CRopeKeyframe_DataDescInit::g_DataMapHolder
 B CRotDoor_DataDescInit::g_DataMapHolder
 B CRotorWashShooter_DataDescInit::g_DataMapHolder
 B CRuleEntity_DataDescInit::g_DataMapHolder
 B CRulePointEntity_DataDescInit::g_DataMapHolder
 B CSceneEntity_DataDescInit::g_DataMapHolder
 B CSceneManager_DataDescInit::g_DataMapHolder
 B CScriptedTarget_DataDescInit::g_DataMapHolder
 B CShadowControl_DataDescInit::g_DataMapHolder
 B CSimTimer_DataDescInit::g_DataMapHolder
 B CSimpleSimTimer_DataDescInit::g_DataMapHolder
 B CSkyCamera_DataDescInit::g_DataMapHolder
 B CSmokeGrenadeProjectile_DataDescInit::g_DataMapHolder
 B CSmokeGrenade_DataDescInit::g_DataMapHolder
 B CSmokeGrenade_PredDataDescInit::g_PredMapHolder
 B CSmokeStackLightInfo_DataDescInit::g_DataMapHolder
 B CSmokeStack_DataDescInit::g_DataMapHolder
 B CSoundEnt_DataDescInit::g_DataMapHolder
 B CSoundEnvelope_DataDescInit::g_DataMapHolder
 B CSoundPatch::g_SoundPatchCount
 B CSoundPatch::s_Allocator
 B CSoundPatch_DataDescInit::g_DataMapHolder
 B CSound_DataDescInit::g_DataMapHolder
 B CSpotlightEnd_DataDescInit::g_DataMapHolder
 B CSpriteTrail_DataDescInit::g_DataMapHolder
 B CSpriteTrail_PredDataDescInit::g_PredMapHolder
 B CSprite_DataDescInit::g_DataMapHolder
 B CSprite_PredDataDescInit::g_PredMapHolder
 B CSteamJet_DataDescInit::g_DataMapHolder
 B CStopwatchBase_DataDescInit::g_DataMapHolder
 B CStopwatch_DataDescInit::g_DataMapHolder
 B CStressEntityReg::s_pHead
 B CStripWeapons_DataDescInit::g_DataMapHolder
 B CSun_DataDescInit::g_DataMapHolder
 B CSurroundTest_DataDescInit::g_DataMapHolder
 B CTakeDamageInfo_DataDescInit::g_DataMapHolder
 B CTankTargetChange_DataDescInit::g_DataMapHolder
 B CTankTrainAI_DataDescInit::g_DataMapHolder
 B CTargetCDAudioRep_DataDescInit::g_DataMapHolder
 B CTargetChangeGravity_DataDescInit::g_DataMapHolder
 B CTeamSpawnPoint_DataDescInit::g_DataMapHolder
 B CTeamVehicleSpawnPoint_DataDescInit::g_DataMapHolder
 B CTerrainMorph_DataDescInit::g_DataMapHolder
 B CTesla_DataDescInit::g_DataMapHolder
 B CTestTraceline_DataDescInit::g_DataMapHolder
 B CTextStatFile::s_pHead
 B CTextureToggle_DataDescInit::g_DataMapHolder
 B CThrustController_DataDescInit::g_DataMapHolder
 B CTimerEntity_DataDescInit::g_DataMapHolder
 B CTriggerBrush_DataDescInit::g_DataMapHolder
 B CTriggerCamera_DataDescInit::g_DataMapHolder
 B CTriggerGravity_DataDescInit::g_DataMapHolder
 B CTriggerHurt_DataDescInit::g_DataMapHolder
 B CTriggerImpact_DataDescInit::g_DataMapHolder
 B CTriggerLook_DataDescInit::g_DataMapHolder
 B CTriggerMultiple_DataDescInit::g_DataMapHolder
 B CTriggerPlayerMovement_DataDescInit::g_DataMapHolder
 B CTriggerProximity_DataDescInit::g_DataMapHolder
 B CTriggerPush_DataDescInit::g_DataMapHolder
 B CTriggerRemove_DataDescInit::g_DataMapHolder
 B CTriggerSave_DataDescInit::g_DataMapHolder
 B CTriggerSoundscape_DataDescInit::g_DataMapHolder
 B CTriggerTeleport_DataDescInit::g_DataMapHolder
 B CTriggerToggleSave_DataDescInit::g_DataMapHolder
 B CTriggerVPhysicsMotion_DataDescInit::g_DataMapHolder
 B CTriggerWind_DataDescInit::g_DataMapHolder
 B CUtlSymbol::s_pSymbolTable
 B CVGuiScreen_DataDescInit::g_DataMapHolder
 B CWaterBullet_DataDescInit::g_DataMapHolder
 B CWaterLODControl_DataDescInit::g_DataMapHolder
 B CWeaponAWP_DataDescInit::g_DataMapHolder
 B CWeaponAWP_PredDataDescInit::g_PredMapHolder
 B CWeaponAug_PredDataDescInit::g_PredMapHolder
 B CWeaponCSBaseGun_PredDataDescInit::g_PredMapHolder
 B CWeaponCSBase_DataDescInit::g_DataMapHolder
 B CWeaponCSBase_PredDataDescInit::g_PredMapHolder
 B CWeaponCycler_DataDescInit::g_DataMapHolder
 B CWeaponElite_PredDataDescInit::g_PredMapHolder
 B CWeaponFamas_PredDataDescInit::g_PredMapHolder
 B CWeaponFiveSeven_PredDataDescInit::g_PredMapHolder
 B CWeaponG3SG1_PredDataDescInit::g_PredMapHolder
 B CWeaponGalil_PredDataDescInit::g_PredMapHolder
 B CWeaponGlock_PredDataDescInit::g_PredMapHolder
 B CWeaponM249_PredDataDescInit::g_PredMapHolder
 B CWeaponM3_PredDataDescInit::g_PredMapHolder
 B CWeaponM4A1_PredDataDescInit::g_PredMapHolder
 B CWeaponMAC10_PredDataDescInit::g_PredMapHolder
 B CWeaponMP5Navy_PredDataDescInit::g_PredMapHolder
 B CWeaponP228_PredDataDescInit::g_PredMapHolder
 B CWeaponP90_PredDataDescInit::g_PredMapHolder
 B CWeaponSG550_PredDataDescInit::g_PredMapHolder
 B CWeaponSG552_PredDataDescInit::g_PredMapHolder
 B CWeaponScout_PredDataDescInit::g_PredMapHolder
 B CWeaponTMP_PredDataDescInit::g_PredMapHolder
 B CWeaponUMP45_PredDataDescInit::g_PredMapHolder
 B CWeaponUSP_PredDataDescInit::g_PredMapHolder
 B CWeaponXM1014_PredDataDescInit::g_PredMapHolder
 B CWindowPane_DataDescInit::g_DataMapHolder
 B CWorldItem_DataDescInit::g_DataMapHolder
 B CWorld_DataDescInit::g_DataMapHolder
 B CWreckage_DataDescInit::g_DataMapHolder
 B ConCommandBase::s_pAccessor
 B ConCommandBase::s_pConCommandBases
 B ConceptHistory_t_DataDescInit::g_DataMapHolder
 B DT_AI_BaseNPC::g_SendTable
 B DT_AI_BaseNPC::g_SendTableInit
 B DT_AnimTimeMustBeFirst::g_SendTable
 B DT_AnimTimeMustBeFirst::g_SendTableInit
 B DT_Animationlayer::g_SendTable
 B DT_Animationlayer::g_SendTableInit
 B DT_BCCLocalPlayerExclusive::g_SendTable
 B DT_BCCLocalPlayerExclusive::g_SendTableInit
 B DT_BaseAnimating::g_SendTable
 B DT_BaseAnimating::g_SendTableInit
 B DT_BaseAnimatingOverlay::g_SendTable
 B DT_BaseAnimatingOverlay::g_SendTableInit
 B DT_BaseBeam::g_SendTable
 B DT_BaseBeam::g_SendTableInit
 B DT_BaseCSGrenade::g_SendTable
 B DT_BaseCSGrenade::g_SendTableInit
 B DT_BaseCSGrenadeProjectile::g_SendTable
 B DT_BaseCSGrenadeProjectile::g_SendTableInit
 B DT_BaseCombatCharacter::g_SendTable
 B DT_BaseCombatCharacter::g_SendTableInit
 B DT_BaseCombatWeapon::g_SendTable
 B DT_BaseCombatWeapon::g_SendTableInit
 B DT_BaseDoor::g_SendTable
 B DT_BaseDoor::g_SendTableInit
 B DT_BaseEntity::g_SendTable
 B DT_BaseEntity::g_SendTableInit
 B DT_BaseFlex::g_SendTable
 B DT_BaseFlex::g_SendTableInit
 B DT_BaseGrenade::g_SendTable
 B DT_BaseGrenade::g_SendTableInit
 B DT_BaseParticleEntity::g_SendTable
 B DT_BaseParticleEntity::g_SendTableInit
 B DT_BasePlayer::g_SendTable
 B DT_BasePlayer::g_SendTableInit
 B DT_BasePropDoor::g_SendTable
 B DT_BasePropDoor::g_SendTableInit
 B DT_BaseTempEntity::g_SendTable
 B DT_BaseTempEntity::g_SendTableInit
 B DT_BaseViewModel::g_SendTable
 B DT_BaseViewModel::g_SendTableInit
 B DT_Beam::g_SendTable
 B DT_Beam::g_SendTableInit
 B DT_BeamPredictableId::g_SendTable
 B DT_BeamPredictableId::g_SendTableInit
 B DT_BoneFollower::g_SendTable
 B DT_BoneFollower::g_SendTableInit
 B DT_BreakableProp::g_SendTable
 B DT_BreakableProp::g_SendTableInit
 B DT_BreakableSurface::g_SendTable
 B DT_BreakableSurface::g_SendTableInit
 B DT_CFish::g_SendTable
 B DT_CFish::g_SendTableInit
 B DT_CHostage::g_SendTable
 B DT_CHostage::g_SendTableInit
 B DT_CSGameRules::g_SendTable
 B DT_CSGameRules::g_SendTableInit
 B DT_CSGameRulesProxy::g_SendTable
 B DT_CSGameRulesProxy::g_SendTableInit
 B DT_CSLocalPlayerExclusive::g_SendTable
 B DT_CSLocalPlayerExclusive::g_SendTableInit
 B DT_CSNonLocalPlayerExclusive::g_SendTable
 B DT_CSNonLocalPlayerExclusive::g_SendTableInit
 B DT_CSPlayer::g_SendTable
 B DT_CSPlayer::g_SendTableInit
 B DT_CSPlayerResource::g_SendTable
 B DT_CSPlayerResource::g_SendTableInit
 B DT_CSRagdoll::g_SendTable
 B DT_CSRagdoll::g_SendTableInit
 B DT_CSTeam::g_SendTable
 B DT_CSTeam::g_SendTableInit
 B DT_CollisionProperty::g_SendTable
 B DT_CollisionProperty::g_SendTableInit
 B DT_DetailController::g_SendTable
 B DT_DetailController::g_SendTableInit
 B DT_DynamicLight::g_SendTable
 B DT_DynamicLight::g_SendTableInit
 B DT_DynamicProp::g_SendTable
 B DT_DynamicProp::g_SendTableInit
 B DT_EffectData::g_SendTable
 B DT_EffectData::g_SendTableInit
 B DT_Embers::g_SendTable
 B DT_Embers::g_SendTableInit
 B DT_EntityDissolve::g_SendTable
 B DT_EntityDissolve::g_SendTableInit
 B DT_EntityFlame::g_SendTable
 B DT_EntityFlame::g_SendTableInit
 B DT_EntityParticleTrail::g_SendTable
 B DT_EntityParticleTrail::g_SendTableInit
 B DT_EntityParticleTrailInfo::g_SendTable
 B DT_EntityParticleTrailInfo::g_SendTableInit
 B DT_EnvParticleScript::g_SendTable
 B DT_EnvParticleScript::g_SendTableInit
 B DT_EnvScreenOverlay::g_SendTable
 B DT_EnvScreenOverlay::g_SendTableInit
 B DT_EnvWind::g_SendTable
 B DT_EnvWind::g_SendTableInit
 B DT_EnvWindShared::g_SendTable
 B DT_EnvWindShared::g_SendTableInit
 B DT_FireSmoke::g_SendTable
 B DT_FireSmoke::g_SendTableInit
 B DT_Flashbang::g_SendTable
 B DT_Flashbang::g_SendTableInit
 B DT_FuncAreaPortalWindow::g_SendTable
 B DT_FuncAreaPortalWindow::g_SendTableInit
 B DT_FuncConveyor::g_SendTable
 B DT_FuncConveyor::g_SendTableInit
 B DT_FuncLadder::g_SendTable
 B DT_FuncLadder::g_SendTableInit
 B DT_FuncMonitor::g_SendTable
 B DT_FuncMonitor::g_SendTableInit
 B DT_FuncOccluder::g_SendTable
 B DT_FuncOccluder::g_SendTableInit
 B DT_FuncSmokeVolume::g_SendTable
 B DT_FuncSmokeVolume::g_SendTableInit
 B DT_FuncTrackTrain::g_SendTable
 B DT_FuncTrackTrain::g_SendTableInit
 B DT_Func_Dust::g_SendTable
 B DT_Func_Dust::g_SendTableInit
 B DT_Func_LOD::g_SendTable
 B DT_Func_LOD::g_SendTableInit
 B DT_GameRulesProxy::g_SendTable
 B DT_GameRulesProxy::g_SendTableInit
 B DT_HEGrenade::g_SendTable
 B DT_HEGrenade::g_SendTableInit
 B DT_HandleTest::g_SendTable
 B DT_HandleTest::g_SendTableInit
 B DT_InfoLadderDismount::g_SendTable
 B DT_InfoLadderDismount::g_SendTableInit
 B DT_InfoLightingRelative::g_SendTable
 B DT_InfoLightingRelative::g_SendTableInit
 B DT_LightGlow::g_SendTable
 B DT_LightGlow::g_SendTableInit
 B DT_Local::g_SendTable
 B DT_Local::g_SendTableInit
 B DT_LocalActiveWeaponData::g_SendTable
 B DT_LocalActiveWeaponData::g_SendTableInit
 B DT_LocalActiveWeaponKnifeData::g_SendTable
 B DT_LocalActiveWeaponKnifeData::g_SendTableInit
 B DT_LocalPlayerExclusive::g_SendTable
 B DT_LocalPlayerExclusive::g_SendTableInit
 B DT_LocalWeaponData::g_SendTable
 B DT_LocalWeaponData::g_SendTableInit
 B DT_MaterialModifyControl::g_SendTable
 B DT_MaterialModifyControl::g_SendTableInit
 B DT_MovieExplosion::g_SendTable
 B DT_MovieExplosion::g_SendTableInit
 B DT_OverlayVars::g_SendTable
 B DT_OverlayVars::g_SendTableInit
 B DT_ParticleFire::g_SendTable
 B DT_ParticleFire::g_SendTableInit
 B DT_ParticleSmokeGrenade::g_SendTable
 B DT_ParticleSmokeGrenade::g_SendTableInit
 B DT_PhysBox::g_SendTable
 B DT_PhysBox::g_SendTableInit
 B DT_PhysBoxMultiplayer::g_SendTable
 B DT_PhysBoxMultiplayer::g_SendTableInit
 B DT_PhysMagnet::g_SendTable
 B DT_PhysMagnet::g_SendTableInit
 B DT_PhysicsProp::g_SendTable
 B DT_PhysicsProp::g_SendTableInit
 B DT_PhysicsPropMultiplayer::g_SendTable
 B DT_PhysicsPropMultiplayer::g_SendTableInit
 B DT_PlantedC4::g_SendTable
 B DT_PlantedC4::g_SendTableInit
 B DT_Plasma::g_SendTable
 B DT_Plasma::g_SendTableInit
 B DT_PlayerResource::g_SendTable
 B DT_PlayerResource::g_SendTableInit
 B DT_PlayerState::g_SendTable
 B DT_PlayerState::g_SendTableInit
 B DT_PointCamera::g_SendTable
 B DT_PointCamera::g_SendTableInit
 B DT_Precipitation::g_SendTable
 B DT_Precipitation::g_SendTableInit
 B DT_PredictableId::g_SendTable
 B DT_PredictableId::g_SendTableInit
 B DT_PredictedViewModel::g_SendTable
 B DT_PredictedViewModel::g_SendTableInit
 B DT_PropJeep::g_SendTable
 B DT_PropJeep::g_SendTableInit
 B DT_PropVehicleDriveable::g_SendTable
 B DT_PropVehicleDriveable::g_SendTableInit
 B DT_ProxyToggle::g_SendTable
 B DT_ProxyToggle::g_SendTableInit
 B DT_ProxyToggle_ProxiedData::g_SendTable
 B DT_ProxyToggle_ProxiedData::g_SendTableInit
 B DT_QuadraticBeam::g_SendTable
 B DT_QuadraticBeam::g_SendTableInit
 B DT_Ragdoll::g_SendTable
 B DT_Ragdoll::g_SendTableInit
 B DT_RagdollManager::g_SendTable
 B DT_RagdollManager::g_SendTableInit
 B DT_Ragdoll_Attached::g_SendTable
 B DT_Ragdoll_Attached::g_SendTableInit
 B DT_RopeKeyframe::g_SendTable
 B DT_RopeKeyframe::g_SendTableInit
 B DT_ServerAnimationData::g_SendTable
 B DT_ServerAnimationData::g_SendTableInit
 B DT_ShadowControl::g_SendTable
 B DT_ShadowControl::g_SendTableInit
 B DT_SmokeGrenade::g_SendTable
 B DT_SmokeGrenade::g_SendTableInit
 B DT_SmokeStack::g_SendTable
 B DT_SmokeStack::g_SendTableInit
 B DT_SpotlightEnd::g_SendTable
 B DT_SpotlightEnd::g_SendTableInit
 B DT_Sprite::g_SendTable
 B DT_Sprite::g_SendTableInit
 B DT_SpriteTrail::g_SendTable
 B DT_SpriteTrail::g_SendTableInit
 B DT_SteamJet::g_SendTable
 B DT_SteamJet::g_SendTableInit
 B DT_Sun::g_SendTable
 B DT_Sun::g_SendTableInit
 B DT_TEArmorRicochet::g_SendTable
 B DT_TEArmorRicochet::g_SendTableInit
 B DT_TEBSPDecal::g_SendTable
 B DT_TEBSPDecal::g_SendTableInit
 B DT_TEBeamEntPoint::g_SendTable
 B DT_TEBeamEntPoint::g_SendTableInit
 B DT_TEBeamEnts::g_SendTable
 B DT_TEBeamEnts::g_SendTableInit
 B DT_TEBeamFollow::g_SendTable
 B DT_TEBeamFollow::g_SendTableInit
 B DT_TEBeamLaser::g_SendTable
 B DT_TEBeamLaser::g_SendTableInit
 B DT_TEBeamPoints::g_SendTable
 B DT_TEBeamPoints::g_SendTableInit
 B DT_TEBeamRing::g_SendTable
 B DT_TEBeamRing::g_SendTableInit
 B DT_TEBeamRingPoint::g_SendTable
 B DT_TEBeamRingPoint::g_SendTableInit
 B DT_TEBeamSpline::g_SendTable
 B DT_TEBeamSpline::g_SendTableInit
 B DT_TEBloodSprite::g_SendTable
 B DT_TEBloodSprite::g_SendTableInit
 B DT_TEBloodStream::g_SendTable
 B DT_TEBloodStream::g_SendTableInit
 B DT_TEBreakModel::g_SendTable
 B DT_TEBreakModel::g_SendTableInit
 B DT_TEBubbleTrail::g_SendTable
 B DT_TEBubbleTrail::g_SendTableInit
 B DT_TEBubbles::g_SendTable
 B DT_TEBubbles::g_SendTableInit
 B DT_TEDecal::g_SendTable
 B DT_TEDecal::g_SendTableInit
 B DT_TEDust::g_SendTable
 B DT_TEDust::g_SendTableInit
 B DT_TEDynamicLight::g_SendTable
 B DT_TEDynamicLight::g_SendTableInit
 B DT_TEEffectDispatch::g_SendTable
 B DT_TEEffectDispatch::g_SendTableInit
 B DT_TEEnergySplash::g_SendTable
 B DT_TEEnergySplash::g_SendTableInit
 B DT_TEExplosion::g_SendTable
 B DT_TEExplosion::g_SendTableInit
 B DT_TEFireBullets::g_SendTable
 B DT_TEFireBullets::g_SendTableInit
 B DT_TEFizz::g_SendTable
 B DT_TEFizz::g_SendTableInit
 B DT_TEFootprintDecal::g_SendTable
 B DT_TEFootprintDecal::g_SendTableInit
 B DT_TEGaussExplosion::g_SendTable
 B DT_TEGaussExplosion::g_SendTableInit
 B DT_TEGlowSprite::g_SendTable
 B DT_TEGlowSprite::g_SendTableInit
 B DT_TEImpact::g_SendTable
 B DT_TEImpact::g_SendTableInit
 B DT_TEKillPlayerAttachments::g_SendTable
 B DT_TEKillPlayerAttachments::g_SendTableInit
 B DT_TELargeFunnel::g_SendTable
 B DT_TELargeFunnel::g_SendTableInit
 B DT_TEMetalSparks::g_SendTable
 B DT_TEMetalSparks::g_SendTableInit
 B DT_TEMuzzleFlash::g_SendTable
 B DT_TEMuzzleFlash::g_SendTableInit
 B DT_TEParticleSystem::g_SendTable
 B DT_TEParticleSystem::g_SendTableInit
 B DT_TEPhysicsProp::g_SendTable
 B DT_TEPhysicsProp::g_SendTableInit
 B DT_TEPlantBomb::g_SendTable
 B DT_TEPlantBomb::g_SendTableInit
 B DT_TEPlayerAnimEvent::g_SendTable
 B DT_TEPlayerAnimEvent::g_SendTableInit
 B DT_TEPlayerDecal::g_SendTable
 B DT_TEPlayerDecal::g_SendTableInit
 B DT_TEProjectedDecal::g_SendTable
 B DT_TEProjectedDecal::g_SendTableInit
 B DT_TERadioIcon::g_SendTable
 B DT_TERadioIcon::g_SendTableInit
 B DT_TEShatterSurface::g_SendTable
 B DT_TEShatterSurface::g_SendTableInit
 B DT_TEShowLine::g_SendTable
 B DT_TEShowLine::g_SendTableInit
 B DT_TESmoke::g_SendTable
 B DT_TESmoke::g_SendTableInit
 B DT_TESparks::g_SendTable
 B DT_TESparks::g_SendTableInit
 B DT_TESprite::g_SendTable
 B DT_TESprite::g_SendTableInit
 B DT_TESpriteSpray::g_SendTable
 B DT_TESpriteSpray::g_SendTableInit
 B DT_TEWorldDecal::g_SendTable
 B DT_TEWorldDecal::g_SendTableInit
 B DT_Team::g_SendTable
 B DT_Team::g_SendTableInit
 B DT_Tesla::g_SendTable
 B DT_Tesla::g_SendTableInit
 B DT_TestTraceline::g_SendTable
 B DT_TestTraceline::g_SendTableInit
 B DT_VGuiScreen::g_SendTable
 B DT_VGuiScreen::g_SendTableInit
 B DT_WORLD::g_SendTable
 B DT_WORLD::g_SendTableInit
 B DT_WaterBullet::g_SendTable
 B DT_WaterBullet::g_SendTableInit
 B DT_WaterLODControl::g_SendTable
 B DT_WaterLODControl::g_SendTableInit
 B DT_WeaponAK47::g_SendTable
 B DT_WeaponAK47::g_SendTableInit
 B DT_WeaponAWP::g_SendTable
 B DT_WeaponAWP::g_SendTableInit
 B DT_WeaponAug::g_SendTable
 B DT_WeaponAug::g_SendTableInit
 B DT_WeaponC4::g_SendTable
 B DT_WeaponC4::g_SendTableInit
 B DT_WeaponCSBase::g_SendTable
 B DT_WeaponCSBase::g_SendTableInit
 B DT_WeaponCSBaseGun::g_SendTable
 B DT_WeaponCSBaseGun::g_SendTableInit
 B DT_WeaponCubemap::g_SendTable
 B DT_WeaponCubemap::g_SendTableInit
 B DT_WeaponCycler::g_SendTable
 B DT_WeaponCycler::g_SendTableInit
 B DT_WeaponDEagle::g_SendTable
 B DT_WeaponDEagle::g_SendTableInit
 B DT_WeaponElite::g_SendTable
 B DT_WeaponElite::g_SendTableInit
 B DT_WeaponFamas::g_SendTable
 B DT_WeaponFamas::g_SendTableInit
 B DT_WeaponFiveSeven::g_SendTable
 B DT_WeaponFiveSeven::g_SendTableInit
 B DT_WeaponG3SG1::g_SendTable
 B DT_WeaponG3SG1::g_SendTableInit
 B DT_WeaponGalil::g_SendTable
 B DT_WeaponGalil::g_SendTableInit
 B DT_WeaponGlock::g_SendTable
 B DT_WeaponGlock::g_SendTableInit
 B DT_WeaponKnife::g_SendTable
 B DT_WeaponKnife::g_SendTableInit
 B DT_WeaponM249::g_SendTable
 B DT_WeaponM249::g_SendTableInit
 B DT_WeaponM3::g_SendTable
 B DT_WeaponM3::g_SendTableInit
 B DT_WeaponM4A1::g_SendTable
 B DT_WeaponM4A1::g_SendTableInit
 B DT_WeaponMAC10::g_SendTable
 B DT_WeaponMAC10::g_SendTableInit
 B DT_WeaponMP5Navy::g_SendTable
 B DT_WeaponMP5Navy::g_SendTableInit
 B DT_WeaponP228::g_SendTable
 B DT_WeaponP228::g_SendTableInit
 B DT_WeaponP90::g_SendTable
 B DT_WeaponP90::g_SendTableInit
 B DT_WeaponSG550::g_SendTable
 B DT_WeaponSG550::g_SendTableInit
 B DT_WeaponSG552::g_SendTable
 B DT_WeaponSG552::g_SendTableInit
 B DT_WeaponScout::g_SendTable
 B DT_WeaponScout::g_SendTableInit
 B DT_WeaponTMP::g_SendTable
 B DT_WeaponTMP::g_SendTableInit
 B DT_WeaponUMP45::g_SendTable
 B DT_WeaponUMP45::g_SendTableInit
 B DT_WeaponUSP::g_SendTable
 B DT_WeaponUSP::g_SendTableInit
 B DT_WeaponXM1014::g_SendTable
 B DT_WeaponXM1014::g_SendTableInit
 B DevShotSystem
 B DrawBattleLines
 B EndRound
 B EntityParticleTrailInfo_t_DataDescInit::g_DataMapHolder
 B EventQueuePrioritizedEvent_t::s_Allocator
 B EventQueuePrioritizedEvent_t_DataDescInit::g_DataMapHolder
 B FilterDamageType_DataDescInit::g_DataMapHolder
 B FilterTeam_DataDescInit::g_DataMapHolder
 B HidingSpot::m_masterMarker
 B HintNodeData_DataDescInit::g_DataMapHolder
 B Human_Hull
 B IMoveHelper::sm_pSingleton
 B IPredictionSystem::g_pPredictionSystems
 B InterfaceReg::s_pInterfaceRegs
 B JeepWaterData_t_DataDescInit::g_DataMapHolder
 B Large_Centered_Hull
 B Large_Hull
 B Medium_Hull
 B NavColors
 B ParticleSmokeGrenade_DataDescInit::g_DataMapHolder
 B PhysBlockHeader_t_DataDescInit::g_DataMapHolder
 B PhysObjectHeader_t_DataDescInit::g_DataMapHolder
 B Relationship_t_DataDescInit::g_DataMapHolder
 B ResponseContext_t_DataDescInit::g_DataMapHolder
 B ResponseGroup_DataDescInit::g_DataMapHolder
 B Response_DataDescInit::g_DataMapHolder
 B SaveRestoreBlockHeader_t_DataDescInit::g_DataMapHolder
 B SinCosTable
 B Small_Centered_Hull
 B SoundCommand_t::s_Allocator
 B SoundCommand_t_DataDescInit::g_DataMapHolder
 B TemplateEntityData_t_DataDescInit::g_DataMapHolder
 B Test_EHandle
 B TheBotPhrases
 B TheBotProfiles
 B TheBots
 B TheHidingSpotList
 B TheNavAreaList
 B TheNavMesh
 B Tiny_Centered_Hull
 B Tiny_Hull
 B UnreachableEnt_t_DataDescInit::g_DataMapHolder
 B Wide_Human_Hull
 B Wide_Short_Hull
 B ai_LOS_mode
 B ai_auto_contact_solver
 B ai_debug_assault
 B ai_debug_directnavprobe
 B ai_debug_doors
 B ai_debug_efficiency
 B ai_debug_enemies
 B ai_debug_expressions
 B ai_debug_follow
 B ai_debug_loners
 B ai_debug_looktargets
 B ai_debug_los
 B ai_debug_nav
 B ai_debug_ragdoll_magnets
 B ai_debug_shoot_positions
 B ai_debug_speech
 B ai_debug_squads
 B ai_debug_think_ticks
 B ai_efficiency_override
 B ai_follow_use_points
 B ai_follow_use_points_when_moving
 B ai_lead_time
 B ai_moveprobe_debug
 B ai_moveprobe_jump_debug
 B ai_moveprobe_usetracelist
 B ai_no_local_paths
 B ai_no_node_cache
 B ai_no_select_box
 B ai_no_steer
 B ai_no_talk_delay
 B ai_path_adjust_speed_on_immediate_turns
 B ai_path_insert_pause_at_est_end
 B ai_path_insert_pause_at_obstruction
 B ai_reaction_delay_alert
 B ai_reaction_delay_idle
 B ai_rebalance_thinks
 B ai_report_task_timings_on_limit
 B ai_sequence_debug
 B ai_shot_bias
 B ai_shot_bias_max
 B ai_shot_bias_min
 B ai_shot_stats
 B ai_shot_stats_term
 B ai_show_hull_attacks
 B ai_show_think_tolerance
 B ai_simulate_task_overtime
 B ai_spread_cone_focus_time
 B ai_spread_defocused_cone_multiplier
 B ai_spread_pattern_focus_time
 B ai_think_limit_label
 B ai_use_clipped_paths
 B ai_use_efficiency
 B ai_use_frame_think_limits
 B ai_use_think_optimizations
 B aimcrosshair
 B allowNPCs
 B ammo_338mag_max
 B ammo_357sig_max
 B ammo_45acp_max
 B ammo_50AE_max
 B ammo_556mm_box_max
 B ammo_556mm_max
 B ammo_57mm_max
 B ammo_762mm_max
 B ammo_9mm_max
 B ammo_buckshot_max
 B ammo_flashbang_max
 B ammo_hegrenade_max
 B ammo_smokegrenade_max
 B audioparams_t_DataDescInit::g_DataMapHolder
 B bot_crouch
 B bot_freeze
 B bot_loadout
 B bot_mimic
 B bot_mimic_yaw_offset
 B bot_show_battlefront
 B bot_show_occupy_time
 B breakable_disable_gib_limit
 B breakable_multiplayer
 B buffer
 B cc_CreatePredictionError
 B cc_Test_CreateEntity
 B cc_Test_InitRandomEntitySpawner
 B cc_Test_ProxyToggle_EnableProxy
 B cc_Test_ProxyToggle_SetValue
 B cc_Test_RandomPlayerPosition
 B cc_Test_RandomizeInPVS
 B cc_Test_RemoveAllRandomEntities
 B cc_Test_SpawnRandomEntities
 B collision_shake_amp
 B collision_shake_freq
 B collision_shake_time
 B cs_ShowStateTransitions
 B currenttoken
 B cv_bot_allow_grenades
 B cv_bot_allow_machine_guns
 B cv_bot_allow_pistols
 B cv_bot_allow_rifles
 B cv_bot_allow_rogues
 B cv_bot_allow_shotguns
 B cv_bot_allow_snipers
 B cv_bot_allow_sub_machine_guns
 B cv_bot_auto_follow
 B cv_bot_auto_vacate
 B cv_bot_chatter
 B cv_bot_debug
 B cv_bot_debug_target
 B cv_bot_defer_to_human
 B cv_bot_difficulty
 B cv_bot_dont_shoot
 B cv_bot_eco_limit
 B cv_bot_join_after_player
 B cv_bot_join_team
 B cv_bot_prefix
 B cv_bot_profile_db
 B cv_bot_quota
 B cv_bot_quota_mode
 B cv_bot_show_nav
 B cv_bot_stop
 B cv_bot_traceview
 B cv_bot_walk
 B cv_bot_zombie
 B cvar
 B debug_physimpact
 B debugoverlay
 B debugscriptconditions
 B decalfrequency
 B defaultteam
 B developer
 B displaysoundlist
 B engine
 B engineCache
 B enginesound
 B enginetrace
 B ent_debugkeys
 B ent_messages_draw
 B entitytable_t_DataDescInit::g_DataMapHolder
 B fSentencesInit
 B falldamage
 B filesystem
 B fire_absorbrate
 B fire_dmgbase
 B fire_dmginterval
 B fire_dmgscale
 B fire_extabsorb
 B fire_extscale
 B fire_growthrate
 B fire_heatscale
 B fire_incomingheatscale
 B fire_maxabsorb
 B fish_dormant
 B flashlight
 B flex_expression
 B flex_looktime
 B flex_maxawaytime
 B flex_maxplayertime
 B flex_minawaytime
 B flex_minplayertime
 B flex_talk
 B fogparams_t_DataDescInit::g_DataMapHolder
 B footsteps
 B forcerespawn
 B fraglimit
 B free_pass_peek_debug
 B friendlyfire
 B func_break_max_pieces
 B func_breakdmg_bullet
 B func_breakdmg_club
 B func_breakdmg_explosive
 B gEntList
 B gEvilImpulse101
 B g_AIConditionsTimer
 B g_AIFoesTalkSemaphore
 B g_AIFollowManager
 B g_AIFriendliesTalkSemaphore
 B g_AIMaintainScheduleTimer
 B g_AIMoveTimer
 B g_AINetworkBuilder
 B g_AINextDisabledMessageTime
 B g_AIPostRunTimer
 B g_AIPrescheduleThinkTimer
 B g_AIRunTimer
 B g_AITaskTimings
 B g_AI_Manager
 B g_AI_MemoryListSaveRestoreOps
 B g_AI_SaveRestoreBlockHandler
 B g_AI_SchedulesManager
 B g_AI_SensedObjectsManager
 B g_AI_SquadManager
 B g_ActivityList
 B g_ActivityStrings
 B g_AreaPortals
 B g_BanMasks
 B g_BitWriteMasks
 B g_BitWriteMasksInit
 B g_BotUpdateInterval
 B g_BotUpkeepInterval
 B g_C4s
 B g_CSEventLog
 B g_CatmullRomInterpolator
 B g_CheckClient
 B g_Collisions
 B g_ConceptHistoriesSaveDataOps
 B g_DefaultResponseSystemSaveRestoreBlockHandler
 B g_EntListMemPool
 B g_EntityClassnames
 B g_EntityCollisionHash
 B g_EntityListPool
 B g_EntityOrientations
 B g_EntityPositions
 B g_EntitySaveRestoreBlockHandler
 B g_EventList
 B g_EventQueue
 B g_EventStrings
 B g_EventsSaveDataOps
 B g_ExtraMasks
 B g_FlexSceneFileManager
 B g_HandleTest
 B g_Hostages
 B g_InfoCameraLinkList
 B g_InstancedSceneResourceManager
 B g_KeyFrames
 B g_KeyValuesErrorStack
 B g_Language
 B g_LinearInterpolator
 B g_MapEntityRefs
 B g_MultiDamage
 B g_NetworkPropertyEventMgr
 B g_PhysGameTrace
 B g_PhysObjSaveRestoreOps
 B g_PhysSaveRestoreBlockHandler
 B g_PhysWorldObject
 B g_PhysicsHook
 B g_PlantedC4s
 B g_PlayerModEnable
 B g_PlayerSurfaceTriggers
 B g_PointCameraList
 B g_PointTemplatePrecacher
 B g_PrecacheOtherList
 B g_PropDataSystem
 B g_RagdollLVManager
 B g_ResponseSystemSaveRestoreOps
 B g_SaveRestoreBlockSet
 B g_SentBanMasks
 B g_SentGameRulesMasks
 B g_ServerGameClients
 B g_ServerGameDLL
 B g_SimThinkManager
 B g_SkyList
 B g_SolidSetup
 B g_SolverList
 B g_SoundscapeSystem
 B g_StandardSendProxies
 B g_StressEntities
 B g_StressEntityRegs
 B g_StringTableGameRules
 B g_Teams
 B g_TemplateEntityHook
 B g_Template_SaveRestoreBlockHandler
 B g_TextStatsMgr
 B g_ThinkContextsSaveDataOps
 B g_VariantSaveDataOps
 B g_VguiScreenStringOps
 B g_VoiceGameMgr
 B g_VoiceGameMgrHelper
 B g_WeaponList
 B g_ai_norebuildgraph
 B g_bAIDebugStep
 B g_bBehaviorHost_PreventBaseClassGatherConditions
 B g_bDisableEhandleAccess
 B g_bReceivedChainedUpdateOnRemove
 B g_bUnget
 B g_bWantModEnable
 B g_botInitProfile
 B g_botInitTeam
 B g_debug_doors
 B g_debug_ragdoll_removal
 B g_debug_trackpather
 B g_debug_transitions
 B g_debug_vehiclebase
 B g_debug_vehicledriver
 B g_debug_vehicleexit
 B g_debug_vehiclesound
 B g_fDrawLines
 B g_fGameOver
 B g_flLastBodyPitch
 B g_flLastBodyYaw
 B g_hWeaponFireTriggers
 B g_iCurrentTemplateInstance
 B g_iDevShotCameraCount
 B g_iSkillLevel
 B g_interactionHitByPlayerThrownPhysObj
 B g_interactionScriptedTarget
 B g_iszPhysicsPropClassname
 B g_jeepexitspeed
 B g_nAITasksRun
 B g_nClientPutInServerOverrides
 B g_pAINetworkManager
 B g_pBigAINet
 B g_pDebugEdictBase
 B g_pDeveloper
 B g_pForceAttachEdict
 B g_pGameRules
 B g_pLastCTSpawn
 B g_pLastSpawn
 B g_pLastTerroristSpawn
 B g_pMapInfo
 B g_pPlayerResource
 B g_pPositionInterpolators
 B g_pServerClassHead
 B g_pStringTableEffectDispatch
 B g_pStringTableInfoPanel
 B g_pStringTableMaterials
 B g_pStringTableVguiScreen
 B g_pVoiceServer
 B g_ragdoll_maxcount
 B g_sModelIndexBloodDrop
 B g_sModelIndexBloodSpray
 B g_sModelIndexBubbles
 B g_sModelIndexFireball
 B g_sModelIndexLaser
 B g_sModelIndexLaserDot
 B g_sModelIndexSmoke
 B g_sModelIndexWExplosion
 B g_vecAttackDir
 B gameeventmanager
 B gamestatsuploader
 B giPrecacheGrunt
 B globalentity_t_DataDescInit::g_DataMapHolder
 B gpGlobals
 B groundlinksallocated
 B head_hull_maxs
 B head_hull_mins
 B hostage_debug
 B hud_jeephint_numentries
 B ik::Mfwd
 B ik::Minv
 B lineartolightmap
 B lineartovertex
 B linksallocated
 B locksound_t_DataDescInit::g_DataMapHolder
 B lservercfgfile
 B m_debugOverlayLine
 B m_flLastMoveYaw
 B magnetted_objects_t_DataDescInit::g_DataMapHolder
 B mapcyclefile
 B modelinfo
 B mp_allowspectators
 B mp_autokick
 B mp_autoteambalance
 B mp_buytime
 B mp_c4timer
 B mp_chattime
 B mp_facefronttime
 B mp_fadetoblack
 B mp_feetyawrate
 B mp_forcecamera
 B mp_freezetime
 B mp_hostagepenalty
 B mp_humanteam
 B mp_ik
 B mp_limitteams
 B mp_logdetail
 B mp_maxrounds
 B mp_playerid
 B mp_playerid_delay
 B mp_playerid_hold
 B mp_restartgame
 B mp_roundtime
 B mp_spawnprotectiontime
 B mp_startmoney
 B mp_timelimit
 B mp_tkpunish
 B mp_winlimit
 B name
 B nav_area_bgcolor
 B nav_coplanar_slope_limit
 B nav_create_place_on_ground
 B nav_edit
 B nav_quicksave
 B nav_restart_after_analysis
 B nav_show_approach_points
 B nav_show_area_info
 B nav_show_danger
 B nav_show_player_counts
 B nav_slope_limit
 B nav_snap_to_grid
 B nav_split_place_on_ground
 B networkstringtable
 B notarget
 B npc_create_equipment
 B npc_height_adjust
 B npc_sentences
 B npc_vphysics
 B old_radius_damage
 B partition
 B phys_impactforcescale
 B phys_pushscale
 B phys_speeds
 B phys_stressbodyweights
 B phys_timescale
 B phys_upimpactforcescale
 B physcollision
 B physenv
 B physics
 B physprops
 B power2_n
 B props_break_max_pieces
 B r_AirboatViewDampenDamp
 B r_AirboatViewDampenFreq
 B r_AirboatViewZHeight
 B r_JeepViewDampenDamp
 B r_JeepViewDampenFreq
 B r_JeepViewZHeight
 B r_VehicleViewDampen
 B r_vehicleBrakeRate
 B r_vehicleDrawDebug
 B r_visualizetraces
 B random_valve
 B s_PluginCheck
 B s_RagdollLRU
 B scene_flatturn
 B servercfgfile
 B serverpluginhelpers
 B showhitlocation
 B showtriggers
 B sk_ally_regen_time
 B sk_npc_arm
 B sk_npc_chest
 B sk_npc_head
 B sk_npc_leg
 B sk_npc_stomach
 B sk_player_arm
 B sk_player_chest
 B sk_player_head
 B sk_player_leg
 B sk_player_stomach
 B skill
 B sky3dparams_t_DataDescInit::g_DataMapHolder
 B soundemitterbase
 B staticpropmgr
 B step_spline
 B suitvolume
 B sv_accelerate
 B sv_airaccelerate
 B sv_alltalk
 B sv_autosave
 B sv_backspeed
 B sv_bounce
 B sv_cheats
 B sv_debug_player_use
 B sv_footsteps
 B sv_friction
 B sv_gravity
 B sv_lagflushbonecache
 B sv_massreport
 B sv_max_usercmd_future_ticks
 B sv_maxspeed
 B sv_maxunlag
 B sv_maxvelocity
 B sv_netvisdist
 B sv_noclipaccelerate
 B sv_noclipduringpause
 B sv_noclipspeed
 B sv_npc_talker_maxdist
 B sv_pushaway_clientside
 B sv_pushaway_clientside_size
 B sv_pushaway_force
 B sv_pushaway_hostage_force
 B sv_pushaway_max_force
 B sv_pushaway_max_hostage_force
 B sv_pushaway_max_player_force
 B sv_pushaway_min_player_speed
 B sv_pushaway_player_force
 B sv_rollangle
 B sv_rollspeed
 B sv_runcmds
 B sv_showimpacts
 B sv_skyname
 B sv_specaccelerate
 B sv_specnoclip
 B sv_specspeed
 B sv_stepsize
 B sv_stopspeed
 B sv_strict_notarget
 B sv_suppress_viewpunch
 B sv_teststepsimulation
 B sv_turbophysics
 B sv_unlag
 B sv_unlag_debug
 B sv_unlockedchapters
 B sv_wateraccelerate
 B sv_waterdist
 B sv_waterfriction
 B teamlist
 B teamoverride
 B teamplay
 B template_debug
 B template_t_DataDescInit::g_DataMapHolder
 B test_it
 B test_nav_opt
 B think_limit
 B thinkfunc_t_DataDescInit::g_DataMapHolder
 B token
 B tokencount
 B trace_report
 B tv_delaymapchange
 B vcollide_wireframe
 B vec3_angle
 B vec3_invalid
 B vec3_origin
 B vehicle_crashsound_t_DataDescInit::g_DataMapHolder
 B vehicle_gear_t_DataDescInit::g_DataMapHolder
 B vehiclesounds_t_DataDescInit::g_DataMapHolder
 B voice_serverdebug
 B weapon_showproficiency
 B weaponstay
 CUniformRandomStream::CUniformRandomStream()
 CUniformRandomStream::RandomFloat(float, float)
 CUniformRandomStream::RandomInt(int, int)
 CUniformRandomStream::SetSeed(int)
 CVProfNode::EnterScope()
 CVProfNode::ExitScope()
 CVProfNode::GetSubNode(char const*, int, char const*, int)
 CVProfNode::MarkFrame()
 CVProfNode::Pause()
 CVProfNode::Reset()
 CVProfNode::Resume()
 CVProfile::BudgetGroupNameToBudgetGroupID(char const*)
 CVProfile::OutputReport(int, char const*, int)
 CommandLine
 D AIExtendedSaveHeader_t::m_DataMap
 D AIScheduleState_t::m_DataMap
 D AISquadEnemyInfo_t::m_DataMap
 D AI_EnemyInfo_t::m_DataMap
 D AI_FollowNavInfo_t::m_DataMap
 D AI_FollowParams_t::m_DataMap
 D AI_FreePassParams_t::m_DataMap
 D AI_LeadArgs_t::m_DataMap
 D AI_Response::m_DataMap
 D AI_ResponseParams::m_DataMap
 D AI_StandoffParams_t::m_DataMap
 D AI_Waypoint_t::m_DataMap
 D BotDifficultyName
 D CAISound::m_DataMap
 D CAI_AccelDecay::m_DataMap
 D CAI_AllySpeechManager::m_DataMap
 D CAI_AssaultBehavior::gm_SchedLoadStatus
 D CAI_AssaultBehavior::gm_pszErrorClassName
 D CAI_AssaultBehavior::m_DataMap
 D CAI_AssaultGoal::m_DataMap
 D CAI_BaseActor::m_DataMap
 D CAI_BaseFlyingBot::m_DataMap
 D CAI_BaseNPC::m_DataMap
 D CAI_BaseNPC::m_nDebugPauseIndex
 D CAI_BaseNPC::m_pClassSendTable
 D CAI_BasePhysicsFlyingBot::m_DataMap
 D CAI_BattleLine::m_DataMap
 D CAI_BehaviorBase::m_DataMap
 D CAI_BlendedMotor::m_DataMap
 D CAI_ChangeHintGroup::m_DataMap
 D CAI_ChangeTarget::m_DataMap
 D CAI_DynamicLink::m_DataMap
 D CAI_DynamicLinkController::m_DataMap
 D CAI_Enemies::m_DataMap
 D CAI_Expresser::m_DataMap
 D CAI_FollowBehavior::gm_SchedLoadStatus
 D CAI_FollowBehavior::gm_pszErrorClassName
 D CAI_FollowBehavior::m_DataMap
 D CAI_FollowGoal::m_DataMap
 D CAI_FreePass::m_DataMap
 D CAI_GoalEntity::m_DataMap
 D CAI_Hint::m_DataMap
 D CAI_InterestTarget_t::m_DataMap
 D CAI_LeadBehavior::gm_SchedLoadStatus
 D CAI_LeadBehavior::gm_pszErrorClassName
 D CAI_LeadBehavior::m_DataMap
 D CAI_LeadGoal::m_DataMap
 D CAI_LeadGoal_Weapon::m_DataMap
 D CAI_LocalNavigator::m_DataMap
 D CAI_LookTarget::m_DataMap
 D CAI_Motor::m_DataMap
 D CAI_MoveAndShootOverlay::m_DataMap
 D CAI_MoveMonitor::m_DataMap
 D CAI_MoveProbe::m_DataMap
 D CAI_Navigator::m_DataMap
 D CAI_NetworkEditTools::m_flAirEditDistance
 D CAI_NetworkEditTools::m_iGConnectivityNode
 D CAI_NetworkEditTools::m_iVisibilityNode
 D CAI_NetworkManager::m_DataMap
 D CAI_Path::m_DataMap
 D CAI_Pathfinder::m_DataMap
 D CAI_PlayerAlly::gm_SchedLoadStatus
 D CAI_PlayerAlly::gm_pszErrorClassName
 D CAI_PlayerAlly::m_DataMap
 D CAI_ProxTester::m_DataMap
 D CAI_RappelBehavior::gm_SchedLoadStatus
 D CAI_RappelBehavior::gm_pszErrorClassName
 D CAI_RappelBehavior::m_DataMap
 D CAI_ScriptConditions::gm_Evaluators
 D CAI_ScriptConditions::m_DataMap
 D CAI_ScriptedSchedule::m_DataMap
 D CAI_ScriptedSentence::m_DataMap
 D CAI_ScriptedSequence::m_DataMap
 D CAI_Senses::m_DataMap
 D CAI_SentenceBase::m_DataMap
 D CAI_ShotRegulator::m_DataMap
 D CAI_SpeechFilter::m_DataMap
 D CAI_Squad::m_DataMap
 D CAI_StandoffBehavior::gm_SchedLoadStatus
 D CAI_StandoffBehavior::gm_pszErrorClassName
 D CAI_StandoffBehavior::m_DataMap
 D CAI_StandoffGoal::m_DataMap
 D CAI_TacticalServices::m_DataMap
 D CAI_TrackPather::m_DataMap
 D CAK47::m_PredMap
 D CAK47::m_pClassSendTable
 D CAmbientGeneric::m_DataMap
 D CAnimationLayer::m_DataMap
 D CAreaPortal::m_DataMap
 D CAssaultPoint::m_DataMap
 D CBaseAnimating::m_DataMap
 D CBaseAnimating::m_PredMap
 D CBaseAnimating::m_pClassSendTable
 D CBaseAnimatingOverlay::m_DataMap
 D CBaseAnimatingOverlay::m_PredMap
 D CBaseAnimatingOverlay::m_pClassSendTable
 D CBaseButton::m_DataMap
 D CBaseCSGrenade::m_DataMap
 D CBaseCSGrenade::m_PredMap
 D CBaseCSGrenade::m_pClassSendTable
 D CBaseCSGrenadeProjectile::m_DataMap
 D CBaseCSGrenadeProjectile::m_pClassSendTable
 D CBaseCombatCharacter::m_DataMap
 D CBaseCombatCharacter::m_PredMap
 D CBaseCombatCharacter::m_pClassSendTable
 D CBaseCombatWeapon::m_DataMap
 D CBaseCombatWeapon::m_PredMap
 D CBaseCombatWeapon::m_pClassSendTable
 D CBaseDMStart::m_DataMap
 D CBaseDoor::m_DataMap
 D CBaseDoor::m_pClassSendTable
 D CBaseEntity::m_DataMap
 D CBaseEntity::m_PredMap
 D CBaseEntity::m_nDebugPlayer
 D CBaseEntity::m_nDebugSteps
 D CBaseEntity::m_nPredictionRandomSeed
 D CBaseEntity::m_pClassSendTable
 D CBaseEntityOutput::m_DataMap
 D CBaseFilter::m_DataMap
 D CBaseFire::m_DataMap
 D CBaseFlex::m_DataMap
 D CBaseFlex::m_PredMap
 D CBaseFlex::m_pClassSendTable
 D CBaseGrenade::m_DataMap
 D CBaseGrenade::m_PredMap
 D CBaseGrenade::m_pClassSendTable
 D CBaseMoveBehavior::m_DataMap
 D CBaseParticleEntity::m_PredMap
 D CBaseParticleEntity::m_pClassSendTable
 D CBasePlatTrain::m_DataMap
 D CBasePlayer::m_DataMap
 D CBasePlayer::m_PredMap
 D CBasePlayer::m_pClassSendTable
 D CBasePropDoor::m_DataMap
 D CBasePropDoor::m_pClassSendTable
 D CBaseServerVehicle::m_DataMap
 D CBaseTempEntity::m_pClassSendTable
 D CBaseToggle::m_DataMap
 D CBaseTrigger::m_DataMap
 D CBaseVPhysicsTrigger::m_DataMap
 D CBaseViewModel::m_DataMap
 D CBaseViewModel::m_PredMap
 D CBaseViewModel::m_pClassSendTable
 D CBeam::m_DataMap
 D CBeam::m_PredMap
 D CBeam::m_pClassSendTable
 D CBlendingCycler::m_DataMap
 D CBlood::m_DataMap
 D CBombTarget::m_DataMap
 D CBoneFollower::m_DataMap
 D CBoneFollower::m_pClassSendTable
 D CBreakable::m_DataMap
 D CBreakable::pSpawnObjects
 D CBreakableProp::m_DataMap
 D CBreakableProp::m_pClassSendTable
 D CBreakableSurface::m_DataMap
 D CBreakableSurface::m_pClassSendTable
 D CBubbling::m_DataMap
 D CBuyZone::m_DataMap
 D CC4::m_PredMap
 D CC4::m_pClassSendTable
 D CCSBot::m_DataMap
 D CCSGameRulesProxy::m_pClassSendTable
 D CCSPlayer::m_DataMap
 D CCSPlayer::m_PredMap
 D CCSPlayer::m_pClassSendTable
 D CCSPlayerResource::m_DataMap
 D CCSPlayerResource::m_pClassSendTable
 D CCSRagdoll::m_pClassSendTable
 D CCSTeam::m_pClassSendTable
 D CChangeLevel::m_DataMap
 D CChoreoEvent::s_nGlobalID
 D CCollisionProperty::m_DataMap
 D CCollisionProperty::m_PredMap
 D CConstantForceController::m_DataMap
 D CConstraintAnchor::m_DataMap
 D CCopyRecipientFilter::m_DataMap
 D CCredits::m_DataMap
 D CCycler::m_DataMap
 D CDEagle::m_PredMap
 D CDEagle::m_pClassSendTable
 D CDecal::m_DataMap
 D CDynamicLight::m_DataMap
 D CDynamicLight::m_pClassSendTable
 D CDynamicProp::m_DataMap
 D CDynamicProp::m_pClassSendTable
 D CEmbers::m_DataMap
 D CEmbers::m_pClassSendTable
 D CEntityDissolve::m_DataMap
 D CEntityDissolve::m_pClassSendTable
 D CEntityFlame::m_DataMap
 D CEntityFlame::m_pClassSendTable
 D CEntityParticleTrail::m_DataMap
 D CEntityParticleTrail::m_pClassSendTable
 D CEnvBeam::m_DataMap
 D CEnvBeverage::m_DataMap
 D CEnvDetailController::m_pClassSendTable
 D CEnvDustPuff::m_DataMap
 D CEnvEffectsScript::m_DataMap
 D CEnvEntityMaker::m_DataMap
 D CEnvExplosion::m_DataMap
 D CEnvFade::m_DataMap
 D CEnvFireSensor::m_DataMap
 D CEnvFireSource::m_DataMap
 D CEnvFunnel::m_DataMap
 D CEnvGlobal::m_DataMap
 D CEnvGunfire::m_DataMap
 D CEnvHudHint::m_DataMap
 D CEnvLaser::m_DataMap
 D CEnvMicrophone::m_DataMap
 D CEnvMuzzleFlash::m_DataMap
 D CEnvParticleScript::m_DataMap
 D CEnvParticleScript::m_pClassSendTable
 D CEnvPlayerSurfaceTrigger::m_DataMap
 D CEnvQuadraticBeam::m_DataMap
 D CEnvQuadraticBeam::m_pClassSendTable
 D CEnvScreenOverlay::m_DataMap
 D CEnvScreenOverlay::m_pClassSendTable
 D CEnvShake::m_DataMap
 D CEnvShooter::m_DataMap
 D CEnvSoundscape::m_DataMap
 D CEnvSoundscapeProxy::m_DataMap
 D CEnvSoundscapeTriggerable::m_DataMap
 D CEnvSpark::m_DataMap
 D CEnvSplash::m_DataMap
 D CEnvTracer::m_DataMap
 D CEnvWind::m_DataMap
 D CEnvWind::m_pClassSendTable
 D CEnvZoom::m_DataMap
 D CEventAction::m_DataMap
 D CEventQueue::m_DataMap
 D CFilterClass::m_DataMap
 D CFilterMultiple::m_DataMap
 D CFilterName::m_DataMap
 D CFire::m_DataMap
 D CFireSmoke::m_DataMap
 D CFireSmoke::m_pClassSendTable
 D CFish::m_DataMap
 D CFish::m_pClassSendTable
 D CFishPool::m_DataMap
 D CFlashbang::m_DataMap
 D CFlashbang::m_PredMap
 D CFlashbang::m_pClassSendTable
 D CFlexCycler::m_DataMap
 D CFlextalkActor::m_DataMap
 D CFogController::m_DataMap
 D CFourWheelVehiclePhysics::m_DataMap
 D CFuncAreaPortalBase::m_DataMap
 D CFuncAreaPortalWindow::m_DataMap
 D CFuncAreaPortalWindow::m_pClassSendTable
 D CFuncBrush::m_DataMap
 D CFuncConveyor::m_DataMap
 D CFuncConveyor::m_pClassSendTable
 D CFuncLadder::m_DataMap
 D CFuncLadder::m_pClassSendTable
 D CFuncMonitor::m_DataMap
 D CFuncMonitor::m_pClassSendTable
 D CFuncMoveLinear::m_DataMap
 D CFuncOccluder::m_DataMap
 D CFuncOccluder::m_pClassSendTable
 D CFuncPlat::m_DataMap
 D CFuncPlatRot::m_DataMap
 D CFuncRotating::m_DataMap
 D CFuncSmokeVolume::m_DataMap
 D CFuncSmokeVolume::m_pClassSendTable
 D CFuncTankTrain::m_DataMap
 D CFuncTrackAuto::m_DataMap
 D CFuncTrackChange::m_DataMap
 D CFuncTrackTrain::m_DataMap
 D CFuncTrackTrain::m_pClassSendTable
 D CFuncTrain::m_DataMap
 D CFuncTrainControls::m_DataMap
 D CFuncVPhysicsClip::m_DataMap
 D CFuncWall::m_DataMap
 D CFuncWallToggle::m_DataMap
 D CFunc_Dust::m_DataMap
 D CFunc_Dust::m_pClassSendTable
 D CFunc_LOD::m_DataMap
 D CFunc_LOD::m_pClassSendTable
 D CGameEnd::m_DataMap
 D CGamePlayerEquip::m_DataMap
 D CGamePlayerZone::m_DataMap
 D CGameRulesProxy::m_pClassSendTable
 D CGameScore::m_DataMap
 D CGameText::m_DataMap
 D CGameUI::m_DataMap
 D CGameWeaponManager::m_DataMap
 D CGenericActor::m_DataMap
 D CGib::m_DataMap
 D CGibShooter::m_DataMap
 D CGlobalState::m_DataMap
 D CGunTarget::m_DataMap
 D CHEGrenade::m_DataMap
 D CHEGrenade::m_PredMap
 D CHEGrenade::m_pClassSendTable
 D CHandleTest::m_pClassSendTable
 D CHostage::m_DataMap
 D CHostage::m_pClassSendTable
 D CHostageRescueZone::m_DataMap
 D CInfoCameraLink::m_DataMap
 D CInfoLadderDismount::m_pClassSendTable
 D CInfoLightingRelative::m_DataMap
 D CInfoLightingRelative::m_pClassSendTable
 D CInfoViewParameters::m_DataMap
 D CInstancedSceneEntity::m_DataMap
 D CItem::m_DataMap
 D CItemDefuser::m_DataMap
 D CItemSoda::m_DataMap
 D CKeepUpright::m_DataMap
 D CKnife::m_DataMap
 D CKnife::m_PredMap
 D CKnife::m_pClassSendTable
 D CLight::m_DataMap
 D CLightGlow::m_DataMap
 D CLightGlow::m_pClassSendTable
 D CLogicAuto::m_DataMap
 D CLogicAutosave::m_DataMap
 D CLogicBranch::m_DataMap
 D CLogicCase::m_DataMap
 D CLogicCollisionPair::m_DataMap
 D CLogicCompare::m_DataMap
 D CLogicCompareInteger::m_DataMap
 D CLogicLineToEntity::m_DataMap
 D CLogicMeasureMovement::m_DataMap
 D CLogicNavigation::m_DataMap
 D CLogicRelay::m_DataMap
 D CMaterialModifyControl::m_DataMap
 D CMaterialModifyControl::m_pClassSendTable
 D CMathColorBlend::m_DataMap
 D CMathCounter::m_DataMap
 D CMathRemap::m_DataMap
 D CMessage::m_DataMap
 D CMessageEntity::m_DataMap
 D CMomentaryRotButton::m_DataMap
 D CMotorController::m_DataMap
 D CMovementSpeedMod::m_DataMap
 D CMultiDamage::m_DataMap
 D CMultiSource::m_DataMap
 D CNPC_Furniture::m_DataMap
 D CNPC_VehicleDriver::gm_SchedLoadStatus
 D CNPC_VehicleDriver::gm_pszErrorClassName
 D CNPC_VehicleDriver::m_DataMap
 D CNavArea::m_masterMarker
 D CNavArea::m_nextID
 D CNavLadder::m_nextID
 D CNodeEnt::m_DataMap
 D COrnamentProp::m_DataMap
 D CParticleFire::m_DataMap
 D CParticleFire::m_pClassSendTable
 D CParticleLight::m_DataMap
 D CPathCorner::m_DataMap
 D CPathKeyFrame::m_DataMap
 D CPathTrack::m_DataMap
 D CPhysBox::m_DataMap
 D CPhysBox::m_pClassSendTable
 D CPhysBoxMultiplayer::m_DataMap
 D CPhysBoxMultiplayer::m_pClassSendTable
 D CPhysConstraint::m_DataMap
 D CPhysConstraintSystem::m_DataMap
 D CPhysConvert::m_DataMap
 D CPhysExplosion::m_DataMap
 D CPhysForce::m_DataMap
 D CPhysHinge::m_DataMap
 D CPhysImpact::m_DataMap
 D CPhysLength::m_DataMap
 D CPhysMagnet::m_DataMap
 D CPhysMagnet::m_pClassSendTable
 D CPhysMotor::m_DataMap
 D CPhysPulley::m_DataMap
 D CPhysSlideConstraint::m_DataMap
 D CPhysThruster::m_DataMap
 D CPhysTorque::m_DataMap
 D CPhysicsCannister::m_DataMap
 D CPhysicsEntitySolver::m_DataMap
 D CPhysicsNPCSolver::m_DataMap
 D CPhysicsProp::m_DataMap
 D CPhysicsProp::m_pClassSendTable
 D CPhysicsPropMultiplayer::m_DataMap
 D CPhysicsPropMultiplayer::m_pClassSendTable
 D CPhysicsPropRespawnable::m_DataMap
 D CPhysicsShake::m_DataMap
 D CPhysicsSpring::m_DataMap
 D CPhysicsWind::m_DataMap
 D CPhysicsWire::m_DataMap
 D CPlantedC4::m_DataMap
 D CPlantedC4::m_PredMap
 D CPlantedC4::m_pClassSendTable
 D CPlasma::m_DataMap
 D CPlasma::m_pClassSendTable
 D CPlayerLocalData::m_DataMap
 D CPlayerLocalData::m_PredMap
 D CPlayerResource::m_DataMap
 D CPlayerResource::m_pClassSendTable
 D CPlayerState::m_DataMap
 D CPlayerState::m_PredMap
 D CPointAngleSensor::m_DataMap
 D CPointAngularVelocitySensor::m_DataMap
 D CPointCamera::m_DataMap
 D CPointCamera::m_pClassSendTable
 D CPointClientCommand::m_DataMap
 D CPointDevShotCamera::m_DataMap
 D CPointHurt::m_DataMap
 D CPointPlayerMoveConstraint::m_DataMap
 D CPointServerCommand::m_DataMap
 D CPointSpotlight::m_DataMap
 D CPointTeleport::m_DataMap
 D CPointTemplate::m_DataMap
 D CPrecipitation::m_DataMap
 D CPrecipitation::m_pClassSendTable
 D CPredictedViewModel::m_pClassSendTable
 D CProjectedDecal::m_DataMap
 D CPropDoorRotating::m_DataMap
 D CPropJeep::m_DataMap
 D CPropJeep::m_pClassSendTable
 D CPropVehicle::m_DataMap
 D CPropVehicleDriveable::m_DataMap
 D CPropVehicleDriveable::m_pClassSendTable
 D CRagdollBoogie::m_DataMap
 D CRagdollConstraint::m_DataMap
 D CRagdollMagnet::m_DataMap
 D CRagdollManager::m_DataMap
 D CRagdollManager::m_pClassSendTable
 D CRagdollProp::m_DataMap
 D CRagdollProp::m_pClassSendTable
 D CRagdollPropAttached::m_DataMap
 D CRagdollPropAttached::m_pClassSendTable
 D CRallyPoint::m_DataMap
 D CRandSimTimer::m_DataMap
 D CRandStopwatch::m_DataMap
 D CRevertSaved::m_DataMap
 D CRopeAnchor::m_DataMap
 D CRopeKeyframe::m_DataMap
 D CRopeKeyframe::m_pClassSendTable
 D CRotDoor::m_DataMap
 D CRotorWashShooter::m_DataMap
 D CRuleEntity::m_DataMap
 D CRulePointEntity::m_DataMap
 D CSceneEntity::m_DataMap
 D CSceneManager::m_DataMap
 D CScriptedTarget::m_DataMap
 D CShadowControl::m_DataMap
 D CShadowControl::m_pClassSendTable
 D CSimTimer::m_DataMap
 D CSimpleSimTimer::m_DataMap
 D CSkyCamera::m_DataMap
 D CSmokeGrenade::m_DataMap
 D CSmokeGrenade::m_PredMap
 D CSmokeGrenade::m_pClassSendTable
 D CSmokeGrenadeProjectile::m_DataMap
 D CSmokeStack::m_DataMap
 D CSmokeStack::m_pClassSendTable
 D CSmokeStackLightInfo::m_DataMap
 D CSound::m_DataMap
 D CSoundEnt::m_DataMap
 D CSoundEnvelope::m_DataMap
 D CSoundPatch::m_DataMap
 D CSpotlightEnd::m_DataMap
 D CSpotlightEnd::m_pClassSendTable
 D CSprite::m_DataMap
 D CSprite::m_PredMap
 D CSprite::m_pClassSendTable
 D CSpriteTrail::m_DataMap
 D CSpriteTrail::m_PredMap
 D CSpriteTrail::m_pClassSendTable
 D CSteamJet::m_DataMap
 D CSteamJet::m_pClassSendTable
 D CStopwatch::m_DataMap
 D CStopwatchBase::m_DataMap
 D CStripWeapons::m_DataMap
 D CSun::m_DataMap
 D CSun::m_pClassSendTable
 D CSurroundTest::m_DataMap
 D CTEArmorRicochet::m_pClassSendTable
 D CTEBSPDecal::m_pClassSendTable
 D CTEBaseBeam::m_pClassSendTable
 D CTEBeamEntPoint::m_pClassSendTable
 D CTEBeamEnts::m_pClassSendTable
 D CTEBeamFollow::m_pClassSendTable
 D CTEBeamLaser::m_pClassSendTable
 D CTEBeamPoints::m_pClassSendTable
 D CTEBeamRing::m_pClassSendTable
 D CTEBeamRingPoint::m_pClassSendTable
 D CTEBeamSpline::m_pClassSendTable
 D CTEBloodSprite::m_pClassSendTable
 D CTEBloodStream::m_pClassSendTable
 D CTEBreakModel::m_pClassSendTable
 D CTEBubbleTrail::m_pClassSendTable
 D CTEBubbles::m_pClassSendTable
 D CTEDecal::m_pClassSendTable
 D CTEDust::m_pClassSendTable
 D CTEDynamicLight::m_pClassSendTable
 D CTEEffectDispatch::m_pClassSendTable
 D CTEEnergySplash::m_pClassSendTable
 D CTEExplosion::m_pClassSendTable
 D CTEFireBullets::m_pClassSendTable
 D CTEFizz::m_pClassSendTable
 D CTEFootprintDecal::m_pClassSendTable
 D CTEGaussExplosion::m_pClassSendTable
 D CTEGlowSprite::m_pClassSendTable
 D CTEImpact::m_pClassSendTable
 D CTEKillPlayerAttachments::m_pClassSendTable
 D CTELargeFunnel::m_pClassSendTable
 D CTEMetalSparks::m_pClassSendTable
 D CTEMuzzleFlash::m_pClassSendTable
 D CTEParticleSystem::m_pClassSendTable
 D CTEPhysicsProp::m_pClassSendTable
 D CTEPlantBomb::m_pClassSendTable
 D CTEPlayerAnimEvent::m_pClassSendTable
 D CTEPlayerDecal::m_pClassSendTable
 D CTEProjectedDecal::m_pClassSendTable
 D CTERadioIcon::m_pClassSendTable
 D CTEShatterSurface::m_pClassSendTable
 D CTEShowLine::m_pClassSendTable
 D CTESmoke::m_pClassSendTable
 D CTESparks::m_pClassSendTable
 D CTESprite::m_pClassSendTable
 D CTESpriteSpray::m_pClassSendTable
 D CTEWorldDecal::m_pClassSendTable
 D CTakeDamageInfo::m_DataMap
 D CTankTargetChange::m_DataMap
 D CTankTrainAI::m_DataMap
 D CTargetCDAudioRep::m_DataMap
 D CTargetChangeGravity::m_DataMap
 D CTeam::m_pClassSendTable
 D CTeamSpawnPoint::m_DataMap
 D CTeamVehicleSpawnPoint::m_DataMap
 D CTerrainMorph::m_DataMap
 D CTesla::m_DataMap
 D CTesla::m_pClassSendTable
 D CTestTraceline::m_DataMap
 D CTestTraceline::m_pClassSendTable
 D CTest_ProxyToggle_Networkable::m_pClassSendTable
 D CTextureToggle::m_DataMap
 D CThrustController::m_DataMap
 D CTimerEntity::m_DataMap
 D CTriggerBrush::m_DataMap
 D CTriggerCamera::m_DataMap
 D CTriggerGravity::m_DataMap
 D CTriggerHurt::m_DataMap
 D CTriggerImpact::m_DataMap
 D CTriggerLook::m_DataMap
 D CTriggerMultiple::m_DataMap
 D CTriggerPlayerMovement::m_DataMap
 D CTriggerProximity::m_DataMap
 D CTriggerPush::m_DataMap
 D CTriggerRemove::m_DataMap
 D CTriggerSave::m_DataMap
 D CTriggerSoundscape::m_DataMap
 D CTriggerTeleport::m_DataMap
 D CTriggerToggleSave::m_DataMap
 D CTriggerVPhysicsMotion::m_DataMap
 D CTriggerWind::m_DataMap
 D CUtlSymbol::s_bAllowStaticSymbolTable
 D CVGuiScreen::m_DataMap
 D CVGuiScreen::m_pClassSendTable
 D CWaterBullet::m_DataMap
 D CWaterBullet::m_pClassSendTable
 D CWaterLODControl::m_DataMap
 D CWaterLODControl::m_pClassSendTable
 D CWeaponAWP::m_DataMap
 D CWeaponAWP::m_PredMap
 D CWeaponAWP::m_pClassSendTable
 D CWeaponAug::m_PredMap
 D CWeaponAug::m_pClassSendTable
 D CWeaponCSBase::m_DataMap
 D CWeaponCSBase::m_PredMap
 D CWeaponCSBase::m_pClassSendTable
 D CWeaponCSBaseGun::m_PredMap
 D CWeaponCSBaseGun::m_pClassSendTable
 D CWeaponCubemap::m_pClassSendTable
 D CWeaponCycler::m_DataMap
 D CWeaponCycler::m_pClassSendTable
 D CWeaponElite::m_PredMap
 D CWeaponElite::m_pClassSendTable
 D CWeaponFamas::m_PredMap
 D CWeaponFamas::m_pClassSendTable
 D CWeaponFiveSeven::m_PredMap
 D CWeaponFiveSeven::m_pClassSendTable
 D CWeaponG3SG1::m_PredMap
 D CWeaponG3SG1::m_pClassSendTable
 D CWeaponGalil::m_PredMap
 D CWeaponGalil::m_pClassSendTable
 D CWeaponGlock::m_PredMap
 D CWeaponGlock::m_pClassSendTable
 D CWeaponM249::m_PredMap
 D CWeaponM249::m_pClassSendTable
 D CWeaponM3::m_PredMap
 D CWeaponM3::m_pClassSendTable
 D CWeaponM4A1::m_PredMap
 D CWeaponM4A1::m_pClassSendTable
 D CWeaponMAC10::m_PredMap
 D CWeaponMAC10::m_pClassSendTable
 D CWeaponMP5Navy::m_PredMap
 D CWeaponMP5Navy::m_pClassSendTable
 D CWeaponP228::m_PredMap
 D CWeaponP228::m_pClassSendTable
 D CWeaponP90::m_PredMap
 D CWeaponP90::m_pClassSendTable
 D CWeaponSG550::m_PredMap
 D CWeaponSG550::m_pClassSendTable
 D CWeaponSG552::m_PredMap
 D CWeaponSG552::m_pClassSendTable
 D CWeaponScout::m_PredMap
 D CWeaponScout::m_pClassSendTable
 D CWeaponTMP::m_PredMap
 D CWeaponTMP::m_pClassSendTable
 D CWeaponUMP45::m_PredMap
 D CWeaponUMP45::m_pClassSendTable
 D CWeaponUSP::m_PredMap
 D CWeaponUSP::m_pClassSendTable
 D CWeaponXM1014::m_PredMap
 D CWeaponXM1014::m_pClassSendTable
 D CWindowPane::m_DataMap
 D CWorld::m_DataMap
 D CWorld::m_pClassSendTable
 D CWorldItem::m_DataMap
 D CWreckage::m_DataMap
 D ConceptHistory_t::m_DataMap
 D ENTITYIO_FIXUP_STRING
 D EntityParticleTrailInfo_t::m_DataMap
 D EventQueuePrioritizedEvent_t::m_DataMap
 D FilterDamageType::m_DataMap
 D FilterTeam::m_DataMap
 D HidingSpot::m_nextID
 D HintNodeData::m_DataMap
 D JeepWaterData_t::m_DataMap
 D MOVE_HEIGHT_EPSILON
 D MovieExplosion::m_pClassSendTable
 D Opposite
 D ParticleSmokeGrenade::m_DataMap
 D ParticleSmokeGrenade::m_pClassSendTable
 D PhysBlockHeader_t::m_DataMap
 D PhysObjectHeader_t::m_DataMap
 D RadioEventName
 D Relationship_t::m_DataMap
 D Response::m_DataMap
 D ResponseContext_t::m_DataMap
 D ResponseGroup::m_DataMap
 D SURFACEPROP_MANIFEST_FILE
 D SaveRestoreBlockHeader_t::m_DataMap
 D SoundCommand_t::m_DataMap
 D TemplateEntityData_t::m_DataMap
 D UnreachableEnt_t::m_DataMap
 D _amblksiz
 D audioparams_t::m_DataMap
 D decalsystem
 D entitytable_t::m_DataMap
 D eventFuncs
 D fogparams_t::m_DataMap
 D gDefaultNPCImpactDamageTable
 D gDefaultPlayerImpactDamageTable
 D gDefaultPlayerVehicleImpactDamageTable
 D gGlassImpactDamageTable
 D gInitHUD
 D g_AI_Formations
 D g_BitStringEndMasks
 D g_ClassInfos
 D g_ConceptCategoryInfos
 D g_ConceptInfos
 D g_DebugConnectNode1
 D g_DebugConnectNode2
 D g_ItemFlags
 D g_KeyFramePtr
 D g_PositionInterpolatorCreateFns
 D g_RotationInterpolators
 D g_SilencedTranslations
 D g_StandoffParamsByAgression
 D g_TimeModifiers
 D g_autoBuyInfo
 D g_bMovementOptimizations
 D g_bTestMoveTypeStepSimulation
 D g_bUseNetworkVars
 D g_flFractionScale
 D g_flThrowGrenadeFraction
 D g_iSoundsToStopOnExit
 D g_nActivityListVersion
 D g_nEventListVersion
 D g_pConstraintEvents
 D g_pEffects
 D g_pEntityList
 D g_pGameMovement
 D g_pGameSaveRestoreBlockSet
 D g_pModelNameLaser
 D g_pMoveData
 D g_pNotify
 D g_pPhysSaveRestoreManager
 D g_pResponseSystem
 D g_pVoiceGameMgrHelper
 D g_ppszGoalTypes
 D g_ppszPhysTypeNames
 D g_ppszTaskFailureText
 D g_pszSCHED_ALERT_FACE
 D g_pszSCHED_ALERT_FACE_BESTSOUND
 D g_pszSCHED_ALERT_SCAN
 D g_pszSCHED_ALERT_STAND
 D g_pszSCHED_ALERT_WALK
 D g_pszSCHED_AMBUSH
 D g_pszSCHED_ARM_WEAPON
 D g_pszSCHED_BACK_AWAY_FROM_ENEMY
 D g_pszSCHED_BACK_AWAY_FROM_SAVE_POSITION
 D g_pszSCHED_BIG_FLINCH
 D g_pszSCHED_CHASE_ENEMY
 D g_pszSCHED_CHASE_ENEMY_FAILED
 D g_pszSCHED_COMBAT_FACE
 D g_pszSCHED_COMBAT_PATROL
 D g_pszSCHED_COMBAT_STAND
 D g_pszSCHED_COMBAT_SWEEP
 D g_pszSCHED_COMBAT_WALK
 D g_pszSCHED_COWER
 D g_pszSCHED_DIE
 D g_pszSCHED_DIE_RAGDOLL
 D g_pszSCHED_DISARM_WEAPON
 D g_pszSCHED_DROPSHIP_DUSTOFF
 D g_pszSCHED_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK
 D g_pszSCHED_FAIL
 D g_pszSCHED_FAIL_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_FAIL_TAKE_COVER
 D g_pszSCHED_FALL_TO_GROUND
 D g_pszSCHED_FEAR_FACE
 D g_pszSCHED_FLEE_FROM_BEST_SOUND
 D g_pszSCHED_FLINCH_PHYSICS
 D g_pszSCHED_FORCED_GO
 D g_pszSCHED_FORCED_GO_RUN
 D g_pszSCHED_GET_HEALTHKIT
 D g_pszSCHED_GIVE_WAY
 D g_pszSCHED_HIDE_AND_RELOAD
 D g_pszSCHED_IDLE_STAND
 D g_pszSCHED_IDLE_WALK
 D g_pszSCHED_IDLE_WANDER
 D g_pszSCHED_INVESTIGATE_SOUND
 D g_pszSCHED_MELEE_ATTACK1
 D g_pszSCHED_MELEE_ATTACK2
 D g_pszSCHED_MOVE_AWAY
 D g_pszSCHED_MOVE_AWAY_END
 D g_pszSCHED_MOVE_AWAY_FAIL
 D g_pszSCHED_MOVE_TO_WEAPON_RANGE
 D g_pszSCHED_NEW_WEAPON
 D g_pszSCHED_NEW_WEAPON_CHEAT
 D g_pszSCHED_NPC_FREEZE
 D g_pszSCHED_PATROL_RUN
 D g_pszSCHED_PATROL_WALK
 D g_pszSCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_RANGE_ATTACK1
 D g_pszSCHED_RANGE_ATTACK2
 D g_pszSCHED_RELOAD
 D g_pszSCHED_RUN_FROM_ENEMY
 D g_pszSCHED_RUN_FROM_ENEMY_FALLBACK
 D g_pszSCHED_RUN_RANDOM
 D g_pszSCHED_SCENE_GENERIC
 D g_pszSCHED_SCRIPTED_CUSTOM_MOVE
 D g_pszSCHED_SCRIPTED_FACE
 D g_pszSCHED_SCRIPTED_RUN
 D g_pszSCHED_SCRIPTED_WAIT
 D g_pszSCHED_SCRIPTED_WALK
 D g_pszSCHED_SHOOT_ENEMY_COVER
 D g_pszSCHED_SMALL_FLINCH
 D g_pszSCHED_SPECIAL_ATTACK1
 D g_pszSCHED_SPECIAL_ATTACK2
 D g_pszSCHED_STANDOFF
 D g_pszSCHED_TAKE_COVER_FROM_BEST_SOUND
 D g_pszSCHED_TAKE_COVER_FROM_ENEMY
 D g_pszSCHED_TAKE_COVER_FROM_ORIGIN
 D g_pszSCHED_TARGET_CHASE
 D g_pszSCHED_TARGET_FACE
 D g_pszSCHED_VICTORY_DANCE
 D g_pszSCHED_WAIT_FOR_SCRIPT
 D g_pszSCHED_WAIT_FOR_SPEAK_FINISH
 D g_pszSCHED_WAKE_ANGRY
 D g_sModelIndexC4Glow
 D globalentity_t::m_DataMap
 D hull
 D iNumArmingAnimFrames
 D lagcompensation
 D locksound_t::m_DataMap
 D m_iBeepFrames
 D m_nDebugOverlayIndex
 D magnetted_objects_t::m_DataMap
 D pFGDPropData
 D pSoundStateNames
 D pWeaponSoundCategories
 D pfFastCos
 D pfFastSinCos
 D pfInvRSquared
 D pfRSqrt
 D pfRSqrtFast
 D pfSqrt
 D pfVectorNormalize
 D pfVectorNormalizeFast
 D physgametrace
 D predef_flexcontroller_names
 D predef_flexcontroller_values
 D predictables
 D responseSystemSaveRestoreOps
 D rgdpvpreset
 D sPropdataInteractionSections
 D sTeamNames
 D s_ElementNames
 D s_pDebrisContext
 D s_pFadeOutContext
 D sky3dparams_t::m_DataMap
 D te
 D template_t::m_DataMap
 D thinkcontextFuncs
 D thinkfunc_t::m_DataMap
 D usermessages
 D variantFuncs
 D variant_t::m_SaveBool
 D variant_t::m_SaveColor
 D variant_t::m_SaveEHandle
 D variant_t::m_SaveFloat
 D variant_t::m_SaveInt
 D variant_t::m_SaveMatrix3x4Worldspace
 D variant_t::m_SavePositionVector
 D variant_t::m_SaveString
 D variant_t::m_SaveVMatrix
 D variant_t::m_SaveVMatrixWorldspace
 D variant_t::m_SaveVector
 D vehicle_crashsound_t::m_DataMap
 D vehicle_gear_t::m_DataMap
 D vehiclesound_parsenames
 D vehiclesounds_t::m_DataMap
 DevMsg
 DevMsg(char const*, ...)
 DevWarning
 DevWarning(char const*, ...)
 Error
 GetCPUInformation
 KeyValuesSystem
 MemAllocScratch
 MemFreeScratch
 Msg
 Plat_FloatTime
 Q_FileBase
 Q_FixSlashes
 Q_IsAbsolutePath
 Q_SetExtension
 Q_SplitString
 Q_StripFilename
 Q_atof
 Q_atoi
 Q_binarytohex
 Q_pretifymem
 Q_snprintf
 Q_strcasecmp
 Q_strcat
 Q_stristr(char const*, char const*)
 Q_strncasecmp
 Q_strncat
 Q_strncmp
 Q_strncpy
 Q_strnicmp
 Q_vsnprintf
 R g_PhysDefaultObjectParams
 R nanmask
 RandomFloat
 RandomInt
 RandomSeed
 T (anonymous namespace)::CPlayerInfoManager_V1::GetPlayerInfo(edict_t*)
 T AIComputeBlockerMoveResult(CBaseEntity*)
 T AIExtendedSaveHeader_t::GetBaseMap()
 T AIGetFormation(AI_Formations_t)
 T AIScheduleState_t::GetBaseMap()
 T AISquadEnemyInfo_t::GetBaseMap()
 T AI_ClampYaw(float, float, float, float)
 T AI_CriteriaSet::AI_CriteriaSet()
 T AI_CriteriaSet::AI_CriteriaSet(AI_CriteriaSet const&)
 T AI_CriteriaSet::AppendCriteria(char const*, char const*, float)
 T AI_CriteriaSet::Describe()
 T AI_CriteriaSet::FindCriterionIndex(char const*) const
 T AI_CriteriaSet::GetCount() const
 T AI_CriteriaSet::GetName(int) const
 T AI_CriteriaSet::GetValue(int) const
 T AI_CriteriaSet::GetWeight(int) const
 T AI_CriteriaSet::RemoveCriteria(char const*)
 T AI_CriteriaSet::~AI_CriteriaSet()
 T AI_EnemyInfo_t::AI_EnemyInfo_t()
 T AI_EnemyInfo_t::GetBaseMap()
 T AI_FollowNavInfo_t::GetBaseMap()
 T AI_FollowParams_t::GetBaseMap()
 T AI_FreePassParams_t::GetBaseMap()
 T AI_LeadArgs_t::GetBaseMap()
 T AI_Response::AI_Response()
 T AI_Response::AI_Response(AI_Response const&)
 T AI_Response::Describe()
 T AI_Response::DescribeResponse(ResponseType_t)
 T AI_Response::GetBaseMap()
 T AI_Response::GetCriteria()
 T AI_Response::GetDelay() const
 T AI_Response::GetName() const
 T AI_Response::GetOdds() const
 T AI_Response::GetRespeakDelay() const
 T AI_Response::GetResponse() const
 T AI_Response::GetSoundLevel() const
 T AI_Response::GetSpeakOnce() const
 T AI_Response::Init(ResponseType_t, char const*, AI_CriteriaSet const&, AI_ResponseParams const&, char const*)
 T AI_Response::Release()
 T AI_Response::ShouldntUseScene() const
 T AI_Response::operator=(AI_Response const&)
 T AI_Response::~AI_Response()
 T AI_ResponseParams::GetBaseMap()
 T AI_StandoffParams_t::GetBaseMap()
 T AI_TraceLOS(Vector const&, Vector const&, CBaseEntity*, CGameTrace*, ITraceFilter*)
 T AI_Waypoint_t::AI_Waypoint_t()
 T AI_Waypoint_t::AI_Waypoint_t(Vector const&, float, Navigation_t, int, int)
 T AI_Waypoint_t::GetBaseMap()
 T AI_Waypoint_t::GetLast()
 T AccumulatePose(studiohdr_t const*, CIKContext*, Vector*, Quaternion*, int, float, float const*, int, float, float)
 T ActiveGrenade::ActiveGrenade(CBaseGrenade*)
 T ActiveGrenade::GetPosition() const
 T ActiveGrenade::IsValid() const
 T ActiveGrenade::OnEntityGone()
 T ActiveGrenade::Update()
 T ActivityDataOps()
 T ActivityList_AddActivityEntry(char const*, int, bool)
 T ActivityList_Free()
 T ActivityList_IndexForName(char const*)
 T ActivityList_Init()
 T ActivityList_NameForIndex(int)
 T ActivityList_RegisterPrivateActivity(char const*)
 T ActivityList_RegisterSharedActivities()
 T ActivityList_RegisterSharedActivity(char const*, int)
 T AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)
 T AddPointToBounds(Vector const&, Vector&, Vector&)
 T AddRestoredEntity(CBaseEntity*)
 T AddSequenceLayers(studiohdr_t const*, CIKContext*, Vector*, Quaternion*, int, float, float const*, int, float, float)
 T AddSurfacepropFile(char const*, IPhysicsSurfaceProps*, IFileSystem*)
 T AddWaypointLists(AI_Waypoint_t*, AI_Waypoint_t*)
 T AimTarget_ForceRepopulateList()
 T AimTarget_ListCopy(CBaseEntity**, int)
 T AimTarget_ListCount()
 T AliasToWeaponID(char const*)
 T AllocPooledString(char const*)
 T AllocateStringHelper(char const*, ...)
 T AllocateStringHelper2(char const*, char*)
 T AllocateUniqueDataTableName(bool, char const*, ...)
 T AngleDiff(float, float)
 T AngleDistance(float, float)
 T AngleIMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleIMatrix(QAngle const&, matrix3x4_t&)
 T AngleIMatrix(RadianEuler const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, matrix3x4_t&)
 T AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
 T AngleMatrix(RadianEuler const&, matrix3x4_t&)
 T AngleNormalize(float)
 T AngleNormalizePositive(float)
 T AngleQuaternion(QAngle const&, Quaternion&)
 T AngleQuaternion(RadianEuler const&, Quaternion&)
 T AngleVectors(QAngle const&, Vector*)
 T AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T AngleVectorsTranspose(QAngle const&, Vector*, Vector*, Vector*)
 T AnglesAreEqual(float, float, float)
 T ApplyMultiDamage()
 T Approach(float, float, float)
 T ApproachAngle(float, float, float)
 T ApproachAreaAnalysisPrep()
 T AssignRangeMultiplier(int, double)
 T AttackState::Dodge(CCSBot*)
 T AttackState::OnEnter(CCSBot*)
 T AttackState::OnExit(CCSBot*)
 T AttackState::OnUpdate(CCSBot*)
 T AttackState::StopAttacking(CCSBot*)
 T AttenuateCaption(char const*, Vector const&, CUtlVector<Vector, CUtlMemory<Vector> >&)
 T AvoidPushawayProps(CBaseCombatCharacter*, CUserCmd*)
 T AxisAngleQuaternion(Vector const&, float, Quaternion&)
 T BasisToQuaternion(Vector const&, Vector const&, Vector const&, Quaternion&)
 T BeginRestoreEntities()
 T Bias(float, float)
 T BlendBones(studiohdr_t const*, Quaternion*, Vector*, int, Quaternion const*, Vector const*, float, int)
 T BotAllHostagesGoneMeme::Interpret(CCSBot*, CCSBot*) const
 T BotBombStatusMeme::Interpret(CCSBot*, CCSBot*) const
 T BotBombsiteStatusMeme::Interpret(CCSBot*, CCSBot*) const
 T BotCOS(float)
 T BotChatterInterface::AddStatement(BotStatement*, bool)
 T BotChatterInterface::Affirmative()
 T BotChatterInterface::AnnouncePlan(char const*, unsigned int)
 T BotChatterInterface::BombsiteClear(int)
 T BotChatterInterface::BotChatterInterface(CCSBot*)
 T BotChatterInterface::CelebrateWin()
 T BotChatterInterface::Clear(unsigned int)
 T BotChatterInterface::Encourage(char const*, float, float)
 T BotChatterInterface::EnemiesRemaining()
 T BotChatterInterface::EnemySpotted()
 T BotChatterInterface::EscortingHostages()
 T BotChatterInterface::FoundPlantedBomb(int)
 T BotChatterInterface::FriendHeardNoise()
 T BotChatterInterface::FriendSpottedSniper()
 T BotChatterInterface::FriendlyFire()
 T BotChatterInterface::GetActiveStatement()
 T BotChatterInterface::GetRadioSilenceDuration()
 T BotChatterInterface::GoingToPlantTheBomb(unsigned int)
 T BotChatterInterface::GuardingBombsite(unsigned int)
 T BotChatterInterface::GuardingHostageEscapeZone(bool)
 T BotChatterInterface::GuardingHostages(unsigned int, bool)
 T BotChatterInterface::GuardingLooseBomb(CBaseEntity*)
 T BotChatterInterface::HeardNoise(Vector const&)
 T BotChatterInterface::HostageDown()
 T BotChatterInterface::HostagesBeingTaken()
 T BotChatterInterface::HostagesTaken()
 T BotChatterInterface::KilledFriend()
 T BotChatterInterface::KilledMyEnemy(int)
 T BotChatterInterface::NeedBackup()
 T BotChatterInterface::Negative()
 T BotChatterInterface::OnDeath()
 T BotChatterInterface::PinnedDown()
 T BotChatterInterface::PlantingTheBomb(unsigned int)
 T BotChatterInterface::RemoveStatement(BotStatement*)
 T BotChatterInterface::ReportEnemies()
 T BotChatterInterface::ReportIn()
 T BotChatterInterface::ReportingIn()
 T BotChatterInterface::RequestBombLocation()
 T BotChatterInterface::Reset()
 T BotChatterInterface::ResetRadioSilenceDuration()
 T BotChatterInterface::Scared()
 T BotChatterInterface::ShouldSpeak() const
 T BotChatterInterface::SpottedBomber(CBasePlayer*)
 T BotChatterInterface::SpottedLooseBomb(CBaseEntity*)
 T BotChatterInterface::SpottedSniper()
 T BotChatterInterface::TalkingToHostages()
 T BotChatterInterface::TheyPickedUpTheBomb()
 T BotChatterInterface::Update()
 T BotChatterInterface::~BotChatterInterface()
 T BotDefendHereMeme::Interpret(CCSBot*, CCSBot*) const
 T BotFollowMeme::Interpret(CCSBot*, CCSBot*) const
 T BotHeardNoiseMeme::Interpret(CCSBot*, CCSBot*) const
 T BotHelpMeme::Interpret(CCSBot*, CCSBot*) const
 T BotHostageBeingTakenMeme::Interpret(CCSBot*, CCSBot*) const
 T BotMeme::Transmit(CCSBot*) const
 T BotPhrase::BotPhrase(bool)
 T BotPhrase::GetSpeakable(int, float*) const
 T BotPhrase::InitVoiceBank(int)
 T BotPhrase::Randomize()
 T BotPhrase::~BotPhrase()
 T BotPhraseManager::BotPhraseManager()
 T BotPhraseManager::GetOutputType(int) const
 T BotPhraseManager::GetPhrase(char const*) const
 T BotPhraseManager::GetPlace(char const*) const
 T BotPhraseManager::GetPlace(unsigned int) const
 T BotPhraseManager::Initialize(char const*, int)
 T BotPhraseManager::OnMapChange()
 T BotPhraseManager::OnRoundRestart()
 T BotPhraseManager::Reset()
 T BotPhraseManager::~BotPhraseManager()
 T BotPrecache()
 T BotProfile::GetWeaponPreferenceAsString(int) const
 T BotProfile::HasPistolPreference() const
 T BotProfile::HasPrimaryPreference() const
 T BotProfile::IsValidForTeam(int) const
 T BotProfileManager::BotProfileManager()
 T BotProfileManager::FindVoiceBankIndex(char const*)
 T BotProfileManager::GetCustomSkin(int)
 T BotProfileManager::GetCustomSkinFname(int)
 T BotProfileManager::GetCustomSkinIndex(char const*, char const*)
 T BotProfileManager::GetCustomSkinModelname(int)
 T BotProfileManager::GetRandomProfile(BotDifficultyType, int) const
 T BotProfileManager::Init(char const*, unsigned int*)
 T BotProfileManager::Reset()
 T BotProfileManager::~BotProfileManager()
 T BotRequestReportMeme::Interpret(CCSBot*, CCSBot*) const
 T BotSIN(float)
 T BotSpeakable::BotSpeakable()
 T BotSpeakable::~BotSpeakable()
 T BotStatement::AddCondition(BotStatement::ConditionType)
 T BotStatement::AppendPhrase(BotPhrase const*)
 T BotStatement::AppendPhrase(BotStatement::ContextType)
 T BotStatement::AttachMeme(BotMeme*)
 T BotStatement::BotStatement(BotChatterInterface*, BotStatementType, float)
 T BotStatement::Convert(BotStatement const*)
 T BotStatement::GetOwner() const
 T BotStatement::GetPlace() const
 T BotStatement::HasCount() const
 T BotStatement::IsImportant() const
 T BotStatement::IsObsolete() const
 T BotStatement::IsRedundant(BotStatement const*) const
 T BotStatement::IsValid() const
 T BotStatement::Update()
 T BotStatement::~BotStatement()
 T BotWarnSniperMeme::Interpret(CCSBot*, CCSBot*) const
 T BotWhereBombMeme::Interpret(CCSBot*, CCSBot*) const
 T Bot_ServerCommand()
 T BoxOnPlaneSide(float const*, float const*, cplane_t const*)
 T BreakModelCreateSingle(CBaseEntity*, breakmodel_t*, Vector const&, QAngle const&, Vector const&, Vector const&, int, breakablepropparams_t const&)
 T BreakModelList(CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t> >&, int, float, int)
 T BufPrintf(char*, int&, char const*, ...)
 T BuildAllAnimationEventIndexes(studiohdr_t*)
 T BuildBoneChain(studiohdr_t const*, matrix3x4_t&, Vector*, Quaternion*, int, matrix3x4_t*)
 T BuildBoneChain(studiohdr_t const*, matrix3x4_t&, Vector*, Quaternion*, int, matrix3x4_t*, CBoneBitList&)
 T BuildChangeList(levellist_t*, int)
 T BuildExponentTable()
 T BuildGammaTable(float, float, float, int)
 T BuildMatricesWithBoneMerge(studiohdr_t const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, matrix3x4_t*, CBaseAnimating*, CBoneCache*)
 T BulletWizz(Vector, Vector, edict_t*, bool)
 T BuyState::OnEnter(CCSBot*)
 T BuyState::OnExit(CCSBot*)
 T BuyState::OnUpdate(CCSBot*)
 T CAISound::GetBaseMap()
 T CAISound::GetDataDescMap()
 T CAISound::InputInsertSound(inputdata_t&)
 T CAI_AccelDecay::GetBaseMap()
 T CAI_AccelDecay::ResetVelocity(float)
 T CAI_AccelDecay::SetMaxVelocity(float)
 T CAI_AccelDecay::SetParameters(float, float, float, float)
 T CAI_AccelDecay::Update(float, float, float)
 T CAI_AllySpeechManager::CAI_AllySpeechManager()
 T CAI_AllySpeechManager::CategoryDelayExpired(ConceptCategory_t)
 T CAI_AllySpeechManager::ConceptDelayExpired(char const*)
 T CAI_AllySpeechManager::GetBaseMap()
 T CAI_AllySpeechManager::GetConceptCategoryInfo(ConceptCategory_t)
 T CAI_AllySpeechManager::GetConceptInfo(char const*)
 T CAI_AllySpeechManager::GetDataDescMap()
 T CAI_AllySpeechManager::OnSpokeConcept(CAI_PlayerAlly*, char const*)
 T CAI_AllySpeechManager::SetCategoryDelay(ConceptCategory_t, float, float)
 T CAI_AllySpeechManager::Spawn()
 T CAI_AllySpeechManager::~CAI_AllySpeechManager()
 T CAI_AssaultBehavior::BeginScheduleSelection()
 T CAI_AssaultBehavior::BuildScheduleTestBits()
 T CAI_AssaultBehavior::CAI_AssaultBehavior()
 T CAI_AssaultBehavior::CScheduleLoader::CScheduleLoader()
 T CAI_AssaultBehavior::CanSelectSchedule()
 T CAI_AssaultBehavior::ClearAssaultPoint()
 T CAI_AssaultBehavior::ClearSchedule()
 T CAI_AssaultBehavior::EndScheduleSelection()
 T CAI_AssaultBehavior::FindBestRallyPointInRadius(Vector const&, float)
 T CAI_AssaultBehavior::GetBaseMap()
 T CAI_AssaultBehavior::GetDataDescMap()
 T CAI_AssaultBehavior::InitCustomSchedules()
 T CAI_AssaultBehavior::InitializeBehavior()
 T CAI_AssaultBehavior::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_AssaultBehavior::LoadSchedules()
 T CAI_AssaultBehavior::LoadedSchedules()
 T CAI_AssaultBehavior::OnStartSchedule(int)
 T CAI_AssaultBehavior::PollAssaultCue()
 T CAI_AssaultBehavior::ReceiveAssaultCue(AssaultCue_t)
 T CAI_AssaultBehavior::RunTask(Task_t const*)
 T CAI_AssaultBehavior::SelectSchedule()
 T CAI_AssaultBehavior::SetParameters(CBaseEntity*, AssaultCue_t)
 T CAI_AssaultBehavior::SetParameters(string_t, AssaultCue_t)
 T CAI_AssaultBehavior::StartTask(Task_t const*)
 T CAI_AssaultBehavior::TranslateSchedule(int)
 T CAI_AssaultBehavior::UpdateOnRemove()
 T CAI_AssaultGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_AssaultGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_AssaultGoal::GetBaseMap()
 T CAI_AssaultGoal::GetDataDescMap()
 T CAI_AssaultGoal::InputBeginAssault(inputdata_t&)
 T CAI_BaseActor::AccumulateIdealYaw(float, float)
 T CAI_BaseActor::AddLookTarget(CBaseEntity*, float, float, float)
 T CAI_BaseActor::AddLookTarget(Vector const&, float, float, float)
 T CAI_BaseActor::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::ClampWithBias(PoseParameter_t, float, float)
 T CAI_BaseActor::ClearExpression()
 T CAI_BaseActor::ClearSceneEvent(CSceneEventInfo*, bool, bool)
 T CAI_BaseActor::CreateComponents()
 T CAI_BaseActor::CreateExpresser()
 T CAI_BaseActor::EyeDirection2D()
 T CAI_BaseActor::EyeDirection3D()
 T CAI_BaseActor::EyePosition()
 T CAI_BaseActor::GetBaseMap()
 T CAI_BaseActor::GetDataDescMap()
 T CAI_BaseActor::GetExpresser()
 T CAI_BaseActor::GetExpression()
 T CAI_BaseActor::HasActiveLookTargets()
 T CAI_BaseActor::HeadDirection2D()
 T CAI_BaseActor::HeadDirection3D()
 T CAI_BaseActor::HeadTargetValidity(Vector const&)
 T CAI_BaseActor::InputSetExpressionOverride(inputdata_t&)
 T CAI_BaseActor::MaintainLookTargets(float)
 T CAI_BaseActor::MakeRandomLookTarget(AILookTargetArgs_t*, float, float)
 T CAI_BaseActor::OnStateChange(NPC_STATE, NPC_STATE)
 T CAI_BaseActor::PickLookTarget(CAI_InterestTarget&, bool, float, float)
 T CAI_BaseActor::PickLookTarget(bool, float, float)
 T CAI_BaseActor::PickRandomLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::PickTacticalLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::PlayExpressionForState(NPC_STATE)
 T CAI_BaseActor::Precache()
 T CAI_BaseActor::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::RandomFaceFlex(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::SelectRandomExpressionForState(NPC_STATE)
 T CAI_BaseActor::SetAccumulatedYawAndUpdate()
 T CAI_BaseActor::SetExpression(char const*)
 T CAI_BaseActor::SetHeadDirection(Vector const&, float)
 T CAI_BaseActor::SetModel(char const*)
 T CAI_BaseActor::SetViewtarget(Vector const&)
 T CAI_BaseActor::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CAI_BaseActor::StartTaskRangeAttack1(Task_t const*)
 T CAI_BaseActor::StudioFrameAdvance()
 T CAI_BaseActor::UpdateHeadBodyControl(Vector const&, float, Vector const&, float)
 T CAI_BaseActor::UpdateLatchedValues()
 T CAI_BaseActor::ValidEyeTarget(Vector const&)
 T CAI_BaseActor::ValidHeadTarget(Vector const&)
 T CAI_BaseFlyingBot::BodyAngles()
 T CAI_BaseFlyingBot::CAI_BaseFlyingBot()
 T CAI_BaseFlyingBot::GetBaseMap()
 T CAI_BaseFlyingBot::GetDataDescMap()
 T CAI_BaseFlyingBot::GetVelocity(Vector*, Vector*)
 T CAI_BaseFlyingBot::MinGroundDist()
 T CAI_BaseFlyingBot::MoveToTarget(float, Vector const&)
 T CAI_BaseFlyingBot::ProgressFlyPath(float, CBaseEntity const*, unsigned int, bool, float)
 T CAI_BaseFlyingBot::StartTask(Task_t const*)
 T CAI_BaseFlyingBot::TranslateNavGoal(CBaseEntity*, Vector&)
 T CAI_BaseFlyingBot::TurnHeadToTarget(float, Vector const&)
 T CAI_BaseFlyingBot::VelocityToAvoidObstacles(float)
 T CAI_BaseHumanoid::BuildScheduleTestBits()
 T CAI_BaseHumanoid::CheckAmmo()
 T CAI_BaseHumanoid::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_BaseHumanoid::OnMoveBlocked(AIMoveResult_t*)
 T CAI_BaseHumanoid::RunTask(Task_t const*)
 T CAI_BaseHumanoid::RunTaskRangeAttack1(Task_t const*)
 T CAI_BaseHumanoid::StartTask(Task_t const*)
 T CAI_BaseHumanoid::StartTaskRangeAttack1(Task_t const*)
 T CAI_BaseHumanoid::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CAI_BaseNPC::AddActivityToSR(char const*, int)
 T CAI_BaseNPC::AddClassRelationship(Class_T, Disposition_t, int)
 T CAI_BaseNPC::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CAI_BaseNPC::AddEventToSR(char const*, int)
 T CAI_BaseNPC::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
 T CAI_BaseNPC::AddFacingTarget(CBaseEntity*, float, float, float)
 T CAI_BaseNPC::AddFacingTarget(Vector const&, float, float, float)
 T CAI_BaseNPC::AddRelationship(char const*, CBaseEntity*)
 T CAI_BaseNPC::AddToSquad(string_t)
 T CAI_BaseNPC::AdvanceToIdealActivity()
 T CAI_BaseNPC::AimGun()
 T CAI_BaseNPC::AutoMovement(CBaseEntity*, AIMoveTrace_t*)
 T CAI_BaseNPC::AutoMovement(float, CBaseEntity*, AIMoveTrace_t*)
 T CAI_BaseNPC::BBoxFlat()
 T CAI_BaseNPC::BestEnemy()
 T CAI_BaseNPC::BodyTarget(Vector const&, bool)
 T CAI_BaseNPC::Break(CBaseEntity*)
 T CAI_BaseNPC::BuildScheduleTestBits()
 T CAI_BaseNPC::CAI_BaseNPC()
 T CAI_BaseNPC::CalcIdealYaw(Vector const&)
 T CAI_BaseNPC::CalcReasonableFacing(bool)
 T CAI_BaseNPC::CalcThrowVelocity(Vector const&, Vector const&, float, float)
 T CAI_BaseNPC::CalcYawSpeed()
 T CAI_BaseNPC::CallNPCThink()
 T CAI_BaseNPC::CanBeAnEnemyOf(CBaseEntity*)
 T CAI_BaseNPC::CanBeUsedAsAFriend()
 T CAI_BaseNPC::CanPlaySequence(bool, int)
 T CAI_BaseNPC::CanStandOn(CBaseEntity*) const
 T CAI_BaseNPC::CapabilitiesAdd(int)
 T CAI_BaseNPC::CapabilitiesClear()
 T CAI_BaseNPC::CapabilitiesGet() const
 T CAI_BaseNPC::CapabilitiesRemove(int)
 T CAI_BaseNPC::CascadePlayerPush(Vector const&, Vector const&)
 T CAI_BaseNPC::CheckFlinches()
 T CAI_BaseNPC::CheckOnGround()
 T CAI_BaseNPC::CheckPhysicsContacts()
 T CAI_BaseNPC::CheckTarget(CBaseEntity*)
 T CAI_BaseNPC::ChooseEnemy()
 T CAI_BaseNPC::CineCleanup()
 T CAI_BaseNPC::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_BaseNPC::ClearAllSchedules()
 T CAI_BaseNPC::ClearAttackConditions()
 T CAI_BaseNPC::ClearCommandGoal()
 T CAI_BaseNPC::ClearCondition(int)
 T CAI_BaseNPC::ClearConditions(int*, int)
 T CAI_BaseNPC::ClearCustomInterruptCondition(int)
 T CAI_BaseNPC::ClearEnemyMemory()
 T CAI_BaseNPC::ClearHintNode(float)
 T CAI_BaseNPC::ClearIgnoreConditions(int*, int)
 T CAI_BaseNPC::ClearSchedule()
 T CAI_BaseNPC::ClearSenseConditions()
 T CAI_BaseNPC::ClearTransientConditions()
 T CAI_BaseNPC::ClearWait()
 T CAI_BaseNPC::CollectShotStats(Vector const&, Vector const&)
 T CAI_BaseNPC::ConditionInterruptsCurSchedule(int)
 T CAI_BaseNPC::ConditionInterruptsSchedule(int, int)
 T CAI_BaseNPC::ConditionName(int)
 T CAI_BaseNPC::CorpseFallThink()
 T CAI_BaseNPC::CreateComponents()
 T CAI_BaseNPC::CreateLocalNavigator()
 T CAI_BaseNPC::CreateMotor()
 T CAI_BaseNPC::CreateMoveProbe()
 T CAI_BaseNPC::CreateNavigator()
 T CAI_BaseNPC::CreatePathfinder()
 T CAI_BaseNPC::CreateSenses()
 T CAI_BaseNPC::CreateTacticalServices()
 T CAI_BaseNPC::CreateVPhysics()
 T CAI_BaseNPC::DecalTrace(CGameTrace*, char const*)
 T CAI_BaseNPC::DiscardScheduleState()
 T CAI_BaseNPC::DoImpactEffect(CGameTrace&, int)
 T CAI_BaseNPC::DoRadiusDamage(CTakeDamageInfo const&, Vector const&, int, CBaseEntity*)
 T CAI_BaseNPC::DoRadiusDamage(CTakeDamageInfo const&, int, CBaseEntity*)
 T CAI_BaseNPC::DrawDebugGeometryOverlays()
 T CAI_BaseNPC::DrawDebugTextOverlays()
 T CAI_BaseNPC::DropItem(char*, Vector, QAngle)
 T CAI_BaseNPC::DumpTaskTimings()
 T CAI_BaseNPC::EndTaskOverlay()
 T CAI_BaseNPC::EnemyDistance(CBaseEntity*)
 T CAI_BaseNPC::EnemyHasEludedMe() const
 T CAI_BaseNPC::Event_Gibbed(CTakeDamageInfo const&)
 T CAI_BaseNPC::Event_Killed(CTakeDamageInfo const&)
 T CAI_BaseNPC::ExitScriptedSequence()
 T CAI_BaseNPC::EyeDirection2D()
 T CAI_BaseNPC::EyeDirection3D()
 T CAI_BaseNPC::EyeLookTarget()
 T CAI_BaseNPC::EyeOffset(Activity)
 T CAI_BaseNPC::FCanCheckAttacks()
 T CAI_BaseNPC::FHaveSchedule()
 T CAI_BaseNPC::FInAimCone(Vector const&)
 T CAI_BaseNPC::FOkToMakeSound(int)
 T CAI_BaseNPC::FScheduleDone()
 T CAI_BaseNPC::FValidateHintType(CAI_Hint*)
 T CAI_BaseNPC::FacingIdeal()
 T CAI_BaseNPC::FindCoverFromBestSound(Vector*)
 T CAI_BaseNPC::FindCoverFromEnemy(bool, float, float)
 T CAI_BaseNPC::FindCoverPos(CBaseEntity*, Vector*)
 T CAI_BaseNPC::FindCoverPos(CSound*, Vector*)
 T CAI_BaseNPC::FindCoverPosInRadius(CBaseEntity*, Vector const&, float, Vector*)
 T CAI_BaseNPC::FindNamedEntity(char const*)
 T CAI_BaseNPC::FindNearestValidGoalPos(Vector const&, Vector*)
 T CAI_BaseNPC::FindSpotForNPCInRadius(Vector*, Vector const&, CAI_BaseNPC*, float, bool)
 T CAI_BaseNPC::FireBullets(FireBulletsInfo_t const&)
 T CAI_BaseNPC::FlyMove(Vector const&, unsigned int)
 T CAI_BaseNPC::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 T CAI_BaseNPC::ForceSelectedGoRandom()
 T CAI_BaseNPC::GatherAttackConditions(CBaseEntity*, float)
 T CAI_BaseNPC::GatherConditions()
 T CAI_BaseNPC::GatherEnemyConditions(CBaseEntity*)
 T CAI_BaseNPC::GetActivityID(char const*)
 T CAI_BaseNPC::GetActivityName(int)
 T CAI_BaseNPC::GetBaseMap()
 T CAI_BaseNPC::GetBestScent()
 T CAI_BaseNPC::GetBestSound(int)
 T CAI_BaseNPC::GetClassName()
 T CAI_BaseNPC::GetConditionID(char const*)
 T CAI_BaseNPC::GetCoverActivity(CAI_Hint*)
 T CAI_BaseNPC::GetDataDescMap()
 T CAI_BaseNPC::GetEnemies()
 T CAI_BaseNPC::GetEnemyCombatCharacterPointer()
 T CAI_BaseNPC::GetEnemyLKP() const
 T CAI_BaseNPC::GetEnemyLastTimeSeen() const
 T CAI_BaseNPC::GetEnemyOccluder()
 T CAI_BaseNPC::GetEventID(char const*)
 T CAI_BaseNPC::GetEventName(int)
 T CAI_BaseNPC::GetFacingDirection(Vector&)
 T CAI_BaseNPC::GetFailSchedule()
 T CAI_BaseNPC::GetFlinchActivity(bool, bool)
 T CAI_BaseNPC::GetGoalRepathTolerance(CBaseEntity*, GoalType_t, Vector const&, Vector const&)
 T CAI_BaseNPC::GetHintActivity(short, Activity)
 T CAI_BaseNPC::GetHintDelay(short)
 T CAI_BaseNPC::GetHitgroupDamageMultiplier(int, CTakeDamageInfo const&)
 T CAI_BaseNPC::GetLoudestSoundOfType(int)
 T CAI_BaseNPC::GetNavTargetEntity()
 T CAI_BaseNPC::GetNavType() const
 T CAI_BaseNPC::GetNewSchedule()
 T CAI_BaseNPC::GetReactionDelay(CBaseEntity*)
 T CAI_BaseNPC::GetReasonableFacingDist()
 T CAI_BaseNPC::GetReloadActivity(CAI_Hint*)
 T CAI_BaseNPC::GetSchedule(int)
 T CAI_BaseNPC::GetScheduleID(char const*)
 T CAI_BaseNPC::GetScheduleOfType(int)
 T CAI_BaseNPC::GetScriptCustomMoveActivity()
 T CAI_BaseNPC::GetScriptCustomMoveSequence()
 T CAI_BaseNPC::GetServerClass()
 T CAI_BaseNPC::GetShootEnemyDir(Vector const&, bool)
 T CAI_BaseNPC::GetSmoothedVelocity()
 T CAI_BaseNPC::GetSoundInterests()
 T CAI_BaseNPC::GetSquadSlotID(char const*)
 T CAI_BaseNPC::GetStepDownMultiplier() const
 T CAI_BaseNPC::GetStoppedActivity()
 T CAI_BaseNPC::GetTask()
 T CAI_BaseNPC::GetTaskID(char const*)
 T CAI_BaseNPC::GetTimeToNavGoal()
 T CAI_BaseNPC::GetTracerType()
 T CAI_BaseNPC::HandleAnimEvent(animevent_t*)
 T CAI_BaseNPC::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_BaseNPC::HasCondition(int)
 T CAI_BaseNPC::HasCondition(int, bool)
 T CAI_BaseNPC::HasInterruptCondition(int)
 T CAI_BaseNPC::HasStrategySlot(int)
 T CAI_BaseNPC::HasStrategySlotRange(int, int)
 T CAI_BaseNPC::HeadDirection2D()
 T CAI_BaseNPC::HeadDirection3D()
 T CAI_BaseNPC::ImpactTrace(CGameTrace*, int, char*)
 T CAI_BaseNPC::IncomingGrenade()
 T CAI_BaseNPC::InitDefaultActivitySR()
 T CAI_BaseNPC::InitDefaultConditionSR()
 T CAI_BaseNPC::InitDefaultScheduleSR()
 T CAI_BaseNPC::InitDefaultSquadSlotSR()
 T CAI_BaseNPC::InitDefaultTaskSR()
 T CAI_BaseNPC::InitRelationshipTable()
 T CAI_BaseNPC::InitSchedulingTables()
 T CAI_BaseNPC::InitSquad()
 T CAI_BaseNPC::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
 T CAI_BaseNPC::InputBeginRappel(inputdata_t&)
 T CAI_BaseNPC::InputBreak(inputdata_t&)
 T CAI_BaseNPC::InputForgetEntity(inputdata_t&)
 T CAI_BaseNPC::InputIgnoreDangerSounds(inputdata_t&)
 T CAI_BaseNPC::InputSetHealth(inputdata_t&)
 T CAI_BaseNPC::InputSetRelationship(inputdata_t&)
 T CAI_BaseNPC::InputSetSquad(inputdata_t&)
 T CAI_BaseNPC::InputWake(inputdata_t&)
 T CAI_BaseNPC::IsActivityFinished()
 T CAI_BaseNPC::IsActivityMovementPhased(Activity)
 T CAI_BaseNPC::IsCoverPosition(Vector const&, Vector const&)
 T CAI_BaseNPC::IsCurSchedule(int, bool)
 T CAI_BaseNPC::IsCurTaskContinuousMove()
 T CAI_BaseNPC::IsCustomInterruptConditionSet(int)
 T CAI_BaseNPC::IsHeavyDamage(CTakeDamageInfo const&)
 T CAI_BaseNPC::IsInPlayerSquad() const
 T CAI_BaseNPC::IsInterruptable()
 T CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&, float, float, float) const
 T CAI_BaseNPC::IsLightDamage(CTakeDamageInfo const&)
 T CAI_BaseNPC::IsMoving()
 T CAI_BaseNPC::IsMovingToPickupWeapon()
 T CAI_BaseNPC::IsNavHullValid() const
 T CAI_BaseNPC::IsNavigationUrgent()
 T CAI_BaseNPC::IsPlayerAlly(CBasePlayer*)
 T CAI_BaseNPC::IsScheduleValid()
 T CAI_BaseNPC::IsSquadmateInSpread(Vector const&, Vector const&, float, float)
 T CAI_BaseNPC::IsStrategySlotRangeOccupied(int, int)
 T CAI_BaseNPC::IsTemplate()
 T CAI_BaseNPC::IsUnreachable(CBaseEntity*)
 T CAI_BaseNPC::IsUnusableNode(int, CAI_Hint*)
 T CAI_BaseNPC::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BaseNPC::IsValidEnemy(CBaseEntity*)
 T CAI_BaseNPC::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BaseNPC::IsWaitFinished()
 T CAI_BaseNPC::IsWaitSet()
 T CAI_BaseNPC::JustMadeSound(int, float)
 T CAI_BaseNPC::KeyValue(char const*, char const*)
 T CAI_BaseNPC::LineOfSightDist(Vector const&, float)
 T CAI_BaseNPC::LoadDefaultSchedules()
 T CAI_BaseNPC::LoadSchedules()
 T CAI_BaseNPC::LoadedSchedules()
 T CAI_BaseNPC::LockBestSound()
 T CAI_BaseNPC::MaintainActivity()
 T CAI_BaseNPC::MaintainLookTargets(float)
 T CAI_BaseNPC::MaintainSchedule()
 T CAI_BaseNPC::MaintainTurnActivity()
 T CAI_BaseNPC::MakeDamageBloodDecal(int, float, CGameTrace*, Vector)
 T CAI_BaseNPC::MakeTracer(Vector const&, CGameTrace const&, int)
 T CAI_BaseNPC::MarkEnemyAsEluded()
 T CAI_BaseNPC::MaxYawSpeed()
 T CAI_BaseNPC::MeleeAttack1Conditions(float, float)
 T CAI_BaseNPC::MeleeAttack2Conditions(float, float)
 T CAI_BaseNPC::MovementCost(int, Vector const&, Vector const&, float*)
 T CAI_BaseNPC::NPCInit()
 T CAI_BaseNPC::NPCInitDead()
 T CAI_BaseNPC::NPCInitThink()
 T CAI_BaseNPC::NPCThink()
 T CAI_BaseNPC::NPCUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CAI_BaseNPC::NPC_TranslateActivity(Activity)
 T CAI_BaseNPC::NextScheduledTask()
 T CAI_BaseNPC::NotifyFriendsOfDamage(CBaseEntity*)
 T CAI_BaseNPC::NotifyPushMove()
 T CAI_BaseNPC::NumWeaponsInSquad(char const*)
 T CAI_BaseNPC::OccupyStrategySlot(int)
 T CAI_BaseNPC::OccupyStrategySlotRange(int, int)
 T CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_BaseNPC::OnDoorBlocked(CBasePropDoor*)
 T CAI_BaseNPC::OnDoorFullyOpen(CBasePropDoor*)
 T CAI_BaseNPC::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BaseNPC::OnListened()
 T CAI_BaseNPC::OnLooked(int)
 T CAI_BaseNPC::OnObstructingDoor(AILocalMoveGoal_t*, CBaseDoor*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnRangeAttack1()
 T CAI_BaseNPC::OnRestore()
 T CAI_BaseNPC::OnScheduleChange()
 T CAI_BaseNPC::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTakeDamage_Dead(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnUpcomingPropDoor(AILocalMoveGoal_t*, CBasePropDoor*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnUpdateShotRegulator()
 T CAI_BaseNPC::OpenDoorAndWait(CBaseEntity*)
 T CAI_BaseNPC::OpenPropDoorBegin(CBasePropDoor*)
 T CAI_BaseNPC::OpenPropDoorNow(CBasePropDoor*)
 T CAI_BaseNPC::OverrideMove(float)
 T CAI_BaseNPC::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CAI_BaseNPC::PassesDamageFilter(CTakeDamageInfo const&)
 T CAI_BaseNPC::PerformMovement()
 T CAI_BaseNPC::PerformSensing()
 T CAI_BaseNPC::PhysicsSolidMaskForEntity() const
 T CAI_BaseNPC::PickupWeapon(CBaseCombatWeapon*)
 T CAI_BaseNPC::PlayAutoGeneratedSoundScene(char const*)
 T CAI_BaseNPC::PlayFlinchGesture()
 T CAI_BaseNPC::PlayScene(char const*, float)
 T CAI_BaseNPC::PlayScriptedSentence(char const*, float, float, soundlevel_t, bool, CBaseEntity*)
 T CAI_BaseNPC::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_BaseNPC::PlayerInRange(Vector const&, float)
 T CAI_BaseNPC::PlayerInSpread(Vector const&, Vector const&, float, float, bool)
 T CAI_BaseNPC::PointInSpread(CBaseCombatCharacter*, Vector const&, Vector const&, Vector const&, float, float)
 T CAI_BaseNPC::PostConstructor(char const*)
 T CAI_BaseNPC::PostMovement()
 T CAI_BaseNPC::PostRun()
 T CAI_BaseNPC::PostRunStopMoving()
 T CAI_BaseNPC::PreThink()
 T CAI_BaseNPC::Precache()
 T CAI_BaseNPC::QueryHearSound(CSound*)
 T CAI_BaseNPC::RangeAttack1Conditions(float, float)
 T CAI_BaseNPC::RangeAttack2Conditions(float, float)
 T CAI_BaseNPC::RelaxAim()
 T CAI_BaseNPC::RememberUnreachable(CBaseEntity*)
 T CAI_BaseNPC::RemoveFromSquad()
 T CAI_BaseNPC::RemoveIgnoredConditions()
 T CAI_BaseNPC::RemoveMemory()
 T CAI_BaseNPC::ReportAIState()
 T CAI_BaseNPC::ReportOverThinkLimit(float)
 T CAI_BaseNPC::ResetIdealActivity(Activity)
 T CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)
 T CAI_BaseNPC::Restore(IRestore&)
 T CAI_BaseNPC::RestoreConditions(IRestore&, CFixedBitString<256>*)
 T CAI_BaseNPC::RunAI()
 T CAI_BaseNPC::RunAnimation()
 T CAI_BaseNPC::RunAttackTask(int)
 T CAI_BaseNPC::RunDieTask()
 T CAI_BaseNPC::RunTask(Task_t const*)
 T CAI_BaseNPC::RunTaskOverlay()
 T CAI_BaseNPC::Save(ISave&)
 T CAI_BaseNPC::SaveConditions(ISave&, CFixedBitString<256> const&)
 T CAI_BaseNPC::ScheduleInList(char const*, CAI_Schedule**, int)
 T CAI_BaseNPC::ScheduledFollowPath(int, CBaseEntity*, Activity)
 T CAI_BaseNPC::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 T CAI_BaseNPC::SelectAlertIdealState()
 T CAI_BaseNPC::SelectAlertSchedule()
 T CAI_BaseNPC::SelectCombatSchedule()
 T CAI_BaseNPC::SelectDeadSchedule()
 T CAI_BaseNPC::SelectDeathPose(CTakeDamageInfo const&)
 T CAI_BaseNPC::SelectFailSchedule(int, int, int)
 T CAI_BaseNPC::SelectFlinchSchedule()
 T CAI_BaseNPC::SelectIdealState()
 T CAI_BaseNPC::SelectIdleIdealState()
 T CAI_BaseNPC::SelectIdleSchedule()
 T CAI_BaseNPC::SelectSchedule()
 T CAI_BaseNPC::SelectScriptIdealState()
 T CAI_BaseNPC::SelectScriptSchedule()
 T CAI_BaseNPC::SentenceStop()
 T CAI_BaseNPC::SetActivity(Activity)
 T CAI_BaseNPC::SetActivityAndSequence(Activity, int, Activity, Activity)
 T CAI_BaseNPC::SetAim(Vector const&)
 T CAI_BaseNPC::SetCommandGoal(Vector const&)
 T CAI_BaseNPC::SetCondition(int)
 T CAI_BaseNPC::SetCustomInterruptCondition(int)
 T CAI_BaseNPC::SetDefaultEyeOffset()
 T CAI_BaseNPC::SetDistLook(float)
 T CAI_BaseNPC::SetEnemy(CBaseEntity*, bool)
 T CAI_BaseNPC::SetEnemyOccluder(CBaseEntity*)
 T CAI_BaseNPC::SetHeadDirection(Vector const&, float)
 T CAI_BaseNPC::SetHintGroup(string_t, bool)
 T CAI_BaseNPC::SetHintNode(CAI_Hint*)
 T CAI_BaseNPC::SetHullSizeNormal(bool)
 T CAI_BaseNPC::SetHullSizeSmall(bool)
 T CAI_BaseNPC::SetIdealActivity(Activity)
 T CAI_BaseNPC::SetIgnoreConditions(int*, int)
 T CAI_BaseNPC::SetNavType(Navigation_t)
 T CAI_BaseNPC::SetPlayerAvoidState()
 T CAI_BaseNPC::SetSchedule(CAI_Schedule*)
 T CAI_BaseNPC::SetSchedule(int)
 T CAI_BaseNPC::SetSequenceById(int)
 T CAI_BaseNPC::SetSequenceByName(char*)
 T CAI_BaseNPC::SetState(NPC_STATE)
 T CAI_BaseNPC::SetTarget(CBaseEntity*)
 T CAI_BaseNPC::SetTurnActivity()
 T CAI_BaseNPC::SetWait(float, float)
 T CAI_BaseNPC::SetupVPhysicsHull()
 T CAI_BaseNPC::ShouldAlwaysThink()
 T CAI_BaseNPC::ShouldChooseNewEnemy()
 T CAI_BaseNPC::ShouldCollide(int, int) const
 T CAI_BaseNPC::ShouldFadeOnDeath()
 T CAI_BaseNPC::ShouldFailNav(bool)
 T CAI_BaseNPC::ShouldLookForBetterWeapon()
 T CAI_BaseNPC::ShouldMoveAndShoot()
 T CAI_BaseNPC::ShouldMoveWait()
 T CAI_BaseNPC::ShouldPlayIdleSound()
 T CAI_BaseNPC::ShouldPlayerAvoid()
 T CAI_BaseNPC::ShouldSelectIdealState()
 T CAI_BaseNPC::SoundIsVisible(CSound*)
 T CAI_BaseNPC::StartMoveToTargetTask(int)
 T CAI_BaseNPC::StartNPC()
 T CAI_BaseNPC::StartTargetHandling(CBaseEntity*)
 T CAI_BaseNPC::StartTask(Task_t const*)
 T CAI_BaseNPC::StartTaskOverlay()
 T CAI_BaseNPC::StartTouch(CBaseEntity*)
 T CAI_BaseNPC::StartTurn(float)
 T CAI_BaseNPC::TaskComplete(bool)
 T CAI_BaseNPC::TaskFail(int)
 T CAI_BaseNPC::TaskIsRunning()
 T CAI_BaseNPC::TaskMovementComplete()
 T CAI_BaseNPC::TaskName(int)
 T CAI_BaseNPC::TestPlayerPushing(CBaseEntity*)
 T CAI_BaseNPC::ThrowLimit(Vector const&, Vector const&, float, float, Vector const&, Vector const&, CBaseEntity*, Vector*, CBaseEntity**)
 T CAI_BaseNPC::ToggleFreeze()
 T CAI_BaseNPC::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CAI_BaseNPC::TranslateActivity(Activity, Activity*)
 T CAI_BaseNPC::TranslateNavGoal(CBaseEntity*, Vector&)
 T CAI_BaseNPC::TranslateSchedule(int)
 T CAI_BaseNPC::TryRestoreHull()
 T CAI_BaseNPC::UnlockBestSound()
 T CAI_BaseNPC::UpdateEfficiency(bool)
 T CAI_BaseNPC::UpdateEnemyMemory(CBaseEntity*, Vector const&, CBaseEntity*)
 T CAI_BaseNPC::UpdateEnemyPos()
 T CAI_BaseNPC::UpdateOnRemove()
 T CAI_BaseNPC::UpdateSleepState(bool)
 T CAI_BaseNPC::UpdateTargetPos()
 T CAI_BaseNPC::UpdateTurnGesture()
 T CAI_BaseNPC::VacateStrategySlot()
 T CAI_BaseNPC::ValidEyeTarget(Vector const&)
 T CAI_BaseNPC::ValidateNavGoal()
 T CAI_BaseNPC::VecToYaw(Vector const&)
 T CAI_BaseNPC::Wake(bool)
 T CAI_BaseNPC::WalkMove(Vector const&, unsigned int)
 T CAI_BaseNPC::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CAI_BaseNPC::Weapon_IsBetterAvailable()
 T CAI_BaseNPC::YouForgotToImplementOrDeclareServerClass()
 T CAI_BaseNPC::~CAI_BaseNPC()
 T CAI_BaseNPCFlyerNew::CAI_BaseNPCFlyerNew()
 T CAI_BaseNPCFlyerNew::ClearFlyerConditions()
 T CAI_BaseNPCFlyerNew::GetIdealSpeed() const
 T CAI_BaseNPCFlyerNew::MinGroundDist()
 T CAI_BaseNPCFlyerNew::RunTask(Task_t const*)
 T CAI_BaseNPCFlyerNew::SpawnFlyer()
 T CAI_BaseNPCFlyerNew::StartTask(Task_t const*)
 T CAI_BasePhysicsFlyingBot::BodyAngles()
 T CAI_BasePhysicsFlyingBot::CAI_BasePhysicsFlyingBot()
 T CAI_BasePhysicsFlyingBot::CreateVPhysics()
 T CAI_BasePhysicsFlyingBot::GetBaseMap()
 T CAI_BasePhysicsFlyingBot::GetDataDescMap()
 T CAI_BasePhysicsFlyingBot::GetVelocity(Vector*, Vector*)
 T CAI_BasePhysicsFlyingBot::MinGroundDist()
 T CAI_BasePhysicsFlyingBot::MoveToTarget(float, Vector const&)
 T CAI_BasePhysicsFlyingBot::ProgressFlyPath(float, CBaseEntity const*, unsigned int, bool, float)
 T CAI_BasePhysicsFlyingBot::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CAI_BasePhysicsFlyingBot::StartTask(Task_t const*)
 T CAI_BasePhysicsFlyingBot::TranslateNavGoal(CBaseEntity*, Vector&)
 T CAI_BasePhysicsFlyingBot::TurnHeadToTarget(float, Vector const&)
 T CAI_BasePhysicsFlyingBot::VelocityToAvoidObstacles(float)
 T CAI_BasePhysicsFlyingBot::~CAI_BasePhysicsFlyingBot()
 T CAI_BattleLine::GetBaseMap()
 T CAI_BattleLine::GetDataDescMap()
 T CAI_BehaviorBase::AimGun()
 T CAI_BehaviorBase::BestEnemy()
 T CAI_BehaviorBase::FValidateHintType(CAI_Hint*)
 T CAI_BehaviorBase::GatherConditions()
 T CAI_BehaviorBase::GetBaseMap()
 T CAI_BehaviorBase::GetClassScheduleIdSpace()
 T CAI_BehaviorBase::GetDataDescMap()
 T CAI_BehaviorBase::GetDefaultNavGoalTolerance()
 T CAI_BehaviorBase::GetReasonableFacingDist()
 T CAI_BehaviorBase::GetSchedule(int)
 T CAI_BehaviorBase::GetSchedulingErrorName()
 T CAI_BehaviorBase::IsCurSchedule(int, bool)
 T CAI_BehaviorBase::IsCurTaskContinuousMove()
 T CAI_BehaviorBase::IsInterruptable()
 T CAI_BehaviorBase::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorBase::IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorBase::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorBase::NPC_TranslateActivity(Activity)
 T CAI_BehaviorBase::NotifyChangeBehaviorStatus(bool)
 T CAI_BehaviorBase::OnScheduleChange()
 T CAI_BehaviorBase::OnStartSchedule(int)
 T CAI_BehaviorBase::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorBase::PrescheduleThink()
 T CAI_BehaviorBase::Restore(IRestore&)
 T CAI_BehaviorBase::RestoreBehaviors(IRestore&, CAI_BehaviorBase**, int)
 T CAI_BehaviorBase::RunTask(Task_t const*)
 T CAI_BehaviorBase::Save(ISave&)
 T CAI_BehaviorBase::SaveBehaviors(ISave&, CAI_BehaviorBase*, CAI_BehaviorBase**, int)
 T CAI_BehaviorBase::SelectFailSchedule(int, int, int)
 T CAI_BehaviorBase::SelectSchedule()
 T CAI_BehaviorBase::ShouldAlwaysThink()
 T CAI_BehaviorBase::ShouldIgnoreSound(CSound*)
 T CAI_BehaviorBase::ShouldPlayerAvoid()
 T CAI_BehaviorBase::StartTask(Task_t const*)
 T CAI_BehaviorBase::TranslateSchedule(int)
 T CAI_BlendedMotor::AddTurnGesture(float)
 T CAI_BlendedMotor::BuildInsertNode(int, float)
 T CAI_BlendedMotor::BuildMoveScript(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_BlendedMotor::BuildTurnScript(AILocalMoveGoal_t const&)
 T CAI_BlendedMotor::BuildTurnScript(int, int)
 T CAI_BlendedMotor::BuildVelocityScript(AILocalMoveGoal_t const&)
 T CAI_BlendedMotor::GetBaseMap()
 T CAI_BlendedMotor::GetInteriorSequence(int)
 T CAI_BlendedMotor::GetMoveScriptDist(float&)
 T CAI_BlendedMotor::GetMoveScriptTotalTime()
 T CAI_BlendedMotor::GetMoveScriptYaw()
 T CAI_BlendedMotor::InsertSlowdown(float, float, bool)
 T CAI_BlendedMotor::MaintainTurnActivity()
 T CAI_BlendedMotor::MoveClimbStart(Vector const&, Vector const&, float, float)
 T CAI_BlendedMotor::MoveContinue()
 T CAI_BlendedMotor::MoveFlyExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_BlendedMotor::MoveGroundExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_BlendedMotor::MoveJumpStart(Vector const&)
 T CAI_BlendedMotor::MovePaused()
 T CAI_BlendedMotor::MoveStart()
 T CAI_BlendedMotor::MoveStop()
 T CAI_BlendedMotor::OverrideMaxYawSpeed(Activity)
 T CAI_BlendedMotor::RecalculateYawSpeed()
 T CAI_BlendedMotor::ResetGoalSequence()
 T CAI_BlendedMotor::SetMoveScriptAnim(float)
 T CAI_BlendedMotor::UpdateYaw(int)
 T CAI_ChangeHintGroup::FindQualifiedNPC(CAI_BaseNPC*)
 T CAI_ChangeHintGroup::GetBaseMap()
 T CAI_ChangeHintGroup::GetDataDescMap()
 T CAI_ChangeHintGroup::InputActivate(inputdata_t&)
 T CAI_ChangeTarget::GetBaseMap()
 T CAI_ChangeTarget::GetDataDescMap()
 T CAI_ChangeTarget::InputActivate(inputdata_t&)
 T CAI_DynamicLink::CAI_DynamicLink()
 T CAI_DynamicLink::FindLink()
 T CAI_DynamicLink::GenerateControllerLinks()
 T CAI_DynamicLink::GetBaseMap()
 T CAI_DynamicLink::GetDataDescMap()
 T CAI_DynamicLink::GetDynamicLink(int, int)
 T CAI_DynamicLink::InitDynamicLinks()
 T CAI_DynamicLink::InputTurnOff(inputdata_t&)
 T CAI_DynamicLink::InputTurnOn(inputdata_t&)
 T CAI_DynamicLink::IsLinkValid()
 T CAI_DynamicLink::ObjectCaps()
 T CAI_DynamicLink::PurgeDynamicLinks()
 T CAI_DynamicLink::ResetDynamicLinks()
 T CAI_DynamicLink::SetLinkState()
 T CAI_DynamicLink::~CAI_DynamicLink()
 T CAI_DynamicLinkController::GenerateLinksFromVolume()
 T CAI_DynamicLinkController::GetBaseMap()
 T CAI_DynamicLinkController::GetDataDescMap()
 T CAI_DynamicLinkController::InputTurnOff(inputdata_t&)
 T CAI_DynamicLinkController::InputTurnOn(inputdata_t&)
 T CAI_Enemies::CAI_Enemies()
 T CAI_Enemies::ClearMemory(CBaseEntity*)
 T CAI_Enemies::Find(CBaseEntity*, bool)
 T CAI_Enemies::FirstTimeSeen(CBaseEntity*)
 T CAI_Enemies::GetBaseMap()
 T CAI_Enemies::GetDangerMemory()
 T CAI_Enemies::GetFirst(AIEnemiesIter_t__**)
 T CAI_Enemies::GetNext(AIEnemiesIter_t__**)
 T CAI_Enemies::HasEludedMe(CBaseEntity*)
 T CAI_Enemies::HasFreeKnowledgeOf(CBaseEntity*)
 T CAI_Enemies::HasMemory(CBaseEntity*)
 T CAI_Enemies::LastKnownPosition(CBaseEntity*)
 T CAI_Enemies::LastSeenPosition(CBaseEntity*)
 T CAI_Enemies::LastTimeSeen(CBaseEntity*)
 T CAI_Enemies::LastTimeTookDamageFrom(CBaseEntity*)
 T CAI_Enemies::MarkAsEluded(CBaseEntity*)
 T CAI_Enemies::OnTookDamageFrom(CBaseEntity*)
 T CAI_Enemies::RefreshMemories()
 T CAI_Enemies::SetEnemyDiscardTime(float)
 T CAI_Enemies::SetFreeKnowledgeDuration(float)
 T CAI_Enemies::SetTimeValidEnemy(CBaseEntity*, float)
 T CAI_Enemies::SetUnforgettable(CBaseEntity*, bool)
 T CAI_Enemies::ShouldDiscardMemory(AI_EnemyInfo_t*)
 T CAI_Enemies::TimeAtFirstHand(CBaseEntity*)
 T CAI_Enemies::TimeLastReacquired(CBaseEntity*)
 T CAI_Enemies::UpdateMemory(CAI_Network*, CBaseEntity*, Vector const&, float, bool)
 T CAI_Enemies::~CAI_Enemies()
 T CAI_Expresser::BlockSpeechUntil(float)
 T CAI_Expresser::CAI_Expresser(CAI_BaseNPC*)
 T CAI_Expresser::CanSpeak()
 T CAI_Expresser::CanSpeakAfterMyself()
 T CAI_Expresser::CanSpeakConcept(char const*)
 T CAI_Expresser::ClearSpokeConcept(char const*)
 T CAI_Expresser::DumpHistories()
 T CAI_Expresser::GetBaseMap()
 T CAI_Expresser::GetResponseDuration(AI_Response*)
 T CAI_Expresser::GetSemaphoreAvailableTime(CBaseEntity*)
 T CAI_Expresser::GetTimeSpokeConcept(char const*)
 T CAI_Expresser::GetVoicePitch() const
 T CAI_Expresser::IsSpeaking()
 T CAI_Expresser::IsValidResponse(ResponseType_t, char const*)
 T CAI_Expresser::NoteSpeaking(float, float)
 T CAI_Expresser::SemaphoreIsAvailable(CBaseEntity*)
 T CAI_Expresser::SetSpokeConcept(char const*, AI_Response*, bool)
 T CAI_Expresser::Speak(char const*, char const*)
 T CAI_Expresser::SpeakAutoGeneratedScene(char const*, float)
 T CAI_Expresser::SpeakDispatchResponse(char const*, AI_Response*)
 T CAI_Expresser::SpeakFindResponse(char const*, char const*)
 T CAI_Expresser::SpeakRawScene(char const*, float)
 T CAI_Expresser::SpeakRawSentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_Expresser::SpokeConcept(char const*)
 T CAI_Expresser::TestAllResponses()
 T CAI_Expresser::~CAI_Expresser()
 T CAI_ExpresserHost_DoModifyOrAppendCriteria(CAI_BaseNPC*, AI_CriteriaSet&)
 T CAI_FollowBehavior::BeginScheduleSelection()
 T CAI_FollowBehavior::BuildScheduleTestBits()
 T CAI_FollowBehavior::CAI_FollowBehavior(AI_FollowParams_t const&)
 T CAI_FollowBehavior::CScheduleLoader::CScheduleLoader()
 T CAI_FollowBehavior::CanSelectSchedule()
 T CAI_FollowBehavior::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_FollowBehavior::ClearFollowGoal(CAI_FollowGoal*)
 T CAI_FollowBehavior::ClearFollowPoint()
 T CAI_FollowBehavior::EndScheduleSelection()
 T CAI_FollowBehavior::FValidateHintType(CAI_Hint*)
 T CAI_FollowBehavior::FindCoverFromEnemyAtFollowTarget(float, Vector*)
 T CAI_FollowBehavior::FindFollowPoint()
 T CAI_FollowBehavior::GatherConditions()
 T CAI_FollowBehavior::GetBaseMap()
 T CAI_FollowBehavior::GetDataDescMap()
 T CAI_FollowBehavior::GetFollowPoint()
 T CAI_FollowBehavior::GetFollowTarget()
 T CAI_FollowBehavior::GetFollowTargetViewLoc(Vector*)
 T CAI_FollowBehavior::HasFollowPoint()
 T CAI_FollowBehavior::InitCustomSchedules()
 T CAI_FollowBehavior::IsChaseGoalInRange()
 T CAI_FollowBehavior::IsCurScheduleFollowSchedule()
 T CAI_FollowBehavior::IsCurTaskContinuousMove()
 T CAI_FollowBehavior::IsFollowPointInRange()
 T CAI_FollowBehavior::IsFollowTargetInRange()
 T CAI_FollowBehavior::IsMovingToFollowTarget()
 T CAI_FollowBehavior::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_FollowBehavior::IsValidEnemy(CBaseEntity*)
 T CAI_FollowBehavior::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_FollowBehavior::LoadSchedules()
 T CAI_FollowBehavior::LoadedSchedules()
 T CAI_FollowBehavior::NPC_TranslateActivity(Activity)
 T CAI_FollowBehavior::NoteFailedFollow()
 T CAI_FollowBehavior::NoteSuccessfulFollow()
 T CAI_FollowBehavior::OnMovementComplete()
 T CAI_FollowBehavior::OnMovementFailed()
 T CAI_FollowBehavior::OnStartSchedule(int)
 T CAI_FollowBehavior::PlayerIsPushing()
 T CAI_FollowBehavior::Precache()
 T CAI_FollowBehavior::RunTask(Task_t const*)
 T CAI_FollowBehavior::SelectFailSchedule(int, int, int)
 T CAI_FollowBehavior::SelectSchedule()
 T CAI_FollowBehavior::SelectScheduleFollowPoints()
 T CAI_FollowBehavior::SelectScheduleManagePosition()
 T CAI_FollowBehavior::SelectScheduleMoveToFormation()
 T CAI_FollowBehavior::SetFollowGoal(CAI_FollowGoal*, bool)
 T CAI_FollowBehavior::SetFollowGoalDirect(CAI_FollowGoal*)
 T CAI_FollowBehavior::SetFollowPoint(CAI_Hint*)
 T CAI_FollowBehavior::SetFollowTarget(CBaseEntity*, bool)
 T CAI_FollowBehavior::SetParameters(AI_FollowParams_t const&)
 T CAI_FollowBehavior::ShouldAlwaysThink()
 T CAI_FollowBehavior::ShouldFollow()
 T CAI_FollowBehavior::ShouldIgnoreFollowPointFacing()
 T CAI_FollowBehavior::ShouldMoveToFollowTarget()
 T CAI_FollowBehavior::ShouldUseFollowPoints()
 T CAI_FollowBehavior::StartTask(Task_t const*)
 T CAI_FollowBehavior::TaskComplete(bool)
 T CAI_FollowBehavior::TranslateSchedule(int)
 T CAI_FollowBehavior::UpdateFollowPosition()
 T CAI_FollowBehavior::ValidateFaceTarget(Vector*)
 T CAI_FollowBehavior::~CAI_FollowBehavior()
 T CAI_FollowGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_FollowGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_FollowGoal::GetBaseMap()
 T CAI_FollowGoal::GetDataDescMap()
 T CAI_FollowManager::AddFollower(CBaseEntity*, CAI_BaseNPC*, AI_Formations_t)
 T CAI_FollowManager::CalcFollowPosition(AI_FollowManagerInfoHandle_t__*, AI_FollowNavInfo_t*)
 T CAI_FollowManager::CalculateFieldsFromSlot(AI_FollowSlot_t*, AI_FollowNavInfo_t*)
 T CAI_FollowManager::ChangeFormation(AI_FollowManagerInfoHandle_t__*, AI_Formations_t)
 T CAI_FollowManager::FindBestSlot(AI_FollowGroup_t*)
 T CAI_FollowManager::FindCreateGroup(CBaseEntity*, AI_Formations_t)
 T CAI_FollowManager::FindFollowerGroup(CBaseEntity*)
 T CAI_FollowManager::FindGroup(CBaseEntity*)
 T CAI_FollowManager::RedistributeSlots(AI_FollowGroup_t*)
 T CAI_FollowManager::RemoveFollower(AI_FollowManagerInfoHandle_t__*)
 T CAI_FollowManager::RemoveGroup(AI_FollowGroup_t*)
 T CAI_FreePass::GetBaseMap()
 T CAI_FreePass::HasPass()
 T CAI_FreePass::Revoke(bool)
 T CAI_FreePass::ShouldAllowFVisible(bool)
 T CAI_FreePass::Update()
 T CAI_GlobalNamespace::AddSymbol(char const*, int)
 T CAI_GlobalNamespace::CAI_GlobalNamespace()
 T CAI_GlobalNamespace::Clear()
 T CAI_GlobalNamespace::IdToSymbol(int) const
 T CAI_GlobalNamespace::NextGlobalBase() const
 T CAI_GlobalNamespace::SymbolToId(char const*) const
 T CAI_GlobalNamespace::~CAI_GlobalNamespace()
 T CAI_GoalEntity::DelayedRefresh()
 T CAI_GoalEntity::GetBaseMap()
 T CAI_GoalEntity::GetDataDescMap()
 T CAI_GoalEntity::InputActivate(inputdata_t&)
 T CAI_GoalEntity::InputDeactivate(inputdata_t&)
 T CAI_GoalEntity::InputUpdateActors(inputdata_t&)
 T CAI_GoalEntity::OnEntityCreated(CBaseEntity*)
 T CAI_GoalEntity::OnEntityDeleted(CBaseEntity*)
 T CAI_GoalEntity::OnRestore()
 T CAI_GoalEntity::PruneActors()
 T CAI_GoalEntity::ResolveNames()
 T CAI_GoalEntity::Spawn()
 T CAI_GoalEntity::UpdateOnRemove()
 T CAI_Hint::CAI_Hint()
 T CAI_Hint::DisableForSeconds(float)
 T CAI_Hint::DrawDebugTextOverlays()
 T CAI_Hint::EnableThink()
 T CAI_Hint::FixupTargetNode()
 T CAI_Hint::GetBaseMap()
 T CAI_Hint::GetDataDescMap()
 T CAI_Hint::GetDirection()
 T CAI_Hint::GetNode()
 T CAI_Hint::GetPosition(CBaseCombatCharacter*, Vector*)
 T CAI_Hint::GetPosition(Hull_t, Vector*)
 T CAI_Hint::HintMatchesCriteria(CAI_BaseNPC*, CHintCriteria const&, Vector const&, float*, bool)
 T CAI_Hint::InputDisableHint(inputdata_t&)
 T CAI_Hint::InputEnableHint(inputdata_t&)
 T CAI_Hint::IsInNodeFOV(CBaseEntity*)
 T CAI_Hint::IsLocked()
 T CAI_Hint::IsLockedBy(CBaseEntity*)
 T CAI_Hint::IsViewable()
 T CAI_Hint::Lock(CBaseEntity*)
 T CAI_Hint::NPCStartedUsing(CAI_BaseNPC*)
 T CAI_Hint::NPCStoppedUsing(CAI_BaseNPC*)
 T CAI_Hint::OnRestore()
 T CAI_Hint::Spawn()
 T CAI_Hint::Unlock(float)
 T CAI_Hint::Yaw()
 T CAI_Hint::~CAI_Hint()
 T CAI_HintManager::AddHint(CAI_Hint*)
 T CAI_HintManager::CreateHint(HintNodeData*, char const*)
 T CAI_HintManager::DrawHintOverlays(float)
 T CAI_HintManager::DumpHints()
 T CAI_HintManager::FindAllHints(CAI_BaseNPC*, Vector const&, CHintCriteria const&, CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*> >*)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, CHintCriteria const&)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, Hint_e, int, float, Vector const*)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, Vector const&, CHintCriteria const&)
 T CAI_HintManager::FindHint(Vector const&, CHintCriteria const&)
 T CAI_HintManager::FindHintRandom(CAI_BaseNPC*, Vector const&, CHintCriteria const&)
 T CAI_HintManager::GetFlags(char const*)
 T CAI_HintManager::GetNextHint(AIHintIter_t__**)
 T CAI_HintManager::RemoveHint(CAI_Hint*)
 T CAI_InterestTarget::Add(CAI_InterestTarget_t::CAI_InterestTarget_e, CBaseEntity*, Vector const&, float, float, float)
 T CAI_InterestTarget::Add(CBaseEntity*, Vector const&, float, float, float)
 T CAI_InterestTarget::Add(CBaseEntity*, float, float, float)
 T CAI_InterestTarget::Add(Vector const&, float, float, float)
 T CAI_InterestTarget_t::GetBaseMap()
 T CAI_InterestTarget_t::GetPosition()
 T CAI_InterestTarget_t::Interest()
 T CAI_InterestTarget_t::IsActive()
 T CAI_InterestTarget_t::IsThis(CBaseEntity*)
 T CAI_LeadBehavior::BeginScheduleSelection()
 T CAI_LeadBehavior::CScheduleLoader::CScheduleLoader()
 T CAI_LeadBehavior::CanSelectSchedule()
 T CAI_LeadBehavior::Connect(CAI_LeadBehaviorHandler*)
 T CAI_LeadBehavior::Disconnect(CAI_LeadBehaviorHandler*)
 T CAI_LeadBehavior::GatherConditions()
 T CAI_LeadBehavior::GetBaseMap()
 T CAI_LeadBehavior::GetDataDescMap()
 T CAI_LeadBehavior::InitCustomSchedules()
 T CAI_LeadBehavior::IsCurTaskContinuousMove()
 T CAI_LeadBehavior::IsSpeaking()
 T CAI_LeadBehavior::LeadPlayer(AI_LeadArgs_t const&, CAI_LeadBehaviorHandler*)
 T CAI_LeadBehavior::LoadSchedules()
 T CAI_LeadBehavior::LoadedSchedules()
 T CAI_LeadBehavior::NPC_TranslateActivity(Activity)
 T CAI_LeadBehavior::OnRestore()
 T CAI_LeadBehavior::RunTask(Task_t const*)
 T CAI_LeadBehavior::SelectSchedule()
 T CAI_LeadBehavior::SetGoal(AI_LeadArgs_t const&)
 T CAI_LeadBehavior::Speak(char const*)
 T CAI_LeadBehavior::StartTask(Task_t const*)
 T CAI_LeadBehavior::StopLeading()
 T CAI_LeadGoal::GetBaseMap()
 T CAI_LeadGoal::GetConceptModifiers(char const*)
 T CAI_LeadGoal::GetDataDescMap()
 T CAI_LeadGoal::GetLeadBehavior()
 T CAI_LeadGoal::InputActivate(inputdata_t&)
 T CAI_LeadGoal::InputDeactivate(inputdata_t&)
 T CAI_LeadGoal::InputSetFailure(inputdata_t&)
 T CAI_LeadGoal::InputSetSuccess(inputdata_t&)
 T CAI_LeadGoal::OnEvent(int)
 T CAI_LeadGoal_Weapon::GetBaseMap()
 T CAI_LeadGoal_Weapon::GetConceptModifiers(char const*)
 T CAI_LeadGoal_Weapon::GetDataDescMap()
 T CAI_LeadGoal_Weapon::InputActivate(inputdata_t&)
 T CAI_Link::CAI_Link()
 T CAI_Link::DestNodeID(int)
 T CAI_LocalIdSpace::AddSymbol(char const*, int, char const*, char const*)
 T CAI_LocalIdSpace::CAI_LocalIdSpace(bool)
 T CAI_LocalIdSpace::GlobalToLocal(int) const
 T CAI_LocalIdSpace::Init(CAI_GlobalNamespace*, CAI_LocalIdSpace*)
 T CAI_LocalIdSpace::LocalToGlobal(int) const
 T CAI_LocalIdSpace::SetLocalBase(int)
 T CAI_LocalNavigator::AddObstacle(Vector const&, float, AI_MoveSuggType_t)
 T CAI_LocalNavigator::CAI_LocalNavigator(CAI_BaseNPC*)
 T CAI_LocalNavigator::GetBaseMap()
 T CAI_LocalNavigator::HaveObstacles()
 T CAI_LocalNavigator::Init(IAI_MovementSink*)
 T CAI_LocalNavigator::MoveCalc(AILocalMoveGoal_t*, bool)
 T CAI_LocalNavigator::MoveCalcDirect(AILocalMoveGoal_t*, bool, float*, AIMoveResult_t*)
 T CAI_LocalNavigator::MoveCalcRaw(AILocalMoveGoal_t*, bool)
 T CAI_LocalNavigator::MoveCalcSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_LocalNavigator::MoveCalcStop(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_LocalNavigator::ResetMoveCalculations()
 T CAI_LocalNavigator::~CAI_LocalNavigator()
 T CAI_LookTarget::DrawDebugTextOverlays()
 T CAI_LookTarget::GetBaseMap()
 T CAI_LookTarget::GetDataDescMap()
 T CAI_LookTarget::GetFirstLookTarget()
 T CAI_LookTarget::GetNextLookTarget(CAI_LookTarget*)
 T CAI_LookTarget::IsEligible(CBaseEntity*)
 T CAI_LookTarget::Reserve(float)
 T CAI_Manager::AccessAIs()
 T CAI_Manager::AddAI(CAI_BaseNPC*)
 T CAI_Manager::CAI_Manager()
 T CAI_Manager::NumAIs()
 T CAI_Manager::RemoveAI(CAI_BaseNPC*)
 T CAI_MappedActivityBehavior_Temporary::GetMappedActivity(AI_Posture_t, Activity)
 T CAI_MappedActivityBehavior_Temporary::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_MappedActivityBehavior_Temporary::UpdateTranslateActivityMap()
 T CAI_Motor::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
 T CAI_Motor::AddFacingTarget(CBaseEntity*, float, float, float)
 T CAI_Motor::AddFacingTarget(Vector const&, float, float, float)
 T CAI_Motor::CAI_Motor(CAI_BaseNPC*)
 T CAI_Motor::CalcIdealYaw(Vector const&)
 T CAI_Motor::CalcIntervalMove()
 T CAI_Motor::CanStandOn(CBaseEntity*) const
 T CAI_Motor::DeltaIdealYaw()
 T CAI_Motor::GetBaseMap()
 T CAI_Motor::GetFacingDirection(Vector&)
 T CAI_Motor::GetIdealAccel() const
 T CAI_Motor::GetIdealSpeed() const
 T CAI_Motor::GetNavigator()
 T CAI_Motor::GetPlaybackRate()
 T CAI_Motor::GetPoseParameter(char const*)
 T CAI_Motor::GetSequenceGroundSpeed(int)
 T CAI_Motor::GetSequenceMoveYaw(int)
 T CAI_Motor::GetSmoothedVelocity()
 T CAI_Motor::HasPoseParameter(int, char const*)
 T CAI_Motor::IdealVelocity()
 T CAI_Motor::Init(IAI_MovementSink*)
 T CAI_Motor::MinCheckDist()
 T CAI_Motor::MinStoppingDist(float)
 T CAI_Motor::MoveClimbExecute(Vector const&, Vector const&, float, float)
 T CAI_Motor::MoveClimbStart(Vector const&, Vector const&, float, float)
 T CAI_Motor::MoveClimbStop()
 T CAI_Motor::MoveFacing(AILocalMoveGoal_t const&)
 T CAI_Motor::MoveFlyExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundExecuteWalk(AILocalMoveGoal_t const&, float, float, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundStep(Vector const&, CBaseEntity*, float, bool, bool, AIMoveTrace_t*)
 T CAI_Motor::MoveJumpExecute()
 T CAI_Motor::MoveJumpStart(Vector const&)
 T CAI_Motor::MoveJumpStop()
 T CAI_Motor::MoveNormalExecute(AILocalMoveGoal_t const&)
 T CAI_Motor::MovePaused()
 T CAI_Motor::MoveStart()
 T CAI_Motor::MoveStop()
 T CAI_Motor::RecalculateYawSpeed()
 T CAI_Motor::SelectWeightedSequence(Activity)
 T CAI_Motor::SetBoneController(int, float)
 T CAI_Motor::SetIdealYawAndUpdate(float, float)
 T CAI_Motor::SetIdealYawToTarget(Vector const&, float)
 T CAI_Motor::SetIdealYawToTargetAndUpdate(Vector const&, float)
 T CAI_Motor::SetMoveType(MoveType_t, MoveCollide_t)
 T CAI_Motor::SetPoseParameter(char const*, float)
 T CAI_Motor::SetSmoothedVelocity(Vector const&)
 T CAI_Motor::StepHeight() const
 T CAI_Motor::UpdateYaw(int)
 T CAI_Motor::~CAI_Motor()
 T CAI_MoveAndShootOverlay::CAI_MoveAndShootOverlay()
 T CAI_MoveAndShootOverlay::CanAimAtEnemy()
 T CAI_MoveAndShootOverlay::EndShootWhileMove()
 T CAI_MoveAndShootOverlay::GetBaseMap()
 T CAI_MoveAndShootOverlay::NoShootWhileMove()
 T CAI_MoveAndShootOverlay::RunShootWhileMove()
 T CAI_MoveAndShootOverlay::SetInitialDelay(float)
 T CAI_MoveAndShootOverlay::StartShootWhileMove()
 T CAI_MoveAndShootOverlay::UpdateMoveShootActivity(bool)
 T CAI_MoveMonitor::GetBaseMap()
 T CAI_MoveProbe::CAI_MoveProbe(CAI_BaseNPC*)
 T CAI_MoveProbe::CalcJumpLaunchVelocity(Vector const&, Vector const&, float, float*, float, Vector*) const
 T CAI_MoveProbe::CanStandOn(CBaseEntity*) const
 T CAI_MoveProbe::CheckStandPosition(Vector const&, unsigned int) const
 T CAI_MoveProbe::CheckStep(CAI_MoveProbe::CheckStepArgs_t const&, CAI_MoveProbe::CheckStepResult_t*) const
 T CAI_MoveProbe::ClimbMoveLimit(Vector const&, Vector const&, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::FloorPoint(Vector const&, unsigned int, float, float, Vector*) const
 T CAI_MoveProbe::FlyMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::GetBaseMap()
 T CAI_MoveProbe::GroundMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, unsigned int, float, AIMoveTrace_t*) const
 T CAI_MoveProbe::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CAI_MoveProbe::IterativeFloorPoint(Vector const&, unsigned int, Vector*) const
 T CAI_MoveProbe::IterativeFloorPoint(Vector const&, unsigned int, float, Vector*) const
 T CAI_MoveProbe::JumpMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::MoveLimit(Navigation_t, Vector const&, Vector const&, unsigned int, CBaseEntity const*, float, unsigned int, AIMoveTrace_t*) const
 T CAI_MoveProbe::OldCheckStandPosition(Vector const&, unsigned int) const
 T CAI_MoveProbe::SetupCheckStepTraceListData(CAI_MoveProbe::CheckStepArgs_t const&) const
 T CAI_MoveProbe::StepHeight() const
 T CAI_MoveProbe::TestGroundMove(Vector const&, Vector const&, unsigned int, float, unsigned int, AIMoveTrace_t*) const
 T CAI_MoveProbe::TraceHull(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, CGameTrace*) const
 T CAI_MoveProbe::TraceHull(Vector const&, Vector const&, unsigned int, CGameTrace*) const
 T CAI_MoveProbe::TraceLine(Vector const&, Vector const&, unsigned int, bool, CGameTrace*) const
 T CAI_MoveSolver::HaveRegulationForObstacle(CBaseEntity*)
 T CAI_MoveSolver::NormalizeSuggestions(AI_MoveSuggestion_t*, AI_MoveSuggestion_t*)
 T CAI_MoveSolver::Solve(AI_MoveSuggestion_t const*, int, AI_MoveSolution_t*)
 T CAI_MoveSolver::VisualizeRegulations(Vector const&)
 T CAI_Navigator::ActivityIsLocomotive(Activity)
 T CAI_Navigator::AdvancePath()
 T CAI_Navigator::CAI_Navigator(CAI_BaseNPC*)
 T CAI_Navigator::CalcYawSpeed()
 T CAI_Navigator::CalculateDeflection(Vector const&, Vector const&, Vector const&, Vector*)
 T CAI_Navigator::CanFitAtNode(int, unsigned int)
 T CAI_Navigator::CanFitAtPosition(Vector const&, unsigned int, bool)
 T CAI_Navigator::ClearGoal()
 T CAI_Navigator::ClearNavFailCounter()
 T CAI_Navigator::ClearPath()
 T CAI_Navigator::CurWaypointIsGoal() const
 T CAI_Navigator::DelayNavigationFailure(AIMoveTrace_t const&)
 T CAI_Navigator::DoFindPath()
 T CAI_Navigator::DoFindPathToPathcorner(CBaseEntity*)
 T CAI_Navigator::DoFindPathToPos()
 T CAI_Navigator::DrawDebugRouteOverlay()
 T CAI_Navigator::FindPath(AI_NavGoal_t const&, unsigned int)
 T CAI_Navigator::FindPath(bool, bool)
 T CAI_Navigator::FindVectorGoal(Vector*, Vector const&, float, float, bool)
 T CAI_Navigator::GetArrivalActivity() const
 T CAI_Navigator::GetArrivalDirection()
 T CAI_Navigator::GetArrivalDistance() const
 T CAI_Navigator::GetArrivalSequence(int)
 T CAI_Navigator::GetArrivalSpeed()
 T CAI_Navigator::GetBaseMap()
 T CAI_Navigator::GetCurWaypointFlags() const
 T CAI_Navigator::GetCurWaypointPos() const
 T CAI_Navigator::GetGoalFlags() const
 T CAI_Navigator::GetGoalPos() const
 T CAI_Navigator::GetGoalTarget()
 T CAI_Navigator::GetGoalTolerance() const
 T CAI_Navigator::GetGoalType() const
 T CAI_Navigator::GetLastNavFailTime() const
 T CAI_Navigator::GetMovementActivity() const
 T CAI_Navigator::GetMovementSequence()
 T CAI_Navigator::GetNavFailCounter() const
 T CAI_Navigator::GetNavTargetEntity()
 T CAI_Navigator::GetNearestNode()
 T CAI_Navigator::GetNextPathcorner(CBaseEntity*)
 T CAI_Navigator::GetNodePos(AI_PathNode_t__*)
 T CAI_Navigator::GetPathDistToCurWaypoint() const
 T CAI_Navigator::GetPathDistToGoal() const
 T CAI_Navigator::GetPathDistanceToGoal()
 T CAI_Navigator::GetPathTimeToGoal()
 T CAI_Navigator::GetPathfinder()
 T CAI_Navigator::GetPathfinder() const
 T CAI_Navigator::GetPointAlongPath(Vector*, float, bool)
 T CAI_Navigator::GetStepDownMultiplier()
 T CAI_Navigator::GetStoppingPath(CAI_WaypointList*)
 T CAI_Navigator::IgnoreStoppingPath()
 T CAI_Navigator::Init(CAI_Network*)
 T CAI_Navigator::IsGoalActive() const
 T CAI_Navigator::IsGoalSet() const
 T CAI_Navigator::IsMovingOutOfWay(AILocalMoveGoal_t const&, float)
 T CAI_Navigator::MarkCurWaypointFailedLink()
 T CAI_Navigator::MaxYawSpeed()
 T CAI_Navigator::Move(float)
 T CAI_Navigator::MoveCalcBaseGoal(AILocalMoveGoal_t*)
 T CAI_Navigator::MoveClimb()
 T CAI_Navigator::MoveEnact(AILocalMoveGoal_t const&)
 T CAI_Navigator::MoveJump()
 T CAI_Navigator::MoveNormal()
 T CAI_Navigator::MoveUpdateWaypoint(AIMoveResult_t*)
 T CAI_Navigator::MovementCost(int, Vector&, Vector&)
 T CAI_Navigator::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnClearPath()
 T CAI_Navigator::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnMoveBlocked(AIMoveResult_t*)
 T CAI_Navigator::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T CAI_Navigator::OnMoveStalled(AILocalMoveGoal_t const&)
 T CAI_Navigator::OnNavComplete()
 T CAI_Navigator::OnNavFailed(bool)
 T CAI_Navigator::OnNavFailed(char const*, bool)
 T CAI_Navigator::OnNavFailed(int, bool)
 T CAI_Navigator::OnNewGoal()
 T CAI_Navigator::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnScheduleChange()
 T CAI_Navigator::PreMove()
 T CAI_Navigator::PrependLocalAvoidance(float, AIMoveTrace_t const&)
 T CAI_Navigator::PrependWaypoint(Vector const&, Navigation_t, unsigned int)
 T CAI_Navigator::ProgressFlyPath(AI_ProgressFlyPathParams_t const&)
 T CAI_Navigator::RefindPathToGoal(bool, bool)
 T CAI_Navigator::ResetCalculations()
 T CAI_Navigator::Restore(IRestore&)
 T CAI_Navigator::Save(ISave&)
 T CAI_Navigator::SaveStoppingPath()
 T CAI_Navigator::SetArrivalActivity(Activity)
 T CAI_Navigator::SetArrivalDirection(CBaseEntity*)
 T CAI_Navigator::SetArrivalDirection(QAngle const&)
 T CAI_Navigator::SetArrivalDirection(Vector const&)
 T CAI_Navigator::SetArrivalDistance(float)
 T CAI_Navigator::SetArrivalSequence(int)
 T CAI_Navigator::SetArrivalSpeed(float)
 T CAI_Navigator::SetDirectGoal(Vector const&, Navigation_t)
 T CAI_Navigator::SetGoal(AI_NavGoal_t const&, unsigned int)
 T CAI_Navigator::SetGoalFromStoppingPath()
 T CAI_Navigator::SetGoalTarget(CBaseEntity*, Vector const&)
 T CAI_Navigator::SetGoalTolerance(float)
 T CAI_Navigator::SetMovementActivity(Activity)
 T CAI_Navigator::SetMovementSequence(int)
 T CAI_Navigator::SetNavType(Navigation_t)
 T CAI_Navigator::SetRadialGoal(Vector const&, float, float, float, bool, bool)
 T CAI_Navigator::SetRandomGoal(Vector const&, float, Vector const&)
 T CAI_Navigator::SetRandomGoal(float, Vector const&)
 T CAI_Navigator::SetSpeed(float)
 T CAI_Navigator::SetVectorGoal(Vector const&, float, float, bool)
 T CAI_Navigator::SetVectorGoalFromTarget(Vector const&, float, bool)
 T CAI_Navigator::SetWanderGoal(float, float)
 T CAI_Navigator::ShouldAttemptSimplifyTo(Vector const&)
 T CAI_Navigator::ShouldSimplifyTo(bool, Vector const&)
 T CAI_Navigator::SimplifyFlyPath(AI_ProgressFlyPathParams_t const&)
 T CAI_Navigator::SimplifyFlyPath(unsigned int, CBaseEntity const*, float, float, AI_NpcBlockHandling_t)
 T CAI_Navigator::SimplifyPath(bool, float)
 T CAI_Navigator::SimplifyPathBacktrack()
 T CAI_Navigator::SimplifyPathForward(float)
 T CAI_Navigator::SimplifyPathForwardScan(CAI_Navigator::SimplifyForwardScanParams const&)
 T CAI_Navigator::SimplifyPathForwardScan(CAI_Navigator::SimplifyForwardScanParams const&, AI_Waypoint_t*, Vector const&, float, bool, bool, int*)
 T CAI_Navigator::SimplifyPathInsertSimplification(AI_Waypoint_t*, Vector const&)
 T CAI_Navigator::SimplifyPathQuick()
 T CAI_Navigator::StopMoving(bool)
 T CAI_Navigator::TaskMovementComplete()
 T CAI_Navigator::TeleportAlongPath()
 T CAI_Navigator::UpdateGoalPos(Vector const&)
 T CAI_Navigator::~CAI_Navigator()
 T CAI_Network::AddNode(Vector const&, float)
 T CAI_Network::CAI_Network()
 T CAI_Network::CreateLink(int, int, CAI_DynamicLink*)
 T CAI_Network::EnumElement(IHandleEntity*)
 T CAI_Network::FindBSSmallest(CBitString*, float*, int)
 T CAI_Network::GetCachedNearestNode(Vector const&, CAI_BaseNPC*, int*)
 T CAI_Network::GetCachedNode(Vector const&, Hull_t, int*)
 T CAI_Network::GetNodePosition(CBaseCombatCharacter*, int)
 T CAI_Network::GetNodePosition(Hull_t, int)
 T CAI_Network::GetNodeYaw(int)
 T CAI_Network::IsConnected(int, int)
 T CAI_Network::ListNodesInBox(CNodeList&, int, Vector const&, Vector const&, INodeListFilter*)
 T CAI_Network::NearestNodeToPoint(CAI_BaseNPC*, Vector const&, bool, INearestNodeFilter*)
 T CAI_Network::NearestNodeToPoint(Vector const&, bool)
 T CAI_Network::SetCachedNearestNode(Vector const&, int, Hull_t)
 T CAI_Network::~CAI_Network()
 T CAI_NetworkBuilder::BeginBuild()
 T CAI_NetworkBuilder::Build(CAI_Network*)
 T CAI_NetworkBuilder::ComputeConnection(CAI_Node*, CAI_Node*, Hull_t)
 T CAI_NetworkBuilder::EndBuild()
 T CAI_NetworkBuilder::FloodFillZone(CAI_Node**, CAI_Node*, int)
 T CAI_NetworkBuilder::ForceDynamicLinkNeighbors()
 T CAI_NetworkBuilder::InitClimbNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitGroundNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitLinks(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitNeighbors(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitVisibility(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitZones(CAI_Network*)
 T CAI_NetworkBuilder::Rebuild(CAI_Network*)
 T CAI_NetworkEditTools::CAI_NetworkEditTools(CAI_NetworkManager*)
 T CAI_NetworkEditTools::ClearRebuildFlags()
 T CAI_NetworkEditTools::DrawAINetworkOverlay()
 T CAI_NetworkEditTools::DrawEditInfoOverlay()
 T CAI_NetworkEditTools::DrawNextHull(char const*)
 T CAI_NetworkEditTools::FindAILinkNearestFacing(Vector const&, Vector const&, float)
 T CAI_NetworkEditTools::FindAINodeNearestFacing(Vector const&, Vector const&, float, int)
 T CAI_NetworkEditTools::GetNodeIdFromWCId(int)
 T CAI_NetworkEditTools::GetWCIdFromNodeId(int)
 T CAI_NetworkEditTools::OnInit()
 T CAI_NetworkEditTools::RecalcUsableNodesForHull()
 T CAI_NetworkEditTools::SetDebugBits(char const*, int)
 T CAI_NetworkEditTools::SetRebuildFlags()
 T CAI_NetworkEditTools::~CAI_NetworkEditTools()
 T CAI_NetworkManager::BuildNetworkGraph()
 T CAI_NetworkManager::CAI_NetworkManager()
 T CAI_NetworkManager::DelayedInit()
 T CAI_NetworkManager::DeleteAllAINetworks()
 T CAI_NetworkManager::FixupHints()
 T CAI_NetworkManager::GetBaseMap()
 T CAI_NetworkManager::GetDataDescMap()
 T CAI_NetworkManager::InitializeAINetworks()
 T CAI_NetworkManager::IsAIFileCurrent(char const*)
 T CAI_NetworkManager::LoadNetworkGraph()
 T CAI_NetworkManager::RebuildNetworkGraph()
 T CAI_NetworkManager::RebuildThink()
 T CAI_NetworkManager::SaveNetworkGraph()
 T CAI_NetworkManager::Spawn()
 T CAI_NetworkManager::StartRebuild()
 T CAI_NetworkManager::~CAI_NetworkManager()
 T CAI_Node::AddLink(CAI_Link*)
 T CAI_Node::CAI_Node(int, Vector const&, float)
 T CAI_Node::GetLink(int)
 T CAI_Node::GetPosition(int)
 T CAI_Node::GetShuffeledLink(int)
 T CAI_Node::HasLink(int)
 T CAI_Node::ShuffleLinks()
 T CAI_Path::ActualGoalPosition() const
 T CAI_Path::Advance()
 T CAI_Path::BaseGoalPosition() const
 T CAI_Path::CAI_Path()
 T CAI_Path::Clear()
 T CAI_Path::ComputeRouteGoalDistances(AI_Waypoint_t*)
 T CAI_Path::CurWaypointFlags() const
 T CAI_Path::CurWaypointIsGoal() const
 T CAI_Path::CurWaypointNavType() const
 T CAI_Path::CurWaypointPos() const
 T CAI_Path::CurWaypointYaw() const
 T CAI_Path::GetArrivalActivity() const
 T CAI_Path::GetArrivalSequence() const
 T CAI_Path::GetBaseMap()
 T CAI_Path::GetGoalDirection(Vector const&)
 T CAI_Path::GetGoalSpeed(Vector const&)
 T CAI_Path::GetGoalStoppingDistance() const
 T CAI_Path::GetPathDistanceToGoal(Vector const&)
 T CAI_Path::GetPathLength()
 T CAI_Path::GoalFlags() const
 T CAI_Path::GoalType() const
 T CAI_Path::NextWaypointPos() const
 T CAI_Path::PrependWaypoint(Vector const&, Navigation_t, unsigned int)
 T CAI_Path::PrependWaypoints(AI_Waypoint_t*)
 T CAI_Path::ResetGoalPosition(Vector const&)
 T CAI_Path::SetArrivalActivity(Activity)
 T CAI_Path::SetArrivalSequence(int)
 T CAI_Path::SetGoalDirection(CBaseEntity*)
 T CAI_Path::SetGoalDirection(Vector const&)
 T CAI_Path::SetGoalPosition(Vector const&)
 T CAI_Path::SetGoalSpeed(CBaseEntity*)
 T CAI_Path::SetGoalSpeed(float)
 T CAI_Path::SetGoalStoppingDistance(float)
 T CAI_Path::SetGoalType(GoalType_t)
 T CAI_Path::SetLastNodeAsGoal(bool)
 T CAI_Path::SetWaypoints(AI_Waypoint_t*, bool)
 T CAI_Path::~CAI_Path()
 T CAI_Pathfinder::BuildClimbRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildComplexRoute(Navigation_t, Vector const&, Vector const&, CBaseEntity const*, int, int, int, float, float, float)
 T CAI_Pathfinder::BuildFlyRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, int, float, float)
 T CAI_Pathfinder::BuildGroundRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, int, float, float)
 T CAI_Pathfinder::BuildJumpRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildLocalRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildNearestNodeRoute(Vector const&, bool, float, int*)
 T CAI_Pathfinder::BuildNodeRoute(Vector const&, Vector const&, float)
 T CAI_Pathfinder::BuildRadialRoute(Vector const&, Vector const&, float, float, float, bool, float, bool)
 T CAI_Pathfinder::BuildRoute(Vector const&, Vector const&, CBaseEntity*, float, Navigation_t, bool)
 T CAI_Pathfinder::BuildSimpleRoute(Navigation_t, Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildTriangulationRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, float, float, Navigation_t)
 T CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLine(Vector const&, Vector const&, int, int, int, bool)
 T CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLines(Vector const&, Vector const&, Vector const&, AIMoveTrace_t const&, AIMoveTrace_t const&, bool)
 T CAI_Pathfinder::CTriDebugOverlay::ClearTriOverlayLines()
 T CAI_Pathfinder::CTriDebugOverlay::Draw(int)
 T CAI_Pathfinder::CTriDebugOverlay::FadeTriOverlayLines()
 T CAI_Pathfinder::CanGiveWay(Vector const&, Vector const&, CBaseEntity*)
 T CAI_Pathfinder::CheckStaleNavTypeRoute(Navigation_t, Vector const&, Vector const&)
 T CAI_Pathfinder::CheckStaleRoute(Vector const&, Vector const&, int)
 T CAI_Pathfinder::ComputeWaypointType(CAI_Node**, int, int)
 T CAI_Pathfinder::CreateNodeWaypoint(Hull_t, int, int)
 T CAI_Pathfinder::DrawDebugGeometryOverlays(int)
 T CAI_Pathfinder::FindBestPath(int, int)
 T CAI_Pathfinder::FindShortRandomPath(int, float, Vector const&)
 T CAI_Pathfinder::GetBaseMap()
 T CAI_Pathfinder::Init(CAI_Network*)
 T CAI_Pathfinder::IsLinkStillStale(int, CAI_Link*)
 T CAI_Pathfinder::IsLinkUsable(CAI_Link*, int)
 T CAI_Pathfinder::MakeRouteFromParents(int*, int)
 T CAI_Pathfinder::NearestNodeToNPC()
 T CAI_Pathfinder::NearestNodeToPoint(Vector const&)
 T CAI_Pathfinder::RouteFromNode(Vector const&, int, int, float)
 T CAI_Pathfinder::RouteToNode(Vector const&, int, int, float)
 T CAI_Pathfinder::TestTriangulationRoute(Navigation_t, Vector const&, Vector const&, Vector const&, CBaseEntity const*, AIMoveTrace_t*)
 T CAI_Pathfinder::Triangulate(Navigation_t, Vector const&, Vector const&, float, CBaseEntity const*, Vector*)
 T CAI_Pathfinder::UnlockRouteNodes(AI_Waypoint_t*)
 T CAI_PlaneSolver::AddObstacle(Vector const&, float, CBaseEntity*, AI_MoveSuggType_t)
 T CAI_PlaneSolver::AdjustRegulationWeight(CBaseEntity*, float)
 T CAI_PlaneSolver::AdjustSolutionForFliers(AILocalMoveGoal_t const&, float, Vector*)
 T CAI_PlaneSolver::CAI_PlaneSolver(CAI_BaseNPC*)
 T CAI_PlaneSolver::CalcProbeDist(float)
 T CAI_PlaneSolver::CalcYawsFromOffset(float, float, int, float*, float*)
 T CAI_PlaneSolver::CalculateRegulationWeight(AIMoveTrace_t const&, float)
 T CAI_PlaneSolver::ComputeTurnBiasFlags(AILocalMoveGoal_t const&, AIMoveTrace_t const&)
 T CAI_PlaneSolver::DetectUnsolvable(AILocalMoveGoal_t const&)
 T CAI_PlaneSolver::GenerateCircleObstacleSuggestions(float)
 T CAI_PlaneSolver::GenerateObstacleNpcs(AILocalMoveGoal_t const&, float)
 T CAI_PlaneSolver::GenerateObstacleSuggestion(AILocalMoveGoal_t const&, float, float, float, int)
 T CAI_PlaneSolver::GenerateObstacleSuggestions(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, float, float, int)
 T CAI_PlaneSolver::GenerateSuggestionFromTrace(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, float, float, int)
 T CAI_PlaneSolver::MoveLimit(Navigation_t, Vector const&, bool, bool, AIMoveTrace_t*)
 T CAI_PlaneSolver::MoveLimit(Navigation_t, Vector const&, bool, bool, int, AIMoveTrace_t*)
 T CAI_PlaneSolver::RunMoveSolver(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, bool, Vector*)
 T CAI_PlaneSolver::Solve(AILocalMoveGoal_t const&, float, Vector*)
 T CAI_PlaneSolver::VisualizeRegulations()
 T CAI_PlaneSolver::VisualizeSolution(Vector const&, Vector const&)
 T CAI_PlayerAlly::CScheduleLoader::CScheduleLoader()
 T CAI_PlayerAlly::CanPlaySentence(bool)
 T CAI_PlayerAlly::ClearPendingSpeech()
 T CAI_PlayerAlly::ClearTransientConditions()
 T CAI_PlayerAlly::DeferAllIdleSpeech(float, CAI_BaseNPC*)
 T CAI_PlayerAlly::Event_Killed(CTakeDamageInfo const&)
 T CAI_PlayerAlly::EyeLookTarget()
 T CAI_PlayerAlly::FindNamedEntity(char const*)
 T CAI_PlayerAlly::FindSpeechTarget(int)
 T CAI_PlayerAlly::GatherConditions()
 T CAI_PlayerAlly::GatherEnemyConditions(CBaseEntity*)
 T CAI_PlayerAlly::GetBaseMap()
 T CAI_PlayerAlly::GetDataDescMap()
 T CAI_PlayerAlly::InitCustomSchedules()
 T CAI_PlayerAlly::IsAllowedToSpeak(char const*, bool)
 T CAI_PlayerAlly::IsOkToCombatSpeak()
 T CAI_PlayerAlly::IsOkToSpeak()
 T CAI_PlayerAlly::IsOkToSpeak(ConceptCategory_t, bool)
 T CAI_PlayerAlly::IsOkToSpeakInResponseToPlayer()
 T CAI_PlayerAlly::IsValidSpeechTarget(int, CBaseEntity*)
 T CAI_PlayerAlly::LoadSchedules()
 T CAI_PlayerAlly::LoadedSchedules()
 T CAI_PlayerAlly::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_PlayerAlly::OnKilledNPC(CBaseCombatCharacter*)
 T CAI_PlayerAlly::OnSpokeConcept(char const*)
 T CAI_PlayerAlly::OnStartSchedule(int)
 T CAI_PlayerAlly::OnStartSpeaking()
 T CAI_PlayerAlly::OnStateChange(NPC_STATE, NPC_STATE)
 T CAI_PlayerAlly::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_PlayerAlly::PainSound()
 T CAI_PlayerAlly::PlayScriptedSentence(char const*, float, float, soundlevel_t, bool, CBaseEntity*)
 T CAI_PlayerAlly::PrescheduleThink()
 T CAI_PlayerAlly::RunTask(Task_t const*)
 T CAI_PlayerAlly::SelectIdleSpeech(AISpeechSelection_t*)
 T CAI_PlayerAlly::SelectInterjection()
 T CAI_PlayerAlly::SelectNonCombatSpeechSchedule()
 T CAI_PlayerAlly::SelectPlayerUseSpeech()
 T CAI_PlayerAlly::SelectSchedule()
 T CAI_PlayerAlly::SelectSpeechResponse(char const*, char const*, CBaseEntity*, AISpeechSelection_t*)
 T CAI_PlayerAlly::SetPendingSpeech(char const*, AI_Response*)
 T CAI_PlayerAlly::ShouldSpeakRandom(char const*, int)
 T CAI_PlayerAlly::SpeakIfAllowed(char const*, char const*, bool)
 T CAI_PlayerAlly::SquadSlotName(int)
 T CAI_PlayerAlly::StartTask(Task_t const*)
 T CAI_PlayerAlly::TalkInit()
 T CAI_PlayerAlly::TaskFail(int)
 T CAI_PlayerAlly::Touch(CBaseEntity*)
 T CAI_PlayerAlly::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CAI_PlayerAlly::TranslateSchedule(int)
 T CAI_ProxTester::GetBaseMap()
 T CAI_RappelBehavior::BeginRappel()
 T CAI_RappelBehavior::CAI_RappelBehavior()
 T CAI_RappelBehavior::CScheduleLoader::CScheduleLoader()
 T CAI_RappelBehavior::CanSelectSchedule()
 T CAI_RappelBehavior::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_RappelBehavior::CreateZipline()
 T CAI_RappelBehavior::CutZipline()
 T CAI_RappelBehavior::GatherConditions()
 T CAI_RappelBehavior::GetBaseMap()
 T CAI_RappelBehavior::GetDataDescMap()
 T CAI_RappelBehavior::InitCustomSchedules()
 T CAI_RappelBehavior::KeyValue(char const*, char const*)
 T CAI_RappelBehavior::LoadSchedules()
 T CAI_RappelBehavior::LoadedSchedules()
 T CAI_RappelBehavior::Precache()
 T CAI_RappelBehavior::RunTask(Task_t const*)
 T CAI_RappelBehavior::SelectSchedule()
 T CAI_RappelBehavior::SetDescentSpeed()
 T CAI_RappelBehavior::StartTask(Task_t const*)
 T CAI_Schedule::CAI_Schedule(char*, int, CAI_Schedule*)
 T CAI_Schedule::~CAI_Schedule()
 T CAI_SchedulesManager::CreateSchedule(char*, int)
 T CAI_SchedulesManager::CreateStringRegistries()
 T CAI_SchedulesManager::DeleteAllSchedules()
 T CAI_SchedulesManager::DestroyStringRegistries()
 T CAI_SchedulesManager::GetGoalID(char const*)
 T CAI_SchedulesManager::GetMemoryID(char const*)
 T CAI_SchedulesManager::GetPathID(char const*)
 T CAI_SchedulesManager::GetScheduleByName(char const*)
 T CAI_SchedulesManager::GetScheduleFromID(int)
 T CAI_SchedulesManager::GetStateID(char const*)
 T CAI_SchedulesManager::LoadAllSchedules()
 T CAI_SchedulesManager::LoadSchedules(char const*, CAI_ClassScheduleIdSpace*)
 T CAI_SchedulesManager::LoadSchedulesFromBuffer(char const*, char*, CAI_ClassScheduleIdSpace*)
 T CAI_ScriptConditions::Activate()
 T CAI_ScriptConditions::Disable()
 T CAI_ScriptConditions::Enable()
 T CAI_ScriptConditions::EvalActorSeePlayer(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalActorSeeTarget(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalActorTargetProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorLOS(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorLook(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerBlockingActor(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetLOS(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetLook(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalState(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvaluationThink()
 T CAI_ScriptConditions::GetBaseMap()
 T CAI_ScriptConditions::GetDataDescMap()
 T CAI_ScriptConditions::InputDisable(inputdata_t&)
 T CAI_ScriptConditions::InputEnable(inputdata_t&)
 T CAI_ScriptConditions::IsInFOV(CBaseEntity*, CBaseEntity*, float, bool)
 T CAI_ScriptConditions::PlayerHasLineOfSight(CBaseEntity*, CBaseEntity*, bool)
 T CAI_ScriptConditions::Spawn()
 T CAI_ScriptedSchedule::FindScriptEntity(bool)
 T CAI_ScriptedSchedule::GetBaseMap()
 T CAI_ScriptedSchedule::GetDataDescMap()
 T CAI_ScriptedSchedule::InputStartSchedule(inputdata_t&)
 T CAI_ScriptedSchedule::ScriptThink()
 T CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)
 T CAI_ScriptedSentence::AcceptableSpeaker(CAI_BaseNPC*)
 T CAI_ScriptedSentence::DelayThink()
 T CAI_ScriptedSentence::FindEntity()
 T CAI_ScriptedSentence::FindThink()
 T CAI_ScriptedSentence::GetBaseMap()
 T CAI_ScriptedSentence::GetDataDescMap()
 T CAI_ScriptedSentence::InputBeginSentence(inputdata_t&)
 T CAI_ScriptedSentence::KeyValue(char const*, char const*)
 T CAI_ScriptedSentence::Spawn()
 T CAI_ScriptedSentence::StartSentence(CAI_BaseNPC*)
 T CAI_ScriptedSequence::Activate()
 T CAI_ScriptedSequence::AllowInterrupt(bool)
 T CAI_ScriptedSequence::Blocked(CBaseEntity*)
 T CAI_ScriptedSequence::CanEnqueueAfter()
 T CAI_ScriptedSequence::CanInterrupt()
 T CAI_ScriptedSequence::CancelScript()
 T CAI_ScriptedSequence::DelayStart(bool)
 T CAI_ScriptedSequence::Die()
 T CAI_ScriptedSequence::FCanOverrideState()
 T CAI_ScriptedSequence::FindEntity()
 T CAI_ScriptedSequence::FindScriptEntity()
 T CAI_ScriptedSequence::FireScriptEvent(int)
 T CAI_ScriptedSequence::FixFlyFlag(CAI_BaseNPC*, int)
 T CAI_ScriptedSequence::FixScriptNPCSchedule(CAI_BaseNPC*, int)
 T CAI_ScriptedSequence::GetBaseMap()
 T CAI_ScriptedSequence::GetDataDescMap()
 T CAI_ScriptedSequence::GetSpawnPreIdleSequenceForScript(CBaseEntity*)
 T CAI_ScriptedSequence::InputBeginSequence(inputdata_t&)
 T CAI_ScriptedSequence::InputCancelSequence(inputdata_t&)
 T CAI_ScriptedSequence::InputMoveToPosition(inputdata_t&)
 T CAI_ScriptedSequence::IsTimeToStart()
 T CAI_ScriptedSequence::IsWaitingForBegin()
 T CAI_ScriptedSequence::OnBeginSequence()
 T CAI_ScriptedSequence::Pain()
 T CAI_ScriptedSequence::PostIdleDone(CAI_BaseNPC*)
 T CAI_ScriptedSequence::RemoveIgnoredConditions()
 T CAI_ScriptedSequence::ScriptEntityCancel(CBaseEntity*)
 T CAI_ScriptedSequence::ScriptThink()
 T CAI_ScriptedSequence::SequenceDone(CAI_BaseNPC*)
 T CAI_ScriptedSequence::Spawn()
 T CAI_ScriptedSequence::StartScript()
 T CAI_ScriptedSequence::StartSequence(CAI_BaseNPC*, string_t, bool)
 T CAI_ScriptedSequence::StartThink()
 T CAI_ScriptedSequence::StopThink()
 T CAI_ScriptedSequence::SynchronizeSequence(CAI_BaseNPC*)
 T CAI_ScriptedSequence::Touch(CBaseEntity*)
 T CAI_ScriptedSequence::UpdateOnRemove()
 T CAI_SensedObjectsManager::AddEntity(CBaseEntity*)
 T CAI_SensedObjectsManager::GetFirst(int*)
 T CAI_SensedObjectsManager::GetNext(int*)
 T CAI_SensedObjectsManager::Init()
 T CAI_SensedObjectsManager::OnEntityDeleted(CBaseEntity*)
 T CAI_SensedObjectsManager::OnEntitySpawned(CBaseEntity*)
 T CAI_SensedObjectsManager::Term()
 T CAI_Senses::BeginGather()
 T CAI_Senses::CanHearSound(CSound*)
 T CAI_Senses::CanSeeEntity(CBaseEntity*)
 T CAI_Senses::DidSeeEntity(CBaseEntity*) const
 T CAI_Senses::EndGather(int, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >*)
 T CAI_Senses::GetBaseMap()
 T CAI_Senses::GetClosestSound(bool, int)
 T CAI_Senses::GetFirstHeardSound(AISoundIter_t__**)
 T CAI_Senses::GetFirstSeenEntity(AISightIter_t__**, seentype_t) const
 T CAI_Senses::GetNextHeardSound(AISoundIter_t__**)
 T CAI_Senses::GetNextSeenEntity(AISightIter_t__**) const
 T CAI_Senses::Listen()
 T CAI_Senses::Look(CBaseEntity*)
 T CAI_Senses::Look(int)
 T CAI_Senses::LookForHighPriorityEntities(int)
 T CAI_Senses::LookForNPCs(int)
 T CAI_Senses::LookForObjects(int)
 T CAI_Senses::NoteSeenEntity(CBaseEntity*)
 T CAI_Senses::PerformSensing()
 T CAI_Senses::SeeEntity(CBaseEntity*)
 T CAI_Senses::ShouldSeeEntity(CBaseEntity*)
 T CAI_Senses::WaitingUntilSeen(CBaseEntity*)
 T CAI_SentenceBase::CAI_SentenceBase()
 T CAI_SentenceBase::ClearQueue()
 T CAI_SentenceBase::GetBaseMap()
 T CAI_SentenceBase::MatchesCriteria(SentenceCriteria_t)
 T CAI_SentenceBase::PlaySentence(char const*)
 T CAI_SentenceBase::SentenceMsg(char const*, char const*)
 T CAI_SentenceBase::Speak(char const*, SentencePriority_t, SentenceCriteria_t)
 T CAI_SentenceBase::SpeakQueued(char const*, SentencePriority_t, SentenceCriteria_t)
 T CAI_SentenceBase::UpdateSentenceQueue()
 T CAI_ShotRegulator::CAI_ShotRegulator()
 T CAI_ShotRegulator::FireNoEarlierThan(float)
 T CAI_ShotRegulator::GetBaseMap()
 T CAI_ShotRegulator::GetBurstInterval(float*, float*) const
 T CAI_ShotRegulator::GetBurstShotCountRange(int*, int*) const
 T CAI_ShotRegulator::GetBurstShotsRemaining() const
 T CAI_ShotRegulator::GetRestInterval(float*, float*) const
 T CAI_ShotRegulator::IsInRestInterval() const
 T CAI_ShotRegulator::NextShotTime() const
 T CAI_ShotRegulator::OnFiredWeapon()
 T CAI_ShotRegulator::Reset(bool)
 T CAI_ShotRegulator::SetBurstInterval(float, float)
 T CAI_ShotRegulator::SetBurstShotCountRange(int, int)
 T CAI_ShotRegulator::SetBurstShotsRemaining(int)
 T CAI_ShotRegulator::SetParameters(int, int, float, float)
 T CAI_ShotRegulator::SetRestInterval(float, float)
 T CAI_ShotRegulator::ShouldShoot() const
 T CAI_SpeechFilter::Activate()
 T CAI_SpeechFilter::GetBaseMap()
 T CAI_SpeechFilter::GetDataDescMap()
 T CAI_SpeechFilter::OnEntityCreated(CBaseEntity*)
 T CAI_SpeechFilter::OnEntityDeleted(CBaseEntity*)
 T CAI_SpeechFilter::Spawn()
 T CAI_SpeechFilter::UpdateOnRemove()
 T CAI_Squad::AddToSquad(CAI_BaseNPC*)
 T CAI_Squad::BroadcastInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_Squad::CAI_Squad()
 T CAI_Squad::CAI_Squad(string_t)
 T CAI_Squad::FOkToMakeSound(int)
 T CAI_Squad::FindEnemyInfo(CBaseEntity*)
 T CAI_Squad::GetBaseMap()
 T CAI_Squad::GetFirstMember(AISquadIter_t__**, bool)
 T CAI_Squad::GetLeader()
 T CAI_Squad::GetNextMember(AISquadIter_t__**, bool)
 T CAI_Squad::GetVisibleSquadMembers(CAI_BaseNPC*)
 T CAI_Squad::Init(string_t)
 T CAI_Squad::IsLeader(CAI_BaseNPC*)
 T CAI_Squad::IsSilentMember(CAI_BaseNPC const*)
 T CAI_Squad::IsSlotOccupied(CBaseEntity*, int) const
 T CAI_Squad::IsSquadInflictor(CBaseEntity*)
 T CAI_Squad::IsStrategySlotRangeOccupied(CBaseEntity*, int, int)
 T CAI_Squad::JustMadeSound(int, float)
 T CAI_Squad::NearestSquadMember(CAI_BaseNPC*)
 T CAI_Squad::NumMembers(bool)
 T CAI_Squad::OccupySlot(CBaseEntity*, int)
 T CAI_Squad::OccupyStrategySlotRange(CBaseEntity*, int, int, int*)
 T CAI_Squad::RemoveFromSquad(CAI_BaseNPC*, bool)
 T CAI_Squad::SetSquadInflictor(CBaseEntity*)
 T CAI_Squad::SquadIsMember(CBaseEntity*)
 T CAI_Squad::SquadMemberInRange(Vector const&, float)
 T CAI_Squad::SquadNewEnemy(CBaseEntity*)
 T CAI_Squad::SquadRemember(int)
 T CAI_Squad::UpdateEnemyMemory(CAI_BaseNPC*, CBaseEntity*, Vector const&)
 T CAI_Squad::VacateSlot(CBaseEntity*, int)
 T CAI_Squad::VacateStrategySlot(CBaseEntity*, int)
 T CAI_Squad::~CAI_Squad()
 T CAI_SquadManager::CreateSquad(string_t)
 T CAI_SquadManager::DeleteAllSquads()
 T CAI_SquadManager::DeleteSquad(CAI_Squad*)
 T CAI_SquadManager::FindSquad(string_t)
 T CAI_SquadManager::NumSquads()
 T CAI_StandoffBehavior::BeginScheduleSelection()
 T CAI_StandoffBehavior::BuildScheduleTestBits()
 T CAI_StandoffBehavior::CAI_StandoffBehavior(CAI_BaseNPC*)
 T CAI_StandoffBehavior::CScheduleLoader::CScheduleLoader()
 T CAI_StandoffBehavior::CanSelectSchedule()
 T CAI_StandoffBehavior::ClearStandoffGoalPosition()
 T CAI_StandoffBehavior::EndScheduleSelection()
 T CAI_StandoffBehavior::GatherConditions()
 T CAI_StandoffBehavior::GetBaseMap()
 T CAI_StandoffBehavior::GetCoverActivity()
 T CAI_StandoffBehavior::GetDataDescMap()
 T CAI_StandoffBehavior::GetDirectionOfStandoff(Vector*)
 T CAI_StandoffBehavior::GetHintType()
 T CAI_StandoffBehavior::GetPlayerLeader()
 T CAI_StandoffBehavior::GetStandoffGoalPosition()
 T CAI_StandoffBehavior::InitCustomSchedules()
 T CAI_StandoffBehavior::IsBehindBattleLines(Vector const&)
 T CAI_StandoffBehavior::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_StandoffBehavior::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_StandoffBehavior::LoadSchedules()
 T CAI_StandoffBehavior::LoadedSchedules()
 T CAI_StandoffBehavior::NPC_TranslateActivity(Activity)
 T CAI_StandoffBehavior::OnChangeHintGroup(string_t, string_t)
 T CAI_StandoffBehavior::OnChangeTacticalConstraints()
 T CAI_StandoffBehavior::OnRestore()
 T CAI_StandoffBehavior::OnUpdateShotRegulator()
 T CAI_StandoffBehavior::PlayerIsLeading()
 T CAI_StandoffBehavior::PrescheduleThink()
 T CAI_StandoffBehavior::SelectSchedule()
 T CAI_StandoffBehavior::SelectScheduleAttack()
 T CAI_StandoffBehavior::SelectScheduleCheckCover()
 T CAI_StandoffBehavior::SelectScheduleEstablishAim()
 T CAI_StandoffBehavior::SelectScheduleUpdateWeapon()
 T CAI_StandoffBehavior::SetActive(bool)
 T CAI_StandoffBehavior::SetParameters(AI_StandoffParams_t const&, CAI_GoalEntity*)
 T CAI_StandoffBehavior::SetReuseCurrentCover()
 T CAI_StandoffBehavior::SetStandoffGoalPosition(Vector const&)
 T CAI_StandoffBehavior::Spawn()
 T CAI_StandoffBehavior::StartTask(Task_t const*)
 T CAI_StandoffBehavior::TranslateSchedule(int)
 T CAI_StandoffBehavior::UnlockHintNode()
 T CAI_StandoffBehavior::UpdateBattleLines()
 T CAI_StandoffBehavior::UpdateTranslateActivityMap()
 T CAI_StandoffGoal::GetBaseMap()
 T CAI_StandoffGoal::GetDataDescMap()
 T CAI_TacticalServices::FindBackAwayNode(Vector const&)
 T CAI_TacticalServices::FindBackAwayPos(Vector const&, Vector*)
 T CAI_TacticalServices::FindCoverNode(Vector const&, Vector const&, Vector const&, float, float)
 T CAI_TacticalServices::FindCoverNode(Vector const&, Vector const&, float, float)
 T CAI_TacticalServices::FindCoverPos(Vector const&, Vector const&, Vector const&, float, float, Vector*)
 T CAI_TacticalServices::FindCoverPos(Vector const&, Vector const&, float, float, Vector*)
 T CAI_TacticalServices::FindLateralCover(Vector const&, Vector const&, float, float, int, Vector*)
 T CAI_TacticalServices::FindLateralCover(Vector const&, float, Vector*)
 T CAI_TacticalServices::FindLateralCover(Vector const&, float, float, int, Vector*)
 T CAI_TacticalServices::FindLateralLos(Vector const&, Vector*)
 T CAI_TacticalServices::FindLos(Vector const&, Vector const&, float, float, float, Vector const&, Vector*)
 T CAI_TacticalServices::FindLos(Vector const&, Vector const&, float, float, float, Vector*)
 T CAI_TacticalServices::FindLosNode(Vector const&, Vector const&, float, float, float, Vector const&)
 T CAI_TacticalServices::GetBaseMap()
 T CAI_TacticalServices::GetNodePos(int)
 T CAI_TacticalServices::Init(CAI_Network*)
 T CAI_TacticalServices::TestLateralCover(Vector const&, Vector const&, float)
 T CAI_TacticalServices::TestLateralLos(Vector const&, Vector const&)
 T CAI_TestHull::GetTestHull()
 T CAI_TestHull::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CAI_TestHull::Precache()
 T CAI_TestHull::ReturnTestHull()
 T CAI_TestHull::Spawn()
 T CAI_TestHull::~CAI_TestHull()
 T CAI_TrackPather::BestPointOnPath(CPathTrack*, Vector const&, float, bool, bool)
 T CAI_TrackPather::ClosestPointToCurrentPath(Vector*) const
 T CAI_TrackPather::ComputeDistanceAlongPathToPoint(CPathTrack*, CPathTrack*, Vector const&, bool)
 T CAI_TrackPather::ComputeDistanceToLeadingPosition()
 T CAI_TrackPather::ComputeDistanceToTargetPosition()
 T CAI_TrackPather::ComputeLeadingPointAlongPath(Vector const&, CPathTrack*, float, Vector*)
 T CAI_TrackPather::ComputeNormalizedDestVelocity(Vector*) const
 T CAI_TrackPather::ComputePathDirection(CPathTrack*, Vector*)
 T CAI_TrackPather::ComputePathDistance(CPathTrack*, CPathTrack*, bool) const
 T CAI_TrackPather::ComputePathTangent(float, Vector*) const
 T CAI_TrackPather::ComputePerpDistanceFromPath(Vector const&, Vector const&, Vector const&)
 T CAI_TrackPather::ComputePointAlongCurrentPath(float, float, Vector*)
 T CAI_TrackPather::ComputePointFromPerpDistance(Vector const&, Vector const&, float, Vector*)
 T CAI_TrackPather::CurrentPathDirection(Vector*)
 T CAI_TrackPather::EnableLeading(bool)
 T CAI_TrackPather::FindClosestPointOnPath(CPathTrack*, Vector const&, Vector*, Vector*, float*)
 T CAI_TrackPather::FindTrackBlocker(Vector const&, Vector const&)
 T CAI_TrackPather::FlyToPathTrack(string_t)
 T CAI_TrackPather::GetBaseMap()
 T CAI_TrackPather::GetDataDescMap()
 T CAI_TrackPather::GetLeadingDistance() const
 T CAI_TrackPather::HasLOSToTarget(CPathTrack*)
 T CAI_TrackPather::InitPathingData(float, float, float)
 T CAI_TrackPather::InputChooseFarthestPathPoint(inputdata_t&)
 T CAI_TrackPather::InputChooseNearestPathPoint(inputdata_t&)
 T CAI_TrackPather::InputFlyToPathTrack(inputdata_t&)
 T CAI_TrackPather::InputSetTrack(inputdata_t&)
 T CAI_TrackPather::InputStartBreakableMovement(inputdata_t&)
 T CAI_TrackPather::InputStartLeading(inputdata_t&)
 T CAI_TrackPather::InputStartPatrol(inputdata_t&)
 T CAI_TrackPather::InputStartPatrolBreakable(inputdata_t&)
 T CAI_TrackPather::InputStopBreakableMovement(inputdata_t&)
 T CAI_TrackPather::InputStopLeading(inputdata_t&)
 T CAI_TrackPather::InputStopPatrol(inputdata_t&)
 T CAI_TrackPather::IsForwardAlongPath(CPathTrack*, CPathTrack*) const
 T CAI_TrackPather::IsOnSameTrack(CPathTrack*, CPathTrack*) const
 T CAI_TrackPather::MaxDistanceFromCurrentPath() const
 T CAI_TrackPather::MoveToClosestTrackPoint(CPathTrack*)
 T CAI_TrackPather::MoveToTrackPoint(CPathTrack*)
 T CAI_TrackPather::OnRestore()
 T CAI_TrackPather::OnSave(IEntitySaveUtils*)
 T CAI_TrackPather::SelectNewDestTarget()
 T CAI_TrackPather::SetFarthestPathDist(float)
 T CAI_TrackPather::SetLeadingDistance(float)
 T CAI_TrackPather::SetTrack(CBaseEntity*)
 T CAI_TrackPather::SetTrack(string_t)
 T CAI_TrackPather::SetupNewCurrentTarget(CPathTrack*)
 T CAI_TrackPather::TargetPathAcrossDirection() const
 T CAI_TrackPather::TargetPathDirection() const
 T CAI_TrackPather::TargetSpeedAcrossPath() const
 T CAI_TrackPather::TargetSpeedAlongPath() const
 T CAI_TrackPather::UpdateCurrentTarget()
 T CAI_TrackPather::UpdateCurrentTargetLeading()
 T CAI_TrackPather::UpdateTargetPosition()
 T CAI_TrackPather::UpdateTargetPositionLeading()
 T CAI_TrackPather::UpdateTrackNavigation()
 T CAI_TrackPather::UseFarthestPathPoint(bool)
 T CAI_TrackPather::VisualizeDebugInfo(Vector const&, Vector const&)
 T CAI_WaypointList::GetLast()
 T CAI_WaypointList::GetLast() const
 T CAI_WaypointList::PrependWaypoint(Vector const&, Navigation_t, unsigned int)
 T CAI_WaypointList::PrependWaypoints(AI_Waypoint_t*)
 T CAI_WaypointList::RemoveAll()
 T CAI_WaypointList::Set(AI_Waypoint_t*)
 T CAK47::AK47Fire(float)
 T CAK47::CAK47()
 T CAK47::GetClassName()
 T CAK47::GetPredDescMap()
 T CAK47::GetServerClass()
 T CAK47::PrimaryAttack()
 T CAK47::YouForgotToImplementOrDeclareServerClass()
 T CAmbientGeneric::Activate()
 T CAmbientGeneric::ComputeMaxAudibleDistance()
 T CAmbientGeneric::GetBaseMap()
 T CAmbientGeneric::GetDataDescMap()
 T CAmbientGeneric::InitModulationParms()
 T CAmbientGeneric::InputPitch(inputdata_t&)
 T CAmbientGeneric::InputPlaySound(inputdata_t&)
 T CAmbientGeneric::InputStopSound(inputdata_t&)
 T CAmbientGeneric::InputToggleSound(inputdata_t&)
 T CAmbientGeneric::InputVolume(inputdata_t&)
 T CAmbientGeneric::KeyValue(char const*, char const*)
 T CAmbientGeneric::Precache()
 T CAmbientGeneric::RampThink()
 T CAmbientGeneric::SendSound(SoundFlags_t)
 T CAmbientGeneric::SetTransmit(CCheckTransmitInfo*, bool)
 T CAmbientGeneric::Spawn()
 T CAmbientGeneric::ToggleSound()
 T CAmmoDef::AddAmmoType(char const*, int, int, char const*, char const*, char const*, float, int, int, int)
 T CAmmoDef::AddAmmoType(char const*, int, int, int, int, int)
 T CAmmoDef::AddAmmoType(char const*, int, int, int, int, int, float, int, int, int)
 T CAmmoDef::CAmmoDef()
 T CAmmoDef::DamageForce(int)
 T CAmmoDef::DamageType(int)
 T CAmmoDef::Flags(int)
 T CAmmoDef::GetAmmoOfIndex(int)
 T CAmmoDef::Index(char const*)
 T CAmmoDef::MaxCarry(int)
 T CAmmoDef::MaxSplashSize(int)
 T CAmmoDef::MinSplashSize(int)
 T CAmmoDef::NPCDamage(int)
 T CAmmoDef::PlrDamage(int)
 T CAmmoDef::TracerType(int)
 T CAmmoDef::~CAmmoDef()
 T CAnimationLayer::CAnimationLayer()
 T CAnimationLayer::DispatchAnimEvents(CBaseAnimating*, CBaseAnimating*)
 T CAnimationLayer::GetBaseMap()
 T CAnimationLayer::Init()
 T CAnimationLayer::IsAbandoned()
 T CAnimationLayer::MarkActive()
 T CAnimationLayer::StudioFrameAdvance(float, CBaseAnimating*)
 T CAreaPortal::CAreaPortal()
 T CAreaPortal::GetBaseMap()
 T CAreaPortal::GetDataDescMap()
 T CAreaPortal::InputClose(inputdata_t&)
 T CAreaPortal::InputOpen(inputdata_t&)
 T CAreaPortal::InputToggle(inputdata_t&)
 T CAreaPortal::KeyValue(char const*, char const*)
 T CAreaPortal::Precache()
 T CAreaPortal::Spawn()
 T CAreaPortal::UpdateState()
 T CAreaPortal::UpdateTransmitState()
 T CAreaPortal::UpdateVisibility(Vector const&, float)
 T CAreaPortal::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CAssaultPoint::GetBaseMap()
 T CAssaultPoint::GetDataDescMap()
 T CAutoGameSystem::CAutoGameSystem()
 T CBaseAnimating::Activate()
 T CBaseAnimating::BecomeRagdollOnClient(Vector const&)
 T CBaseAnimating::CBaseAnimating()
 T CBaseAnimating::CalculateIKLocks(float)
 T CBaseAnimating::CanBecomeRagdoll()
 T CBaseAnimating::ComputeEntitySpaceHitboxSurroundingBox(Vector*, Vector*)
 T CBaseAnimating::ComputeHitboxSurroundingBox(Vector*, Vector*)
 T CBaseAnimating::CopyAnimationDataFrom(CBaseAnimating*)
 T CBaseAnimating::DisableServerIK()
 T CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimating::Dissolve(char const*, float, bool, int)
 T CBaseAnimating::DoMuzzleFlash()
 T CBaseAnimating::DrawDebugTextOverlays()
 T CBaseAnimating::DrawServerHitboxes(float, bool)
 T CBaseAnimating::EdgeLimitPoseParameter(int, float, float)
 T CBaseAnimating::EnableServerIK()
 T CBaseAnimating::ExtractBbox(int, Vector&, Vector&)
 T CBaseAnimating::FindBodygroupByName(char const*)
 T CBaseAnimating::FindTransitionSequence(int, int, int*)
 T CBaseAnimating::GetAnimTimeInterval() const
 T CBaseAnimating::GetAttachment(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(char const*, Vector&, Vector*, Vector*, Vector*)
 T CBaseAnimating::GetAttachment(int, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(int, Vector&, Vector*, Vector*, Vector*)
 T CBaseAnimating::GetAttachment(int, matrix3x4_t&)
 T CBaseAnimating::GetAttachmentLocal(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetAttachmentLocal(int, Vector&, QAngle&)
 T CBaseAnimating::GetAttachmentLocal(int, matrix3x4_t&)
 T CBaseAnimating::GetBaseMap()
 T CBaseAnimating::GetBodygroup(int)
 T CBaseAnimating::GetBodygroupCount(int)
 T CBaseAnimating::GetBodygroupName(int)
 T CBaseAnimating::GetBoneCache()
 T CBaseAnimating::GetBoneController(int)
 T CBaseAnimating::GetBonePosition(int, Vector&, QAngle&)
 T CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
 T CBaseAnimating::GetClassName()
 T CBaseAnimating::GetDataDescMap()
 T CBaseAnimating::GetEntryNode(int)
 T CBaseAnimating::GetEntryVelocity(int)
 T CBaseAnimating::GetExitNode(int)
 T CBaseAnimating::GetExitPhase(int)
 T CBaseAnimating::GetExitVelocity(int)
 T CBaseAnimating::GetEyeballs(Vector&, QAngle&)
 T CBaseAnimating::GetFlexControllerName(int)
 T CBaseAnimating::GetFlexControllerType(int)
 T CBaseAnimating::GetFlexDescFacs(int)
 T CBaseAnimating::GetGroundSpeedVelocity()
 T CBaseAnimating::GetHitboxBone(int)
 T CBaseAnimating::GetHitboxSet()
 T CBaseAnimating::GetHitboxSetCount()
 T CBaseAnimating::GetHitboxSetName()
 T CBaseAnimating::GetHitboxesFrontside(int*, int, Vector const&, float)
 T CBaseAnimating::GetIdealAccel() const
 T CBaseAnimating::GetIdealSpeed() const
 T CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetInstantaneousVelocity(float)
 T CBaseAnimating::GetIntervalMovement(float, bool&, Vector&, QAngle&)
 T CBaseAnimating::GetLastVisibleCycle(int)
 T CBaseAnimating::GetModelPtr()
 T CBaseAnimating::GetModelWidthScale() const
 T CBaseAnimating::GetMovementFrame(float)
 T CBaseAnimating::GetNumBodyGroups()
 T CBaseAnimating::GetNumBones()
 T CBaseAnimating::GetNumFlexControllers()
 T CBaseAnimating::GetPhysicsBone(int)
 T CBaseAnimating::GetPoseParameter(char const*)
 T CBaseAnimating::GetPoseParameter(int)
 T CBaseAnimating::GetPredDescMap()
 T CBaseAnimating::GetSequenceActivity(int)
 T CBaseAnimating::GetSequenceActivityName(int)
 T CBaseAnimating::GetSequenceCycleRate(int)
 T CBaseAnimating::GetSequenceFlags(int)
 T CBaseAnimating::GetSequenceGroundSpeed(int)
 T CBaseAnimating::GetSequenceKeyValues(int)
 T CBaseAnimating::GetSequenceLinearMotion(int, Vector*)
 T CBaseAnimating::GetSequenceMoveDist(int)
 T CBaseAnimating::GetSequenceMoveYaw(int)
 T CBaseAnimating::GetSequenceMovement(int, float, float, Vector&, QAngle&)
 T CBaseAnimating::GetSequenceName(int)
 T CBaseAnimating::GetServerClass()
 T CBaseAnimating::GetSkeleton(Vector*, Quaternion*, int)
 T CBaseAnimating::GetStepAngles() const
 T CBaseAnimating::GetStepOrigin() const
 T CBaseAnimating::GetVelocity(Vector*, Vector*)
 T CBaseAnimating::HasAnimEvent(int, int)
 T CBaseAnimating::HasMovement(int)
 T CBaseAnimating::HasPoseParameter(int, char const*)
 T CBaseAnimating::HasPoseParameter(int, int)
 T CBaseAnimating::Ignite(float, bool, float, bool)
 T CBaseAnimating::InitBoneControllers()
 T CBaseAnimating::InputIgnite(inputdata_t&)
 T CBaseAnimating::InputSetLightingOriginHack(inputdata_t&)
 T CBaseAnimating::InvalidateBoneCache()
 T CBaseAnimating::InvalidateBoneCacheIfOlderThan(float)
 T CBaseAnimating::IsRagdoll()
 T CBaseAnimating::IsValidSequence(int)
 T CBaseAnimating::LookupActivity(char const*)
 T CBaseAnimating::LookupAttachment(char const*)
 T CBaseAnimating::LookupBone(char const*)
 T CBaseAnimating::LookupHitbox(char const*, int&, int&)
 T CBaseAnimating::LookupPoseParameter(char const*)
 T CBaseAnimating::LookupSequence(char const*)
 T CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseAnimating::OnRestore()
 T CBaseAnimating::RegisterPrivateActivity(char const*)
 T CBaseAnimating::ReportMissingActivity(int)
 T CBaseAnimating::ResetActivityIndexes()
 T CBaseAnimating::ResetClientsideFrame()
 T CBaseAnimating::ResetEventIndexes()
 T CBaseAnimating::ResetSequence(int)
 T CBaseAnimating::ResetSequenceInfo()
 T CBaseAnimating::Scorch(int, int)
 T CBaseAnimating::SelectHeaviestSequence(Activity)
 T CBaseAnimating::SelectWeightedSequence(Activity)
 T CBaseAnimating::SelectWeightedSequence(Activity, int)
 T CBaseAnimating::SequenceDuration(int)
 T CBaseAnimating::SetBodygroup(int, int)
 T CBaseAnimating::SetBoneController(int, float)
 T CBaseAnimating::SetHitboxSet(int)
 T CBaseAnimating::SetHitboxSetByName(char const*)
 T CBaseAnimating::SetIKGroundContactInfo(float, float)
 T CBaseAnimating::SetLightingOrigin(string_t)
 T CBaseAnimating::SetModel(char const*)
 T CBaseAnimating::SetModelWidthScale(float, float)
 T CBaseAnimating::SetPoseParameter(char const*, float)
 T CBaseAnimating::SetPoseParameter(int, float)
 T CBaseAnimating::SetSequenceBox()
 T CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseAnimating::SetupBones(matrix3x4_t*, int)
 T CBaseAnimating::StudioFrameAdvance()
 T CBaseAnimating::StudioFrameAdvanceInternal(float)
 T CBaseAnimating::StudioFrameAdvanceManual(float)
 T CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TransferDissolveFrom(CBaseAnimating*)
 T CBaseAnimating::UpdateModelWidthScale()
 T CBaseAnimating::UpdateStepOrigin()
 T CBaseAnimating::UseClientSideAnimation()
 T CBaseAnimating::YouForgotToImplementOrDeclareServerClass()
 T CBaseAnimating::~CBaseAnimating()
 T CBaseAnimatingOverlay::AddGesture(Activity, bool)
 T CBaseAnimatingOverlay::AddGesture(Activity, float, bool)
 T CBaseAnimatingOverlay::AddGestureSequence(int, bool)
 T CBaseAnimatingOverlay::AddGestureSequence(int, float, bool)
 T CBaseAnimatingOverlay::AddLayeredSequence(int, int)
 T CBaseAnimatingOverlay::AllocateLayer(int)
 T CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimatingOverlay::FastRemoveLayer(int)
 T CBaseAnimatingOverlay::FindGestureLayer(Activity)
 T CBaseAnimatingOverlay::GetAnimOverlay(int)
 T CBaseAnimatingOverlay::GetBaseMap()
 T CBaseAnimatingOverlay::GetClassName()
 T CBaseAnimatingOverlay::GetDataDescMap()
 T CBaseAnimatingOverlay::GetLayerActivity(int)
 T CBaseAnimatingOverlay::GetLayerCycle(int)
 T CBaseAnimatingOverlay::GetLayerDuration(int)
 T CBaseAnimatingOverlay::GetLayerSequence(int)
 T CBaseAnimatingOverlay::GetLayerWeight(int)
 T CBaseAnimatingOverlay::GetPredDescMap()
 T CBaseAnimatingOverlay::GetServerClass()
 T CBaseAnimatingOverlay::GetSkeleton(Vector*, Quaternion*, int)
 T CBaseAnimatingOverlay::IsPlayingGesture(Activity)
 T CBaseAnimatingOverlay::IsValidLayer(int)
 T CBaseAnimatingOverlay::OnRestore()
 T CBaseAnimatingOverlay::RemoveAllGestures()
 T CBaseAnimatingOverlay::RemoveGesture(Activity)
 T CBaseAnimatingOverlay::RemoveLayer(int, float, float)
 T CBaseAnimatingOverlay::RestartGesture(Activity, bool, bool)
 T CBaseAnimatingOverlay::SetLayerAutokill(int, bool)
 T CBaseAnimatingOverlay::SetLayerBlendIn(int, float)
 T CBaseAnimatingOverlay::SetLayerBlendOut(int, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float, float)
 T CBaseAnimatingOverlay::SetLayerDuration(int, float)
 T CBaseAnimatingOverlay::SetLayerLooping(int, bool)
 T CBaseAnimatingOverlay::SetLayerNoRestore(int, bool)
 T CBaseAnimatingOverlay::SetLayerPlaybackRate(int, float)
 T CBaseAnimatingOverlay::SetLayerPriority(int, int)
 T CBaseAnimatingOverlay::SetLayerWeight(int, float)
 T CBaseAnimatingOverlay::SetNumAnimOverlays(int)
 T CBaseAnimatingOverlay::StudioFrameAdvance()
 T CBaseAnimatingOverlay::VerifyOrder()
 T CBaseAnimatingOverlay::YouForgotToImplementOrDeclareServerClass()
 T CBaseButton::ButtonActivate()
 T CBaseButton::ButtonBackHome()
 T CBaseButton::ButtonResponseToTouch()
 T CBaseButton::ButtonReturn()
 T CBaseButton::ButtonSpark()
 T CBaseButton::ButtonTouch(CBaseEntity*)
 T CBaseButton::ButtonUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseButton::CreateVPhysics()
 T CBaseButton::GetBaseMap()
 T CBaseButton::GetDataDescMap()
 T CBaseButton::InputLock(inputdata_t&)
 T CBaseButton::InputPress(inputdata_t&)
 T CBaseButton::InputUnlock(inputdata_t&)
 T CBaseButton::KeyValue(char const*, char const*)
 T CBaseButton::Lock()
 T CBaseButton::ObjectCaps()
 T CBaseButton::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseButton::OnUseLocked(CBaseEntity*)
 T CBaseButton::Precache()
 T CBaseButton::Spawn()
 T CBaseButton::TriggerAndWait()
 T CBaseButton::Unlock()
 T CBaseCSGrenade::AllowsAutoSwitchFrom() const
 T CBaseCSGrenade::CBaseCSGrenade()
 T CBaseCSGrenade::CapabilitiesGet()
 T CBaseCSGrenade::DecrementAmmo(CBaseCombatCharacter*)
 T CBaseCSGrenade::Deploy()
 T CBaseCSGrenade::DropGrenade()
 T CBaseCSGrenade::EmitGrenade(Vector, QAngle, Vector, Vector, CBasePlayer*)
 T CBaseCSGrenade::GetBaseMap()
 T CBaseCSGrenade::GetClassName()
 T CBaseCSGrenade::GetDataDescMap()
 T CBaseCSGrenade::GetPredDescMap()
 T CBaseCSGrenade::GetServerClass()
 T CBaseCSGrenade::Holster(CBaseCombatWeapon*)
 T CBaseCSGrenade::ItemPostFrame()
 T CBaseCSGrenade::Precache()
 T CBaseCSGrenade::PrimaryAttack()
 T CBaseCSGrenade::Reload()
 T CBaseCSGrenade::SecondaryAttack()
 T CBaseCSGrenade::StartGrenadeThrow()
 T CBaseCSGrenade::ThrowGrenade()
 T CBaseCSGrenade::YouForgotToImplementOrDeclareServerClass()
 T CBaseCSGrenadeProjectile::DangerSoundThink()
 T CBaseCSGrenadeProjectile::GetBaseMap()
 T CBaseCSGrenadeProjectile::GetClassName()
 T CBaseCSGrenadeProjectile::GetDataDescMap()
 T CBaseCSGrenadeProjectile::GetServerClass()
 T CBaseCSGrenadeProjectile::PostConstructor(char const*)
 T CBaseCSGrenadeProjectile::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CBaseCSGrenadeProjectile::SetDetonateTimerLength(float)
 T CBaseCSGrenadeProjectile::SetupInitialTransmittedGrenadeVelocity(Vector const&)
 T CBaseCSGrenadeProjectile::Spawn()
 T CBaseCSGrenadeProjectile::Splash()
 T CBaseCSGrenadeProjectile::YouForgotToImplementOrDeclareServerClass()
 T CBaseCSGrenadeProjectile::~CBaseCSGrenadeProjectile()
 T CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
 T CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CBaseCombatCharacter::AllocateDefaultRelationships()
 T CBaseCombatCharacter::ApplyStressDamage(IPhysicsObject*)
 T CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T CBaseCombatCharacter::BloodColor()
 T CBaseCombatCharacter::BodyAngles()
 T CBaseCombatCharacter::BodyDirection2D()
 T CBaseCombatCharacter::BodyDirection3D()
 T CBaseCombatCharacter::CBaseCombatCharacter()
 T CBaseCombatCharacter::CalcDamageForceVector(CTakeDamageInfo const&)
 T CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CBaseCombatCharacter::CalculatePhysicsStressDamage(vphysics_objectstress_t*, IPhysicsObject*)
 T CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::CorpseFade()
 T CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
 T CBaseCombatCharacter::DoMuzzleFlash()
 T CBaseCombatCharacter::DropWeaponForWeaponStrip(CBaseCombatWeapon*, Vector const&, QAngle const&, float)
 T CBaseCombatCharacter::Event_Dying()
 T CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Event_Killed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::FInAimCone(CBaseEntity*)
 T CBaseCombatCharacter::FInAimCone(Vector const&)
 T CBaseCombatCharacter::FInViewCone(CBaseEntity*)
 T CBaseCombatCharacter::FInViewCone(Vector const&)
 T CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)
 T CBaseCombatCharacter::FindHealthItem(Vector const&, Vector const&)
 T CBaseCombatCharacter::FindMissTarget()
 T CBaseCombatCharacter::GetActiveWeapon() const
 T CBaseCombatCharacter::GetAmmoCount(char*) const
 T CBaseCombatCharacter::GetAmmoCount(int) const
 T CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetBaseMap()
 T CBaseCombatCharacter::GetClassName()
 T CBaseCombatCharacter::GetDataDescMap()
 T CBaseCombatCharacter::GetDeathActivity()
 T CBaseCombatCharacter::GetInteractionID()
 T CBaseCombatCharacter::GetPhysicsImpactDamageTable()
 T CBaseCombatCharacter::GetPredDescMap()
 T CBaseCombatCharacter::GetServerClass()
 T CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetWeapon(int) const
 T CBaseCombatCharacter::GiveAmmo(int, char const*, bool)
 T CBaseCombatCharacter::GiveAmmo(int, int, bool)
 T CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CBaseCombatCharacter::HasAlienGibs()
 T CBaseCombatCharacter::HasHumanGibs()
 T CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
 T CBaseCombatCharacter::IRelationType(CBaseEntity*)
 T CBaseCombatCharacter::InitInteractionSystem()
 T CBaseCombatCharacter::InputKilledNPC(inputdata_t&)
 T CBaseCombatCharacter::NPC_TranslateActivity(Activity)
 T CBaseCombatCharacter::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Precache()
 T CBaseCombatCharacter::RemoveAllAmmo()
 T CBaseCombatCharacter::RemoveAllWeapons()
 T CBaseCombatCharacter::RemoveAmmo(int, char const*)
 T CBaseCombatCharacter::RemoveAmmo(int, int)
 T CBaseCombatCharacter::SetActiveWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::SetAmmoCount(int, int)
 T CBaseCombatCharacter::SetBloodColor(int)
 T CBaseCombatCharacter::SetDefaultRelationship(Class_T, Class_T, Disposition_t, int)
 T CBaseCombatCharacter::SetLightingOrigin(CBaseEntity*)
 T CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
 T CBaseCombatCharacter::SwitchToNextBestWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::TakeHealth(float, int)
 T CBaseCombatCharacter::ThrowDirForWeaponStrip(CBaseCombatWeapon*, Vector const&, Vector*)
 T CBaseCombatCharacter::UpdateOnRemove()
 T CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseCombatCharacter::VPhysicsUpdate(IPhysicsObject*)
 T CBaseCombatCharacter::WeaponCount() const
 T CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_CanUse(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Create(char const*)
 T CBaseCombatCharacter::Weapon_Detach(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBaseCombatCharacter::Weapon_DropAll(bool)
 T CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_FindUsable(Vector const&)
 T CBaseCombatCharacter::Weapon_FrameUpdate()
 T CBaseCombatCharacter::Weapon_GetSlot(int) const
 T CBaseCombatCharacter::Weapon_GetWpnForAmmo(int)
 T CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
 T CBaseCombatCharacter::Weapon_IsOnGround(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_OwnsThisType(char const*, int) const
 T CBaseCombatCharacter::Weapon_SetActivity(Activity, float)
 T CBaseCombatCharacter::Weapon_ShootPosition()
 T CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
 T CBaseCombatCharacter::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatCharacter::~CBaseCombatCharacter()
 T CBaseCombatWeapon::AbortReload()
 T CBaseCombatWeapon::ActivityOverride(Activity, bool*)
 T CBaseCombatWeapon::AddViewKick()
 T CBaseCombatWeapon::AllowsAutoSwitchFrom() const
 T CBaseCombatWeapon::AllowsAutoSwitchTo() const
 T CBaseCombatWeapon::AttemptToMaterialize()
 T CBaseCombatWeapon::CBaseCombatWeapon()
 T CBaseCombatWeapon::CanBeSelected()
 T CBaseCombatWeapon::CheckReload()
 T CBaseCombatWeapon::CheckRespawn()
 T CBaseCombatWeapon::DefaultDeploy(char*, char*, int, char*)
 T CBaseCombatWeapon::DefaultReload(int, int, int)
 T CBaseCombatWeapon::DefaultTouch(CBaseEntity*)
 T CBaseCombatWeapon::Delete()
 T CBaseCombatWeapon::Deploy()
 T CBaseCombatWeapon::DestroyItem()
 T CBaseCombatWeapon::Drop(Vector const&)
 T CBaseCombatWeapon::Equip(CBaseCombatCharacter*)
 T CBaseCombatWeapon::FallInit()
 T CBaseCombatWeapon::FallThink()
 T CBaseCombatWeapon::FinishReload()
 T CBaseCombatWeapon::GetAnimPrefix() const
 T CBaseCombatWeapon::GetAvailableWeaponsInBox(CBaseCombatWeapon**, int, Vector const&, Vector const&)
 T CBaseCombatWeapon::GetBaseMap()
 T CBaseCombatWeapon::GetBulletSpread()
 T CBaseCombatWeapon::GetBulletType()
 T CBaseCombatWeapon::GetClassName()
 T CBaseCombatWeapon::GetControlPanelClassName(int, char const*&)
 T CBaseCombatWeapon::GetControlPanelInfo(int, char const*&)
 T CBaseCombatWeapon::GetDataDescMap()
 T CBaseCombatWeapon::GetDeathNoticeName()
 T CBaseCombatWeapon::GetDefaultClip1() const
 T CBaseCombatWeapon::GetDefaultClip2() const
 T CBaseCombatWeapon::GetDrawActivity()
 T CBaseCombatWeapon::GetEncryptionKey()
 T CBaseCombatWeapon::GetFireRate()
 T CBaseCombatWeapon::GetMaxClip1() const
 T CBaseCombatWeapon::GetMaxClip2() const
 T CBaseCombatWeapon::GetName() const
 T CBaseCombatWeapon::GetOwner() const
 T CBaseCombatWeapon::GetPosition() const
 T CBaseCombatWeapon::GetPredDescMap()
 T CBaseCombatWeapon::GetPrimaryAttackActivity()
 T CBaseCombatWeapon::GetPrintName() const
 T CBaseCombatWeapon::GetProficiencyValues()
 T CBaseCombatWeapon::GetSecondaryAttackActivity()
 T CBaseCombatWeapon::GetServerClass()
 T CBaseCombatWeapon::GetShootSound(int) const
 T CBaseCombatWeapon::GetSlot() const
 T CBaseCombatWeapon::GetSpriteActive() const
 T CBaseCombatWeapon::GetSpriteAmmo() const
 T CBaseCombatWeapon::GetSpriteAmmo2() const
 T CBaseCombatWeapon::GetSpriteAutoaim() const
 T CBaseCombatWeapon::GetSpriteCrosshair() const
 T CBaseCombatWeapon::GetSpriteInactive() const
 T CBaseCombatWeapon::GetSpriteZoomedAutoaim() const
 T CBaseCombatWeapon::GetSpriteZoomedCrosshair() const
 T CBaseCombatWeapon::GetViewModel(int) const
 T CBaseCombatWeapon::GetViewModelSequenceDuration()
 T CBaseCombatWeapon::GetWeaponFlags() const
 T CBaseCombatWeapon::GetWeaponIdleTime()
 T CBaseCombatWeapon::GetWeight() const
 T CBaseCombatWeapon::GetWorldModel() const
 T CBaseCombatWeapon::GetWpnData() const
 T CBaseCombatWeapon::HandleAnimEvent(animevent_t*)
 T CBaseCombatWeapon::HandleFireOnEmpty()
 T CBaseCombatWeapon::HasAmmo()
 T CBaseCombatWeapon::HasAnyAmmo()
 T CBaseCombatWeapon::HasPrimaryAmmo()
 T CBaseCombatWeapon::HasSecondaryAmmo()
 T CBaseCombatWeapon::HasWeaponIdleTimeElapsed()
 T CBaseCombatWeapon::Holster(CBaseCombatWeapon*)
 T CBaseCombatWeapon::InputHideWeapon(inputdata_t&)
 T CBaseCombatWeapon::IsAllowedToSwitch()
 T CBaseCombatWeapon::IsLocked(CBaseEntity*)
 T CBaseCombatWeapon::IsMeleeWeapon() const
 T CBaseCombatWeapon::IsViewModelSequenceFinished()
 T CBaseCombatWeapon::IsWeaponVisible()
 T CBaseCombatWeapon::ItemBusyFrame()
 T CBaseCombatWeapon::ItemPostFrame()
 T CBaseCombatWeapon::ItemPreFrame()
 T CBaseCombatWeapon::Kill()
 T CBaseCombatWeapon::Lock(float, CBaseEntity*)
 T CBaseCombatWeapon::MaintainIdealActivity()
 T CBaseCombatWeapon::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseCombatWeapon::Materialize()
 T CBaseCombatWeapon::ObjectCaps()
 T CBaseCombatWeapon::OnPickedUp(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_FrameUpdate(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CBaseCombatWeapon::Precache()
 T CBaseCombatWeapon::PrimaryAttack()
 T CBaseCombatWeapon::Reload()
 T CBaseCombatWeapon::ReloadOrSwitchWeapons()
 T CBaseCombatWeapon::Respawn()
 T CBaseCombatWeapon::SendViewModelAnim(int)
 T CBaseCombatWeapon::SendWeaponAnim(int)
 T CBaseCombatWeapon::SetActivity(Activity, float)
 T CBaseCombatWeapon::SetIdealActivity(Activity)
 T CBaseCombatWeapon::SetOwner(CBaseCombatCharacter*)
 T CBaseCombatWeapon::SetPickupTouch()
 T CBaseCombatWeapon::SetViewModel()
 T CBaseCombatWeapon::SetViewModelIndex(int)
 T CBaseCombatWeapon::SetWeaponIdleTime(float)
 T CBaseCombatWeapon::SetWeaponVisible(bool)
 T CBaseCombatWeapon::Spawn()
 T CBaseCombatWeapon::StopWeaponSound(WeaponSound_t)
 T CBaseCombatWeapon::UpdateClientData(CBasePlayer*)
 T CBaseCombatWeapon::UpdateTransmitState()
 T CBaseCombatWeapon::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseCombatWeapon::UsesClipsForAmmo1() const
 T CBaseCombatWeapon::UsesClipsForAmmo2() const
 T CBaseCombatWeapon::UsesPrimaryAmmo()
 T CBaseCombatWeapon::UsesSecondaryAmmo()
 T CBaseCombatWeapon::VisibleInWeaponSelection()
 T CBaseCombatWeapon::WeaponIdle()
 T CBaseCombatWeapon::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CBaseCombatWeapon::WeaponMeleeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponMeleeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponSound(WeaponSound_t, float)
 T CBaseCombatWeapon::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatWeapon::~CBaseCombatWeapon()
 T CBaseDMStart::GetBaseMap()
 T CBaseDMStart::GetDataDescMap()
 T CBaseDMStart::IsTriggered(CBaseEntity*)
 T CBaseDoor::Activate()
 T CBaseDoor::Blocked(CBaseEntity*)
 T CBaseDoor::CreateVPhysics()
 T CBaseDoor::DoorActivate()
 T CBaseDoor::DoorGoDown()
 T CBaseDoor::DoorGoUp()
 T CBaseDoor::DoorHitBottom()
 T CBaseDoor::DoorHitTop()
 T CBaseDoor::DoorTouch(CBaseEntity*)
 T CBaseDoor::EndBlocked()
 T CBaseDoor::GetBaseMap()
 T CBaseDoor::GetClassName()
 T CBaseDoor::GetDataDescMap()
 T CBaseDoor::GetDoorMovementGroup(CBaseDoor**, int)
 T CBaseDoor::GetServerClass()
 T CBaseDoor::InputClose(inputdata_t&)
 T CBaseDoor::InputLock(inputdata_t&)
 T CBaseDoor::InputOpen(inputdata_t&)
 T CBaseDoor::InputSetSpeed(inputdata_t&)
 T CBaseDoor::InputSetToggleState(inputdata_t&)
 T CBaseDoor::InputToggle(inputdata_t&)
 T CBaseDoor::InputUnlock(inputdata_t&)
 T CBaseDoor::KeyValue(char const*, char const*)
 T CBaseDoor::Lock()
 T CBaseDoor::MovingSoundThink()
 T CBaseDoor::Precache()
 T CBaseDoor::SetToggleState(int)
 T CBaseDoor::ShouldSavePhysics()
 T CBaseDoor::Spawn()
 T CBaseDoor::StartBlocked(CBaseEntity*)
 T CBaseDoor::StartMovingSound()
 T CBaseDoor::StopMovingSound()
 T CBaseDoor::Unlock()
 T CBaseDoor::UpdateAreaPortals(bool)
 T CBaseDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseDoor::YouForgotToImplementOrDeclareServerClass()
 T CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
 T CBaseEntity::Activate()
 T CBaseEntity::AddContext(char const*)
 T CBaseEntity::AddDataObjectType(int)
 T CBaseEntity::AddEffects(int)
 T CBaseEntity::AddEntityToGroundList(CBaseEntity*)
 T CBaseEntity::AddFlag(int)
 T CBaseEntity::AddPoints(int, bool)
 T CBaseEntity::AddPointsToTeam(int, bool)
 T CBaseEntity::AddStepDiscontinuity(float, Vector const&, QAngle const&)
 T CBaseEntity::AddTimedOverlay(char const*, int)
 T CBaseEntity::AppendContextToCriteria(AI_CriteriaSet&, char const*)
 T CBaseEntity::ApplyAbsVelocityImpulse(Vector const&)
 T CBaseEntity::ApplyLocalAngularVelocityImpulse(Vector const&)
 T CBaseEntity::ApplyLocalVelocityImpulse(Vector const&)
 T CBaseEntity::Blocked(CBaseEntity*)
 T CBaseEntity::BlocksLOS()
 T CBaseEntity::BloodColor()
 T CBaseEntity::BodyTarget(Vector const&, bool)
 T CBaseEntity::CBaseEntity(bool)
 T CBaseEntity::CalcAbsolutePosition()
 T CBaseEntity::CalcAbsoluteVelocity()
 T CBaseEntity::ChangeTeam(int)
 T CBaseEntity::CheckHasGamePhysicsSimulation()
 T CBaseEntity::CheckHasThinkFunction(bool)
 T CBaseEntity::CheckStepSimulationChanged()
 T CBaseEntity::ClassMatchesComplex(char const*)
 T CBaseEntity::Classify()
 T CBaseEntity::ClearFlags()
 T CBaseEntity::CollisionRulesChanged()
 T CBaseEntity::ComputeAbsDirection(Vector const&, Vector*)
 T CBaseEntity::ComputeAbsPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeStepSimulationNetworkAngles(StepSimulationData*)
 T CBaseEntity::ComputeStepSimulationNetworkOrigin(StepSimulationData*)
 T CBaseEntity::ComputeTracerStartPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CBaseEntity::Create(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreateBubbleTrailTracer(Vector const&, Vector const&, Vector const&)
 T CBaseEntity::CreateDataObject(int)
 T CBaseEntity::CreateNoSpawn(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreatePredictedEntityByName(char const*, char const*, int, bool)
 T CBaseEntity::CreateVPhysics()
 T CBaseEntity::DamageDecal(int, int)
 T CBaseEntity::DecalTrace(CGameTrace*, char const*)
 T CBaseEntity::DestroyAllDataObjects()
 T CBaseEntity::DestroyDataObject(int)
 T CBaseEntity::DetectInSkybox()
 T CBaseEntity::DispatchResponse(char const*)
 T CBaseEntity::DispatchTraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBaseEntity::DoImpactEffect(CGameTrace&, int)
 T CBaseEntity::DrawAbsBoxOverlay()
 T CBaseEntity::DrawBBoxOverlay()
 T CBaseEntity::DrawDebugGeometryOverlays()
 T CBaseEntity::DrawDebugTextOverlays()
 T CBaseEntity::DrawInputOverlay(char const*, CBaseEntity*, variant_t)
 T CBaseEntity::DrawOutputOverlay(CEventAction*)
 T CBaseEntity::DrawRBoxOverlay()
 T CBaseEntity::DrawTimedOverlays()
 T CBaseEntity::DumpResponseCriteria()
 T CBaseEntity::EarPosition()
 T CBaseEntity::EmitAmbientSound(int, Vector const&, char const*, int, float, float*)
 T CBaseEntity::EmitCloseCaption(IRecipientFilter&, int, char const*, CUtlVector<Vector, CUtlMemory<Vector> >&, float, bool)
 T CBaseEntity::EmitSentenceByIndex(IRecipientFilter&, int, int, int, float, soundlevel_t, int, int, Vector const*, Vector const*, bool, float)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, EmitSound_t const&)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, char const*, Vector const*, float, float*)
 T CBaseEntity::EmitSound(char const*, float, float*)
 T CBaseEntity::EndGroundContact(CBaseEntity*)
 T CBaseEntity::EndTouch(CBaseEntity*)
 T CBaseEntity::Event_Killed(CTakeDamageInfo const&)
 T CBaseEntity::EyeAngles()
 T CBaseEntity::EyePosition()
 T CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
 T CBaseEntity::FindContextByName(char const*) const
 T CBaseEntity::FireBullets(FireBulletsInfo_t const&)
 T CBaseEntity::FollowEntity(CBaseEntity*, bool)
 T CBaseEntity::GenderExpandString(char const*, char*, int)
 T CBaseEntity::GetAttackDamageScale(CBaseEntity*)
 T CBaseEntity::GetBaseMap()
 T CBaseEntity::GetClassName()
 T CBaseEntity::GetContextCount() const
 T CBaseEntity::GetContextName(int) const
 T CBaseEntity::GetContextValue(int) const
 T CBaseEntity::GetDamageType() const
 T CBaseEntity::GetDataDescMap()
 T CBaseEntity::GetDataObject(int)
 T CBaseEntity::GetDebugName()
 T CBaseEntity::GetEntitySkybox()
 T CBaseEntity::GetFollowedEntity()
 T CBaseEntity::GetGroundChangeTime()
 T CBaseEntity::GetGroundEntity()
 T CBaseEntity::GetIndexForThinkContext(char const*)
 T CBaseEntity::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
 T CBaseEntity::GetLastThink(char const*)
 T CBaseEntity::GetLastThinkTick(char const*)
 T CBaseEntity::GetModel()
 T CBaseEntity::GetNextTarget()
 T CBaseEntity::GetNextThink(char const*)
 T CBaseEntity::GetNextThink(int) const
 T CBaseEntity::GetNextThinkTick(char const*)
 T CBaseEntity::GetNextThinkTick(int) const
 T CBaseEntity::GetParametersForSound(char const*, CSoundParameters&, char const*)
 T CBaseEntity::GetParentToWorldTransform(matrix3x4_t&)
 T CBaseEntity::GetPredDescMap()
 T CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
 T CBaseEntity::GetResponseSystem()
 T CBaseEntity::GetRootMoveParent()
 T CBaseEntity::GetServerClass()
 T CBaseEntity::GetSoundDuration(char const*, char const*)
 T CBaseEntity::GetSoundEmissionOrigin() const
 T CBaseEntity::GetStepAngles() const
 T CBaseEntity::GetStepOrigin() const
 T CBaseEntity::GetTeam() const
 T CBaseEntity::GetTeamNumber() const
 T CBaseEntity::GetTouchTrace()
 T CBaseEntity::GetTracerType()
 T CBaseEntity::GetTransmitState()
 T CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
 T CBaseEntity::GetVelocity(Vector*, Vector*)
 T CBaseEntity::GetWavFileForSound(char const*, char const*)
 T CBaseEntity::HandleShotImpactingGlass(FireBulletsInfo_t const&, CGameTrace const&, Vector const&, ITraceFilter*)
 T CBaseEntity::HandleShotImpactingWater(FireBulletsInfo_t const&, Vector const&, ITraceFilter*, Vector*)
 T CBaseEntity::HasDataObjectType(int) const
 T CBaseEntity::HasNPCsOnIt()
 T CBaseEntity::HasTarget(string_t)
 T CBaseEntity::HeadTarget(Vector const&)
 T CBaseEntity::ImpactTrace(CGameTrace*, int, char*)
 T CBaseEntity::InSameTeam(CBaseEntity*) const
 T CBaseEntity::InitPredictable()
 T CBaseEntity::InputAddContext(inputdata_t&)
 T CBaseEntity::InputAddOutput(inputdata_t&)
 T CBaseEntity::InputAlpha(inputdata_t&)
 T CBaseEntity::InputClearContext(inputdata_t&)
 T CBaseEntity::InputClearParent(inputdata_t&)
 T CBaseEntity::InputColor(inputdata_t&)
 T CBaseEntity::InputDisableDamageForces(inputdata_t&)
 T CBaseEntity::InputDisableShadow(inputdata_t&)
 T CBaseEntity::InputDispatchEffect(inputdata_t&)
 T CBaseEntity::InputDispatchResponse(inputdata_t&)
 T CBaseEntity::InputEnableDamageForces(inputdata_t&)
 T CBaseEntity::InputEnableShadow(inputdata_t&)
 T CBaseEntity::InputFireUser1(inputdata_t&)
 T CBaseEntity::InputFireUser2(inputdata_t&)
 T CBaseEntity::InputFireUser3(inputdata_t&)
 T CBaseEntity::InputFireUser4(inputdata_t&)
 T CBaseEntity::InputKill(inputdata_t&)
 T CBaseEntity::InputKillHierarchy(inputdata_t&)
 T CBaseEntity::InputRemoveContext(inputdata_t&)
 T CBaseEntity::InputSetDamageFilter(inputdata_t&)
 T CBaseEntity::InputSetParent(inputdata_t&)
 T CBaseEntity::InputSetParentAttachment(inputdata_t&)
 T CBaseEntity::InputSetTeam(inputdata_t&)
 T CBaseEntity::InputUse(inputdata_t&)
 T CBaseEntity::Instance(CBaseHandle const&)
 T CBaseEntity::Intersects(CBaseEntity*)
 T CBaseEntity::InvalidatePhysicsRecursive(int)
 T CBaseEntity::IsAIWalkable()
 T CBaseEntity::IsBSPModel() const
 T CBaseEntity::IsCurrentlyTouching() const
 T CBaseEntity::IsDormant()
 T CBaseEntity::IsFloating()
 T CBaseEntity::IsFollowingEntity()
 T CBaseEntity::IsInAnyTeam() const
 T CBaseEntity::IsInTeam(CTeam*) const
 T CBaseEntity::IsInWorld() const
 T CBaseEntity::IsMoving()
 T CBaseEntity::IsPrecacheAllowed()
 T CBaseEntity::IsSimulatingOnAlternateTicks()
 T CBaseEntity::IsStandable() const
 T CBaseEntity::IsViewable()
 T CBaseEntity::KeyValue(char const*, Vector)
 T CBaseEntity::KeyValue(char const*, char const*)
 T CBaseEntity::KeyValue(char const*, float)
 T CBaseEntity::LocalEyeAngles()
 T CBaseEntity::LookupSoundLevel(char const*)
 T CBaseEntity::MakeDormant()
 T CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseEntity::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseEntity::MyNPCPointer()
 T CBaseEntity::NameMatchesComplex(char const*)
 T CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CBaseEntity::ObjectCaps()
 T CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
 T CBaseEntity::OnRestore()
 T CBaseEntity::OnSave(IEntitySaveUtils*)
 T CBaseEntity::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::ParseMapData(CEntityMapData*)
 T CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
 T CBaseEntity::PerformFlyCollisionResolution(CGameTrace&, Vector&)
 T CBaseEntity::PerformPush(float)
 T CBaseEntity::PhysicsAddGravityMove(Vector&)
 T CBaseEntity::PhysicsAddHalfGravity(float)
 T CBaseEntity::PhysicsCheckForEntityUntouch()
 T CBaseEntity::PhysicsCheckSweep(Vector const&, Vector const&, CGameTrace*)
 T CBaseEntity::PhysicsCheckVelocity()
 T CBaseEntity::PhysicsCheckWater()
 T CBaseEntity::PhysicsCheckWaterTransition()
 T CBaseEntity::PhysicsClipVelocity(Vector const&, Vector const&, Vector&, float)
 T CBaseEntity::PhysicsCustom()
 T CBaseEntity::PhysicsDispatchThink(void (CBaseEntity::*)())
 T CBaseEntity::PhysicsImpact(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouching(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntityAsTouched(CBaseEntity*)
 T CBaseEntity::PhysicsNoclip()
 T CBaseEntity::PhysicsNone()
 T CBaseEntity::PhysicsNotifyOtherOfGroundRemoval(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsNotifyOtherOfUntouch(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsPushEntity(Vector const&, CGameTrace*)
 T CBaseEntity::PhysicsPushMove(float)
 T CBaseEntity::PhysicsPushRotate(float)
 T CBaseEntity::PhysicsPusher()
 T CBaseEntity::PhysicsRelinkChildren()
 T CBaseEntity::PhysicsRemoveGround(CBaseEntity*, groundlink_t*)
 T CBaseEntity::PhysicsRemoveGroundList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveTouchedList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveToucher(CBaseEntity*, touchlink_t*)
 T CBaseEntity::PhysicsRigidChild()
 T CBaseEntity::PhysicsRunSpecificThink(int, void (CBaseEntity::*)())
 T CBaseEntity::PhysicsRunThink(CBaseEntity::thinkmethods_t)
 T CBaseEntity::PhysicsSimulate()
 T CBaseEntity::PhysicsSolidMaskForEntity() const
 T CBaseEntity::PhysicsStartGroundContact(CBaseEntity*)
 T CBaseEntity::PhysicsStartTouch(CBaseEntity*)
 T CBaseEntity::PhysicsStep()
 T CBaseEntity::PhysicsStepRecheckGround()
 T CBaseEntity::PhysicsStepRunTimestep(float)
 T CBaseEntity::PhysicsTestEntityPosition(CBaseEntity**)
 T CBaseEntity::PhysicsToss()
 T CBaseEntity::PhysicsTouch(CBaseEntity*)
 T CBaseEntity::PhysicsTouchTriggers(Vector const*)
 T CBaseEntity::PhysicsTryMove(float, CGameTrace*)
 T CBaseEntity::PostClientMessagesSent()
 T CBaseEntity::PostConstructor(char const*)
 T CBaseEntity::PrecacheModel(char const*)
 T CBaseEntity::PrecacheScriptSound(char const*)
 T CBaseEntity::PrecacheSound(char const*)
 T CBaseEntity::PrefetchScriptSound(char const*)
 T CBaseEntity::PrefetchSound(char const*)
 T CBaseEntity::ReadKeyField(char const*, variant_t*)
 T CBaseEntity::RegisterThinkContext(char const*)
 T CBaseEntity::Remove()
 T CBaseEntity::RemoveAllDecals()
 T CBaseEntity::RemoveDataObjectType(int)
 T CBaseEntity::RemoveDeferred()
 T CBaseEntity::RemoveFlag(int)
 T CBaseEntity::RemoveRecipientsIfNotCloseCaptioning(CRecipientFilter&)
 T CBaseEntity::ResolveFlyCollisionBounce(CGameTrace&, Vector&, float)
 T CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CBaseEntity::ResolveFlyCollisionSlide(CGameTrace&, Vector&)
 T CBaseEntity::Restore(IRestore&)
 T CBaseEntity::RestoreDataDescBlock(IRestore&, datamap_t*)
 T CBaseEntity::SUB_DoNothing()
 T CBaseEntity::SUB_FadeOut()
 T CBaseEntity::SUB_Remove()
 T CBaseEntity::SUB_StartFadeOut(float, bool)
 T CBaseEntity::SUB_StartFadeOutInstant()
 T CBaseEntity::SUB_Vanish()
 T CBaseEntity::Save(ISave&)
 T CBaseEntity::SaveDataDescBlock(ISave&, datamap_t*)
 T CBaseEntity::SendDebugPivotOverlay()
 T CBaseEntity::SetAIWalkable(bool)
 T CBaseEntity::SetAbsAngles(QAngle const&)
 T CBaseEntity::SetAbsOrigin(Vector const&)
 T CBaseEntity::SetAbsVelocity(Vector const&)
 T CBaseEntity::SetAllowPrecache(bool)
 T CBaseEntity::SetBlocksLOS(bool)
 T CBaseEntity::SetCheckUntouch(bool)
 T CBaseEntity::SetClassname(char const*)
 T CBaseEntity::SetCollisionBounds(Vector const&, Vector const&)
 T CBaseEntity::SetCollisionGroup(int)
 T CBaseEntity::SetEffectEntity(CBaseEntity*)
 T CBaseEntity::SetEffects(int)
 T CBaseEntity::SetGroundChangeTime(float)
 T CBaseEntity::SetGroundEntity(CBaseEntity*)
 T CBaseEntity::SetLastThink(int, float)
 T CBaseEntity::SetLocalAngles(QAngle const&)
 T CBaseEntity::SetLocalAngularVelocity(QAngle const&)
 T CBaseEntity::SetLocalOrigin(Vector const&)
 T CBaseEntity::SetLocalTransform(matrix3x4_t const&)
 T CBaseEntity::SetLocalVelocity(Vector const&)
 T CBaseEntity::SetModel(char const*)
 T CBaseEntity::SetMoveDoneTime(float)
 T CBaseEntity::SetMoveType(MoveType_t, MoveCollide_t)
 T CBaseEntity::SetNextThink(float, char const*)
 T CBaseEntity::SetNextThink(int, float)
 T CBaseEntity::SetOwnerEntity(CBaseEntity*)
 T CBaseEntity::SetParent(CBaseEntity const*, int)
 T CBaseEntity::SetParent(string_t, CBaseEntity*, int)
 T CBaseEntity::SetPlayerSimulated(CBasePlayer*)
 T CBaseEntity::SetPredictionEligible(bool)
 T CBaseEntity::SetPredictionRandomSeed(CUserCmd const*)
 T CBaseEntity::SetRefEHandle(CBaseHandle const&)
 T CBaseEntity::SetShadowCastDistance(float, float)
 T CBaseEntity::SetSize(Vector const&, Vector const&)
 T CBaseEntity::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseEntity::SetTransmitState(int)
 T CBaseEntity::SetViewOffset(Vector const&)
 T CBaseEntity::ShadowCastDistThink()
 T CBaseEntity::ShouldCollide(int, int) const
 T CBaseEntity::ShouldDrawUnderwaterBulletBubbles()
 T CBaseEntity::ShouldSavePhysics()
 T CBaseEntity::ShouldToggle(USE_TYPE, int)
 T CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseEntity::SimulateAngles(float)
 T CBaseEntity::Spawn()
 T CBaseEntity::StartGroundContact(CBaseEntity*)
 T CBaseEntity::StartTouch(CBaseEntity*)
 T CBaseEntity::StepSimulationThink(float)
 T CBaseEntity::StopFollowingEntity()
 T CBaseEntity::StopSound(char const*)
 T CBaseEntity::StopSound(int, char const*)
 T CBaseEntity::StopSound(int, int, char const*)
 T CBaseEntity::TakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::TakeHealth(float, int)
 T CBaseEntity::TeamID() const
 T CBaseEntity::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseEntity::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::ThinkSet(void (CBaseEntity::*)(), float, char const*)
 T CBaseEntity::ToggleFlag(int)
 T CBaseEntity::Touch(CBaseEntity*)
 T CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBaseEntity::TraceAttackToTriggers(CTakeDamageInfo const&, Vector const&, Vector const&, Vector const&)
 T CBaseEntity::TraceBleed(float, Vector const&, CGameTrace*, int)
 T CBaseEntity::UnsetPlayerSimulated()
 T CBaseEntity::UpdateBaseVelocity()
 T CBaseEntity::UpdateOnRemove()
 T CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
 T CBaseEntity::UpdateShotStatistics(CGameTrace const&)
 T CBaseEntity::UpdateTransmitState()
 T CBaseEntity::UpdateWaterState()
 T CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsDestroyObject()
 T CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CBaseEntity::VPhysicsInitNormal(SolidType_t, int, bool, solid_t*)
 T CBaseEntity::VPhysicsInitSetup()
 T CBaseEntity::VPhysicsInitShadow(bool, bool, solid_t*)
 T CBaseEntity::VPhysicsInitStatic()
 T CBaseEntity::VPhysicsSetObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsSwapObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::VPhysicsUpdate(IPhysicsObject*)
 T CBaseEntity::VPhysicsUpdatePusher(IPhysicsObject*)
 T CBaseEntity::ValidateEntityConnections()
 T CBaseEntity::VelocityPunch(Vector const&)
 T CBaseEntity::ViewPunch(QAngle const&)
 T CBaseEntity::WakeRestingObjects()
 T CBaseEntity::WillSimulateGamePhysics()
 T CBaseEntity::WillThink()
 T CBaseEntity::WorldSpaceCenter() const
 T CBaseEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseEntity::operator delete(void*)
 T CBaseEntity::operator new(unsigned int)
 T CBaseEntity::operator new(unsigned int, int, char const*, int)
 T CBaseEntity::~CBaseEntity()
 T CBaseEntityClassList::CBaseEntityClassList()
 T CBaseEntityClassList::~CBaseEntityClassList()
 T CBaseEntityList::AddEntityAtSlot(IHandleEntity*, int, int)
 T CBaseEntityList::AddNetworkableEntity(IHandleEntity*, int, int)
 T CBaseEntityList::AddNonNetworkableEntity(IHandleEntity*)
 T CBaseEntityList::CBaseEntityList()
 T CBaseEntityList::CEntInfoList::CEntInfoList()
 T CBaseEntityList::CEntInfoList::IsInList(CEntInfo*)
 T CBaseEntityList::CEntInfoList::LinkAfter(CEntInfo*, CEntInfo*)
 T CBaseEntityList::CEntInfoList::LinkBefore(CEntInfo*, CEntInfo*)
 T CBaseEntityList::CEntInfoList::Unlink(CEntInfo*)
 T CBaseEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::RemoveEntity(CBaseHandle)
 T CBaseEntityList::RemoveEntityAtSlot(int)
 T CBaseEntityList::~CBaseEntityList()
 T CBaseEntityOutput::FireOutput(variant_t, CBaseEntity*, CBaseEntity*, float)
 T CBaseEntityOutput::GetBaseMap()
 T CBaseEntityOutput::GetMaxDelay()
 T CBaseEntityOutput::NumberOfElements()
 T CBaseEntityOutput::ParseEventAction(char const*)
 T CBaseEntityOutput::Restore(IRestore&, int)
 T CBaseEntityOutput::Save(ISave&)
 T CBaseEntityOutput::~CBaseEntityOutput()
 T CBaseFilter::GetBaseMap()
 T CBaseFilter::GetDataDescMap()
 T CBaseFilter::InputTestActivator(inputdata_t&)
 T CBaseFilter::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseFilter::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CBaseFilter::PassesFilter(CBaseEntity*)
 T CBaseFilter::PassesFilterImpl(CBaseEntity*)
 T CBaseFire::CBaseFire()
 T CBaseFire::Enable(int)
 T CBaseFire::GetBaseMap()
 T CBaseFire::GetDataDescMap()
 T CBaseFire::Scale(float, float)
 T CBaseFire::Scale(float, float, float)
 T CBaseFire::~CBaseFire()
 T CBaseFlex::AddFlexAnimation(CSceneEventInfo*)
 T CBaseFlex::AddFlexSetting(char const*, float, flexsettinghdr_t const*, flexsettinghdr_t const*, bool)
 T CBaseFlex::AddSceneEvent(CChoreoScene*, CChoreoEvent*, CBaseEntity*)
 T CBaseFlex::CBaseFlex()
 T CBaseFlex::CheckSceneEvent(float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
 T CBaseFlex::ClearSceneEvents(CChoreoScene*, bool)
 T CBaseFlex::EnsureTranslations(flexsettinghdr_t const*)
 T CBaseFlex::EnterSceneSequence(bool)
 T CBaseFlex::ExitSceneSequence()
 T CBaseFlex::FindFlexController(char const*)
 T CBaseFlex::FindNamedSetting(flexsettinghdr_t const*, char const*)
 T CBaseFlex::FindSceneFile(char const*)
 T CBaseFlex::FlexControllerLocalToGlobal(flexsettinghdr_t const*, int)
 T CBaseFlex::FlexSettingLessFunc(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&)
 T CBaseFlex::GetBaseMap()
 T CBaseFlex::GetClassName()
 T CBaseFlex::GetDataDescMap()
 T CBaseFlex::GetFlexWeight(int)
 T CBaseFlex::GetPredDescMap()
 T CBaseFlex::GetScenePriority(CChoreoScene*)
 T CBaseFlex::GetServerClass()
 T CBaseFlex::HandleStartGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::HandleStartSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::IsSuppressedFlexAnimation(CSceneEventInfo*)
 T CBaseFlex::PermitResponse(float)
 T CBaseFlex::ProcessFacingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexAnimationSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexSettingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessLookAtSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessMoveToSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvents()
 T CBaseFlex::ProcessSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::RemoveChoreoScene(CChoreoScene*)
 T CBaseFlex::RemoveSceneEvent(CChoreoScene*, CChoreoEvent*, bool)
 T CBaseFlex::RequestStartGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::RequestStartSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::SetFlexWeight(int, float)
 T CBaseFlex::SetModel(char const*)
 T CBaseFlex::SetPermitResponse(float)
 T CBaseFlex::SetViewtarget(Vector const&)
 T CBaseFlex::StartChoreoScene(CChoreoScene*)
 T CBaseFlex::StartFacingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::StartMoveToSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::YouForgotToImplementOrDeclareServerClass()
 T CBaseFlex::~CBaseFlex()
 T CBaseGrenade::BounceSound()
 T CBaseGrenade::BounceTouch(CBaseEntity*)
 T CBaseGrenade::CBaseGrenade()
 T CBaseGrenade::DangerSoundThink()
 T CBaseGrenade::Detonate()
 T CBaseGrenade::DetonateUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::Event_Killed(CTakeDamageInfo const&)
 T CBaseGrenade::Explode(CGameTrace*, int)
 T CBaseGrenade::ExplodeTouch(CBaseEntity*)
 T CBaseGrenade::GetBaseMap()
 T CBaseGrenade::GetClassName()
 T CBaseGrenade::GetDataDescMap()
 T CBaseGrenade::GetPredDescMap()
 T CBaseGrenade::GetServerClass()
 T CBaseGrenade::GetThrower()
 T CBaseGrenade::PreDetonate()
 T CBaseGrenade::Precache()
 T CBaseGrenade::SetThrower(CBaseCombatCharacter*)
 T CBaseGrenade::SlideTouch(CBaseEntity*)
 T CBaseGrenade::Smoke()
 T CBaseGrenade::TumbleThink()
 T CBaseGrenade::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::YouForgotToImplementOrDeclareServerClass()
 T CBaseGrenade::~CBaseGrenade()
 T CBaseMoveBehavior::Activate()
 T CBaseMoveBehavior::CalculateTimeAdvancementForSpeed(float, float)
 T CBaseMoveBehavior::GetBaseMap()
 T CBaseMoveBehavior::GetDataDescMap()
 T CBaseMoveBehavior::IsAtSequenceEnd()
 T CBaseMoveBehavior::IsAtSequenceStart()
 T CBaseMoveBehavior::IsMoving()
 T CBaseMoveBehavior::MoveDone()
 T CBaseMoveBehavior::SetObjectPhysicsVelocity(float)
 T CBaseMoveBehavior::Spawn()
 T CBaseMoveBehavior::StartMoving(int)
 T CBaseMoveBehavior::StopMoving()
 T CBaseParticleEntity::Activate()
 T CBaseParticleEntity::CBaseParticleEntity()
 T CBaseParticleEntity::FollowEntity(CBaseEntity*)
 T CBaseParticleEntity::GetClassName()
 T CBaseParticleEntity::GetPredDescMap()
 T CBaseParticleEntity::GetServerClass()
 T CBaseParticleEntity::SetLifetime(float)
 T CBaseParticleEntity::Think()
 T CBaseParticleEntity::UpdateTransmitState()
 T CBaseParticleEntity::YouForgotToImplementOrDeclareServerClass()
 T CBasePlatTrain::GetBaseMap()
 T CBasePlatTrain::GetDataDescMap()
 T CBasePlatTrain::KeyValue(char const*, char const*)
 T CBasePlatTrain::PlayMovingSound()
 T CBasePlatTrain::Precache()
 T CBasePlatTrain::StopMovingSound()
 T CBasePlatTrain::~CBasePlatTrain()
 T CBasePlayer::AbortReload()
 T CBasePlayer::Activate()
 T CBasePlayer::ActivateMovementConstraint(CBaseEntity*, Vector const&, float, float, float)
 T CBasePlayer::AddPoints(int, bool)
 T CBasePlayer::AddPointsToTeam(int, bool)
 T CBasePlayer::AddToPlayerSimulationList(CBaseEntity*)
 T CBasePlayer::AdjustPlayerTimeBase(int)
 T CBasePlayer::AllocCommandContext()
 T CBasePlayer::AllowImmediateDecalPainting()
 T CBasePlayer::AutoaimDeflection(Vector&, float, float)
 T CBasePlayer::AvoidPhysicsProps(CUserCmd*)
 T CBasePlayer::BodyAngles()
 T CBasePlayer::BodyTarget(Vector const&, bool)
 T CBasePlayer::BumpWeapon(CBaseCombatWeapon*)
 T CBasePlayer::CBasePlayer()
 T CBasePlayer::CalcObserverView(Vector&, QAngle&, float&)
 T CBasePlayer::CalcPlayerView(Vector&, QAngle&, float&)
 T CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
 T CBasePlayer::CalcVehicleView(IServerVehicle*, Vector&, QAngle&, float&, float&, float&)
 T CBasePlayer::CalcView(Vector&, QAngle&, float&, float&, float&)
 T CBasePlayer::CalcViewModelView(Vector const&, QAngle const&)
 T CBasePlayer::CalcViewRoll(QAngle&)
 T CBasePlayer::CanPickupObject(CBaseEntity*, float, float)
 T CBasePlayer::ChangeTeam(int)
 T CBasePlayer::CheatImpulseCommands(int)
 T CBasePlayer::CheckObserverSettings()
 T CBasePlayer::CheckSuitUpdate()
 T CBasePlayer::CheckTimeBasedDamage()
 T CBasePlayer::CheckTrainUpdate()
 T CBasePlayer::Classify()
 T CBasePlayer::ClearPlayerSimulationList()
 T CBasePlayer::ClearUseEntity()
 T CBasePlayer::ClientCommand(char const*)
 T CBasePlayer::CommitSuicide()
 T CBasePlayer::CreatePlayer(char const*, edict_t*)
 T CBasePlayer::CreateViewModel(int)
 T CBasePlayer::DamageEffect(float, int)
 T CBasePlayer::DeactivateMovementConstraint()
 T CBasePlayer::DeathSound()
 T CBasePlayer::DestroyViewModels()
 T CBasePlayer::DetermineSimulationTicks()
 T CBasePlayer::DoImpactEffect(CGameTrace&, int)
 T CBasePlayer::DoMuzzleFlash()
 T CBasePlayer::DoubleCheckUseNPC(CBaseEntity*, Vector const&, Vector const&)
 T CBasePlayer::DrawDebugGeometryOverlays()
 T CBasePlayer::Duck()
 T CBasePlayer::EnableControl(bool)
 T CBasePlayer::EntSelectSpawnPoint()
 T CBasePlayer::EquipSuit()
 T CBasePlayer::Event_Dying()
 T CBasePlayer::Event_Killed(CTakeDamageInfo const&)
 T CBasePlayer::EyeAngles()
 T CBasePlayer::EyePosition()
 T CBasePlayer::EyePositionAndVectors(Vector*, Vector*, Vector*, Vector*)
 T CBasePlayer::EyeVectors(Vector*, Vector*, Vector*)
 T CBasePlayer::FindNextObserverTarget(bool)
 T CBasePlayer::FindUseEntity()
 T CBasePlayer::ForceClientDllUpdate()
 T CBasePlayer::ForceObserverMode(int)
 T CBasePlayer::ForceOrigin(Vector const&)
 T CBasePlayer::GetAutoaimVector(float)
 T CBasePlayer::GetBaseMap()
 T CBasePlayer::GetClassName()
 T CBasePlayer::GetCommandContext(int)
 T CBasePlayer::GetCommandContextCount() const
 T CBasePlayer::GetDataDescMap()
 T CBasePlayer::GetDefaultFOV() const
 T CBasePlayer::GetFOV() const
 T CBasePlayer::GetFOVDistanceAdjustFactor()
 T CBasePlayer::GetGroundVPhysics()
 T CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
 T CBasePlayer::GetInVehicle(IServerVehicle*, int)
 T CBasePlayer::GetNetworkIDString()
 T CBasePlayer::GetObserverMode()
 T CBasePlayer::GetObserverTarget()
 T CBasePlayer::GetPlayerMaxs() const
 T CBasePlayer::GetPlayerMins() const
 T CBasePlayer::GetPredDescMap()
 T CBasePlayer::GetPunchAngle()
 T CBasePlayer::GetServerClass()
 T CBasePlayer::GetSmoothedVelocity()
 T CBasePlayer::GetSwimSoundTime() const
 T CBasePlayer::GetTimeBase() const
 T CBasePlayer::GetTracerType()
 T CBasePlayer::GetViewModel(int)
 T CBasePlayer::GetWaterJumpTime() const
 T CBasePlayer::GiveNamedItem(char const*, int)
 T CBasePlayer::HandleFuncTrain()
 T CBasePlayer::HasAnyAmmoOfType(int)
 T CBasePlayer::HasNamedPlayerItem(char const*)
 T CBasePlayer::HasWeapons()
 T CBasePlayer::HideViewModels()
 T CBasePlayer::ImpulseCommands()
 T CBasePlayer::IncrementArmorValue(int, int)
 T CBasePlayer::IncrementDeathCount(int)
 T CBasePlayer::IncrementFragCount(int)
 T CBasePlayer::InitVCollision()
 T CBasePlayer::InitialSpawn()
 T CBasePlayer::InputSetHealth(inputdata_t&)
 T CBasePlayer::IsBot() const
 T CBasePlayer::IsDead() const
 T CBasePlayer::IsFakeClient() const
 T CBasePlayer::IsOnLadder()
 T CBasePlayer::IsRideablePhysics(IPhysicsObject*)
 T CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
 T CBasePlayer::IsValidObserverTarget(CBaseEntity*)
 T CBasePlayer::ItemPostFrame()
 T CBasePlayer::ItemPreFrame()
 T CBasePlayer::Jump()
 T CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
 T CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
 T CBasePlayer::LocalEyeAngles()
 T CBasePlayer::LockPlayerInPlace()
 T CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
 T CBasePlayer::NotifyNearbyRadiationSource(float)
 T CBasePlayer::ObserverUse(bool)
 T CBasePlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CBasePlayer::OnRestore()
 T CBasePlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CBasePlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBasePlayer::PackDeadPlayerItems()
 T CBasePlayer::PhysicsSimulate()
 T CBasePlayer::PhysicsSolidMaskForEntity() const
 T CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
 T CBasePlayer::PlayerDeathThink()
 T CBasePlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CBasePlayer::PlayerUse()
 T CBasePlayer::PostThink()
 T CBasePlayer::PostThinkVPhysics()
 T CBasePlayer::PreThink()
 T CBasePlayer::Precache()
 T CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
 T CBasePlayer::RemoveAllCommandContexts()
 T CBasePlayer::RemoveAllItems(bool)
 T CBasePlayer::RemoveCommandContext(int)
 T CBasePlayer::RemoveFromPlayerSimulationList(CBaseEntity*)
 T CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
 T CBasePlayer::ResetAutoaim()
 T CBasePlayer::ResetDeathCount()
 T CBasePlayer::ResetFragCount()
 T CBasePlayer::ResetObserverMode()
 T CBasePlayer::Restore(IRestore&)
 T CBasePlayer::RunNullCommand()
 T CBasePlayer::Save(ISave&)
 T CBasePlayer::SelectItem(char const*, int)
 T CBasePlayer::SelectLastItem()
 T CBasePlayer::SetAnimation(PLAYER_ANIM)
 T CBasePlayer::SetAnimationExtension(char const*)
 T CBasePlayer::SetArmorValue(int)
 T CBasePlayer::SetDefaultFOV(int)
 T CBasePlayer::SetFOV(CBaseEntity*, int, float)
 T CBasePlayer::SetObserverMode(int)
 T CBasePlayer::SetObserverTarget(CBaseEntity*)
 T CBasePlayer::SetPhysicsFlag(int, bool)
 T CBasePlayer::SetPlayerUnderwater(bool)
 T CBasePlayer::SetPunchAngle(QAngle const&)
 T CBasePlayer::SetSuitUpdate(char*, int, int)
 T CBasePlayer::SetSwimSoundTime(float)
 T CBasePlayer::SetVCollisionState(int)
 T CBasePlayer::SetViewEntity(CBaseEntity*)
 T CBasePlayer::SetWaterJumpTime(float)
 T CBasePlayer::SetupVPhysicsShadow(CPhysCollide*, char const*, CPhysCollide*, char const*)
 T CBasePlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CBasePlayer::SharedSpawn()
 T CBasePlayer::ShouldAutoaim()
 T CBasePlayer::ShouldSavePhysics()
 T CBasePlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CBasePlayer::ShowCrosshair(bool)
 T CBasePlayer::ShowViewModel(bool)
 T CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
 T CBasePlayer::SimulatePlayerSimulatedEntities()
 T CBasePlayer::SmoothViewOnStairs(Vector&)
 T CBasePlayer::SnapEyeAngles(QAngle const&)
 T CBasePlayer::Spawn()
 T CBasePlayer::StartObserverMode(int)
 T CBasePlayer::StopObserverMode()
 T CBasePlayer::TakeHealth(float, int)
 T CBasePlayer::Touch(CBaseEntity*)
 T CBasePlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBasePlayer::UnlockPlayer()
 T CBasePlayer::UpdateButtonState(int)
 T CBasePlayer::UpdateClientData()
 T CBasePlayer::UpdateGeigerCounter()
 T CBasePlayer::UpdateOnRemove()
 T CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
 T CBasePlayer::UpdatePlayerSound()
 T CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
 T CBasePlayer::UpdateTransmitState()
 T CBasePlayer::UpdateVPhysicsPosition(Vector const&, Vector const&, float)
 T CBasePlayer::UsingStandardWeaponsInVehicle()
 T CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBasePlayer::VPhysicsDestroyObject()
 T CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
 T CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
 T CBasePlayer::VelocityPunch(Vector const&)
 T CBasePlayer::ViewPunch(QAngle const&)
 T CBasePlayer::ViewPunchReset(float)
 T CBasePlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
 T CBasePlayer::WaterMove()
 T CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBasePlayer::Weapon_DropSlot(int)
 T CBasePlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_ShootPosition()
 T CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBasePlayer::YouForgotToImplementOrDeclareServerClass()
 T CBasePlayer::~CBasePlayer()
 T CBasePlayerAnimState::BodyYawTranslateActivity(Activity)
 T CBasePlayerAnimState::CBasePlayerAnimState()
 T CBasePlayerAnimState::CalcMovementPlaybackRate(bool*)
 T CBasePlayerAnimState::CalcSequenceIndex(char const*, ...)
 T CBasePlayerAnimState::CanThePlayerMove()
 T CBasePlayerAnimState::ClearAnimationLayers()
 T CBasePlayerAnimState::ClearAnimationState()
 T CBasePlayerAnimState::ComputeAimSequence()
 T CBasePlayerAnimState::ComputeMainSequence()
 T CBasePlayerAnimState::ComputePlaybackRate()
 T CBasePlayerAnimState::ComputePoseParam_BodyPitch()
 T CBasePlayerAnimState::ComputePoseParam_BodyYaw()
 T CBasePlayerAnimState::ComputePoseParam_MoveYaw()
 T CBasePlayerAnimState::ComputeSequences()
 T CBasePlayerAnimState::ConvergeAngles(float, float, float, float, float&)
 T CBasePlayerAnimState::DebugShowAnimState(int)
 T CBasePlayerAnimState::EstimateYaw()
 T CBasePlayerAnimState::GetInterpolatedGroundSpeed()
 T CBasePlayerAnimState::GetOuter() const
 T CBasePlayerAnimState::GetOuterAbsVelocity(Vector&) const
 T CBasePlayerAnimState::GetOuterXYSpeed() const
 T CBasePlayerAnimState::GetRenderAngles()
 T CBasePlayerAnimState::Init(CBaseAnimatingOverlay*, CModAnimConfig const&)
 T CBasePlayerAnimState::Release()
 T CBasePlayerAnimState::ResetGroundSpeed()
 T CBasePlayerAnimState::RestartMainSequence()
 T CBasePlayerAnimState::SetOuterBodyYaw(float)
 T CBasePlayerAnimState::SetOuterPoseParameter(int, float)
 T CBasePlayerAnimState::ShouldChangeSequences() const
 T CBasePlayerAnimState::ShouldUpdateAnimState()
 T CBasePlayerAnimState::TimeSinceLastAnimationStateClear() const
 T CBasePlayerAnimState::Update(float, float)
 T CBasePlayerAnimState::UpdateInterpolators()
 T CBasePlayerAnimState::~CBasePlayerAnimState()
 T CBaseProp::Activate()
 T CBaseProp::CalculateBlockLOS()
 T CBaseProp::DrawDebugGeometryOverlays()
 T CBaseProp::KeyValue(char const*, char const*)
 T CBaseProp::ParsePropData()
 T CBaseProp::Precache()
 T CBaseProp::Spawn()
 T CBasePropDoor::Activate()
 T CBasePropDoor::Blocked(CBaseEntity*)
 T CBasePropDoor::CBasePropDoor()
 T CBasePropDoor::CalcDoorSounds()
 T CBasePropDoor::DoorActivate()
 T CBasePropDoor::DoorAutoCloseThink()
 T CBasePropDoor::DoorClose()
 T CBasePropDoor::DoorCloseMoveDone()
 T CBasePropDoor::DoorOpen(CBaseEntity*)
 T CBasePropDoor::DoorOpenMoveDone()
 T CBasePropDoor::EndBlocked()
 T CBasePropDoor::GetBaseMap()
 T CBasePropDoor::GetClassName()
 T CBasePropDoor::GetDataDescMap()
 T CBasePropDoor::GetServerClass()
 T CBasePropDoor::HandleAnimEvent(animevent_t*)
 T CBasePropDoor::InputClose(inputdata_t&)
 T CBasePropDoor::InputLock(inputdata_t&)
 T CBasePropDoor::InputOpen(inputdata_t&)
 T CBasePropDoor::InputOpenAwayFrom(inputdata_t&)
 T CBasePropDoor::InputToggle(inputdata_t&)
 T CBasePropDoor::InputUnlock(inputdata_t&)
 T CBasePropDoor::Lock()
 T CBasePropDoor::MasterStartBlocked(CBaseEntity*)
 T CBasePropDoor::NPCOpenDoor(CAI_BaseNPC*)
 T CBasePropDoor::ObjectCaps()
 T CBasePropDoor::OnEndBlocked()
 T CBasePropDoor::OnStartBlocked(CBaseEntity*)
 T CBasePropDoor::OnUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBasePropDoor::OpenIfUnlocked(CBaseEntity*, CBaseEntity*)
 T CBasePropDoor::Precache()
 T CBasePropDoor::RegisterPrivateActivities()
 T CBasePropDoor::SetDoorBlocker(CBaseEntity*)
 T CBasePropDoor::Spawn()
 T CBasePropDoor::StartBlocked(CBaseEntity*)
 T CBasePropDoor::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBasePropDoor::Unlock()
 T CBasePropDoor::UpdateAreaPortals(bool)
 T CBasePropDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBasePropDoor::YouForgotToImplementOrDeclareServerClass()
 T CBaseRopePhysics::ApplyConstraints(CSimplePhysics::CNode*, int)
 T CBaseRopePhysics::CBaseRopePhysics(CSimplePhysics::CNode*, int, CRopeSpring*, float*)
 T CBaseRopePhysics::GetNodeForces(CSimplePhysics::CNode*, int, Vector*)
 T CBaseRopePhysics::GetSpringLength() const
 T CBaseRopePhysics::ResetNodeSpringLength(int, float)
 T CBaseRopePhysics::ResetSpringLength(float)
 T CBaseRopePhysics::Restart()
 T CBaseRopePhysics::SetDelegate(CSimplePhysics::IHelper*)
 T CBaseRopePhysics::SetNumNodes(int)
 T CBaseRopePhysics::SetupSimulation(float, CSimplePhysics::IHelper*)
 T CBaseRopePhysics::Simulate(float)
 T CBaseServerVehicle::CBaseServerVehicle()
 T CBaseServerVehicle::CheckCrash(vbs_sound_update_t&)
 T CBaseServerVehicle::CheckExitPoint(float, int, Vector*)
 T CBaseServerVehicle::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CBaseServerVehicle::GetBaseMap()
 T CBaseServerVehicle::GetDataDescMap()
 T CBaseServerVehicle::GetDrivableVehicle()
 T CBaseServerVehicle::GetDriver()
 T CBaseServerVehicle::GetEntryAnimForPoint(Vector const&)
 T CBaseServerVehicle::GetExitAnimToUse(Vector&, bool&)
 T CBaseServerVehicle::GetPassenger(int)
 T CBaseServerVehicle::GetPassengerExitPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetPassengerRole(CBasePlayer*)
 T CBaseServerVehicle::GetPassengerStartPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*)
 T CBaseServerVehicle::HandleEntryExitFinish(bool, bool)
 T CBaseServerVehicle::HandlePassengerEntry(CBasePlayer*, bool)
 T CBaseServerVehicle::HandlePassengerExit(CBasePlayer*)
 T CBaseServerVehicle::InitSoundParams(vbs_sound_update_t&)
 T CBaseServerVehicle::Initialize(char const*)
 T CBaseServerVehicle::ItemPostFrame(CBasePlayer*)
 T CBaseServerVehicle::NPC_Brake()
 T CBaseServerVehicle::NPC_PrimaryFire()
 T CBaseServerVehicle::NPC_SecondaryFire()
 T CBaseServerVehicle::NPC_ThrottleCenter()
 T CBaseServerVehicle::NPC_ThrottleForward()
 T CBaseServerVehicle::NPC_ThrottleReverse()
 T CBaseServerVehicle::NPC_TurnCenter()
 T CBaseServerVehicle::NPC_TurnLeft(float)
 T CBaseServerVehicle::NPC_TurnRight(float)
 T CBaseServerVehicle::ParseEntryExitAnims()
 T CBaseServerVehicle::ParseExitAnim(KeyValues*, bool)
 T CBaseServerVehicle::PlayCrashSound(float)
 T CBaseServerVehicle::PlayLoopingSound(char const*)
 T CBaseServerVehicle::PlaySound(char const*)
 T CBaseServerVehicle::PlaySound(vehiclesound)
 T CBaseServerVehicle::Precache()
 T CBaseServerVehicle::ProcessMovement(CBasePlayer*, CMoveData*)
 T CBaseServerVehicle::RecalculateSoundGear(vbs_sound_update_t&)
 T CBaseServerVehicle::SetPassenger(int, CBasePlayer*)
 T CBaseServerVehicle::SetVehicle(CBaseEntity*)
 T CBaseServerVehicle::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CBaseServerVehicle::SoundShutdown(float)
 T CBaseServerVehicle::SoundStart()
 T CBaseServerVehicle::SoundStartDisabled()
 T CBaseServerVehicle::SoundState_ChooseState(vbs_sound_update_t&)
 T CBaseServerVehicle::SoundState_OnNewState(sound_states)
 T CBaseServerVehicle::SoundState_Update(vbs_sound_update_t&)
 T CBaseServerVehicle::SoundUpdate(vbs_sound_update_t&)
 T CBaseServerVehicle::StateSoundName(sound_states)
 T CBaseServerVehicle::StopLoopingSound(float)
 T CBaseServerVehicle::StopSound(vehiclesound)
 T CBaseServerVehicle::Weapon_PrimaryCanFireAt()
 T CBaseServerVehicle::Weapon_PrimaryRanges(float*, float*)
 T CBaseServerVehicle::Weapon_SecondaryCanFireAt()
 T CBaseServerVehicle::Weapon_SecondaryRanges(float*, float*)
 T CBaseServerVehicle::~CBaseServerVehicle()
 T CBaseTempEntity::CBaseTempEntity(char const*)
 T CBaseTempEntity::Create(IRecipientFilter&, float)
 T CBaseTempEntity::GetClassName()
 T CBaseTempEntity::GetList()
 T CBaseTempEntity::GetName()
 T CBaseTempEntity::GetNext()
 T CBaseTempEntity::GetServerClass()
 T CBaseTempEntity::Precache()
 T CBaseTempEntity::PrecacheTempEnts()
 T CBaseTempEntity::Test(Vector const&, QAngle const&)
 T CBaseTempEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseTempEntity::~CBaseTempEntity()
 T CBaseToggle::AngularMove(QAngle const&, float)
 T CBaseToggle::AngularMoveDone()
 T CBaseToggle::AxisDelta(int, QAngle const&, QAngle const&)
 T CBaseToggle::AxisDir()
 T CBaseToggle::AxisValue(int, QAngle const&)
 T CBaseToggle::CBaseToggle()
 T CBaseToggle::GetBaseMap()
 T CBaseToggle::GetDataDescMap()
 T CBaseToggle::IsLockedByMaster()
 T CBaseToggle::KeyValue(char const*, char const*)
 T CBaseToggle::LinearMove(Vector const&, float)
 T CBaseToggle::LinearMoveDone()
 T CBaseToggle::MoveDone()
 T CBaseTransmitProxy::AddRef()
 T CBaseTransmitProxy::CBaseTransmitProxy(CBaseEntity*)
 T CBaseTransmitProxy::Release()
 T CBaseTransmitProxy::ShouldTransmit(CCheckTransmitInfo const*, int)
 T CBaseTransmitProxy::~CBaseTransmitProxy()
 T CBaseTrigger::Activate()
 T CBaseTrigger::Disable()
 T CBaseTrigger::DrawDebugTextOverlays()
 T CBaseTrigger::Enable()
 T CBaseTrigger::EndTouch(CBaseEntity*)
 T CBaseTrigger::GetBaseMap()
 T CBaseTrigger::GetDataDescMap()
 T CBaseTrigger::GetTouchedEntityOfType(char const*)
 T CBaseTrigger::InitTrigger()
 T CBaseTrigger::InputDisable(inputdata_t&)
 T CBaseTrigger::InputEnable(inputdata_t&)
 T CBaseTrigger::InputToggle(inputdata_t&)
 T CBaseTrigger::IsTouching(CBaseEntity*)
 T CBaseTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseTrigger::Spawn()
 T CBaseTrigger::StartTouch(CBaseEntity*)
 T CBaseVPhysicsTrigger::Activate()
 T CBaseVPhysicsTrigger::CreateVPhysics()
 T CBaseVPhysicsTrigger::EndTouch(CBaseEntity*)
 T CBaseVPhysicsTrigger::GetBaseMap()
 T CBaseVPhysicsTrigger::GetDataDescMap()
 T CBaseVPhysicsTrigger::InputDisable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputEnable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputToggle(inputdata_t&)
 T CBaseVPhysicsTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseVPhysicsTrigger::Spawn()
 T CBaseVPhysicsTrigger::StartTouch(CBaseEntity*)
 T CBaseVPhysicsTrigger::UpdateOnRemove()
 T CBaseViewModel::CBaseViewModel()
 T CBaseViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CBaseViewModel::CalcViewModelView(CBasePlayer*, Vector const&, QAngle const&)
 T CBaseViewModel::DestroyControlPanels()
 T CBaseViewModel::GetBaseMap()
 T CBaseViewModel::GetClassName()
 T CBaseViewModel::GetDataDescMap()
 T CBaseViewModel::GetOwningWeapon()
 T CBaseViewModel::GetPredDescMap()
 T CBaseViewModel::GetServerClass()
 T CBaseViewModel::Precache()
 T CBaseViewModel::SendViewModelMatchingSequence(int)
 T CBaseViewModel::SetControlPanelsActive(bool)
 T CBaseViewModel::SetIndex(int)
 T CBaseViewModel::SetOwner(CBaseEntity*)
 T CBaseViewModel::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseViewModel::SetWeaponModel(char const*, CBaseCombatWeapon*)
 T CBaseViewModel::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseViewModel::Spawn()
 T CBaseViewModel::SpawnControlPanels()
 T CBaseViewModel::UpdateOnRemove()
 T CBaseViewModel::UpdateTransmitState()
 T CBaseViewModel::ViewModelIndex() const
 T CBaseViewModel::YouForgotToImplementOrDeclareServerClass()
 T CBaseViewModel::~CBaseViewModel()
 T CBeam::BeamCreate(char const*, float)
 T CBeam::BeamCreatePredictable(char const*, int, bool, char const*, float, CBasePlayer*)
 T CBeam::BeamDamage(CGameTrace*)
 T CBeam::BeamInit(char const*, float)
 T CBeam::CBeam()
 T CBeam::DoSparks(Vector const&, Vector const&)
 T CBeam::DrawDebugTextOverlays()
 T CBeam::EntsInit(CBaseEntity*, CBaseEntity*)
 T CBeam::GetAbsEndPos() const
 T CBeam::GetAbsStartPos() const
 T CBeam::GetBaseMap()
 T CBeam::GetBeamFlags() const
 T CBeam::GetClassName()
 T CBeam::GetDataDescMap()
 T CBeam::GetPredDescMap()
 T CBeam::GetServerClass()
 T CBeam::GetType() const
 T CBeam::HoseInit(Vector const&, Vector const&)
 T CBeam::InputNoise(inputdata_t&)
 T CBeam::InputWidth(inputdata_t&)
 T CBeam::LaserInit(CBaseEntity*, CBaseEntity*)
 T CBeam::PointEntInit(Vector const&, CBaseEntity*)
 T CBeam::PointsInit(Vector const&, Vector const&)
 T CBeam::Precache()
 T CBeam::RandomTargetname(char const*)
 T CBeam::RelinkBeam()
 T CBeam::SetAbsEndPos(Vector const&)
 T CBeam::SetAbsStartPos(Vector const&)
 T CBeam::SetBeamFlag(int)
 T CBeam::SetBeamFlags(int)
 T CBeam::SetEndEntity(CBaseEntity*)
 T CBeam::SetModel(char const*)
 T CBeam::SetStartEntity(CBaseEntity*)
 T CBeam::SetTransmit(CCheckTransmitInfo*, bool)
 T CBeam::SetType(int)
 T CBeam::ShouldTransmit(CCheckTransmitInfo const*)
 T CBeam::Spawn()
 T CBeam::SplineInit(int, CBaseEntity**, int*)
 T CBeam::TurnOff()
 T CBeam::TurnOn()
 T CBeam::UpdateTransmitState()
 T CBeam::YouForgotToImplementOrDeclareServerClass()
 T CBlendingCycler::GetBaseMap()
 T CBlendingCycler::GetDataDescMap()
 T CBlendingCycler::KeyValue(char const*, char const*)
 T CBlendingCycler::Spawn()
 T CBlendingCycler::Think()
 T CBlood::BloodPosition(CBaseEntity*)
 T CBlood::Direction()
 T CBlood::GetBaseMap()
 T CBlood::GetDataDescMap()
 T CBlood::InputEmitBlood(inputdata_t&)
 T CBlood::KeyValue(char const*, char const*)
 T CBlood::Spawn()
 T CBloodSplat::Spawn(CBaseEntity*)
 T CBloodSplat::Think()
 T CBombTarget::BombTargetTouch(CBaseEntity*)
 T CBombTarget::BombTargetUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBombTarget::GetBaseMap()
 T CBombTarget::GetDataDescMap()
 T CBombTarget::OnBombExplode(inputdata_t&)
 T CBombTarget::Spawn()
 T CBoneCache::BoneArray()
 T CBoneCache::CBoneCache()
 T CBoneCache::CachedToStudio()
 T CBoneCache::CreateResource(bonecacheparams_t const&)
 T CBoneCache::DestroyResource()
 T CBoneCache::EstimatedSize(bonecacheparams_t const&)
 T CBoneCache::GetCachedBone(int)
 T CBoneCache::Init(bonecacheparams_t const&, unsigned int, short*, short*, int)
 T CBoneCache::IsValid(float, float)
 T CBoneCache::ReadCachedBonePointers(matrix3x4_t**, int)
 T CBoneCache::ReadCachedBones(matrix3x4_t*)
 T CBoneCache::StudioToCached()
 T CBoneCache::UpdateBones(matrix3x4_t const*, int, float)
 T CBoneFollower::Create(CBaseEntity*, char const*, solid_t&, Vector const&, QAngle const&)
 T CBoneFollower::DrawDebugGeometryOverlays()
 T CBoneFollower::GetBaseMap()
 T CBoneFollower::GetClassName()
 T CBoneFollower::GetDataDescMap()
 T CBoneFollower::GetServerClass()
 T CBoneFollower::Init(CBaseEntity*, char const*, solid_t&, Vector const&, QAngle const&)
 T CBoneFollower::ObjectCaps()
 T CBoneFollower::SetTraceData(int, int)
 T CBoneFollower::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBoneFollower::Touch(CBaseEntity*)
 T CBoneFollower::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBoneFollower::UpdateFollower(Vector const&, QAngle const&, float)
 T CBoneFollower::UpdateTransmitState()
 T CBoneFollower::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBoneFollower::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBoneFollower::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsUpdate(IPhysicsObject*)
 T CBoneFollower::YouForgotToImplementOrDeclareServerClass()
 T CBoneFollowerManager::AddBoneFollower(CBaseEntity*, char const*)
 T CBoneFollowerManager::CBoneFollowerManager()
 T CBoneFollowerManager::CreatePhysicsFollower(physfollower_t&, char const*)
 T CBoneFollowerManager::DestroyBoneFollowers()
 T CBoneFollowerManager::GetBoneFollower(int)
 T CBoneFollowerManager::InitBoneFollowers(CBaseEntity*, int, char const**)
 T CBoneFollowerManager::UpdateBoneFollowers()
 T CBotManager::AddDebugMessage(char const*)
 T CBotManager::AddGrenade(CBaseGrenade*)
 T CBotManager::CBotManager()
 T CBotManager::ClearDebugMessages()
 T CBotManager::DestroyAllGrenades()
 T CBotManager::IsInsideSmokeCloud(Vector const*)
 T CBotManager::IsLineBlockedBySmoke(Vector const&, Vector const&, float)
 T CBotManager::RemoveGrenade(CBaseGrenade*)
 T CBotManager::RestartRound()
 T CBotManager::SetGrenadeRadius(CBaseGrenade*, float)
 T CBotManager::StartFrame()
 T CBotManager::ValidateActiveGrenades()
 T CBotManager::~CBotManager()
 T CBreakable::Break(CBaseEntity*)
 T CBreakable::BreakTouch(CBaseEntity*)
 T CBreakable::CreateVPhysics()
 T CBreakable::DamageDecal(int, int)
 T CBreakable::DamageSound()
 T CBreakable::Die()
 T CBreakable::DrawDebugTextOverlays()
 T CBreakable::GetBaseMap()
 T CBreakable::GetDataDescMap()
 T CBreakable::HasPhysicsAttacker(float)
 T CBreakable::InputAddHealth(inputdata_t&)
 T CBreakable::InputBreak(inputdata_t&)
 T CBreakable::InputRemoveHealth(inputdata_t&)
 T CBreakable::InputSetHealth(inputdata_t&)
 T CBreakable::IsBreakable()
 T CBreakable::KeyValue(char const*, char const*)
 T CBreakable::MaterialSound(Materials)
 T CBreakable::MaterialSoundRandom(int, Materials, float)
 T CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakable::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakable::ParsePropData()
 T CBreakable::Precache()
 T CBreakable::ResetOnGroundFlags()
 T CBreakable::Spawn()
 T CBreakable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBreakable::UpdateHealth(int, CBaseEntity*)
 T CBreakable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakableProp::Break(CBaseEntity*, CTakeDamageInfo const&)
 T CBreakableProp::BreakThink()
 T CBreakableProp::BreakablePropTouch(CBaseEntity*)
 T CBreakableProp::CBreakableProp()
 T CBreakableProp::CheckRemoveRagdolls()
 T CBreakableProp::ClearEnableMotionPosition()
 T CBreakableProp::CopyFadeFrom(CBreakableProp*)
 T CBreakableProp::DisableAutoFade()
 T CBreakableProp::Event_Killed(CTakeDamageInfo const&)
 T CBreakableProp::FindEnableMotionFixup()
 T CBreakableProp::ForceFadeScaleToAlwaysVisible()
 T CBreakableProp::GetBaseMap()
 T CBreakableProp::GetClassName()
 T CBreakableProp::GetDataDescMap()
 T CBreakableProp::GetEnableMotionPosition(Vector*, QAngle*)
 T CBreakableProp::GetRootPhysicsObjectForBreak()
 T CBreakableProp::GetServerClass()
 T CBreakableProp::HandleAnyCollisionInteractions(int, gamevcollisionevent_t*)
 T CBreakableProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CBreakableProp::HandleInteractionStick(int, gamevcollisionevent_t*)
 T CBreakableProp::HasPhysicsAttacker(float)
 T CBreakableProp::Ignite(float, bool, float, bool)
 T CBreakableProp::InputAddHealth(inputdata_t&)
 T CBreakableProp::InputBreak(inputdata_t&)
 T CBreakableProp::InputDisablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputEnablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputRemoveHealth(inputdata_t&)
 T CBreakableProp::InputSetHealth(inputdata_t&)
 T CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableProp::PhysGunLaunchAngularImpulse()
 T CBreakableProp::Precache()
 T CBreakableProp::RampToDefaultFadeScale()
 T CBreakableProp::SetEnableMotionPosition(Vector const&, QAngle const&)
 T CBreakableProp::SetFadeDistance(float, float)
 T CBreakableProp::SetPhysicsAttacker(CBasePlayer*, float)
 T CBreakableProp::Spawn()
 T CBreakableProp::UpdateHealth(int, CBaseEntity*)
 T CBreakableProp::YouForgotToImplementOrDeclareServerClass()
 T CBreakableSurface::BreakAllPanes()
 T CBreakableSurface::BreakPane(int, int)
 T CBreakableSurface::BreakThink()
 T CBreakableSurface::CreateShards(Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int)
 T CBreakableSurface::Die(CBaseEntity*, Vector const&)
 T CBreakableSurface::DropPane(int, int)
 T CBreakableSurface::Event_Killed(CBaseEntity*, CBaseEntity*, float, int)
 T CBreakableSurface::GetBaseMap()
 T CBreakableSurface::GetClassName()
 T CBreakableSurface::GetDataDescMap()
 T CBreakableSurface::GetServerClass()
 T CBreakableSurface::GetSupport(int, int)
 T CBreakableSurface::InputShatter(inputdata_t&)
 T CBreakableSurface::IsBroken(int, int)
 T CBreakableSurface::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableSurface::PanePos(Vector const&, float*, float*)
 T CBreakableSurface::Precache()
 T CBreakableSurface::RecalcSupport(int, int)
 T CBreakableSurface::SetSupport(int, int, float)
 T CBreakableSurface::ShatterPane(int, int, Vector const&, Vector const&)
 T CBreakableSurface::Spawn()
 T CBreakableSurface::SurfaceTouch(CBaseEntity*)
 T CBreakableSurface::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBreakableSurface::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakableSurface::YouForgotToImplementOrDeclareServerClass()
 T CBubbling::FizzThink()
 T CBubbling::GetBaseMap()
 T CBubbling::GetDataDescMap()
 T CBubbling::InputActivate(inputdata_t&)
 T CBubbling::InputDeactivate(inputdata_t&)
 T CBubbling::InputSetCurrent(inputdata_t&)
 T CBubbling::InputSetDensity(inputdata_t&)
 T CBubbling::InputSetFrequency(inputdata_t&)
 T CBubbling::InputToggle(inputdata_t&)
 T CBubbling::Precache()
 T CBubbling::Spawn()
 T CBubbling::Toggle()
 T CBubbling::TurnOff()
 T CBubbling::TurnOn()
 T CBuyZone::BuyZoneTouch(CBaseEntity*)
 T CBuyZone::CBuyZone()
 T CBuyZone::GetBaseMap()
 T CBuyZone::GetDataDescMap()
 T CBuyZone::Spawn()
 T CC4::CC4()
 T CC4::Drop(Vector const&)
 T CC4::GetClassName()
 T CC4::GetControlPanelInfo(int, char const*&)
 T CC4::GetPredDescMap()
 T CC4::GetServerClass()
 T CC4::Holster(CBaseCombatWeapon*)
 T CC4::ItemPostFrame()
 T CC4::OnPickedUp(CBaseCombatCharacter*)
 T CC4::PhysicsSolidMaskForEntity() const
 T CC4::PlayArmingBeeps()
 T CC4::Precache()
 T CC4::PrimaryAttack()
 T CC4::ShouldRemoveOnRoundRestart()
 T CC4::Spawn()
 T CC4::UpdateShieldState()
 T CC4::WeaponIdle()
 T CC4::YouForgotToImplementOrDeclareServerClass()
 T CC4::~CC4()
 T CCSAmmoDef::AddAmmoCost(char const*, int, int)
 T CCSAmmoDef::CCSAmmoDef()
 T CCSAmmoDef::GetBuySize(int) const
 T CCSAmmoDef::GetCost(int) const
 T CCSAmmoDef::~CCSAmmoDef()
 T CCSBot::AdjustSafeTime()
 T CCSBot::AdjustZoom(float)
 T CCSBot::Attack(CCSPlayer*)
 T CCSBot::AvoidEnemyGrenades()
 T CCSBot::BendLineOfSight(Vector const&, Vector const&, Vector*, float) const
 T CCSBot::Blind(float, float, float)
 T CCSBot::BotDeathThink()
 T CCSBot::BreakablesCheck()
 T CCSBot::BuildTrivialPath(Vector const&)
 T CCSBot::BuildUserCmd(CUserCmd&, QAngle const&, float, float, float, unsigned short, unsigned char)
 T CCSBot::BumpWeapon(CBaseCombatWeapon*)
 T CCSBot::Buy()
 T CCSBot::CCSBot()
 T CCSBot::CanActiveWeaponFire() const
 T CCSBot::CanHearNearbyEnemyGunfire(float) const
 T CCSBot::CanSeeLooseBomb() const
 T CCSBot::CanSeeNoisePosition() const
 T CCSBot::CanSeePlantedBomb() const
 T CCSBot::ComputeApproachPoints()
 T CCSBot::ComputeLadderEndpoint(bool)
 T CCSBot::ComputePartPositions(CCSPlayer*)
 T CCSBot::ComputePath(Vector const&, RouteType)
 T CCSBot::ComputePathPositions()
 T CCSBot::ComputeWeaponSightRange()
 T CCSBot::ContinueFollowing()
 T CCSBot::DebugDisplay() const
 T CCSBot::DecreaseMorale()
 T CCSBot::DefuseBomb()
 T CCSBot::DidPlayerJustFireWeapon(CCSPlayer const*) const
 T CCSBot::DiscontinuityJump(float, bool, bool)
 T CCSBot::DoEquip(CWeaponCSBase*)
 T CCSBot::DoesActiveWeaponHaveSilencer() const
 T CCSBot::DoorCheck()
 T CCSBot::DrawApproachPoints() const
 T CCSBot::DrawPath()
 T CCSBot::EquipBestWeapon(bool)
 T CCSBot::EquipGrenade(bool)
 T CCSBot::EquipKnife()
 T CCSBot::EquipPistol()
 T CCSBot::EscapeFromBomb()
 T CCSBot::Event_Killed(CTakeDamageInfo const&)
 T CCSBot::FeelerReflexAdjustment(Vector*)
 T CCSBot::FetchBomb()
 T CCSBot::FindApproachPointNearestPath(Vector*)
 T CCSBot::FindClosestPointOnPath(Vector const&, int, int, Vector*) const
 T CCSBot::FindEntitiesOnPath(float, CPushAwayEnumerator*)
 T CCSBot::FindGrenadeTossPathTarget(Vector*)
 T CCSBot::FindMostDangerousThreat()
 T CCSBot::FindOurPositionOnPath(Vector*, bool) const
 T CCSBot::FindPathPoint(float, Vector*, int*)
 T CCSBot::FireWeaponAtEnemy()
 T CCSBot::Follow(CCSPlayer*)
 T CCSBot::GetApproximateFallDamage(float) const
 T CCSBot::GetAttacker() const
 T CCSBot::GetBaseMap()
 T CCSBot::GetDataDescMap()
 T CCSBot::GetDisposition() const
 T CCSBot::GetDispositionName() const
 T CCSBot::GetHidingSpotCheckTimestamp(HidingSpot*) const
 T CCSBot::GetHidingTime() const
 T CCSBot::GetImportantEnemy(bool) const
 T CCSBot::GetMoraleName() const
 T CCSBot::GetOffLadder()
 T CCSBot::GetPartPosition(CCSPlayer*, CCSBot::VisiblePartType) const
 T CCSBot::GetPathDistanceRemaining() const
 T CCSBot::GetPlace() const
 T CCSBot::GetRangeToFarthestEscortedHostage() const
 T CCSBot::GetRangeToNearestRecognizedEnemy()
 T CCSBot::GetRecognizedEnemy()
 T CCSBot::GetSafeTimeRemaining() const
 T CCSBot::GetSimpleGroundHeightWithFloor(Vector const&, float*, Vector*)
 T CCSBot::GetTaskName() const
 T CCSBot::GiveWeapon(char const*)
 T CCSBot::GuardRandomZone(float)
 T CCSBot::HasGrenade() const
 T CCSBot::HasNotSeenEnemyForLongTime() const
 T CCSBot::HeardInterestingNoise()
 T CCSBot::Hide(CNavArea*, float, float, bool)
 T CCSBot::Hide(Vector const&, float, bool)
 T CCSBot::Hunt()
 T CCSBot::Idle()
 T CCSBot::IgnoreEnemies(float)
 T CCSBot::IncreaseMorale()
 T CCSBot::InhibitLookAround(float)
 T CCSBot::Initialize(BotProfile const*, int)
 T CCSBot::InvestigateNoise()
 T CCSBot::IsAnyVisibleEnemyLookingAtMe(bool) const
 T CCSBot::IsAtEnemySpawn() const
 T CCSBot::IsAtHidingSpot() const
 T CCSBot::IsAttacking() const
 T CCSBot::IsBusy() const
 T CCSBot::IsBuying() const
 T CCSBot::IsDefusingBomb() const
 T CCSBot::IsDoingScenario() const
 T CCSBot::IsEndOfSafeTime() const
 T CCSBot::IsEscapingFromBomb() const
 T CCSBot::IsFriendInLineOfFire()
 T CCSBot::IsFriendInTheWay(Vector const&)
 T CCSBot::IsHiding() const
 T CCSBot::IsHunting() const
 T CCSBot::IsHurrying() const
 T CCSBot::IsInvestigatingNoise() const
 T CCSBot::IsMovingTo() const
 T CCSBot::IsNearJump() const
 T CCSBot::IsNoiseHeard() const
 T CCSBot::IsNoticable(CCSPlayer const*, unsigned char) const
 T CCSBot::IsOutnumbered() const
 T CCSBot::IsPistolEmpty() const
 T CCSBot::IsPrimaryWeaponEmpty() const
 T CCSBot::IsRadioCommand(RadioType) const
 T CCSBot::IsRecognizedEnemyProtectedByShield()
 T CCSBot::IsRecognizedEnemyReloading()
 T CCSBot::IsRogue() const
 T CCSBot::IsRunning() const
 T CCSBot::IsSafe() const
 T CCSBot::IsSniper() const
 T CCSBot::IsSniping() const
 T CCSBot::IsStraightLinePathWalkable(Vector const&) const
 T CCSBot::IsUsing(CSWeaponID) const
 T CCSBot::IsUsingGrenade() const
 T CCSBot::IsUsingKnife() const
 T CCSBot::IsUsingMachinegun() const
 T CCSBot::IsUsingPistol() const
 T CCSBot::IsUsingShotgun() const
 T CCSBot::IsUsingSniperRifle() const
 T CCSBot::IsVisible(CCSPlayer*, bool, unsigned char*) const
 T CCSBot::IsVisible(Vector const&, bool, CBaseEntity const*) const
 T CCSBot::IsWellPastSafe() const
 T CCSBot::Jump(bool)
 T CCSBot::LookForGrenadeTargets()
 T CCSBot::MoveAwayFromPosition(Vector const&)
 T CCSBot::MoveTo(Vector const&, RouteType)
 T CCSBot::MoveToInitialEncounter()
 T CCSBot::MoveTowardsPosition(Vector const&)
 T CCSBot::NoticeLooseBomb() const
 T CCSBot::OnAudibleEvent(IGameEvent*, CBasePlayer*, float, PriorityType, bool, bool, Vector const*)
 T CCSBot::OnBombBeep(IGameEvent*)
 T CCSBot::OnBombDefuseAbort(IGameEvent*)
 T CCSBot::OnBombDefuseBegin(IGameEvent*)
 T CCSBot::OnBombDefused(IGameEvent*)
 T CCSBot::OnBombExploded(IGameEvent*)
 T CCSBot::OnBombPickedUp(IGameEvent*)
 T CCSBot::OnBombPlanted(IGameEvent*)
 T CCSBot::OnBreakBreakable(IGameEvent*)
 T CCSBot::OnBreakProp(IGameEvent*)
 T CCSBot::OnBulletImpact(IGameEvent*)
 T CCSBot::OnDoorMoving(IGameEvent*)
 T CCSBot::OnEnteredNavArea(CNavArea*)
 T CCSBot::OnFlashbangDetonate(IGameEvent*)
 T CCSBot::OnGrenadeBounce(IGameEvent*)
 T CCSBot::OnHEGrenadeDetonate(IGameEvent*)
 T CCSBot::OnHostageFollows(IGameEvent*)
 T CCSBot::OnHostageRescuedAll(IGameEvent*)
 T CCSBot::OnNavBlocked(IGameEvent*)
 T CCSBot::OnPlayerDeath(IGameEvent*)
 T CCSBot::OnPlayerFallDamage(IGameEvent*)
 T CCSBot::OnPlayerFootstep(IGameEvent*)
 T CCSBot::OnPlayerRadio(IGameEvent*)
 T CCSBot::OnRoundEnd(IGameEvent*)
 T CCSBot::OnRoundStart(IGameEvent*)
 T CCSBot::OnSmokeGrenadeDetonate(IGameEvent*)
 T CCSBot::OnTakeDamage(CTakeDamageInfo const&)
 T CCSBot::OnWeaponFire(IGameEvent*)
 T CCSBot::OnWeaponFireOnEmpty(IGameEvent*)
 T CCSBot::OnWeaponReload(IGameEvent*)
 T CCSBot::OnWeaponZoom(IGameEvent*)
 T CCSBot::OpenDoor(CBaseEntity*)
 T CCSBot::OutnumberedCount() const
 T CCSBot::PlantBomb()
 T CCSBot::ReloadCheck()
 T CCSBot::RescueHostages()
 T CCSBot::ResetStuckMonitor()
 T CCSBot::ResetValues()
 T CCSBot::RespondToHelpRequest(CCSPlayer*, unsigned int, float)
 T CCSBot::RespondToRadioCommands()
 T CCSBot::SendRadioMessage(RadioType)
 T CCSBot::SetAimOffset(float)
 T CCSBot::SetBotEnemy(CCSPlayer*)
 T CCSBot::SetDisposition(CCSBot::DispositionType)
 T CCSBot::SetHidingSpotCheckTimestamp(HidingSpot*)
 T CCSBot::SetLookAt(char const*, Vector const&, PriorityType, float, bool, float, bool)
 T CCSBot::SetPathIndex(int)
 T CCSBot::SetState(BotState*)
 T CCSBot::SetupLadderMovement()
 T CCSBot::SilencerCheck()
 T CCSBot::Spawn()
 T CCSBot::SpeakAudio(char const*, float, int)
 T CCSBot::StayOnNavMesh()
 T CCSBot::StopAttacking()
 T CCSBot::StopFollowing()
 T CCSBot::StrafeAwayFromPosition(Vector const&)
 T CCSBot::StuckCheck()
 T CCSBot::ThrowGrenade(Vector const&)
 T CCSBot::Touch(CBaseEntity*)
 T CCSBot::TryToHide(CNavArea*, float, float, bool, bool)
 T CCSBot::TryToJoinTeam(int)
 T CCSBot::TryToRetreat(float, float)
 T CCSBot::Update()
 T CCSBot::UpdateAimOffset()
 T CCSBot::UpdateGrenadeThrow()
 T CCSBot::UpdateHostageEscortCount()
 T CCSBot::UpdateLadderMovement()
 T CCSBot::UpdateLookAngles()
 T CCSBot::UpdateLookAround(bool)
 T CCSBot::UpdateLookAt()
 T CCSBot::UpdateLookAtNoise()
 T CCSBot::UpdatePanicLookAround()
 T CCSBot::UpdatePathMovement(bool)
 T CCSBot::UpdatePeripheralVision()
 T CCSBot::UpdateReactionQueue()
 T CCSBot::UpdateTravelDistanceToAllPlayers()
 T CCSBot::Upkeep()
 T CCSBot::UseEntity(CBaseEntity*)
 T CCSBot::Walk()
 T CCSBot::Wiggle()
 T CCSBot::~CCSBot()
 T CCSBotManager::AddBot(BotProfile const*, int)
 T CCSBotManager::BotAddCommand(int, bool)
 T CCSBotManager::CCSBotManager()
 T CCSBotManager::CheckForBlockedZones()
 T CCSBotManager::ClientCommand(CBasePlayer*, char const*)
 T CCSBotManager::ClientDisconnect(CBaseEntity*)
 T CCSBotManager::ExtractScenarioData()
 T CCSBotManager::GetBombTimeLeft() const
 T CCSBotManager::GetClosestZone(Vector const&) const
 T CCSBotManager::GetPlayerPriority(CBasePlayer*) const
 T CCSBotManager::GetRadioMessageInterval(RadioType, int) const
 T CCSBotManager::GetRadioMessageTimestamp(RadioType, int) const
 T CCSBotManager::GetRandomAreaInZone(CCSBotManager::Zone const*) const
 T CCSBotManager::GetRandomPositionInZone(CCSBotManager::Zone const*) const
 T CCSBotManager::GetRandomSpawn(int) const
 T CCSBotManager::GetZone(Vector const&) const
 T CCSBotManager::IsImportantPlayer(CCSPlayer*) const
 T CCSBotManager::IsOnDefense(CCSPlayer const*) const
 T CCSBotManager::IsOnOffense(CCSPlayer const*) const
 T CCSBotManager::IsWeaponUseable(CWeaponCSBase const*) const
 T CCSBotManager::MaintainBotQuota()
 T CCSBotManager::OnBombBeep(IGameEvent*)
 T CCSBotManager::OnBombDefuseAbort(IGameEvent*)
 T CCSBotManager::OnBombDefuseBegin(IGameEvent*)
 T CCSBotManager::OnBombDefused(IGameEvent*)
 T CCSBotManager::OnBombExploded(IGameEvent*)
 T CCSBotManager::OnBombPickedUp(IGameEvent*)
 T CCSBotManager::OnBombPlanted(IGameEvent*)
 T CCSBotManager::OnBreakBreakable(IGameEvent*)
 T CCSBotManager::OnBreakProp(IGameEvent*)
 T CCSBotManager::OnBulletImpact(IGameEvent*)
 T CCSBotManager::OnDoorMoving(IGameEvent*)
 T CCSBotManager::OnFlashbangDetonate(IGameEvent*)
 T CCSBotManager::OnGrenadeBounce(IGameEvent*)
 T CCSBotManager::OnHEGrenadeDetonate(IGameEvent*)
 T CCSBotManager::OnHostageFollows(IGameEvent*)
 T CCSBotManager::OnHostageRescuedAll(IGameEvent*)
 T CCSBotManager::OnNavBlocked(IGameEvent*)
 T CCSBotManager::OnPlayerDeath(IGameEvent*)
 T CCSBotManager::OnPlayerFallDamage(IGameEvent*)
 T CCSBotManager::OnPlayerFootstep(IGameEvent*)
 T CCSBotManager::OnPlayerRadio(IGameEvent*)
 T CCSBotManager::OnRoundEnd(IGameEvent*)
 T CCSBotManager::OnRoundFreezeEnd(IGameEvent*)
 T CCSBotManager::OnRoundStart(IGameEvent*)
 T CCSBotManager::OnServerShutdown(IGameEvent*)
 T CCSBotManager::OnSmokeGrenadeDetonate(IGameEvent*)
 T CCSBotManager::OnWeaponFire(IGameEvent*)
 T CCSBotManager::OnWeaponFireOnEmpty(IGameEvent*)
 T CCSBotManager::OnWeaponReload(IGameEvent*)
 T CCSBotManager::OnWeaponZoom(IGameEvent*)
 T CCSBotManager::ResetRadioMessageTimestamps()
 T CCSBotManager::RestartRound()
 T CCSBotManager::ServerActivate()
 T CCSBotManager::ServerCommand(char const*)
 T CCSBotManager::ServerDeactivate()
 T CCSBotManager::SetLooseBomb(CBaseEntity*)
 T CCSBotManager::SetRadioMessageTimestamp(RadioType, int)
 T CCSBotManager::StartFrame()
 T CCSGameMovement::AirMove()
 T CCSGameMovement::CCSGameMovement()
 T CCSGameMovement::CanAccelerate()
 T CCSGameMovement::CanUnduck()
 T CCSGameMovement::CheckForLadders(bool)
 T CCSGameMovement::CheckJumpButton()
 T CCSGameMovement::CheckParameters()
 T CCSGameMovement::DecayPunchAngle()
 T CCSGameMovement::Duck()
 T CCSGameMovement::FinishDuck()
 T CCSGameMovement::FinishUnDuck()
 T CCSGameMovement::HandleDuckingSpeedCrop()
 T CCSGameMovement::PlayerMove()
 T CCSGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CCSGameMovement::ReduceTimers()
 T CCSGameMovement::ResolveStanding()
 T CCSGameMovement::WalkMove()
 T CCSGameRules::AIClassText(int)
 T CCSGameRules::BalanceTeams()
 T CCSGameRules::BombRoundEndCheck(bool)
 T CCSGameRules::BroadcastSound(char const*, int)
 T CCSGameRules::CCSGameRules()
 T CCSGameRules::CheckFragLimit()
 T CCSGameRules::CheckFreezePeriodExpired()
 T CCSGameRules::CheckGameOver()
 T CCSGameRules::CheckLevelInitialized()
 T CCSGameRules::CheckMapConditions()
 T CCSGameRules::CheckMaxRounds()
 T CCSGameRules::CheckRestartRound()
 T CCSGameRules::CheckRoundTimeExpired()
 T CCSGameRules::CheckWinConditions()
 T CCSGameRules::CheckWinLimit()
 T CCSGameRules::CleanUpMap()
 T CCSGameRules::ClientCommand(char const*, CBaseEntity*)
 T CCSGameRules::ClientDisconnected(edict_t*)
 T CCSGameRules::ClientSettingsChanged(CBasePlayer*)
 T CCSGameRules::CreateStandardEntities()
 T CCSGameRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CCSGameRules::DefaultFOV()
 T CCSGameRules::EndGameFrame()
 T CCSGameRules::EndRound()
 T CCSGameRules::FPlayerCanRespawn(CBasePlayer*)
 T CCSGameRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CCSGameRules::FlPlayerFallDamage(CBasePlayer*)
 T CCSGameRules::GetAllowWeaponSwitch()
 T CCSGameRules::GetAmountOfEntityVisible(Vector&, CBaseEntity*)
 T CCSGameRules::GetBuyTimeLength() const
 T CCSGameRules::GetChatFormat(bool, CBasePlayer*)
 T CCSGameRules::GetChatLocation(bool, CBasePlayer*)
 T CCSGameRules::GetChatPrefix(bool, CBasePlayer*)
 T CCSGameRules::GetExplosionDamageAdjustment(Vector&, Vector&, CBaseEntity*)
 T CCSGameRules::GetHumanTeam()
 T CCSGameRules::GetMapRemainingTime()
 T CCSGameRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CCSGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CCSGameRules::GetRoundElapsedTime()
 T CCSGameRules::GetRoundRemainingTime()
 T CCSGameRules::GetRoundStartTime()
 T CCSGameRules::GetViewVectors() const
 T CCSGameRules::GiveC4()
 T CCSGameRules::GoToIntermission()
 T CCSGameRules::HostageRescueRoundEndCheck(bool)
 T CCSGameRules::HostageTouched()
 T CCSGameRules::InitDefaultAIRelationships()
 T CCSGameRules::InitializePlayerCounts(int&, int&, int&, int&)
 T CCSGameRules::IsBombDefuseMap() const
 T CCSGameRules::IsBuyTimeElapsed()
 T CCSGameRules::IsFreezePeriod()
 T CCSGameRules::IsFriendlyFireOn()
 T CCSGameRules::IsHostageRescueMap() const
 T CCSGameRules::IsLogoMap() const
 T CCSGameRules::IsSpawnPointValid(CBaseEntity*, CBasePlayer*)
 T CCSGameRules::IsThereABomb()
 T CCSGameRules::IsThereABomber()
 T CCSGameRules::IsVIPMap() const
 T CCSGameRules::LevelInitPostEntity()
 T CCSGameRules::LevelInitPreEntity()
 T CCSGameRules::LevelShutdown()
 T CCSGameRules::MarkLivingPlayersOnTeamAsNotReceivingMoneyNextRound(int)
 T CCSGameRules::MoveHumansToHumanTeam()
 T CCSGameRules::NeededPlayersCheck(bool&)
 T CCSGameRules::PickNextVIP()
 T CCSGameRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CCSGameRules::PlayerSpawn(CBasePlayer*)
 T CCSGameRules::PrisonRoundEndCheck()
 T CCSGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CCSGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, bool)
 T CCSGameRules::ReadMultiplayCvars()
 T CCSGameRules::RestartRound()
 T CCSGameRules::SelectDefaultTeam()
 T CCSGameRules::SetAllowWeaponSwitch(bool)
 T CCSGameRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CCSGameRules::ShouldCollide(int, int)
 T CCSGameRules::ShowSpawnPoints()
 T CCSGameRules::SwapAllPlayers()
 T CCSGameRules::TeamExterminationCheck(int, int, int, int, bool)
 T CCSGameRules::TeamFull(int)
 T CCSGameRules::TeamStacked(int, int)
 T CCSGameRules::TerminateRound(float, int)
 T CCSGameRules::Think()
 T CCSGameRules::UpdateClientData(CBasePlayer*)
 T CCSGameRules::UpdateTeamScores()
 T CCSGameRules::VIPRoundEndCheck(bool)
 T CCSGameRules::~CCSGameRules()
 T CCSGameRulesProxy::GetClassName()
 T CCSGameRulesProxy::GetServerClass()
 T CCSGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CCSHLTVDirector::CreateShotFromEvent(CGameEvent*)
 T CCSHLTVDirector::GetModEvents()
 T CCSHLTVDirector::SetHLTVServer(IHLTVServer*)
 T CCSHostageAnimState::CCSHostageAnimState()
 T CCSHostageAnimState::CalcMainActivity()
 T CCSPlayer::AddAccount(int, bool)
 T CCSPlayer::ApplyDeafnessEffect()
 T CCSPlayer::AttemptToBuyAmmo(int)
 T CCSPlayer::AttemptToBuyAmmoSingle(int)
 T CCSPlayer::AttemptToBuyAssaultSuit()
 T CCSPlayer::AttemptToBuyDefuser()
 T CCSPlayer::AttemptToBuyNightVision()
 T CCSPlayer::AttemptToBuyShield()
 T CCSPlayer::AttemptToBuyVest()
 T CCSPlayer::AutoBuy()
 T CCSPlayer::Blind(float, float, float)
 T CCSPlayer::BuildRebuyStruct()
 T CCSPlayer::BumpWeapon(CBaseCombatWeapon*)
 T CCSPlayer::BuyAmmo(int, bool)
 T CCSPlayer::BuyGunAmmo(CBaseCombatWeapon*, bool)
 T CCSPlayer::CCSPlayer()
 T CCSPlayer::CSAnim_CanMove()
 T CCSPlayer::CSAnim_GetActiveWeapon()
 T CCSPlayer::CSWeaponDrop(CBaseCombatWeapon*, bool, bool)
 T CCSPlayer::CanChangeName()
 T CCSPlayer::CanHearChatFrom(CBasePlayer*)
 T CCSPlayer::CanMove() const
 T CCSPlayer::CanPlayerBuy(bool)
 T CCSPlayer::ChangeName(char const*)
 T CCSPlayer::ChangeTeam(int)
 T CCSPlayer::CheatImpulseCommands(int)
 T CCSPlayer::ClearFlashbangScreenFade()
 T CCSPlayer::ClientCommand(char const*)
 T CCSPlayer::Cmd_Argc()
 T CCSPlayer::Cmd_Argv(int)
 T CCSPlayer::CombineBuyResults(BuyResult_e, BuyResult_e)
 T CCSPlayer::ConstructRadioFilter(CRecipientFilter&)
 T CCSPlayer::CreatePlayer(char const*, edict_t*)
 T CCSPlayer::CreateRagdollEntity()
 T CCSPlayer::CreateViewModel(int)
 T CCSPlayer::Deafen(float)
 T CCSPlayer::DeathSound()
 T CCSPlayer::DoAnimationEvent(PlayerAnimEvent_t)
 T CCSPlayer::DoesPlayerGetRoundStartMoney()
 T CCSPlayer::DropC4()
 T CCSPlayer::DropPistol()
 T CCSPlayer::DropRifle()
 T CCSPlayer::DropShield()
 T CCSPlayer::DropWeapons()
 T CCSPlayer::EmitPrivateSound(char const*)
 T CCSPlayer::EntSelectSpawnPoint()
 T CCSPlayer::Event_Killed(CTakeDamageInfo const&)
 T CCSPlayer::FindUseEntity()
 T CCSPlayer::FireBullet(Vector, QAngle const&, float, float, int, int, int, float, CBaseEntity*, bool, float, float)
 T CCSPlayer::FlashlightIsOn()
 T CCSPlayer::FlashlightTurnOff()
 T CCSPlayer::FlashlightTurnOn()
 T CCSPlayer::GetActiveCSWeapon() const
 T CCSPlayer::GetAutoBuyCommandInfo(char const*)
 T CCSPlayer::GetBaseMap()
 T CCSPlayer::GetBulletTypeParameters(int, float&, float&)
 T CCSPlayer::GetClassName()
 T CCSPlayer::GetDataDescMap()
 T CCSPlayer::GetIntoGame()
 T CCSPlayer::GetPredDescMap()
 T CCSPlayer::GetServerClass()
 T CCSPlayer::GiveDefaultItems()
 T CCSPlayer::GiveDefuser()
 T CCSPlayer::GiveNamedItem(char const*, int)
 T CCSPlayer::GiveShield()
 T CCSPlayer::HandleCommand_Buy(char const*)
 T CCSPlayer::HandleCommand_JoinClass(int)
 T CCSPlayer::HandleCommand_JoinTeam(int)
 T CCSPlayer::HandleMenu_Radio1(int)
 T CCSPlayer::HandleMenu_Radio2(int)
 T CCSPlayer::HandleMenu_Radio3(int)
 T CCSPlayer::HasC4() const
 T CCSPlayer::HasDefuser()
 T CCSPlayer::HasPrimaryWeapon()
 T CCSPlayer::HasSecondaryWeapon()
 T CCSPlayer::HasShield() const
 T CCSPlayer::HintMessage(char const*, bool, bool)
 T CCSPlayer::InitVCollision()
 T CCSPlayer::InitialSpawn()
 T CCSPlayer::Instance(int)
 T CCSPlayer::IsArmored(int)
 T CCSPlayer::IsHittingShield(Vector const&, CGameTrace*)
 T CCSPlayer::IsInBuyZone()
 T CCSPlayer::IsShieldDrawn() const
 T CCSPlayer::IsUseableEntity(CBaseEntity*, unsigned int)
 T CCSPlayer::IsVIP() const
 T CCSPlayer::KickBack(float, float, float, float, float, float, int)
 T CCSPlayer::ListPlayers()
 T CCSPlayer::MarkAsNotReceivingMoneyNextRound()
 T CCSPlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
 T CCSPlayer::MoveToNextIntroCamera()
 T CCSPlayer::NoteWeaponFired()
 T CCSPlayer::ObserverRoundRespawn()
 T CCSPlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CCSPlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CCSPlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CCSPlayer::OutputDamageGiven()
 T CCSPlayer::OutputDamageTaken()
 T CCSPlayer::Pain(bool)
 T CCSPlayer::ParseAutoBuyString(char const*, bool&, bool&)
 T CCSPlayer::PhysObjectSleep()
 T CCSPlayer::PhysObjectWake()
 T CCSPlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
 T CCSPlayer::PlayerClass() const
 T CCSPlayer::PlayerDeathThink()
 T CCSPlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CCSPlayer::PostAutoBuyCommandProcessing(AutoBuyInfoStruct const*, bool&, bool&)
 T CCSPlayer::PostThink()
 T CCSPlayer::PreThink()
 T CCSPlayer::Precache()
 T CCSPlayer::PrioritizeAutoBuyString(char*, char const*)
 T CCSPlayer::PushawayThink()
 T CCSPlayer::Radio(char const*, char const*)
 T CCSPlayer::Rebuy()
 T CCSPlayer::RebuyArmor()
 T CCSPlayer::RebuyDefuser()
 T CCSPlayer::RebuyFlashbang()
 T CCSPlayer::RebuyHEGrenade()
 T CCSPlayer::RebuyNightVision()
 T CCSPlayer::RebuyPrimaryAmmo()
 T CCSPlayer::RebuyPrimaryWeapon()
 T CCSPlayer::RebuySecondaryAmmo()
 T CCSPlayer::RebuySecondaryWeapon()
 T CCSPlayer::RebuySmokeGrenade()
 T CCSPlayer::RecordDamageGiven(char const*, int)
 T CCSPlayer::RecordDamageTaken(char const*, int)
 T CCSPlayer::RemoveAllItems(bool)
 T CCSPlayer::RemoveDefuser()
 T CCSPlayer::RemoveShield()
 T CCSPlayer::RescueZoneTouch(inputdata_t&)
 T CCSPlayer::Reset()
 T CCSPlayer::ResetDamageCounters()
 T CCSPlayer::ResetMaxSpeed()
 T CCSPlayer::ResetStamina()
 T CCSPlayer::RoundRespawn()
 T CCSPlayer::RunMimicCommand(CUserCmd&)
 T CCSPlayer::RunPlayerMove(QAngle const&, float, float, float, unsigned short, unsigned char, float)
 T CCSPlayer::SelectDeathPose(CTakeDamageInfo const&)
 T CCSPlayer::SelectSpawnSpot(char const*, CBaseEntity*&)
 T CCSPlayer::SetAnimation(PLAYER_ANIM)
 T CCSPlayer::SetProgressBarTime(int)
 T CCSPlayer::SetShieldDrawnState(bool)
 T CCSPlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CCSPlayer::ShouldDoLargeFlinch(int, CBaseEntity*)
 T CCSPlayer::ShouldExecuteAutoBuyCommand(AutoBuyInfoStruct const*, bool, bool)
 T CCSPlayer::ShouldRunRateLimitedCommand(char const*)
 T CCSPlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
 T CCSPlayer::Spawn()
 T CCSPlayer::StartNewBulletGroup()
 T CCSPlayer::State_Enter(CSPlayerState)
 T CCSPlayer::State_Enter_ACTIVE()
 T CCSPlayer::State_Enter_DEATH_ANIM()
 T CCSPlayer::State_Enter_DEATH_WAIT_FOR_KEY()
 T CCSPlayer::State_Enter_OBSERVER_MODE()
 T CCSPlayer::State_Enter_PICKINGCLASS()
 T CCSPlayer::State_Enter_PICKINGTEAM()
 T CCSPlayer::State_Enter_WELCOME()
 T CCSPlayer::State_Leave()
 T CCSPlayer::State_LookupInfo(CSPlayerState)
 T CCSPlayer::State_PreThink()
 T CCSPlayer::State_PreThink_ACTIVE()
 T CCSPlayer::State_PreThink_DEATH_ANIM()
 T CCSPlayer::State_PreThink_DEATH_WAIT_FOR_KEY()
 T CCSPlayer::State_PreThink_OBSERVER_MODE()
 T CCSPlayer::State_PreThink_WELCOME()
 T CCSPlayer::State_Transition(CSPlayerState)
 T CCSPlayer::SwitchTeam(int)
 T CCSPlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CCSPlayer::UpdateAddonBits()
 T CCSPlayer::UpdateMouseoverHints()
 T CCSPlayer::UpdateRadar()
 T CCSPlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
 T CCSPlayer::VPhysicsShadowUpdate(IPhysicsObject*)
 T CCSPlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
 T CCSPlayer::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CCSPlayer::Weapon_CanUse(CBaseCombatWeapon*)
 T CCSPlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CCSPlayer::Weapon_Switch(CBaseCombatWeapon*, int)
 T CCSPlayer::YouForgotToImplementOrDeclareServerClass()
 T CCSPlayer::~CCSPlayer()
 T CCSPlayerAnimState::CCSPlayerAnimState()
 T CCSPlayerAnimState::CalcAimLayerSequence(float*, float*, bool)
 T CCSPlayerAnimState::CalcFireLayerSequence(PlayerAnimEvent_t)
 T CCSPlayerAnimState::CalcGrenadePrimeSequence()
 T CCSPlayerAnimState::CalcGrenadeThrowSequence()
 T CCSPlayerAnimState::CalcMainActivity()
 T CCSPlayerAnimState::CalcReloadLayerSequence(PlayerAnimEvent_t)
 T CCSPlayerAnimState::CalcSequenceIndex(char const*, ...)
 T CCSPlayerAnimState::CanThePlayerMove()
 T CCSPlayerAnimState::CheckCachedSequenceValidity()
 T CCSPlayerAnimState::ClearAnimationLayers()
 T CCSPlayerAnimState::ClearAnimationState()
 T CCSPlayerAnimState::ComputeFireSequence()
 T CCSPlayerAnimState::ComputeGrenadeSequence()
 T CCSPlayerAnimState::ComputeReloadSequence()
 T CCSPlayerAnimState::ComputeSequences()
 T CCSPlayerAnimState::DebugShowAnimState(int)
 T CCSPlayerAnimState::DoAnimationEvent(PlayerAnimEvent_t)
 T CCSPlayerAnimState::GetCurrentMaxGroundSpeed()
 T CCSPlayerAnimState::GetOuterGrenadeThrowCounter()
 T CCSPlayerAnimState::GetWeaponSuffix()
 T CCSPlayerAnimState::HandleJumping()
 T CCSPlayerAnimState::InitCS(CBaseAnimatingOverlay*, ICSPlayerAnimStateHelpers*, LegAnimType_t, bool)
 T CCSPlayerAnimState::IsOuterGrenadePrimed()
 T CCSPlayerAnimState::IsThrowingGrenade()
 T CCSPlayerAnimState::SelectWeightedSequence(Activity)
 T CCSPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CCSPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CCSPlayerMove::StartCommand(CBasePlayer*, CUserCmd*)
 T CCSPlayerResource::CCSPlayerResource()
 T CCSPlayerResource::GetBaseMap()
 T CCSPlayerResource::GetClassName()
 T CCSPlayerResource::GetDataDescMap()
 T CCSPlayerResource::GetServerClass()
 T CCSPlayerResource::Spawn()
 T CCSPlayerResource::UpdatePlayerData()
 T CCSPlayerResource::YouForgotToImplementOrDeclareServerClass()
 T CCSRagdoll::GetClassName()
 T CCSRagdoll::GetServerClass()
 T CCSRagdoll::YouForgotToImplementOrDeclareServerClass()
 T CCSTeam::AddPlayer(CBasePlayer*)
 T CCSTeam::GetClassName()
 T CCSTeam::GetEnemyTeam()
 T CCSTeam::GetServerClass()
 T CCSTeam::Init(char const*, int)
 T CCSTeam::Precache()
 T CCSTeam::RemovePlayer(CBasePlayer*)
 T CCSTeam::Think()
 T CCSTeam::YouForgotToImplementOrDeclareServerClass()
 T CCSTeam::~CCSTeam()
 T CCSWeaponInfo::CCSWeaponInfo()
 T CCSWeaponInfo::Parse(KeyValues*, char const*)
 T CC_AI_Disable()
 T CC_AI_GraphConnect()
 T CC_AI_LOS_Debug(ConVar*, char const*)
 T CC_AI_NextHull()
 T CC_AI_Nodes()
 T CC_AI_Resume()
 T CC_AI_ShowConnect()
 T CC_AI_ShowFlyConnect()
 T CC_AI_ShowGrid()
 T CC_AI_ShowHints()
 T CC_AI_ShowHull()
 T CC_AI_ShowJumpConnect()
 T CC_AI_ShowVisibility()
 T CC_AI_Step()
 T CC_AirDensity()
 T CC_BloodSpray()
 T CC_CH_CreateAirboat()
 T CC_CH_CreateJeep()
 T CC_DrawCross()
 T CC_DrawLine()
 T CC_Ent_AbsBox()
 T CC_Ent_BBox()
 T CC_Ent_Dump()
 T CC_Ent_Fire()
 T CC_Ent_FireTarget()
 T CC_Ent_Info()
 T CC_Ent_Messages()
 T CC_Ent_Name()
 T CC_Ent_Pause()
 T CC_Ent_Picker()
 T CC_Ent_Pivot()
 T CC_Ent_RBox()
 T CC_Ent_Remove()
 T CC_Ent_RemoveAll()
 T CC_Ent_SetName()
 T CC_Ent_Show_Response_Criteria()
 T CC_Ent_Step()
 T CC_Ent_Text()
 T CC_God_f()
 T CC_GroundList_f()
 T CC_HurtMe_f()
 T CC_KDTreeTest()
 T CC_NPC_Bipass()
 T CC_NPC_Combat()
 T CC_NPC_Conditions()
 T CC_NPC_Create()
 T CC_NPC_Create_Aimed()
 T CC_NPC_Destroy()
 T CC_NPC_DestroyUnselected()
 T CC_NPC_Enemies()
 T CC_NPC_Focus()
 T CC_NPC_Freeze()
 T CC_NPC_Go()
 T CC_NPC_GoRandom()
 T CC_NPC_Kill()
 T CC_NPC_Nearest()
 T CC_NPC_Reset()
 T CC_NPC_Route()
 T CC_NPC_Select()
 T CC_NPC_Task_Text()
 T CC_NPC_Tasks()
 T CC_NPC_ViewSteeringRegulations()
 T CC_NPC_ViewSteeringRegulationsAll()
 T CC_NPC_Viewcone()
 T CC_Notarget_f()
 T CC_Player_Buddha()
 T CC_Player_BugBaitSwap()
 T CC_Player_FOV()
 T CC_Player_Give()
 T CC_Player_Kill()
 T CC_Player_NoClip()
 T CC_Player_PhysSwap()
 T CC_Player_Say()
 T CC_Player_SayTeam()
 T CC_Player_SetModel()
 T CC_Player_TestDispatchEffect()
 T CC_Player_Use()
 T CC_Prop_Debug()
 T CC_Shake()
 T CC_Test_EHandle()
 T CC_Test_Entity_Blocker()
 T CC_VoxelTreeBox()
 T CC_VoxelTreePlayerView()
 T CC_VoxelTreeSphere()
 T CC_VoxelTreeView()
 T CC_WC_AirNodeEdit()
 T CC_WC_AirNodeEditFurther()
 T CC_WC_AirNodeEditNearer()
 T CC_WC_Create()
 T CC_WC_Destroy()
 T CC_WC_DestroyUndo()
 T CC_WC_LinkEdit()
 T CC_setang_f()
 T CC_setpos_f()
 T CChangeLevel::Activate()
 T CChangeLevel::AddDependentEntities(int, CBaseEntity**, int*, int)
 T CChangeLevel::AddTransitionToList(levellist_t*, int, char const*, char const*, edict_t*)
 T CChangeLevel::BuildChangeLevelList(levellist_t*, int)
 T CChangeLevel::BuildEntityTransitionList(CBaseEntity*, char const*, CBaseEntity**, int*, int)
 T CChangeLevel::ChangeLevelNow(CBaseEntity*)
 T CChangeLevel::ChangeList(levellist_t*, int)
 T CChangeLevel::ComputeEntitySaveFlags(CBaseEntity*)
 T CChangeLevel::FindLandmark(char const*)
 T CChangeLevel::GetBaseMap()
 T CChangeLevel::GetDataDescMap()
 T CChangeLevel::InTransitionVolume(CBaseEntity*, char const*)
 T CChangeLevel::InputChangeLevel(inputdata_t&)
 T CChangeLevel::IsEntityInTransition(CBaseEntity*)
 T CChangeLevel::KeyValue(char const*, char const*)
 T CChangeLevel::NotifyEntitiesOutOfTransition()
 T CChangeLevel::Spawn()
 T CChangeLevel::TouchChangeLevel(CBaseEntity*)
 T CChoreoActor::AddChannel(CChoreoChannel*)
 T CChoreoActor::CChoreoActor()
 T CChoreoActor::CChoreoActor(char const*)
 T CChoreoActor::FindChannel(char const*)
 T CChoreoActor::FindChannelIndex(CChoreoChannel*)
 T CChoreoActor::GetActive() const
 T CChoreoActor::GetChannel(int)
 T CChoreoActor::GetFacePoserModelName() const
 T CChoreoActor::GetName()
 T CChoreoActor::GetNumChannels()
 T CChoreoActor::Init()
 T CChoreoActor::MarkForSaveAll(bool)
 T CChoreoActor::RemoveAllChannels()
 T CChoreoActor::RemoveChannel(CChoreoChannel*)
 T CChoreoActor::SetActive(bool)
 T CChoreoActor::SetFacePoserModelName(char const*)
 T CChoreoActor::SetName(char const*)
 T CChoreoActor::SwapChannels(int, int)
 T CChoreoActor::operator=(CChoreoActor const&)
 T CChoreoChannel::AddEvent(CChoreoEvent*)
 T CChoreoChannel::CChoreoChannel()
 T CChoreoChannel::CChoreoChannel(char const*)
 T CChoreoChannel::FindEventIndex(CChoreoEvent*)
 T CChoreoChannel::GetActive() const
 T CChoreoChannel::GetActor()
 T CChoreoChannel::GetEvent(int)
 T CChoreoChannel::GetName()
 T CChoreoChannel::GetNumEvents()
 T CChoreoChannel::GetSortedCombinedEventList(char const*, CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >&)
 T CChoreoChannel::Init()
 T CChoreoChannel::MarkForSaveAll(bool)
 T CChoreoChannel::ReconcileCloseCaption()
 T CChoreoChannel::ReconcileGestureTimes()
 T CChoreoChannel::RemoveAllEvents()
 T CChoreoChannel::RemoveEvent(CChoreoEvent*)
 T CChoreoChannel::SetActive(bool)
 T CChoreoChannel::SetActor(CChoreoActor*)
 T CChoreoChannel::SetName(char const*)
 T CChoreoChannel::operator=(CChoreoChannel const&)
 T CChoreoEvent::AddAbsoluteTag(CChoreoEvent::AbsTagType, char const*, float)
 T CChoreoEvent::AddEventDependency(CChoreoEvent*)
 T CChoreoEvent::AddRamp(float, float, bool)
 T CChoreoEvent::AddRelativeTag(char const*, float)
 T CChoreoEvent::AddTimingTag(char const*, float, bool)
 T CChoreoEvent::AddTrack(char const*)
 T CChoreoEvent::CCTypeForName(char const*)
 T CChoreoEvent::CChoreoEvent(CChoreoScene*)
 T CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*)
 T CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*, char const*)
 T CChoreoEvent::CheckProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::ClearAllAbsoluteTags(CChoreoEvent::AbsTagType)
 T CChoreoEvent::ClearAllRelativeTags()
 T CChoreoEvent::ClearAllTimingTags()
 T CChoreoEvent::ClearEventDependencies()
 T CChoreoEvent::ClearRamp()
 T CChoreoEvent::ComputeCombinedBaseFileName(char*, int, bool)
 T CChoreoEvent::ContinueProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::DeleteRamp(int)
 T CChoreoEvent::FindAbsoluteTag(CChoreoEvent::AbsTagType, char const*)
 T CChoreoEvent::FindEntryTag(CChoreoEvent::AbsTagType)
 T CChoreoEvent::FindExitTag(CChoreoEvent::AbsTagType)
 T CChoreoEvent::FindRelativeTag(char const*)
 T CChoreoEvent::FindTimingTag(char const*)
 T CChoreoEvent::FindTrack(char const*)
 T CChoreoEvent::GetAbsoluteTag(CChoreoEvent::AbsTagType, int)
 T CChoreoEvent::GetActor()
 T CChoreoEvent::GetBoundedAbsoluteTagPercentage(CChoreoEvent::AbsTagType, int)
 T CChoreoEvent::GetBoundedRamp(int)
 T CChoreoEvent::GetChannel()
 T CChoreoEvent::GetCloseCaptionToken() const
 T CChoreoEvent::GetCloseCaptionTokenValid() const
 T CChoreoEvent::GetCloseCaptionType() const
 T CChoreoEvent::GetCompletion(float)
 T CChoreoEvent::GetDescription()
 T CChoreoEvent::GetDistanceStyle(char*, int)
 T CChoreoEvent::GetDistanceToTarget()
 T CChoreoEvent::GetDuration()
 T CChoreoEvent::GetEndTime()
 T CChoreoEvent::GetEventDependencies(CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >&)
 T CChoreoEvent::GetFlexAnimationTrack(int)
 T CChoreoEvent::GetGestureSequenceDuration(float&)
 T CChoreoEvent::GetIntensity(float)
 T CChoreoEvent::GetLastSlaveEndTime() const
 T CChoreoEvent::GetLoopCount()
 T CChoreoEvent::GetMixer() const
 T CChoreoEvent::GetMovementStyle(char*, int)
 T CChoreoEvent::GetName()
 T CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType)
 T CChoreoEvent::GetNumFlexAnimationTracks()
 T CChoreoEvent::GetNumLoopsRemaining()
 T CChoreoEvent::GetNumRelativeTags()
 T CChoreoEvent::GetNumSlaves() const
 T CChoreoEvent::GetNumTimingTags()
 T CChoreoEvent::GetOriginalPercentageFromPlaybackPercentage(float)
 T CChoreoEvent::GetParameters()
 T CChoreoEvent::GetParameters2()
 T CChoreoEvent::GetPitch() const
 T CChoreoEvent::GetPlaybackCloseCaptionToken(char*, int)
 T CChoreoEvent::GetPlaybackPercentageFromOriginalPercentage(float)
 T CChoreoEvent::GetRamp(int)
 T CChoreoEvent::GetRampCount()
 T CChoreoEvent::GetRampIntensity(float)
 T CChoreoEvent::GetRelativeTag(int)
 T CChoreoEvent::GetRelativeTagName()
 T CChoreoEvent::GetRelativeWavName()
 T CChoreoEvent::GetRequiredCombinedChecksum()
 T CChoreoEvent::GetScene()
 T CChoreoEvent::GetStartTime()
 T CChoreoEvent::GetSubScene()
 T CChoreoEvent::GetTimingTag(int)
 T CChoreoEvent::GetTrackLookupSet()
 T CChoreoEvent::GetType()
 T CChoreoEvent::GetYaw() const
 T CChoreoEvent::HasEndTime()
 T CChoreoEvent::Init(CChoreoScene*)
 T CChoreoEvent::IsCombinedUsingGenderToken() const
 T CChoreoEvent::IsFixedLength()
 T CChoreoEvent::IsLockBodyFacing()
 T CChoreoEvent::IsProcessing() const
 T CChoreoEvent::IsResumeCondition()
 T CChoreoEvent::IsSuppressingCaptionAttenuation() const
 T CChoreoEvent::IsUsingCombinedFile() const
 T CChoreoEvent::IsUsingRelativeTag()
 T CChoreoEvent::NameForAbsoluteTagType(CChoreoEvent::AbsTagType)
 T CChoreoEvent::NameForCCType(CChoreoEvent::CLOSECAPTION)
 T CChoreoEvent::NameForType(CChoreoEvent::EVENTTYPE)
 T CChoreoEvent::OffsetEndTime(float)
 T CChoreoEvent::OffsetStartTime(float)
 T CChoreoEvent::OffsetTime(float)
 T CChoreoEvent::OnEndTimeChanged()
 T CChoreoEvent::PreventTagOverlap()
 T CChoreoEvent::RemoveAbsoluteTag(CChoreoEvent::AbsTagType, char const*)
 T CChoreoEvent::RemoveAllTracks()
 T CChoreoEvent::RemoveOutOfRangeRampSamples()
 T CChoreoEvent::RemoveRelativeTag(char const*)
 T CChoreoEvent::RemoveTimingTag(char const*)
 T CChoreoEvent::RemoveTrack(int)
 T CChoreoEvent::RescaleGestureTimes(float, float)
 T CChoreoEvent::ResetProcessing()
 T CChoreoEvent::ResortRamp()
 T CChoreoEvent::SetActor(CChoreoActor*)
 T CChoreoEvent::SetChannel(CChoreoChannel*)
 T CChoreoEvent::SetCloseCaptionToken(char const*)
 T CChoreoEvent::SetCloseCaptionTokenValid(bool)
 T CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
 T CChoreoEvent::SetCombinedUsingGenderToken(bool)
 T CChoreoEvent::SetDistanceToTarget(float)
 T CChoreoEvent::SetEndTime(float)
 T CChoreoEvent::SetFixedLength(bool)
 T CChoreoEvent::SetGestureSequenceDuration(float)
 T CChoreoEvent::SetLastSlaveEndTime(float)
 T CChoreoEvent::SetLockBodyFacing(bool)
 T CChoreoEvent::SetLoopCount(int)
 T CChoreoEvent::SetMixer(CAudioMixer*)
 T CChoreoEvent::SetName(char const*)
 T CChoreoEvent::SetNumLoopsRemaining(int)
 T CChoreoEvent::SetNumSlaves(int)
 T CChoreoEvent::SetParameters(char const*)
 T CChoreoEvent::SetParameters2(char const*)
 T CChoreoEvent::SetPitch(int)
 T CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
 T CChoreoEvent::SetResumeCondition(bool)
 T CChoreoEvent::SetScene(CChoreoScene*)
 T CChoreoEvent::SetStartTime(float)
 T CChoreoEvent::SetSubScene(CChoreoScene*)
 T CChoreoEvent::SetSuppressingCaptionAttenuation(bool)
 T CChoreoEvent::SetTrackLookupSet(bool)
 T CChoreoEvent::SetType(CChoreoEvent::EVENTTYPE)
 T CChoreoEvent::SetUsingCombinedFile(bool)
 T CChoreoEvent::SetUsingRelativeTag(bool, char const*, char const*)
 T CChoreoEvent::SetYaw(int)
 T CChoreoEvent::SnapTime(float)
 T CChoreoEvent::SnapTimes()
 T CChoreoEvent::StartProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::StopProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::TypeForAbsoluteTagName(char const*)
 T CChoreoEvent::TypeForName(char const*)
 T CChoreoEvent::ValidateCombinedFile()
 T CChoreoEvent::VerifyTagOrder()
 T CChoreoEvent::_GetIntensity(float)
 T CChoreoEvent::operator=(CChoreoEvent const&)
 T CChoreoEvent::~CChoreoEvent()
 T CChoreoEventCallback::CChoreoEventCallback()
 T CChoreoEventCallback::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T CChoreoEventCallback::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T CChoreoEventCallback::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T CChoreoEventCallback::SetScene(CSceneEntity*)
 T CChoreoEventCallback::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T CChoreoScene::AddPauseEventDependency(CChoreoEvent*, CChoreoEvent*)
 T CChoreoScene::AddSceneRamp(float, float, bool)
 T CChoreoScene::AllocActor()
 T CChoreoScene::AllocChannel()
 T CChoreoScene::AllocEvent()
 T CChoreoScene::CChoreoScene(IChoreoEventCallback*)
 T CChoreoScene::CheckEventCompletion()
 T CChoreoScene::ClearPauseEventDependencies()
 T CChoreoScene::ClearSceneRamp()
 T CChoreoScene::DeleteReferencedObjects(CChoreoActor*)
 T CChoreoScene::DeleteReferencedObjects(CChoreoChannel*)
 T CChoreoScene::DeleteReferencedObjects(CChoreoEvent*)
 T CChoreoScene::DeleteSceneRamp(int)
 T CChoreoScene::DestroyActor(CChoreoActor*)
 T CChoreoScene::DestroyChannel(CChoreoChannel*)
 T CChoreoScene::DestroyEvent(CChoreoEvent*)
 T CChoreoScene::EventLess(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&)
 T CChoreoScene::EventThink(CChoreoEvent*, float, float, bool, CChoreoScene::PROCESSING_TYPE&)
 T CChoreoScene::ExportEvents(char const*, CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >&)
 T CChoreoScene::ExportMarkedToFile(char const*)
 T CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
 T CChoreoScene::FileSaveActor(CUtlBuffer&, int, CChoreoActor*)
 T CChoreoScene::FileSaveChannel(CUtlBuffer&, int, CChoreoChannel*)
 T CChoreoScene::FileSaveEvent(CUtlBuffer&, int, CChoreoEvent*)
 T CChoreoScene::FileSaveFlexAnimationTrack(CUtlBuffer&, int, CFlexAnimationTrack*)
 T CChoreoScene::FileSaveFlexAnimations(CUtlBuffer&, int, CChoreoEvent*)
 T CChoreoScene::FileSaveHeader(CUtlBuffer&)
 T CChoreoScene::FileSaveRamp(CUtlBuffer&, int, CChoreoEvent*)
 T CChoreoScene::FileSaveScaleSettings(CUtlBuffer&, int, CChoreoScene*)
 T CChoreoScene::FileSaveSceneRamp(CUtlBuffer&, int, CChoreoScene*)
 T CChoreoScene::FindActor(char const*)
 T CChoreoScene::FindActorIndex(CChoreoActor*)
 T CChoreoScene::FindAdjustedEndTime()
 T CChoreoScene::FindAdjustedStartTime()
 T CChoreoScene::FindPauseBetweenTimes(float, float)
 T CChoreoScene::FindStopTime()
 T CChoreoScene::FindTagByName(char const*, char const*)
 T CChoreoScene::FindTargetingEvent(char const*, char const*)
 T CChoreoScene::GetActor(int)
 T CChoreoScene::GetBoundedSceneRamp(int)
 T CChoreoScene::GetChannel(int)
 T CChoreoScene::GetEvent(int)
 T CChoreoScene::GetFilename() const
 T CChoreoScene::GetMapname()
 T CChoreoScene::GetNumActors()
 T CChoreoScene::GetNumChannels()
 T CChoreoScene::GetNumEvents()
 T CChoreoScene::GetSceneFPS() const
 T CChoreoScene::GetSceneRamp(int)
 T CChoreoScene::GetSceneRampCount()
 T CChoreoScene::GetSceneRampIntensity(float)
 T CChoreoScene::GetSceneTimes(float&, float&)
 T CChoreoScene::GetTime()
 T CChoreoScene::GetTimeZoom(char const*)
 T CChoreoScene::HasFlexAnimation()
 T CChoreoScene::HasUnplayedSpeech()
 T CChoreoScene::ImportEvents(ISceneTokenProcessor*, CChoreoActor*, CChoreoChannel*)
 T CChoreoScene::Init(IChoreoEventCallback*)
 T CChoreoScene::IsBackground()
 T CChoreoScene::IsSubScene() const
 T CChoreoScene::IsTimeInRange(float, float, float)
 T CChoreoScene::IsUsingFrameSnap() const
 T CChoreoScene::LoopToTime(float)
 T CChoreoScene::MarkForSaveAll(bool)
 T CChoreoScene::Merge(CChoreoScene*)
 T CChoreoScene::ParseActor()
 T CChoreoScene::ParseChannel(CChoreoActor*)
 T CChoreoScene::ParseEvent(CChoreoActor*, CChoreoChannel*)
 T CChoreoScene::ParseFPS()
 T CChoreoScene::ParseFacePoserModel(CChoreoActor*)
 T CChoreoScene::ParseFlexAnimations(ISceneTokenProcessor*, CChoreoEvent*, bool)
 T CChoreoScene::ParseFromBuffer(char const*, ISceneTokenProcessor*)
 T CChoreoScene::ParseMapname()
 T CChoreoScene::ParseRamp(ISceneTokenProcessor*, CChoreoEvent*)
 T CChoreoScene::ParseScaleSettings(ISceneTokenProcessor*, CChoreoScene*)
 T CChoreoScene::ParseSceneRamp(ISceneTokenProcessor*, CChoreoScene*)
 T CChoreoScene::ParseSnap()
 T CChoreoScene::Print()
 T CChoreoScene::PrintActor(int, CChoreoActor*)
 T CChoreoScene::PrintChannel(int, CChoreoChannel*)
 T CChoreoScene::PrintEvent(int, CChoreoEvent*)
 T CChoreoScene::ReconcileCloseCaption()
 T CChoreoScene::ReconcileGestureTimes()
 T CChoreoScene::ReconcileTags()
 T CChoreoScene::RemoveActor(CChoreoActor*)
 T CChoreoScene::RemoveOutOfRangeSceneRampSamples()
 T CChoreoScene::ResetSimulation(bool, float, float)
 T CChoreoScene::ResortSceneRamp()
 T CChoreoScene::ResumeSimulation()
 T CChoreoScene::SaveToFile(char const*)
 T CChoreoScene::SceneMsg(char const*, ...)
 T CChoreoScene::SetBackground(bool)
 T CChoreoScene::SetEventCallbackInterface(IChoreoEventCallback*)
 T CChoreoScene::SetMapname(char const*)
 T CChoreoScene::SetPrintFunc(void (*)(char const*, ...))
 T CChoreoScene::SetSceneFPS(int)
 T CChoreoScene::SetSoundFileStartupLatency(float)
 T CChoreoScene::SetSubScene(bool)
 T CChoreoScene::SetTime(float)
 T CChoreoScene::SetTimeZoom(char const*, int)
 T CChoreoScene::SetUsingFrameSnap(bool)
 T CChoreoScene::SimulationFinished()
 T CChoreoScene::SnapTime(float)
 T CChoreoScene::SwapActors(int, int)
 T CChoreoScene::Think(float)
 T CChoreoScene::choreoprintf(int, char const*, ...)
 T CChoreoScene::operator=(CChoreoScene const&)
 T CChoreoScene::~CChoreoScene()
 T CCollisionEvent::AddDamageEvent(CBaseEntity*, CTakeDamageInfo const&, IPhysicsObject*, bool, Vector const&, Vector const&)
 T CCollisionEvent::AddDamageInflictor(IPhysicsObject*, float, Vector const&, Vector const&, bool)
 T CCollisionEvent::AddImpulseEvent(IPhysicsObject*, Vector const&, Vector const&)
 T CCollisionEvent::AddSetVelocityEvent(IPhysicsObject*, Vector const&)
 T CCollisionEvent::AddTouchEvent(CBaseEntity*, CBaseEntity*, int, Vector const&, Vector const&)
 T CCollisionEvent::CCollisionEvent()
 T CCollisionEvent::DeltaTimeSinceLastFluid(CBaseEntity*)
 T CCollisionEvent::DispatchEndTouch(CBaseEntity*, CBaseEntity*)
 T CCollisionEvent::DispatchStartTouch(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&)
 T CCollisionEvent::EndTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::FindDamageInflictor(IPhysicsObject*)
 T CCollisionEvent::FindFriction(CBaseEntity*)
 T CCollisionEvent::FindOrAddPenetrateEvent(CBaseEntity*, CBaseEntity*)
 T CCollisionEvent::FluidEndTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FluidStartTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FrameUpdate()
 T CCollisionEvent::Friction(IPhysicsObject*, float, int, int, IPhysicsCollisionData*)
 T CCollisionEvent::GetInflictorVelocity(IPhysicsObject*, Vector&, Vector&)
 T CCollisionEvent::GetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >&)
 T CCollisionEvent::GetTriggerEvent(triggerevent_t*, CBaseEntity*)
 T CCollisionEvent::LevelShutdown()
 T CCollisionEvent::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::PostCollision(vcollisionevent_t*)
 T CCollisionEvent::PostSimulationFrame()
 T CCollisionEvent::PreCollision(vcollisionevent_t*)
 T CCollisionEvent::RestoreDamageInflictorState(IPhysicsObject*)
 T CCollisionEvent::RestoreDamageInflictorState(int, float)
 T CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 T CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 T CCollisionEvent::ShutdownFriction(friction_t&)
 T CCollisionEvent::StartTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::UpdateDamageEvents()
 T CCollisionEvent::UpdateFluidEvents()
 T CCollisionEvent::UpdateFrictionSounds()
 T CCollisionEvent::UpdateImpulseEvents()
 T CCollisionEvent::UpdatePenetrateEvents()
 T CCollisionEvent::UpdateSetVelocityEvents()
 T CCollisionEvent::UpdateTouchEvents()
 T CCollisionProperty::CCollisionProperty()
 T CCollisionProperty::CalcDistanceFromPoint(Vector const&) const
 T CCollisionProperty::CalcNearestPoint(Vector const&, Vector*) const
 T CCollisionProperty::CheckForUntouch()
 T CCollisionProperty::CollisionAABBToWorldAABB(Vector const&, Vector const&, Vector*, Vector*) const
 T CCollisionProperty::CollisionToNormalizedSpace(Vector const&, Vector*) const
 T CCollisionProperty::CollisionToWorldTransform() const
 T CCollisionProperty::ComputeCollisionSurroundingBox(bool, Vector*, Vector*)
 T CCollisionProperty::ComputeEntitySpaceHitboxSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::ComputeHitboxSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::ComputeRotationExpandedBounds(Vector*, Vector*)
 T CCollisionProperty::ComputeSupportMap(Vector const&) const
 T CCollisionProperty::ComputeSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::ComputeVPhysicsSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::CreatePartitionHandle()
 T CCollisionProperty::DestroyPartitionHandle()
 T CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox() const
 T CCollisionProperty::GetBaseMap()
 T CCollisionProperty::GetCollisionAngles() const
 T CCollisionProperty::GetCollisionGroup() const
 T CCollisionProperty::GetCollisionModel()
 T CCollisionProperty::GetCollisionModelIndex()
 T CCollisionProperty::GetCollisionOrigin() const
 T CCollisionProperty::GetDataDescMap()
 T CCollisionProperty::GetEntityHandle()
 T CCollisionProperty::GetIClientUnknown()
 T CCollisionProperty::GetPredDescMap()
 T CCollisionProperty::GetRootParentToWorldTransform() const
 T CCollisionProperty::GetSolid() const
 T CCollisionProperty::Init(CBaseEntity*)
 T CCollisionProperty::IsPointInBounds(Vector const&) const
 T CCollisionProperty::MarkPartitionHandleDirty()
 T CCollisionProperty::MarkSurroundingBoundsDirty()
 T CCollisionProperty::NormalizedToCollisionSpace(Vector const&, Vector*) const
 T CCollisionProperty::NormalizedToWorldSpace(Vector const&, Vector*) const
 T CCollisionProperty::OBBMaxs() const
 T CCollisionProperty::OBBMins() const
 T CCollisionProperty::RandomPointInBounds(Vector const&, Vector const&, Vector*) const
 T CCollisionProperty::SetCollisionBounds(Vector const&, Vector const&)
 T CCollisionProperty::SetSolid(SolidType_t)
 T CCollisionProperty::SetSolidFlags(int)
 T CCollisionProperty::SetSurroundingBoundsType(SurroundingBoundsType_t, Vector const*, Vector const*)
 T CCollisionProperty::ShouldTouchTriggers() const
 T CCollisionProperty::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::UpdatePartition()
 T CCollisionProperty::UpdateServerPartitionMask()
 T CCollisionProperty::UseTriggerBounds(bool, float)
 T CCollisionProperty::WorldSpaceSurroundingBounds(Vector*, Vector*)
 T CCollisionProperty::WorldSpaceTriggerBounds(Vector*, Vector*) const
 T CCollisionProperty::WorldToNormalizedSpace(Vector const&, Vector*) const
 T CCollisionProperty::~CCollisionProperty()
 T CConstantForceController::GetBaseMap()
 T CConstantForceController::ScaleConstantForce(float)
 T CConstantForceController::SetConstantForce(Vector const&, Vector const&)
 T CConstantForceController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CConstraintAnchor::GetBaseMap()
 T CConstraintAnchor::GetDataDescMap()
 T CCopyRecipientFilter::GetBaseMap()
 T CCredits::GetBaseMap()
 T CCredits::GetDataDescMap()
 T CCredits::InputRollCredits(inputdata_t&)
 T CCredits::InputRollOutroCredits(inputdata_t&)
 T CCredits::InputShowLogo(inputdata_t&)
 T CCredits::Spawn()
 T CCycler::GenericCyclerSpawn(char*, Vector, Vector)
 T CCycler::GetBaseMap()
 T CCycler::GetDataDescMap()
 T CCycler::InputSetSequence(inputdata_t&)
 T CCycler::OnTakeDamage(CTakeDamageInfo const&)
 T CCycler::Spawn()
 T CCycler::Think()
 T CCycler::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CDEagle::CDEagle()
 T CDEagle::DEAGLEFire(float)
 T CDEagle::Deploy()
 T CDEagle::GetClassName()
 T CDEagle::GetPredDescMap()
 T CDEagle::GetServerClass()
 T CDEagle::PrimaryAttack()
 T CDEagle::Reload()
 T CDEagle::Spawn()
 T CDEagle::WeaponIdle()
 T CDEagle::YouForgotToImplementOrDeclareServerClass()
 T CDamageModifier::AddModifierToEntity(CBaseEntity*)
 T CDamageModifier::CDamageModifier()
 T CDamageModifier::GetCharacter() const
 T CDamageModifier::GetModifier() const
 T CDamageModifier::IsDamageDoneToMe() const
 T CDamageModifier::RemoveModifier()
 T CDamageModifier::SetDoneToMe(bool)
 T CDamageModifier::SetModifier(float)
 T CDecal::Activate()
 T CDecal::GetBaseMap()
 T CDecal::GetDataDescMap()
 T CDecal::InputActivate(inputdata_t&)
 T CDecal::KeyValue(char const*, char const*)
 T CDecal::Spawn()
 T CDecal::StaticDecal()
 T CDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CDecalEmitterSystem::Clear()
 T CDecalEmitterSystem::GetDecalIndexForName(char const*)
 T CDecalEmitterSystem::ImpactDecalForGameMaterial(int)
 T CDecalEmitterSystem::Init()
 T CDecalEmitterSystem::LevelInitPreEntity()
 T CDecalEmitterSystem::LoadDecalsFromScript(char const*)
 T CDecalEmitterSystem::Shutdown()
 T CDecalEmitterSystem::TranslateDecalForGameMaterial(char const*, unsigned char)
 T CDefaultResponseSystem::Init()
 T CDefaultResponseSystem::Shutdown()
 T CDirtySpatialPartitionEntityList::AddEntity(CBaseEntity*)
 T CDirtySpatialPartitionEntityList::CDirtySpatialPartitionEntityList()
 T CDirtySpatialPartitionEntityList::Init()
 T CDirtySpatialPartitionEntityList::LevelShutdownPostEntity()
 T CDirtySpatialPartitionEntityList::OnPreQuery()
 T CDirtySpatialPartitionEntityList::Shutdown()
 T CDirtySpatialPartitionEntityList::~CDirtySpatialPartitionEntityList()
 T CDynamicLight::DynamicLightThink()
 T CDynamicLight::GetBaseMap()
 T CDynamicLight::GetClassName()
 T CDynamicLight::GetDataDescMap()
 T CDynamicLight::GetServerClass()
 T CDynamicLight::InputToggle(inputdata_t&)
 T CDynamicLight::InputTurnOff(inputdata_t&)
 T CDynamicLight::InputTurnOn(inputdata_t&)
 T CDynamicLight::KeyValue(char const*, char const*)
 T CDynamicLight::Spawn()
 T CDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CDynamicProp::AnimThink()
 T CDynamicProp::CDynamicProp()
 T CDynamicProp::CreateVPhysics()
 T CDynamicProp::GetBaseMap()
 T CDynamicProp::GetClassName()
 T CDynamicProp::GetDataDescMap()
 T CDynamicProp::GetRootPhysicsObjectForBreak()
 T CDynamicProp::GetServerClass()
 T CDynamicProp::HandleAnimEvent(animevent_t*)
 T CDynamicProp::InputSetAnimation(inputdata_t&)
 T CDynamicProp::InputSetDefaultAnimation(inputdata_t&)
 T CDynamicProp::InputTurnOff(inputdata_t&)
 T CDynamicProp::InputTurnOn(inputdata_t&)
 T CDynamicProp::OnRestore()
 T CDynamicProp::OverridePropdata()
 T CDynamicProp::PropSetAnim(char const*)
 T CDynamicProp::PropSetSequence(int)
 T CDynamicProp::Spawn()
 T CDynamicProp::UpdateOnRemove()
 T CDynamicProp::YouForgotToImplementOrDeclareServerClass()
 T CEffectScriptElement::CEffectScriptElement()
 T CEffectsServer::Beam(Vector const&, Vector const&, int, int, unsigned char, unsigned char, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
 T CEffectsServer::CEffectsServer()
 T CEffectsServer::Dust(Vector const&, Vector const&, float, float)
 T CEffectsServer::EnergySplash(Vector const&, Vector const&, bool)
 T CEffectsServer::IsServer()
 T CEffectsServer::MetalSparks(Vector const&, Vector const&)
 T CEffectsServer::MuzzleFlash(Vector const&, QAngle const&, float, int)
 T CEffectsServer::Ricochet(Vector const&, Vector const&)
 T CEffectsServer::Smoke(Vector const&, int, float, float)
 T CEffectsServer::Sparks(Vector const&, int, int, Vector const*)
 T CEffectsServer::Time()
 T CEffectsServer::~CEffectsServer()
 T CEmbers::EmberUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEmbers::GetBaseMap()
 T CEmbers::GetClassName()
 T CEmbers::GetDataDescMap()
 T CEmbers::GetServerClass()
 T CEmbers::Precache()
 T CEmbers::Spawn()
 T CEmbers::YouForgotToImplementOrDeclareServerClass()
 T CEntInfo::ClearLinks()
 T CEntityBlocker::Create(Vector const&, Vector const&, Vector const&, CBaseEntity*, bool)
 T CEntityBlocker::Spawn()
 T CEntityBlocker::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CEntityDissolve::AttachToEntity(CBaseEntity*)
 T CEntityDissolve::CEntityDissolve()
 T CEntityDissolve::Create(CBaseEntity*, CBaseEntity*)
 T CEntityDissolve::Create(CBaseEntity*, char const*, float, int, bool*)
 T CEntityDissolve::DissolveThink()
 T CEntityDissolve::ElectrocuteThink()
 T CEntityDissolve::GetBaseMap()
 T CEntityDissolve::GetClassName()
 T CEntityDissolve::GetDataDescMap()
 T CEntityDissolve::GetServerClass()
 T CEntityDissolve::InputDissolve(inputdata_t&)
 T CEntityDissolve::Precache()
 T CEntityDissolve::SetStartTime(float)
 T CEntityDissolve::Spawn()
 T CEntityDissolve::YouForgotToImplementOrDeclareServerClass()
 T CEntityDissolve::~CEntityDissolve()
 T CEntityFactoryDictionary::CEntityFactoryDictionary()
 T CEntityFactoryDictionary::Create(char const*)
 T CEntityFactoryDictionary::Destroy(char const*, IServerNetworkable*)
 T CEntityFactoryDictionary::FindFactory(char const*)
 T CEntityFactoryDictionary::InstallFactory(IEntityFactory*, char const*)
 T CEntityFlame::AttachToEntity(CBaseEntity*)
 T CEntityFlame::CEntityFlame()
 T CEntityFlame::Create(CBaseEntity*, bool)
 T CEntityFlame::FlameThink()
 T CEntityFlame::GetBaseMap()
 T CEntityFlame::GetClassName()
 T CEntityFlame::GetDataDescMap()
 T CEntityFlame::GetServerClass()
 T CEntityFlame::InputIgnite(inputdata_t&)
 T CEntityFlame::Precache()
 T CEntityFlame::SetLifetime(float)
 T CEntityFlame::SetUseHitboxes(bool)
 T CEntityFlame::UpdateOnRemove()
 T CEntityFlame::YouForgotToImplementOrDeclareServerClass()
 T CEntityList::AddEntity(CBaseEntity*)
 T CEntityList::CEntityList()
 T CEntityList::DeleteEntity(CBaseEntity*)
 T CEntityList::~CEntityList()
 T CEntityMapData::CurrentBufferPosition()
 T CEntityMapData::ExtractValue(char const*, char*)
 T CEntityMapData::GetFirstKey(char*, char*)
 T CEntityMapData::GetNextKey(char*, char*)
 T CEntityMapData::SetValue(char const*, char*, int)
 T CEntityParticleTrail::AttachToEntity(CBaseEntity*)
 T CEntityParticleTrail::Create(CBaseEntity*, EntityParticleTrailInfo_t const&, CBaseEntity*)
 T CEntityParticleTrail::DecrementRefCount()
 T CEntityParticleTrail::Destroy(CBaseEntity*, EntityParticleTrailInfo_t const&)
 T CEntityParticleTrail::GetBaseMap()
 T CEntityParticleTrail::GetClassName()
 T CEntityParticleTrail::GetDataDescMap()
 T CEntityParticleTrail::GetServerClass()
 T CEntityParticleTrail::IncrementRefCount()
 T CEntityParticleTrail::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CEntityParticleTrail::SetTransmit(CCheckTransmitInfo*, bool)
 T CEntityParticleTrail::Spawn()
 T CEntityParticleTrail::UpdateOnRemove()
 T CEntityParticleTrail::YouForgotToImplementOrDeclareServerClass()
 T CEntitySaveRestoreBlockHandler::DoRestoreEntity(CBaseEntity*, IRestore*)
 T CEntitySaveRestoreBlockHandler::FindGlobalEntity(string_t, string_t)
 T CEntitySaveRestoreBlockHandler::GetBlockName()
 T CEntitySaveRestoreBlockHandler::ModelSpaceLandmark(int)
 T CEntitySaveRestoreBlockHandler::PostRestore()
 T CEntitySaveRestoreBlockHandler::PostSave()
 T CEntitySaveRestoreBlockHandler::PreRestore()
 T CEntitySaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CEntitySaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CEntitySaveRestoreBlockHandler::RestoreEntity(CBaseEntity*, IRestore*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::RestoreGlobalEntity(CBaseEntity*, CSaveRestoreData*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::Save(ISave*)
 T CEntitySaveRestoreBlockHandler::SaveInitEntities(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CEntitySaveUtils::AddLevelTransitionSaveDependency(CBaseEntity*, CBaseEntity*)
 T CEntitySaveUtils::GetEntityDependencies(CBaseEntity*, int, CBaseEntity**)
 T CEntitySaveUtils::GetEntityDependencyCount(CBaseEntity*)
 T CEntitySaveUtils::PostSave()
 T CEntitySaveUtils::PreSave()
 T CEntitySphereQuery::CEntitySphereQuery(Vector const&, float, int)
 T CEntitySphereQuery::GetCurrentEntity()
 T CEntityTouchManager::FrameUpdatePostEntityThink()
 T CEnvBeam::Activate()
 T CEnvBeam::BeamUpdateVars()
 T CEnvBeam::GetBaseMap()
 T CEnvBeam::GetDataDescMap()
 T CEnvBeam::InputStrikeOnce(inputdata_t&)
 T CEnvBeam::InputToggle(inputdata_t&)
 T CEnvBeam::InputTurnOff(inputdata_t&)
 T CEnvBeam::InputTurnOn(inputdata_t&)
 T CEnvBeam::PassesTouchFilters(CBaseEntity*)
 T CEnvBeam::Precache()
 T CEnvBeam::RandomArea()
 T CEnvBeam::RandomPoint(Vector const&)
 T CEnvBeam::Spawn()
 T CEnvBeam::Strike()
 T CEnvBeam::StrikeThink()
 T CEnvBeam::TurnOff()
 T CEnvBeam::TurnOn()
 T CEnvBeam::UpdateThink()
 T CEnvBeam::Zap(Vector const&, Vector const&)
 T CEnvBeverage::GetBaseMap()
 T CEnvBeverage::GetDataDescMap()
 T CEnvBeverage::InputActivate(inputdata_t&)
 T CEnvBeverage::KeyValue(char const*, char const*)
 T CEnvBeverage::Precache()
 T CEnvBeverage::Spawn()
 T CEnvBeverage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvDetailController::CEnvDetailController()
 T CEnvDetailController::GetClassName()
 T CEnvDetailController::GetServerClass()
 T CEnvDetailController::KeyValue(char const*, char const*)
 T CEnvDetailController::UpdateTransmitState()
 T CEnvDetailController::YouForgotToImplementOrDeclareServerClass()
 T CEnvDetailController::~CEnvDetailController()
 T CEnvDustPuff::GetBaseMap()
 T CEnvDustPuff::GetDataDescMap()
 T CEnvDustPuff::InputSpawnDust(inputdata_t&)
 T CEnvEffectsScript::GetBaseMap()
 T CEnvEffectsScript::GetDataDescMap()
 T CEnvEffectsScript::GetScriptElementByName(char const*)
 T CEnvEffectsScript::HandleAnimEvent(animevent_t*)
 T CEnvEffectsScript::InputSetSequence(inputdata_t&)
 T CEnvEffectsScript::LoadFromBuffer(char const*, char const*)
 T CEnvEffectsScript::ParseNewEffect()
 T CEnvEffectsScript::ParseScriptFile()
 T CEnvEffectsScript::Precache()
 T CEnvEffectsScript::Spawn()
 T CEnvEffectsScript::SpriteEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::Think()
 T CEnvEffectsScript::TrailEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::UpdateTransmitState()
 T CEnvEntityMaker::Activate()
 T CEnvEntityMaker::CheckSpawnThink()
 T CEnvEntityMaker::FindTemplate()
 T CEnvEntityMaker::GetBaseMap()
 T CEnvEntityMaker::GetDataDescMap()
 T CEnvEntityMaker::HasRoomToSpawn()
 T CEnvEntityMaker::InputForceSpawn(inputdata_t&)
 T CEnvEntityMaker::IsPlayerLooking()
 T CEnvEntityMaker::Spawn()
 T CEnvEntityMaker::SpawnEntity()
 T CEnvExplosion::GetBaseMap()
 T CEnvExplosion::GetDataDescMap()
 T CEnvExplosion::InputExplode(inputdata_t&)
 T CEnvExplosion::KeyValue(char const*, char const*)
 T CEnvExplosion::Precache()
 T CEnvExplosion::Smoke()
 T CEnvExplosion::Spawn()
 T CEnvFade::GetBaseMap()
 T CEnvFade::GetDataDescMap()
 T CEnvFade::InputFade(inputdata_t&)
 T CEnvFade::Spawn()
 T CEnvFireSensor::GetBaseMap()
 T CEnvFireSensor::GetDataDescMap()
 T CEnvFireSensor::InputDisable(inputdata_t&)
 T CEnvFireSensor::InputEnable(inputdata_t&)
 T CEnvFireSensor::Spawn()
 T CEnvFireSensor::Think()
 T CEnvFireSensor::TurnOff()
 T CEnvFireSensor::TurnOn()
 T CEnvFireSource::GetBaseMap()
 T CEnvFireSource::GetDataDescMap()
 T CEnvFireSource::InputDisable(inputdata_t&)
 T CEnvFireSource::InputEnable(inputdata_t&)
 T CEnvFireSource::Spawn()
 T CEnvFireSource::Think()
 T CEnvFireSource::TurnOff()
 T CEnvFireSource::TurnOn()
 T CEnvFunnel::GetBaseMap()
 T CEnvFunnel::GetDataDescMap()
 T CEnvFunnel::Precache()
 T CEnvFunnel::Spawn()
 T CEnvFunnel::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvGlobal::DrawDebugTextOverlays()
 T CEnvGlobal::GetBaseMap()
 T CEnvGlobal::GetDataDescMap()
 T CEnvGlobal::InputRemove(inputdata_t&)
 T CEnvGlobal::InputToggle(inputdata_t&)
 T CEnvGlobal::InputTurnOff(inputdata_t&)
 T CEnvGlobal::InputTurnOn(inputdata_t&)
 T CEnvGlobal::Spawn()
 T CEnvGunfire::Activate()
 T CEnvGunfire::GetBaseMap()
 T CEnvGunfire::GetDataDescMap()
 T CEnvGunfire::InputDisable(inputdata_t&)
 T CEnvGunfire::InputEnable(inputdata_t&)
 T CEnvGunfire::Precache()
 T CEnvGunfire::ShootThink()
 T CEnvGunfire::Spawn()
 T CEnvGunfire::StartShooting()
 T CEnvGunfire::StopShooting()
 T CEnvGunfire::UpdateTarget()
 T CEnvHudHint::GetBaseMap()
 T CEnvHudHint::GetDataDescMap()
 T CEnvHudHint::InputShowHudHint(inputdata_t&)
 T CEnvHudHint::Precache()
 T CEnvHudHint::Spawn()
 T CEnvLaser::FireAtPoint(CGameTrace&)
 T CEnvLaser::GetBaseMap()
 T CEnvLaser::GetDataDescMap()
 T CEnvLaser::InputToggle(inputdata_t&)
 T CEnvLaser::InputTurnOff(inputdata_t&)
 T CEnvLaser::InputTurnOn(inputdata_t&)
 T CEnvLaser::IsOn()
 T CEnvLaser::KeyValue(char const*, char const*)
 T CEnvLaser::Precache()
 T CEnvLaser::Spawn()
 T CEnvLaser::StrikeThink()
 T CEnvLaser::TurnOff()
 T CEnvLaser::TurnOn()
 T CEnvLight::KeyValue(char const*, char const*)
 T CEnvLight::Spawn()
 T CEnvMicrophone::Activate()
 T CEnvMicrophone::ActivateSpeaker()
 T CEnvMicrophone::CanHearSound(CSound*, float&)
 T CEnvMicrophone::CanHearSound(int, soundlevel_t, float&, Vector const*)
 T CEnvMicrophone::GetBaseMap()
 T CEnvMicrophone::GetDataDescMap()
 T CEnvMicrophone::InputDisable(inputdata_t&)
 T CEnvMicrophone::InputEnable(inputdata_t&)
 T CEnvMicrophone::InputSetSpeakerName(inputdata_t&)
 T CEnvMicrophone::OnRestore()
 T CEnvMicrophone::OnSoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector> >&)
 T CEnvMicrophone::SoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector> >&)
 T CEnvMicrophone::Spawn()
 T CEnvMicrophone::Think()
 T CEnvMicrophone::~CEnvMicrophone()
 T CEnvMuzzleFlash::GetBaseMap()
 T CEnvMuzzleFlash::GetDataDescMap()
 T CEnvMuzzleFlash::InputFire(inputdata_t&)
 T CEnvMuzzleFlash::Spawn()
 T CEnvParticleScript::Activate()
 T CEnvParticleScript::CEnvParticleScript()
 T CEnvParticleScript::GetBaseMap()
 T CEnvParticleScript::GetClassName()
 T CEnvParticleScript::GetDataDescMap()
 T CEnvParticleScript::GetServerClass()
 T CEnvParticleScript::InputSetSequence(inputdata_t&)
 T CEnvParticleScript::Precache()
 T CEnvParticleScript::Spawn()
 T CEnvParticleScript::UpdateTransmitState()
 T CEnvParticleScript::YouForgotToImplementOrDeclareServerClass()
 T CEnvPlayerSurfaceTrigger::GetBaseMap()
 T CEnvPlayerSurfaceTrigger::GetDataDescMap()
 T CEnvPlayerSurfaceTrigger::InputDisable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::InputEnable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::OnRestore()
 T CEnvPlayerSurfaceTrigger::PlayerSurfaceChanged(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::SetPlayerSurface(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::Spawn()
 T CEnvPlayerSurfaceTrigger::UpdateMaterialThink()
 T CEnvPlayerSurfaceTrigger::~CEnvPlayerSurfaceTrigger()
 T CEnvQuadraticBeam::GetBaseMap()
 T CEnvQuadraticBeam::GetClassName()
 T CEnvQuadraticBeam::GetDataDescMap()
 T CEnvQuadraticBeam::GetServerClass()
 T CEnvQuadraticBeam::Spawn()
 T CEnvQuadraticBeam::YouForgotToImplementOrDeclareServerClass()
 T CEnvScreenOverlay::CEnvScreenOverlay()
 T CEnvScreenOverlay::GetBaseMap()
 T CEnvScreenOverlay::GetClassName()
 T CEnvScreenOverlay::GetDataDescMap()
 T CEnvScreenOverlay::GetServerClass()
 T CEnvScreenOverlay::InputStartOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputStopOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputSwitchOverlay(inputdata_t&)
 T CEnvScreenOverlay::UpdateTransmitState()
 T CEnvScreenOverlay::YouForgotToImplementOrDeclareServerClass()
 T CEnvShake::ApplyShake(ShakeCommand_t)
 T CEnvShake::GetBaseMap()
 T CEnvShake::GetDataDescMap()
 T CEnvShake::InputAmplitude(inputdata_t&)
 T CEnvShake::InputFrequency(inputdata_t&)
 T CEnvShake::InputStartShake(inputdata_t&)
 T CEnvShake::InputStopShake(inputdata_t&)
 T CEnvShake::OnRestore()
 T CEnvShake::Spawn()
 T CEnvShake::Think()
 T CEnvShake::~CEnvShake()
 T CEnvShooter::CreateGib()
 T CEnvShooter::GetBaseMap()
 T CEnvShooter::GetDataDescMap()
 T CEnvShooter::KeyValue(char const*, char const*)
 T CEnvShooter::Precache()
 T CEnvSoundscape::CEnvSoundscape()
 T CEnvSoundscape::Disable()
 T CEnvSoundscape::DrawDebugGeometryOverlays()
 T CEnvSoundscape::Enable()
 T CEnvSoundscape::GetBaseMap()
 T CEnvSoundscape::GetDataDescMap()
 T CEnvSoundscape::InRangeOfPlayer(CBasePlayer*)
 T CEnvSoundscape::InputDisable(inputdata_t&)
 T CEnvSoundscape::InputEnable(inputdata_t&)
 T CEnvSoundscape::InputToggleEnabled(inputdata_t&)
 T CEnvSoundscape::IsEnabled() const
 T CEnvSoundscape::KeyValue(char const*, char const*)
 T CEnvSoundscape::Precache()
 T CEnvSoundscape::Spawn()
 T CEnvSoundscape::Update()
 T CEnvSoundscape::UpdatePlayersInPVS()
 T CEnvSoundscape::UpdateTransmitState()
 T CEnvSoundscape::WriteAudioParamsTo(audioparams_t&)
 T CEnvSoundscape::~CEnvSoundscape()
 T CEnvSoundscapeProxy::Activate()
 T CEnvSoundscapeProxy::CEnvSoundscapeProxy()
 T CEnvSoundscapeProxy::GetBaseMap()
 T CEnvSoundscapeProxy::GetDataDescMap()
 T CEnvSoundscapeTriggerable::CEnvSoundscapeTriggerable()
 T CEnvSoundscapeTriggerable::DelegateEndTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::DelegateStartTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::GetBaseMap()
 T CEnvSoundscapeTriggerable::GetDataDescMap()
 T CEnvSoundscapeTriggerable::Think()
 T CEnvSpark::CEnvSpark()
 T CEnvSpark::GetBaseMap()
 T CEnvSpark::GetDataDescMap()
 T CEnvSpark::InputSparkOnce(inputdata_t&)
 T CEnvSpark::InputStartSpark(inputdata_t&)
 T CEnvSpark::InputStopSpark(inputdata_t&)
 T CEnvSpark::InputToggleSpark(inputdata_t&)
 T CEnvSpark::Precache()
 T CEnvSpark::SparkThink()
 T CEnvSpark::Spawn()
 T CEnvSplash::GetBaseMap()
 T CEnvSplash::GetDataDescMap()
 T CEnvSplash::InputSplash(inputdata_t&)
 T CEnvTracer::Activate()
 T CEnvTracer::GetBaseMap()
 T CEnvTracer::GetDataDescMap()
 T CEnvTracer::Spawn()
 T CEnvTracer::TracerThink()
 T CEnvWind::GetBaseMap()
 T CEnvWind::GetClassName()
 T CEnvWind::GetDataDescMap()
 T CEnvWind::GetServerClass()
 T CEnvWind::Precache()
 T CEnvWind::Spawn()
 T CEnvWind::UpdateTransmitState()
 T CEnvWind::WindThink()
 T CEnvWind::YouForgotToImplementOrDeclareServerClass()
 T CEnvWindShared::CEnvWindShared()
 T CEnvWindShared::ComputeWindVariation(float)
 T CEnvWindShared::Init(int, int, float, int, float)
 T CEnvWindShared::UpdateWindSound(float)
 T CEnvWindShared::WindThink(float)
 T CEnvWindShared::~CEnvWindShared()
 T CEnvZoom::GetBaseMap()
 T CEnvZoom::GetDataDescMap()
 T CEnvZoom::InputUnZoom(inputdata_t&)
 T CEnvZoom::InputZoom(inputdata_t&)
 T CEventAbsoluteTag::CEventAbsoluteTag(CChoreoEvent*, char const*, float)
 T CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
 T CEventAbsoluteTag::GetAbsoluteTime()
 T CEventAbsoluteTag::GetEntry()
 T CEventAbsoluteTag::GetEventTime()
 T CEventAbsoluteTag::GetExit()
 T CEventAbsoluteTag::GetLinear()
 T CEventAbsoluteTag::GetLocked()
 T CEventAbsoluteTag::GetName()
 T CEventAbsoluteTag::GetOwner()
 T CEventAbsoluteTag::GetPercentage()
 T CEventAbsoluteTag::SetAbsoluteTime(float)
 T CEventAbsoluteTag::SetEntry(bool)
 T CEventAbsoluteTag::SetEventTime(float)
 T CEventAbsoluteTag::SetExit(bool)
 T CEventAbsoluteTag::SetLinear(bool)
 T CEventAbsoluteTag::SetLocked(bool)
 T CEventAbsoluteTag::SetOwner(CChoreoEvent*)
 T CEventAbsoluteTag::SetPercentage(float)
 T CEventAction::CEventAction(char const*)
 T CEventAction::GetBaseMap()
 T CEventAction::operator delete(void*)
 T CEventAction::operator new(unsigned int)
 T CEventAction::operator new(unsigned int, int, char const*, int)
 T CEventLog::CEventLog()
 T CEventLog::FireGameEvent(IGameEvent*)
 T CEventLog::Init()
 T CEventLog::PrintEvent(IGameEvent*)
 T CEventLog::PrintGameEvent(IGameEvent*)
 T CEventLog::PrintOtherEvent(IGameEvent*)
 T CEventLog::PrintPlayerEvent(IGameEvent*)
 T CEventLog::PrintTeamEvent(IGameEvent*)
 T CEventLog::Shutdown()
 T CEventLog::~CEventLog()
 T CEventQueue::AddEvent(CBaseEntity*, char const*, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(CBaseEntity*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(EventQueuePrioritizedEvent_t*)
 T CEventQueue::AddEvent(char const*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::CEventQueue()
 T CEventQueue::CancelEventOn(CBaseEntity*, char const*)
 T CEventQueue::CancelEvents(CBaseEntity*)
 T CEventQueue::Clear()
 T CEventQueue::GetBaseMap()
 T CEventQueue::HasEventPending(CBaseEntity*, char const*)
 T CEventQueue::Init()
 T CEventQueue::RemoveEvent(EventQueuePrioritizedEvent_t*)
 T CEventQueue::Restore(IRestore&)
 T CEventQueue::Save(ISave&)
 T CEventQueue::ServiceEvents()
 T CEventQueue::~CEventQueue()
 T CEventRegister::CEventRegister()
 T CEventRegister::Init(CTimedEventMgr*, IEventRegisterCallback*)
 T CEventRegister::Reregister()
 T CEventRegister::SetUpdateInterval(float)
 T CEventRegister::StopUpdates()
 T CEventRegister::Term()
 T CEventRegister::~CEventRegister()
 T CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)
 T CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)
 T CEventRelativeTag::GetName()
 T CEventRelativeTag::GetOwner()
 T CEventRelativeTag::GetPercentage()
 T CEventRelativeTag::GetStartTime()
 T CEventRelativeTag::SetOwner(CChoreoEvent*)
 T CEventRelativeTag::SetPercentage(float)
 T CFilterClass::GetBaseMap()
 T CFilterClass::GetDataDescMap()
 T CFilterMultiple::Activate()
 T CFilterMultiple::GetBaseMap()
 T CFilterMultiple::GetDataDescMap()
 T CFilterMultiple::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CFilterMultiple::PassesFilterImpl(CBaseEntity*)
 T CFilterName::GetBaseMap()
 T CFilterName::GetDataDescMap()
 T CFire::Activate()
 T CFire::AddHeat(float, bool)
 T CFire::BurnThink()
 T CFire::CFire()
 T CFire::DestroyEffect()
 T CFire::Disable()
 T CFire::Extinguish(float)
 T CFire::GetBaseMap()
 T CFire::GetDataDescMap()
 T CFire::GetFireDimensions(Vector*, Vector*)
 T CFire::GoOut()
 T CFire::GoOutInSeconds(float)
 T CFire::GoOutThink()
 T CFire::Init(Vector const&, float, float, float, int, int)
 T CFire::InputDisable(inputdata_t&)
 T CFire::InputEnable(inputdata_t&)
 T CFire::InputExtinguish(inputdata_t&)
 T CFire::InputExtinguishTemporary(inputdata_t&)
 T CFire::InputStartFire(inputdata_t&)
 T CFire::IsBurning() const
 T CFire::OnTakeDamage(CTakeDamageInfo const&)
 T CFire::Precache()
 T CFire::Scale(float, float)
 T CFire::Spawn()
 T CFire::SpawnEffect(fireType_e, float)
 T CFire::Start()
 T CFire::StartFire()
 T CFire::Update(float)
 T CFire::UpdateOnRemove()
 T CFireSmoke::CFireSmoke()
 T CFireSmoke::EnableGlow(int)
 T CFireSmoke::EnableSmoke(int)
 T CFireSmoke::GetBaseMap()
 T CFireSmoke::GetClassName()
 T CFireSmoke::GetDataDescMap()
 T CFireSmoke::GetServerClass()
 T CFireSmoke::Precache()
 T CFireSmoke::Spawn()
 T CFireSmoke::YouForgotToImplementOrDeclareServerClass()
 T CFireSmoke::~CFireSmoke()
 T CFireSphere::AddToList(CFire*)
 T CFireSphere::CFireSphere(CFire**, int, bool, Vector const&, float)
 T CFireSphere::EnumElement(IHandleEntity*)
 T CFish::AddVisible(CFish*)
 T CFish::Avoid()
 T CFish::CFish()
 T CFish::Event_Killed(CTakeDamageInfo const&)
 T CFish::FlockTo(CFish*, float)
 T CFish::GetBaseMap()
 T CFish::GetClassName()
 T CFish::GetDataDescMap()
 T CFish::GetServerClass()
 T CFish::Initialize(CFishPool*, unsigned int)
 T CFish::Panic()
 T CFish::ResetVisible()
 T CFish::Spawn()
 T CFish::Touch(CBaseEntity*)
 T CFish::Update(float)
 T CFish::YouForgotToImplementOrDeclareServerClass()
 T CFish::~CFish()
 T CFishPool::CFishPool()
 T CFishPool::FireGameEvent(IGameEvent*)
 T CFishPool::GetBaseMap()
 T CFishPool::GetDataDescMap()
 T CFishPool::KeyValue(char const*, char const*)
 T CFishPool::Spawn()
 T CFishPool::Update()
 T CFishPool::~CFishPool()
 T CFlaggedEntitiesEnum::AddToList(CBaseEntity*)
 T CFlaggedEntitiesEnum::CFlaggedEntitiesEnum(CBaseEntity**, int, int)
 T CFlaggedEntitiesEnum::EnumElement(IHandleEntity*)
 T CFlashbang::EmitGrenade(Vector, QAngle, Vector, Vector, CBasePlayer*)
 T CFlashbang::GetBaseMap()
 T CFlashbang::GetClassName()
 T CFlashbang::GetDataDescMap()
 T CFlashbang::GetPredDescMap()
 T CFlashbang::GetServerClass()
 T CFlashbang::YouForgotToImplementOrDeclareServerClass()
 T CFlashbangProjectile::BounceSound()
 T CFlashbangProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*)
 T CFlashbangProjectile::Detonate()
 T CFlashbangProjectile::Precache()
 T CFlashbangProjectile::Spawn()
 T CFlexAnimationTrack::AddSample(float, float, int)
 T CFlexAnimationTrack::CFlexAnimationTrack(CChoreoEvent*)
 T CFlexAnimationTrack::CFlexAnimationTrack(CFlexAnimationTrack const*)
 T CFlexAnimationTrack::Clear()
 T CFlexAnimationTrack::GetBalanceIntensity(float)
 T CFlexAnimationTrack::GetBoundedSample(int, int)
 T CFlexAnimationTrack::GetEvent()
 T CFlexAnimationTrack::GetFlexControllerIndex(int)
 T CFlexAnimationTrack::GetFlexControllerName()
 T CFlexAnimationTrack::GetFracIntensity(float, int)
 T CFlexAnimationTrack::GetIntensity(float, int)
 T CFlexAnimationTrack::GetIntensityInternal(float, int)
 T CFlexAnimationTrack::GetMax(int)
 T CFlexAnimationTrack::GetMin(int)
 T CFlexAnimationTrack::GetNumSamples(int)
 T CFlexAnimationTrack::GetRawFlexControllerIndex(int)
 T CFlexAnimationTrack::GetSample(int, int)
 T CFlexAnimationTrack::GetSampleIntensity(float)
 T CFlexAnimationTrack::GetZeroValue(int)
 T CFlexAnimationTrack::IsComboType()
 T CFlexAnimationTrack::IsTrackActive()
 T CFlexAnimationTrack::RemoveOutOfRangeSamples(int)
 T CFlexAnimationTrack::RemoveSample(int, int)
 T CFlexAnimationTrack::Resort(int)
 T CFlexAnimationTrack::SetComboType(bool)
 T CFlexAnimationTrack::SetEvent(CChoreoEvent*)
 T CFlexAnimationTrack::SetFlexControllerIndex(int, int, int)
 T CFlexAnimationTrack::SetFlexControllerName(char const*)
 T CFlexAnimationTrack::SetMax(float)
 T CFlexAnimationTrack::SetMin(float)
 T CFlexAnimationTrack::SetTrackActive(bool)
 T CFlexAnimationTrack::~CFlexAnimationTrack()
 T CFlexCycler::GenericCyclerSpawn(char*, Vector, Vector)
 T CFlexCycler::GetBaseMap()
 T CFlexCycler::GetDataDescMap()
 T CFlexCycler::LookupFlex(char const*)
 T CFlexCycler::OnTakeDamage(CTakeDamageInfo const&)
 T CFlexCycler::ProcessSceneEvents()
 T CFlexCycler::SetFlexTarget(int)
 T CFlexCycler::Spawn()
 T CFlexCycler::Think()
 T CFlexTimingTag::CFlexTimingTag(CChoreoEvent*, char const*, float, bool)
 T CFlexTimingTag::CFlexTimingTag(CFlexTimingTag const&)
 T CFlexTimingTag::GetLocked()
 T CFlexTimingTag::SetLocked(bool)
 T CFlextalkActor::GetBaseMap()
 T CFlextalkActor::GetDataDescMap()
 T CFlextalkActor::LookupFlex(char const*)
 T CFlextalkActor::ProcessSceneEvents()
 T CFlextalkActor::SetFlexTarget(int, float)
 T CFogController::Activate()
 T CFogController::CFogController()
 T CFogController::DrawDebugTextOverlays()
 T CFogController::GetBaseMap()
 T CFogController::GetDataDescMap()
 T CFogController::InputSetAngles(inputdata_t&)
 T CFogController::InputSetColor(inputdata_t&)
 T CFogController::InputSetColorSecondary(inputdata_t&)
 T CFogController::InputSetEndDist(inputdata_t&)
 T CFogController::InputSetFarZ(inputdata_t&)
 T CFogController::InputSetStartDist(inputdata_t&)
 T CFogController::InputTurnOff(inputdata_t&)
 T CFogController::InputTurnOn(inputdata_t&)
 T CFogController::~CFogController()
 T CFourWheelServerVehicle::GetFourWheelVehicle()
 T CFourWheelServerVehicle::GetFourWheelVehiclePhysics()
 T CFourWheelServerVehicle::GetVehicleParams()
 T CFourWheelServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*)
 T CFourWheelServerVehicle::IsVehicleBodyInWater()
 T CFourWheelServerVehicle::IsVehicleUpright()
 T CFourWheelServerVehicle::NPC_DriveVehicle()
 T CFourWheelServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CFourWheelServerVehicle::SetVehicle(CBaseEntity*)
 T CFourWheelVehiclePhysics::AddThrottleReduction(float)
 T CFourWheelVehiclePhysics::CFourWheelVehiclePhysics(CBaseAnimating*)
 T CFourWheelVehiclePhysics::CalcWheelData(vehicleparams_t&)
 T CFourWheelVehiclePhysics::DisableMotion()
 T CFourWheelVehiclePhysics::DrawDebugGeometryOverlays()
 T CFourWheelVehiclePhysics::DrawDebugTextOverlays(int)
 T CFourWheelVehiclePhysics::EnableMotion()
 T CFourWheelVehiclePhysics::GetBaseMap()
 T CFourWheelVehiclePhysics::GetDataDescMap()
 T CFourWheelVehiclePhysics::GetHLSpeed() const
 T CFourWheelVehiclePhysics::GetSteering() const
 T CFourWheelVehiclePhysics::GetSteeringDegrees() const
 T CFourWheelVehiclePhysics::GetVehicleViewPosition(char const*, float, Vector*, QAngle*)
 T CFourWheelVehiclePhysics::Initialize(char const*, unsigned int)
 T CFourWheelVehiclePhysics::InitializePoseParameters()
 T CFourWheelVehiclePhysics::IsBoosting()
 T CFourWheelVehiclePhysics::ParseVehicleScript(char const*, solid_t&, vehicleparams_t&)
 T CFourWheelVehiclePhysics::PlaceWheelDust(int, bool)
 T CFourWheelVehiclePhysics::ReleaseHandbrake()
 T CFourWheelVehiclePhysics::RemoveThrottleReduction(float)
 T CFourWheelVehiclePhysics::ResetControls()
 T CFourWheelVehiclePhysics::SetAction(float)
 T CFourWheelVehiclePhysics::SetBoost(float)
 T CFourWheelVehiclePhysics::SetDisableEngine(bool)
 T CFourWheelVehiclePhysics::SetHandbrake(bool)
 T CFourWheelVehiclePhysics::SetHasBrakePedal(bool)
 T CFourWheelVehiclePhysics::SetMaxReverseThrottle(float)
 T CFourWheelVehiclePhysics::SetMaxThrottle(float)
 T CFourWheelVehiclePhysics::SetSteering(float, float)
 T CFourWheelVehiclePhysics::SetSteeringDegrees(float)
 T CFourWheelVehiclePhysics::SetThrottle(float)
 T CFourWheelVehiclePhysics::Spawn()
 T CFourWheelVehiclePhysics::SteeringRest(float, vehicleparams_t const&)
 T CFourWheelVehiclePhysics::SteeringTurn(float, vehicleparams_t const&, bool)
 T CFourWheelVehiclePhysics::SteeringTurnAnalog(float, vehicleparams_t const&, float)
 T CFourWheelVehiclePhysics::Teleport(matrix3x4_t&)
 T CFourWheelVehiclePhysics::Think()
 T CFourWheelVehiclePhysics::TurnOff()
 T CFourWheelVehiclePhysics::TurnOn()
 T CFourWheelVehiclePhysics::UpdateBooster()
 T CFourWheelVehiclePhysics::UpdateDriverControls(CUserCmd*, float)
 T CFourWheelVehiclePhysics::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CFourWheelVehiclePhysics::VPhysicsUpdate(IPhysicsObject*)
 T CFourWheelVehiclePhysics::~CFourWheelVehiclePhysics()
 T CFuncAreaPortalBase::CFuncAreaPortalBase()
 T CFuncAreaPortalBase::GetBaseMap()
 T CFuncAreaPortalBase::GetDataDescMap()
 T CFuncAreaPortalBase::UpdateVisibility(Vector const&, float)
 T CFuncAreaPortalBase::~CFuncAreaPortalBase()
 T CFuncAreaPortalWindow::Activate()
 T CFuncAreaPortalWindow::CFuncAreaPortalWindow()
 T CFuncAreaPortalWindow::GetBaseMap()
 T CFuncAreaPortalWindow::GetClassName()
 T CFuncAreaPortalWindow::GetDataDescMap()
 T CFuncAreaPortalWindow::GetServerClass()
 T CFuncAreaPortalWindow::Spawn()
 T CFuncAreaPortalWindow::UpdateVisibility(Vector const&, float)
 T CFuncAreaPortalWindow::YouForgotToImplementOrDeclareServerClass()
 T CFuncAreaPortalWindow::~CFuncAreaPortalWindow()
 T CFuncBrush::CreateVPhysics()
 T CFuncBrush::DrawDebugTextOverlays()
 T CFuncBrush::GetBaseMap()
 T CFuncBrush::GetDataDescMap()
 T CFuncBrush::InputToggle(inputdata_t&)
 T CFuncBrush::InputTurnOff(inputdata_t&)
 T CFuncBrush::InputTurnOn(inputdata_t&)
 T CFuncBrush::IsOn()
 T CFuncBrush::Spawn()
 T CFuncBrush::TurnOff()
 T CFuncBrush::TurnOn()
 T CFuncConveyor::CFuncConveyor()
 T CFuncConveyor::GetBaseMap()
 T CFuncConveyor::GetClassName()
 T CFuncConveyor::GetDataDescMap()
 T CFuncConveyor::GetGroundVelocityToApply(Vector&)
 T CFuncConveyor::GetServerClass()
 T CFuncConveyor::InputSetSpeed(inputdata_t&)
 T CFuncConveyor::InputToggleDirection(inputdata_t&)
 T CFuncConveyor::Spawn()
 T CFuncConveyor::UpdateSpeed(float)
 T CFuncConveyor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncConveyor::YouForgotToImplementOrDeclareServerClass()
 T CFuncIllusionary::Spawn()
 T CFuncLadder::Activate()
 T CFuncLadder::CFuncLadder()
 T CFuncLadder::ComputeLadderDir(Vector&)
 T CFuncLadder::DontGetOnLadder() const
 T CFuncLadder::DrawDebugGeometryOverlays()
 T CFuncLadder::FindNearbyDismountPoints(Vector const&, float, CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount> > >&)
 T CFuncLadder::GetBaseMap()
 T CFuncLadder::GetBottomPosition(Vector&)
 T CFuncLadder::GetClassName()
 T CFuncLadder::GetDataDescMap()
 T CFuncLadder::GetDismount(int)
 T CFuncLadder::GetDismountCount() const
 T CFuncLadder::GetLadder(int)
 T CFuncLadder::GetLadderCount()
 T CFuncLadder::GetServerClass()
 T CFuncLadder::GetTopPosition(Vector&)
 T CFuncLadder::InputDisable(inputdata_t&)
 T CFuncLadder::InputEnable(inputdata_t&)
 T CFuncLadder::PlayerGotOff(CBasePlayer*)
 T CFuncLadder::PlayerGotOn(CBasePlayer*)
 T CFuncLadder::SearchForDismountPoints()
 T CFuncLadder::SetEndPoints(Vector const&, Vector const&)
 T CFuncLadder::Spawn()
 T CFuncLadder::UpdateTransmitState()
 T CFuncLadder::YouForgotToImplementOrDeclareServerClass()
 T CFuncLadder::~CFuncLadder()
 T CFuncLadderEndPoint::Activate()
 T CFuncLadderEndPoint::Validate()
 T CFuncMonitor::Activate()
 T CFuncMonitor::GetBaseMap()
 T CFuncMonitor::GetClassName()
 T CFuncMonitor::GetDataDescMap()
 T CFuncMonitor::GetServerClass()
 T CFuncMonitor::InputSetCamera(inputdata_t&)
 T CFuncMonitor::ReleaseCameraLink()
 T CFuncMonitor::SetCameraByName(char const*)
 T CFuncMonitor::UpdateOnRemove()
 T CFuncMonitor::YouForgotToImplementOrDeclareServerClass()
 T CFuncMoveLinear::Blocked(CBaseEntity*)
 T CFuncMoveLinear::CreateVPhysics()
 T CFuncMoveLinear::DrawDebugTextOverlays()
 T CFuncMoveLinear::GetBaseMap()
 T CFuncMoveLinear::GetDataDescMap()
 T CFuncMoveLinear::InputClose(inputdata_t&)
 T CFuncMoveLinear::InputOpen(inputdata_t&)
 T CFuncMoveLinear::InputSetPosition(inputdata_t&)
 T CFuncMoveLinear::MoveDone()
 T CFuncMoveLinear::MoveTo(Vector, float)
 T CFuncMoveLinear::Precache()
 T CFuncMoveLinear::SetPosition(float)
 T CFuncMoveLinear::ShouldSavePhysics()
 T CFuncMoveLinear::Spawn()
 T CFuncMoveLinear::StopMoveSound()
 T CFuncMoveLinear::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncOccluder::CFuncOccluder()
 T CFuncOccluder::GetBaseMap()
 T CFuncOccluder::GetClassName()
 T CFuncOccluder::GetDataDescMap()
 T CFuncOccluder::GetServerClass()
 T CFuncOccluder::InputActivate(inputdata_t&)
 T CFuncOccluder::InputDeactivate(inputdata_t&)
 T CFuncOccluder::InputToggle(inputdata_t&)
 T CFuncOccluder::Spawn()
 T CFuncOccluder::UpdateTransmitState()
 T CFuncOccluder::YouForgotToImplementOrDeclareServerClass()
 T CFuncPlat::Blocked(CBaseEntity*)
 T CFuncPlat::CreateVPhysics()
 T CFuncPlat::GetBaseMap()
 T CFuncPlat::GetDataDescMap()
 T CFuncPlat::GoDown()
 T CFuncPlat::GoUp()
 T CFuncPlat::HitBottom()
 T CFuncPlat::HitTop()
 T CFuncPlat::InputGoDown(inputdata_t&)
 T CFuncPlat::InputGoUp(inputdata_t&)
 T CFuncPlat::InputToggle(inputdata_t&)
 T CFuncPlat::PlatUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncPlat::Precache()
 T CFuncPlat::Setup()
 T CFuncPlat::Spawn()
 T CFuncPlatRot::GetBaseMap()
 T CFuncPlatRot::GetDataDescMap()
 T CFuncPlatRot::GoDown()
 T CFuncPlatRot::GoUp()
 T CFuncPlatRot::HitBottom()
 T CFuncPlatRot::HitTop()
 T CFuncPlatRot::RotMove(QAngle&, float)
 T CFuncPlatRot::SetupRotation()
 T CFuncPlatRot::Spawn()
 T CFuncRotating::Blocked(CBaseEntity*)
 T CFuncRotating::CreateVPhysics()
 T CFuncRotating::DrawDebugTextOverlays()
 T CFuncRotating::GetBaseMap()
 T CFuncRotating::GetDataDescMap()
 T CFuncRotating::GetMoveSpeed(float)
 T CFuncRotating::GetNextMoveInterval() const
 T CFuncRotating::HurtTouch(CBaseEntity*)
 T CFuncRotating::InputReverse(inputdata_t&)
 T CFuncRotating::InputSetSpeed(inputdata_t&)
 T CFuncRotating::InputStart(inputdata_t&)
 T CFuncRotating::InputStartBackward(inputdata_t&)
 T CFuncRotating::InputStartForward(inputdata_t&)
 T CFuncRotating::InputStop(inputdata_t&)
 T CFuncRotating::InputStopAtStartPos(inputdata_t&)
 T CFuncRotating::InputToggle(inputdata_t&)
 T CFuncRotating::KeyValue(char const*, char const*)
 T CFuncRotating::Precache()
 T CFuncRotating::RampPitchVol()
 T CFuncRotating::ReverseMove()
 T CFuncRotating::RotateMove()
 T CFuncRotating::RotatingUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncRotating::SetTargetSpeed(float)
 T CFuncRotating::Spawn()
 T CFuncRotating::SpinDown(float)
 T CFuncRotating::SpinDownMove()
 T CFuncRotating::SpinUpMove()
 T CFuncRotating::UpdateSpeed(float)
 T CFuncSmokeVolume::Activate()
 T CFuncSmokeVolume::CFuncSmokeVolume()
 T CFuncSmokeVolume::GetBaseMap()
 T CFuncSmokeVolume::GetClassName()
 T CFuncSmokeVolume::GetDataDescMap()
 T CFuncSmokeVolume::GetServerClass()
 T CFuncSmokeVolume::SetDensity(float)
 T CFuncSmokeVolume::Spawn()
 T CFuncSmokeVolume::YouForgotToImplementOrDeclareServerClass()
 T CFuncTankTrain::Event_Killed(CTakeDamageInfo const&)
 T CFuncTankTrain::GetBaseMap()
 T CFuncTankTrain::GetDataDescMap()
 T CFuncTankTrain::OnTakeDamage(CTakeDamageInfo const&)
 T CFuncTankTrain::Spawn()
 T CFuncTrackAuto::GetBaseMap()
 T CFuncTrackAuto::GetDataDescMap()
 T CFuncTrackAuto::TriggerTrackChange(inputdata_t&)
 T CFuncTrackAuto::UpdateAutoTargets(int)
 T CFuncTrackAuto::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackChange::EvaluateTrain(CPathTrack*)
 T CFuncTrackChange::Find()
 T CFuncTrackChange::GetBaseMap()
 T CFuncTrackChange::GetDataDescMap()
 T CFuncTrackChange::GoDown()
 T CFuncTrackChange::GoUp()
 T CFuncTrackChange::HitBottom()
 T CFuncTrackChange::HitTop()
 T CFuncTrackChange::Precache()
 T CFuncTrackChange::Spawn()
 T CFuncTrackChange::Touch(CBaseEntity*)
 T CFuncTrackChange::UpdateAutoTargets(int)
 T CFuncTrackChange::UpdateTrain(QAngle&)
 T CFuncTrackChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackTrain::ArriveAtNode(CPathTrack*)
 T CFuncTrackTrain::Blocked(CBaseEntity*)
 T CFuncTrackTrain::CFuncTrackTrain()
 T CFuncTrackTrain::CreateVPhysics()
 T CFuncTrackTrain::DeadEnd()
 T CFuncTrackTrain::DoUpdateOrientation(QAngle const&, QAngle const&, float)
 T CFuncTrackTrain::DrawDebugGeometryOverlays()
 T CFuncTrackTrain::DrawDebugTextOverlays()
 T CFuncTrackTrain::Find()
 T CFuncTrackTrain::FindPhysicsBlocker(IPhysicsObject*)
 T CFuncTrackTrain::FirePassInputs(CPathTrack*, CPathTrack*, bool)
 T CFuncTrackTrain::GetBaseMap()
 T CFuncTrackTrain::GetClassName()
 T CFuncTrackTrain::GetDataDescMap()
 T CFuncTrackTrain::GetServerClass()
 T CFuncTrackTrain::GetTrainOrientationType()
 T CFuncTrackTrain::GetTrainVelocityType()
 T CFuncTrackTrain::InputResume(inputdata_t&)
 T CFuncTrackTrain::InputReverse(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeed(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedDir(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedReal(inputdata_t&)
 T CFuncTrackTrain::InputStartBackward(inputdata_t&)
 T CFuncTrackTrain::InputStartForward(inputdata_t&)
 T CFuncTrackTrain::InputStop(inputdata_t&)
 T CFuncTrackTrain::InputToggle(inputdata_t&)
 T CFuncTrackTrain::Instance(edict_t*)
 T CFuncTrackTrain::IsDirForward()
 T CFuncTrackTrain::KeyValue(char const*, char const*)
 T CFuncTrackTrain::NearestPath()
 T CFuncTrackTrain::Next()
 T CFuncTrackTrain::OnControls(CBaseEntity*)
 T CFuncTrackTrain::OnRestore()
 T CFuncTrackTrain::Precache()
 T CFuncTrackTrain::SetControls(CBaseEntity*)
 T CFuncTrackTrain::SetDirForward(bool)
 T CFuncTrackTrain::SetSpeed(float)
 T CFuncTrackTrain::SoundStop()
 T CFuncTrackTrain::SoundUpdate()
 T CFuncTrackTrain::Spawn()
 T CFuncTrackTrain::Start()
 T CFuncTrackTrain::Stop()
 T CFuncTrackTrain::TeleportToPathTrack(CPathTrack*)
 T CFuncTrackTrain::UpdateOnRemove()
 T CFuncTrackTrain::UpdateOrientationAtPathTracks(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateOrientationBlend(TrainOrientationType_t, CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateTrainOrientation(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateTrainVelocity(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackTrain::YouForgotToImplementOrDeclareServerClass()
 T CFuncTrain::Activate()
 T CFuncTrain::Blocked(CBaseEntity*)
 T CFuncTrain::GetBaseMap()
 T CFuncTrain::GetDataDescMap()
 T CFuncTrain::InputStart(inputdata_t&)
 T CFuncTrain::InputStop(inputdata_t&)
 T CFuncTrain::InputToggle(inputdata_t&)
 T CFuncTrain::Next()
 T CFuncTrain::OnRestore()
 T CFuncTrain::Precache()
 T CFuncTrain::SetupTarget()
 T CFuncTrain::Spawn()
 T CFuncTrain::Start()
 T CFuncTrain::Stop()
 T CFuncTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrain::Wait()
 T CFuncTrainControls::Find()
 T CFuncTrainControls::GetBaseMap()
 T CFuncTrainControls::GetDataDescMap()
 T CFuncTrainControls::Spawn()
 T CFuncVPhysicsClip::Activate()
 T CFuncVPhysicsClip::CreateVPhysics()
 T CFuncVPhysicsClip::EntityPassesFilter(CBaseEntity*)
 T CFuncVPhysicsClip::ForceVPhysicsCollide(CBaseEntity*)
 T CFuncVPhysicsClip::GetBaseMap()
 T CFuncVPhysicsClip::GetDataDescMap()
 T CFuncVPhysicsClip::Spawn()
 T CFuncVehicleClip::CreateVPhysics()
 T CFuncVehicleClip::Spawn()
 T CFuncWall::CreateVPhysics()
 T CFuncWall::GetBaseMap()
 T CFuncWall::GetDataDescMap()
 T CFuncWall::Spawn()
 T CFuncWall::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncWallToggle::GetBaseMap()
 T CFuncWallToggle::GetDataDescMap()
 T CFuncWallToggle::InputToggle(inputdata_t&)
 T CFuncWallToggle::IsOn()
 T CFuncWallToggle::Spawn()
 T CFuncWallToggle::TurnOff()
 T CFuncWallToggle::TurnOn()
 T CFuncWallToggle::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFunc_Dust::Activate()
 T CFunc_Dust::CFunc_Dust()
 T CFunc_Dust::GetBaseMap()
 T CFunc_Dust::GetClassName()
 T CFunc_Dust::GetDataDescMap()
 T CFunc_Dust::GetServerClass()
 T CFunc_Dust::InputTurnOff(inputdata_t&)
 T CFunc_Dust::InputTurnOn(inputdata_t&)
 T CFunc_Dust::KeyValue(char const*, char const*)
 T CFunc_Dust::Spawn()
 T CFunc_Dust::YouForgotToImplementOrDeclareServerClass()
 T CFunc_Dust::~CFunc_Dust()
 T CFunc_DustMotes::CFunc_DustMotes()
 T CFunc_LOD::Activate()
 T CFunc_LOD::CFunc_LOD()
 T CFunc_LOD::CreateVPhysics()
 T CFunc_LOD::GetBaseMap()
 T CFunc_LOD::GetClassName()
 T CFunc_LOD::GetDataDescMap()
 T CFunc_LOD::GetServerClass()
 T CFunc_LOD::KeyValue(char const*, char const*)
 T CFunc_LOD::Spawn()
 T CFunc_LOD::YouForgotToImplementOrDeclareServerClass()
 T CFunc_LOD::~CFunc_LOD()
 T CGameEnd::GetBaseMap()
 T CGameEnd::GetDataDescMap()
 T CGameEnd::InputGameEnd(inputdata_t&)
 T CGameEnd::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameMovement::Accelerate(Vector&, float, float)
 T CGameMovement::AddGravity()
 T CGameMovement::AirAccelerate(Vector&, float, float)
 T CGameMovement::AirMove()
 T CGameMovement::CGameMovement()
 T CGameMovement::CalcRoll(QAngle const&, Vector const&, float, float)
 T CGameMovement::CanAccelerate()
 T CGameMovement::CanUnDuckJump(CGameTrace&)
 T CGameMovement::CanUnduck()
 T CGameMovement::CategorizeGroundSurface()
 T CGameMovement::CategorizePosition()
 T CGameMovement::CheckFalling()
 T CGameMovement::CheckInterval(CGameMovement::IntervalType_t)
 T CGameMovement::CheckJumpButton()
 T CGameMovement::CheckParameters()
 T CGameMovement::CheckStuck()
 T CGameMovement::CheckVelocity()
 T CGameMovement::CheckWater()
 T CGameMovement::CheckWaterJump()
 T CGameMovement::ClipVelocity(Vector&, Vector&, Vector&, float)
 T CGameMovement::ComputeConstraintSpeedFactor()
 T CGameMovement::DecayPunchAngle()
 T CGameMovement::Duck()
 T CGameMovement::FinishDuck()
 T CGameMovement::FinishGravity()
 T CGameMovement::FinishMove()
 T CGameMovement::FinishTrackPredictionErrors()
 T CGameMovement::FinishUnDuck()
 T CGameMovement::FinishUnDuckJump(CGameTrace&)
 T CGameMovement::FixPlayerCrouchStuck(bool)
 T CGameMovement::Friction()
 T CGameMovement::FullLadderMove()
 T CGameMovement::FullNoClipMove(float, float)
 T CGameMovement::FullObserverMove()
 T CGameMovement::FullTossMove()
 T CGameMovement::FullWalkMove()
 T CGameMovement::GetCheckInterval(CGameMovement::IntervalType_t)
 T CGameMovement::GetPlayerMaxs() const
 T CGameMovement::GetPlayerMaxs(bool) const
 T CGameMovement::GetPlayerMins() const
 T CGameMovement::GetPlayerMins(bool) const
 T CGameMovement::GetPlayerViewOffset(bool) const
 T CGameMovement::GetPointContentsCached(Vector const&)
 T CGameMovement::HandleDuckingSpeedCrop()
 T CGameMovement::InWater()
 T CGameMovement::IsDead() const
 T CGameMovement::IsometricMove()
 T CGameMovement::LadderMove()
 T CGameMovement::PerformFlyCollisionResolution(CGameTrace&, Vector&)
 T CGameMovement::PlaySwimSound()
 T CGameMovement::PlayerMove()
 T CGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CGameMovement::PushEntity(Vector&, CGameTrace*)
 T CGameMovement::ReduceTimers()
 T CGameMovement::ResetGetPointContentsCache()
 T CGameMovement::SetDuckedEyeOffset(float)
 T CGameMovement::SetGroundEntity(CBaseEntity*)
 T CGameMovement::SplineFraction(float, float)
 T CGameMovement::StartGravity()
 T CGameMovement::StartTrackPredictionErrors()
 T CGameMovement::StartUnDuckJump()
 T CGameMovement::StepMove(Vector&, CGameTrace&)
 T CGameMovement::TryPlayerMove(Vector*, CGameTrace*)
 T CGameMovement::UpdateDuckJumpEyeOffset()
 T CGameMovement::WalkMove()
 T CGameMovement::WaterJump()
 T CGameMovement::WaterMove()
 T CGameMovement::~CGameMovement()
 T CGamePlayerEquip::EquipPlayer(CBaseEntity*)
 T CGamePlayerEquip::GetBaseMap()
 T CGamePlayerEquip::GetDataDescMap()
 T CGamePlayerEquip::KeyValue(char const*, char const*)
 T CGamePlayerEquip::Touch(CBaseEntity*)
 T CGamePlayerEquip::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerTeam::TargetTeamName(char const*, CBaseEntity*)
 T CGamePlayerTeam::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerZone::GetBaseMap()
 T CGamePlayerZone::GetDataDescMap()
 T CGamePlayerZone::InputCountPlayersInZone(inputdata_t&)
 T CGameRules::CGameRules()
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, char const*)
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, int)
 T CGameRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CGameRules::ClientCommand(char const*, CBaseEntity*)
 T CGameRules::ClientSettingsChanged(CBasePlayer*)
 T CGameRules::CreateStandardEntities()
 T CGameRules::EndGameFrame()
 T CGameRules::FrameUpdatePostEntityThink()
 T CGameRules::GetAmmoDamage(CBaseEntity*, CBaseEntity*, int)
 T CGameRules::GetChatPrefix(bool, CBasePlayer*)
 T CGameRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CGameRules::GetViewVectors() const
 T CGameRules::IsSpawnPointValid(CBaseEntity*, CBasePlayer*)
 T CGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CGameRules::RefreshSkillData(bool)
 T CGameRules::ShouldCollide(int, int)
 T CGameRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::Think()
 T CGameRules::WeaponTraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T CGameRules::~CGameRules()
 T CGameRulesProxy::CGameRulesProxy()
 T CGameRulesProxy::GetClassName()
 T CGameRulesProxy::GetServerClass()
 T CGameRulesProxy::NotifyNetworkStateChanged()
 T CGameRulesProxy::UpdateTransmitState()
 T CGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CGameRulesProxy::~CGameRulesProxy()
 T CGameRulesRegister::CGameRulesRegister(char const*, void (*)())
 T CGameRulesRegister::CreateGameRules()
 T CGameRulesRegister::FindByName(char const*)
 T CGameScore::GetBaseMap()
 T CGameScore::GetDataDescMap()
 T CGameScore::InputApplyScore(inputdata_t&)
 T CGameScore::KeyValue(char const*, char const*)
 T CGameScore::Spawn()
 T CGameScore::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameText::Display(CBaseEntity*)
 T CGameText::GetBaseMap()
 T CGameText::GetDataDescMap()
 T CGameText::InputDisplay(inputdata_t&)
 T CGameText::KeyValue(char const*, char const*)
 T CGameTrace::DidHitNonWorldEntity() const
 T CGameTrace::DidHitWorld() const
 T CGameTrace::GetEntityIndex() const
 T CGameUI::Deactivate(CBaseEntity*)
 T CGameUI::GetBaseMap()
 T CGameUI::GetDataDescMap()
 T CGameUI::InputActivate(inputdata_t&)
 T CGameUI::InputDeactivate(inputdata_t&)
 T CGameUI::Think()
 T CGameWeaponManager::GetBaseMap()
 T CGameWeaponManager::GetDataDescMap()
 T CGameWeaponManager::InputSetMaxPieces(inputdata_t&)
 T CGameWeaponManager::Spawn()
 T CGameWeaponManager::Think()
 T CGenericActor::Classify()
 T CGenericActor::GetBaseMap()
 T CGenericActor::GetDataDescMap()
 T CGenericActor::GetSoundInterests()
 T CGenericActor::HandleAnimEvent(animevent_t*)
 T CGenericActor::MaxYawSpeed()
 T CGenericActor::Precache()
 T CGenericActor::Spawn()
 T CGenericNPC::Classify()
 T CGenericNPC::GetSoundInterests()
 T CGenericNPC::HandleAnimEvent(animevent_t*)
 T CGenericNPC::MaxYawSpeed()
 T CGenericNPC::Precache()
 T CGenericNPC::Spawn()
 T CGenericNPC::TempGunEffect()
 T CGib::AdjustVelocityBasedOnHealth(int, Vector&)
 T CGib::BounceGibTouch(CBaseEntity*)
 T CGib::DieThink()
 T CGib::GetBaseMap()
 T CGib::GetDataDescMap()
 T CGib::HasPhysicsAttacker(float)
 T CGib::InitGib(CBaseEntity*, float, float)
 T CGib::LimitVelocity()
 T CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CGib::SetBloodColor(int)
 T CGib::SetPhysicsAttacker(CBasePlayer*, float)
 T CGib::Spawn(char const*)
 T CGib::SpawnHeadGib(CBaseEntity*)
 T CGib::SpawnRandomGibs(CBaseEntity*, int, GibType_e)
 T CGib::SpawnSpecificGibs(CBaseEntity*, int, float, float, char const*, float)
 T CGib::SpawnStickyGibs(CBaseEntity*, Vector, int)
 T CGib::StickyGibTouch(CBaseEntity*)
 T CGib::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGib::WaitTillLand()
 T CGibShooter::CreateGib()
 T CGibShooter::GetBaseMap()
 T CGibShooter::GetDataDescMap()
 T CGibShooter::InitPointGib(CGib*, Vector const&, float)
 T CGibShooter::InputShoot(inputdata_t&)
 T CGibShooter::Precache()
 T CGibShooter::ShootThink()
 T CGibShooter::Spawn()
 T CGibShooter::SpawnGib(Vector const&, float)
 T CGibShooter::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGlobalEntityList::AddListenerEntity(IEntityListener*)
 T CGlobalEntityList::AddPostClientMessageEntity(CBaseEntity*)
 T CGlobalEntityList::AddToDeleteList(IServerNetworkable*)
 T CGlobalEntityList::CGlobalEntityList()
 T CGlobalEntityList::CleanupDeleteList()
 T CGlobalEntityList::Clear()
 T CGlobalEntityList::FindEntityByClassname(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByClassnameNearest(char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByModel(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByName(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityByNameNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityByNameWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityByTarget(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityClassNearestFacing(Vector const&, Vector const&, float, char*)
 T CGlobalEntityList::FindEntityGeneric(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityGenericNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityGenericWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityInSphere(CBaseEntity*, Vector const&, float)
 T CGlobalEntityList::FindEntityNearestFacing(Vector const&, Vector const&, float)
 T CGlobalEntityList::IsEntityPtr(void*)
 T CGlobalEntityList::NextEnt(CBaseEntity*)
 T CGlobalEntityList::NotifyRemoveEntity(CBaseHandle)
 T CGlobalEntityList::NotifySpawn(CBaseEntity*)
 T CGlobalEntityList::NumberOfEdicts()
 T CGlobalEntityList::NumberOfEntities()
 T CGlobalEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::PostClientMessagesSent()
 T CGlobalEntityList::RemoveListenerEntity(IEntityListener*)
 T CGlobalEntityList::ReportEntityFlagsChanged(CBaseEntity*, unsigned int, unsigned int)
 T CGlobalEntityList::ResetDeleteList()
 T CGlobalState::DumpGlobals()
 T CGlobalState::GetBaseMap()
 T CGlobalState::Reset()
 T CGlobalState::Restore(IRestore&)
 T CGlobalState::Save(ISave&)
 T CGunTarget::Activate()
 T CGunTarget::CreateVPhysics()
 T CGunTarget::GetBaseMap()
 T CGunTarget::GetDataDescMap()
 T CGunTarget::InputStart(inputdata_t&)
 T CGunTarget::InputStop(inputdata_t&)
 T CGunTarget::InputToggle(inputdata_t&)
 T CGunTarget::Next()
 T CGunTarget::OnTakeDamage(CTakeDamageInfo const&)
 T CGunTarget::Spawn()
 T CGunTarget::Start()
 T CGunTarget::Stop()
 T CGunTarget::Wait()
 T CHEGrenade::EmitGrenade(Vector, QAngle, Vector, Vector, CBasePlayer*)
 T CHEGrenade::GetBaseMap()
 T CHEGrenade::GetClassName()
 T CHEGrenade::GetDataDescMap()
 T CHEGrenade::GetPredDescMap()
 T CHEGrenade::GetServerClass()
 T CHEGrenade::YouForgotToImplementOrDeclareServerClass()
 T CHEGrenadeProjectile::BounceSound()
 T CHEGrenadeProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, float)
 T CHEGrenadeProjectile::Detonate()
 T CHEGrenadeProjectile::Precache()
 T CHEGrenadeProjectile::Spawn()
 T CHLTVDirector::AnalyzeCameras()
 T CHLTVDirector::AnalyzePlayers()
 T CHLTVDirector::BuildActivePlayerList()
 T CHLTVDirector::CHLTVDirector()
 T CHLTVDirector::CheckHistory()
 T CHLTVDirector::CreateShotFromEvent(CGameEvent*)
 T CHLTVDirector::FindBestGameEvent()
 T CHLTVDirector::FindFirstEvent(int)
 T CHLTVDirector::FinishCameraManShot()
 T CHLTVDirector::FireGameEvent(IGameEvent*)
 T CHLTVDirector::FrameUpdatePostEntityThink()
 T CHLTVDirector::GetDelay()
 T CHLTVDirector::GetDirectorTick()
 T CHLTVDirector::GetHLTVServer()
 T CHLTVDirector::GetModEvents()
 T CHLTVDirector::GetPVSEntity()
 T CHLTVDirector::GetPVSOrigin()
 T CHLTVDirector::Init()
 T CHLTVDirector::IsActive()
 T CHLTVDirector::LevelInitPostEntity()
 T CHLTVDirector::RemoveEventsFromHistory(int)
 T CHLTVDirector::SetHLTVServer(IHLTVServer*)
 T CHLTVDirector::Shutdown()
 T CHLTVDirector::StartBestFixedCameraShot()
 T CHLTVDirector::StartBestPlayerCameraShot()
 T CHLTVDirector::StartCameraManShot()
 T CHLTVDirector::StartFixedCameraShot(int, int)
 T CHLTVDirector::StartNewShot()
 T CHLTVDirector::StartRandomShot()
 T CHLTVDirector::UpdateSettings()
 T CHLTVDirector::~CHLTVDirector()
 T CHandleTest::GetClassName()
 T CHandleTest::GetServerClass()
 T CHandleTest::YouForgotToImplementOrDeclareServerClass()
 T CHintCriteria::AddExcludePosition(Vector const&, float)
 T CHintCriteria::AddIncludePosition(Vector const&, float)
 T CHintCriteria::AddZone(CUtlVector<CHintCriteria::hintZone_t, CUtlMemory<CHintCriteria::hintZone_t> >&, Vector const&, float)
 T CHintCriteria::CHintCriteria()
 T CHintCriteria::ClearFlag(int)
 T CHintCriteria::InExcludedZone(Vector const&) const
 T CHintCriteria::InIncludedZone(Vector const&) const
 T CHintCriteria::SetFlag(int)
 T CHintCriteria::SetGroup(string_t)
 T CHintCriteria::SetHintType(int)
 T CHintCriteria::SetHintTypeRange(int, int)
 T CHintCriteria::~CHintCriteria()
 T CHintMessage::CHintMessage(char const*, CUtlVector<char const*, CUtlMemory<char const*> >*, float)
 T CHintMessage::IsEquivalent(char const*, CUtlVector<char const*, CUtlMemory<char const*> >*) const
 T CHintMessage::Send(CBasePlayer*)
 T CHintMessage::~CHintMessage()
 T CHintMessageQueue::AddMessage(char const*, float, CUtlVector<char const*, CUtlMemory<char const*> >*)
 T CHintMessageQueue::CHintMessageQueue(CBasePlayer*)
 T CHintMessageQueue::Reset()
 T CHintMessageQueue::Update()
 T CHostage::AvoidPhysicsProps()
 T CHostage::CHostage()
 T CHostage::CSAnim_CanMove()
 T CHostage::CSAnim_GetActiveWeapon()
 T CHostage::CheckForHostageAbuse(CCSPlayer*)
 T CHostage::Crouch()
 T CHostage::Event_Killed(CTakeDamageInfo const&)
 T CHostage::FaceTowards(Vector const&, float)
 T CHostage::Follow(CCSPlayer*)
 T CHostage::GetBaseMap()
 T CHostage::GetCentroid() const
 T CHostage::GetClassName()
 T CHostage::GetDataDescMap()
 T CHostage::GetEyes() const
 T CHostage::GetFeet() const
 T CHostage::GetLastKnownArea() const
 T CHostage::GetLeader() const
 T CHostage::GetModifiedDamage(float, int)
 T CHostage::GetMoveAngle() const
 T CHostage::GetServerClass()
 T CHostage::GetSimpleGroundHeightWithFloor(Vector const&, float*, Vector*)
 T CHostage::GiveCTUseBonus(CCSPlayer*)
 T CHostage::HostageRescueZoneTouch(inputdata_t&)
 T CHostage::HostageThink()
 T CHostage::HostageUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CHostage::Idle()
 T CHostage::IsCrouching() const
 T CHostage::IsFollowing(CBaseEntity const*)
 T CHostage::IsFollowingSomeone()
 T CHostage::IsJumping() const
 T CHostage::IsOnGround() const
 T CHostage::IsRescuable() const
 T CHostage::IsRescued() const
 T CHostage::IsRunning() const
 T CHostage::IsUsingLadder() const
 T CHostage::IsValid() const
 T CHostage::IsVisible(Vector const&, bool) const
 T CHostage::Jump()
 T CHostage::OnMoveToFailure(Vector const&, CImprovLocomotor::MoveToFailureType)
 T CHostage::OnMoveToSuccess(Vector const&)
 T CHostage::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CHostage::PhysicsSimulate()
 T CHostage::PhysicsSolidMaskForEntity() const
 T CHostage::Precache()
 T CHostage::PushawayThink()
 T CHostage::Run()
 T CHostage::Spawn()
 T CHostage::StandUp()
 T CHostage::StartLadder(CNavLadder const*, NavTraverseType, Vector const&, Vector const&)
 T CHostage::Touch(CBaseEntity*)
 T CHostage::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CHostage::TrackPath(Vector const&, float)
 T CHostage::TraverseLadder(CNavLadder const*, NavTraverseType, Vector const&, Vector const&, float)
 T CHostage::UpdateFollowing(float)
 T CHostage::Walk()
 T CHostage::Wiggle()
 T CHostage::YouForgotToImplementOrDeclareServerClass()
 T CHostage::~CHostage()
 T CHostageRescueZone::GetBaseMap()
 T CHostageRescueZone::GetDataDescMap()
 T CHostageRescueZone::HostageRescueTouch(CBaseEntity*)
 T CHostageRescueZone::Spawn()
 T CIKContext::AddAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::AddDependencies(int, float, float const*, float)
 T CIKContext::AddSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::BuildBoneChain(Vector*, Quaternion*, int, matrix3x4_t*, CBoneBitList&)
 T CIKContext::CIKContext()
 T CIKContext::ClearTargets()
 T CIKContext::Init(studiohdr_t const*, QAngle const&, Vector const&, float, int, int)
 T CIKContext::SolveAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::SolveDependencies(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKContext::SolveSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::UpdateTargets(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKTarget::IKFailed()
 T CIKTarget::IsActive()
 T CIKTarget::SetAngles(QAngle const&)
 T CIKTarget::SetNormal(Vector const&)
 T CIKTarget::SetPos(Vector const&)
 T CIKTarget::SetPosWithNormalOffset(Vector const&, Vector const&)
 T CIKTarget::SetQuaternion(Quaternion const&)
 T CInfoCameraLink::Activate()
 T CInfoCameraLink::CInfoCameraLink()
 T CInfoCameraLink::GetBaseMap()
 T CInfoCameraLink::GetDataDescMap()
 T CInfoCameraLink::InputSetCamera(inputdata_t&)
 T CInfoCameraLink::SetCameraByName(char const*)
 T CInfoCameraLink::~CInfoCameraLink()
 T CInfoIntermission::Spawn()
 T CInfoIntermission::Think()
 T CInfoLadder::KeyValue(char const*, char const*)
 T CInfoLadderDismount::DrawDebugGeometryOverlays()
 T CInfoLadderDismount::GetClassName()
 T CInfoLadderDismount::GetServerClass()
 T CInfoLadderDismount::YouForgotToImplementOrDeclareServerClass()
 T CInfoLightingRelative::Activate()
 T CInfoLightingRelative::GetBaseMap()
 T CInfoLightingRelative::GetClassName()
 T CInfoLightingRelative::GetDataDescMap()
 T CInfoLightingRelative::GetServerClass()
 T CInfoLightingRelative::SetTransmit(CCheckTransmitInfo*, bool)
 T CInfoLightingRelative::YouForgotToImplementOrDeclareServerClass()
 T CInfoViewParameters::GetBaseMap()
 T CInfoViewParameters::GetDataDescMap()
 T CInstancedSceneEntity::DoThink(float)
 T CInstancedSceneEntity::FindNamedActor(char const*)
 T CInstancedSceneEntity::FindNamedEntity(char const*)
 T CInstancedSceneEntity::GetBaseMap()
 T CInstancedSceneEntity::GetDataDescMap()
 T CInstancedSceneEntity::OnRestore()
 T CInstancedSceneEntity::PassThrough(CBaseFlex*)
 T CItem::ActivateWhenAtRest()
 T CItem::CItem()
 T CItem::ComeToRest()
 T CItem::CreateItemVPhysicsObject()
 T CItem::GetBaseMap()
 T CItem::GetDataDescMap()
 T CItem::ItemTouch(CBaseEntity*)
 T CItem::Materialize()
 T CItem::OnEntityEvent(EntityEvent_t, void*)
 T CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CItem::Precache()
 T CItem::Respawn()
 T CItem::Spawn()
 T CItem::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CItemDefuser::ActivateThink()
 T CItemDefuser::DefuserTouch(CBaseEntity*)
 T CItemDefuser::GetBaseMap()
 T CItemDefuser::GetDataDescMap()
 T CItemDefuser::Precache()
 T CItemDefuser::Spawn()
 T CItemSoda::CanThink()
 T CItemSoda::CanTouch(CBaseEntity*)
 T CItemSoda::GetBaseMap()
 T CItemSoda::GetDataDescMap()
 T CItemSoda::Precache()
 T CItemSoda::Spawn()
 T CIterativeSheetSimulator::BeginSimulation(float, int, int, int)
 T CIterativeSheetSimulator::CIterativeSheetSimulator(void (*)(Vector const&, Vector const&, unsigned int, int, CGameTrace*), void (*)(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, int, CGameTrace*))
 T CIterativeSheetSimulator::DetectCollisions()
 T CIterativeSheetSimulator::Think()
 T CJeepFourWheelServerVehicle::GetExitAnimToUse(Vector&, bool&)
 T CJeepFourWheelServerVehicle::NPC_AimPrimaryWeapon(Vector)
 T CKeepUpright::Activate()
 T CKeepUpright::CKeepUpright()
 T CKeepUpright::GetBaseMap()
 T CKeepUpright::GetDataDescMap()
 T CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CKeepUpright::Spawn()
 T CKeepUpright::~CKeepUpright()
 T CKnife::CKnife()
 T CKnife::CanBeSelected()
 T CKnife::CanDrop()
 T CKnife::Deploy()
 T CKnife::GetBaseMap()
 T CKnife::GetClassName()
 T CKnife::GetDataDescMap()
 T CKnife::GetPredDescMap()
 T CKnife::GetServerClass()
 T CKnife::HasPrimaryAmmo()
 T CKnife::Holster(int)
 T CKnife::ItemPostFrame()
 T CKnife::Precache()
 T CKnife::PrimaryAttack()
 T CKnife::SecondaryAttack()
 T CKnife::Smack()
 T CKnife::Spawn()
 T CKnife::SwingOrStab(bool)
 T CKnife::WeaponAnimation(int)
 T CKnife::WeaponIdle()
 T CKnife::YouForgotToImplementOrDeclareServerClass()
 T CLagCompensationManager::BacktrackPlayer(CBasePlayer*, float)
 T CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 T CLagCompensationManager::FrameUpdatePostEntityThink()
 T CLagCompensationManager::StartLagCompensation(CBasePlayer*, CUserCmd*)
 T CLight::FadeThink()
 T CLight::GetBaseMap()
 T CLight::GetDataDescMap()
 T CLight::InputFadeToPattern(inputdata_t&)
 T CLight::InputSetPattern(inputdata_t&)
 T CLight::InputToggle(inputdata_t&)
 T CLight::InputTurnOff(inputdata_t&)
 T CLight::InputTurnOn(inputdata_t&)
 T CLight::KeyValue(char const*, char const*)
 T CLight::Spawn()
 T CLight::Toggle()
 T CLight::TurnOff()
 T CLight::TurnOn()
 T CLight::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CLightGlow::Activate()
 T CLightGlow::CLightGlow()
 T CLightGlow::GetBaseMap()
 T CLightGlow::GetClassName()
 T CLightGlow::GetDataDescMap()
 T CLightGlow::GetServerClass()
 T CLightGlow::InputColor(inputdata_t&)
 T CLightGlow::Spawn()
 T CLightGlow::YouForgotToImplementOrDeclareServerClass()
 T CLogicAuto::Activate()
 T CLogicAuto::GetBaseMap()
 T CLogicAuto::GetDataDescMap()
 T CLogicAuto::Think()
 T CLogicAutosave::GetBaseMap()
 T CLogicAutosave::GetDataDescMap()
 T CLogicAutosave::InputSave(inputdata_t&)
 T CLogicBranch::DoTest(CBaseEntity*, bool)
 T CLogicBranch::GetBaseMap()
 T CLogicBranch::GetDataDescMap()
 T CLogicBranch::InputSetValueTest(inputdata_t&)
 T CLogicBranch::InputTest(inputdata_t&)
 T CLogicBranch::InputToggle(inputdata_t&)
 T CLogicBranch::InputToggleTest(inputdata_t&)
 T CLogicCase::GetBaseMap()
 T CLogicCase::GetDataDescMap()
 T CLogicCase::InputPickRandom(inputdata_t&)
 T CLogicCase::InputValue(inputdata_t&)
 T CLogicCase::Spawn()
 T CLogicCollisionPair::GetBaseMap()
 T CLogicCollisionPair::GetDataDescMap()
 T CLogicCompare::DoCompare(CBaseEntity*, float)
 T CLogicCompare::GetBaseMap()
 T CLogicCompare::GetDataDescMap()
 T CLogicCompare::InputCompare(inputdata_t&)
 T CLogicCompare::InputSetCompareValue(inputdata_t&)
 T CLogicCompare::InputSetValue(inputdata_t&)
 T CLogicCompare::InputSetValueCompare(inputdata_t&)
 T CLogicCompareInteger::GetBaseMap()
 T CLogicCompareInteger::GetDataDescMap()
 T CLogicCompareInteger::InputCompareValues(inputdata_t&)
 T CLogicCompareInteger::InputValue(inputdata_t&)
 T CLogicLineToEntity::Activate()
 T CLogicLineToEntity::GetBaseMap()
 T CLogicLineToEntity::GetDataDescMap()
 T CLogicLineToEntity::Spawn()
 T CLogicLineToEntity::Think()
 T CLogicMeasureMovement::Activate()
 T CLogicMeasureMovement::GetBaseMap()
 T CLogicMeasureMovement::GetDataDescMap()
 T CLogicMeasureMovement::InputDisable(inputdata_t&)
 T CLogicMeasureMovement::InputEnable(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetScale(inputdata_t&)
 T CLogicMeasureMovement::MeasureThink()
 T CLogicMeasureMovement::SetMeasureReference(char const*)
 T CLogicMeasureMovement::SetMeasureTarget(char const*)
 T CLogicMeasureMovement::SetTarget(char const*)
 T CLogicMeasureMovement::SetTargetReference(char const*)
 T CLogicNavigation::Activate()
 T CLogicNavigation::GetBaseMap()
 T CLogicNavigation::GetDataDescMap()
 T CLogicNavigation::KeyValue(char const*, char const*)
 T CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 T CLogicNavigation::TurnOff()
 T CLogicNavigation::TurnOn()
 T CLogicNavigation::UpdateOnRemove()
 T CLogicNavigation::UpdateProperty()
 T CLogicRelay::CLogicRelay()
 T CLogicRelay::GetBaseMap()
 T CLogicRelay::GetDataDescMap()
 T CLogicRelay::InputCancelPending(inputdata_t&)
 T CLogicRelay::InputDisable(inputdata_t&)
 T CLogicRelay::InputEnable(inputdata_t&)
 T CLogicRelay::InputEnableRefire(inputdata_t&)
 T CLogicRelay::InputToggle(inputdata_t&)
 T CLogicRelay::InputTrigger(inputdata_t&)
 T CLogicalEntity::KeyValue(char const*, char const*)
 T CMapInfo::CMapInfo()
 T CMapInfo::KeyValue(char const*, char const*)
 T CMapInfo::Spawn()
 T CMapInfo::~CMapInfo()
 T CMaterialModifyControl::CMaterialModifyControl()
 T CMaterialModifyControl::GetBaseMap()
 T CMaterialModifyControl::GetClassName()
 T CMaterialModifyControl::GetDataDescMap()
 T CMaterialModifyControl::GetServerClass()
 T CMaterialModifyControl::KeyValue(char const*, char const*)
 T CMaterialModifyControl::SetMaterialVar(inputdata_t&)
 T CMaterialModifyControl::SetMaterialVarToCurrentTime(inputdata_t&)
 T CMaterialModifyControl::ShouldTransmit(CCheckTransmitInfo const*)
 T CMaterialModifyControl::Spawn()
 T CMaterialModifyControl::UpdateTransmitState()
 T CMaterialModifyControl::YouForgotToImplementOrDeclareServerClass()
 T CMathColorBlend::GetBaseMap()
 T CMathColorBlend::GetDataDescMap()
 T CMathColorBlend::InputValue(inputdata_t&)
 T CMathColorBlend::Spawn()
 T CMathCounter::GetBaseMap()
 T CMathCounter::GetDataDescMap()
 T CMathCounter::InputAdd(inputdata_t&)
 T CMathCounter::InputDivide(inputdata_t&)
 T CMathCounter::InputMultiply(inputdata_t&)
 T CMathCounter::InputSetHitMax(inputdata_t&)
 T CMathCounter::InputSetHitMin(inputdata_t&)
 T CMathCounter::InputSetValue(inputdata_t&)
 T CMathCounter::InputSetValueNoFire(inputdata_t&)
 T CMathCounter::InputSubtract(inputdata_t&)
 T CMathCounter::KeyValue(char const*, char const*)
 T CMathCounter::Spawn()
 T CMathCounter::UpdateOutValue(CBaseEntity*, float)
 T CMathRemap::GetBaseMap()
 T CMathRemap::GetDataDescMap()
 T CMathRemap::InputValue(inputdata_t&)
 T CMathRemap::Spawn()
 T CMemoryPool::AddNewBlob()
 T CMemoryPool::Alloc()
 T CMemoryPool::Alloc(unsigned int)
 T CMemoryPool::AllocZero()
 T CMemoryPool::AllocZero(unsigned int)
 T CMemoryPool::CMemoryPool(int, int, int, char const*)
 T CMemoryPool::Clear()
 T CMemoryPool::Free(void*)
 T CMemoryPool::Init()
 T CMemoryPool::ReportLeaks()
 T CMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))
 T CMemoryPool::~CMemoryPool()
 T CMessage::GetBaseMap()
 T CMessage::GetDataDescMap()
 T CMessage::InputShowMessage(inputdata_t&)
 T CMessage::Precache()
 T CMessage::Spawn()
 T CMessage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMessageEntity::Activate()
 T CMessageEntity::DrawOverlays()
 T CMessageEntity::GetBaseMap()
 T CMessageEntity::GetDataDescMap()
 T CMessageEntity::InputDisable(inputdata_t&)
 T CMessageEntity::InputEnable(inputdata_t&)
 T CMessageEntity::Spawn()
 T CMessageEntity::Think()
 T CMessageEntity::UpdateOnRemove()
 T CMomentaryRotButton::CreateVPhysics()
 T CMomentaryRotButton::DrawDebugTextOverlays()
 T CMomentaryRotButton::GetBaseMap()
 T CMomentaryRotButton::GetDataDescMap()
 T CMomentaryRotButton::GetPos(QAngle const&)
 T CMomentaryRotButton::InputDisableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputEnableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputSetPosition(inputdata_t&)
 T CMomentaryRotButton::InputSetPositionImmediately(inputdata_t&)
 T CMomentaryRotButton::Lock()
 T CMomentaryRotButton::ObjectCaps()
 T CMomentaryRotButton::OutputMovementComplete()
 T CMomentaryRotButton::PlaySound()
 T CMomentaryRotButton::ReturnMoveDone()
 T CMomentaryRotButton::SetPositionMoveDone()
 T CMomentaryRotButton::Spawn()
 T CMomentaryRotButton::Unlock()
 T CMomentaryRotButton::UpdateSelf(float, bool)
 T CMomentaryRotButton::UpdateTarget(float, CBaseEntity*)
 T CMomentaryRotButton::UpdateThink()
 T CMomentaryRotButton::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMomentaryRotButton::UseMoveDone()
 T CMotorController::GetBaseMap()
 T CMotorController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CMoveHelperServer::AddToTouched(CGameTrace const&, Vector const&)
 T CMoveHelperServer::CMoveHelperServer()
 T CMoveHelperServer::Con_NPrintf(int, char const*, ...)
 T CMoveHelperServer::GetName(CBaseHandle) const
 T CMoveHelperServer::GetSurfaceProps()
 T CMoveHelperServer::IsWorldEntity(CBaseHandle const&)
 T CMoveHelperServer::PlaybackEventFull(int, int, unsigned short, float, Vector&, Vector&, float, float, int, int, int, int)
 T CMoveHelperServer::PlayerFallingDamage()
 T CMoveHelperServer::PlayerSetAnimation(PLAYER_ANIM)
 T CMoveHelperServer::ProcessImpacts()
 T CMoveHelperServer::ResetTouchList()
 T CMoveHelperServer::SetHost(CBasePlayer*)
 T CMoveHelperServer::StartSound(Vector const&, char const*)
 T CMoveHelperServer::StartSound(Vector const&, int, char const*, float, soundlevel_t, int, int)
 T CMoveHelperServer::~CMoveHelperServer()
 T CMovementSpeedMod::GetBaseMap()
 T CMovementSpeedMod::GetDataDescMap()
 T CMovementSpeedMod::InputSpeedMod(inputdata_t&)
 T CMultiDamage::CMultiDamage()
 T CMultiDamage::GetBaseMap()
 T CMultiDamage::Init(CBaseEntity*, CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, Vector const&, float, int, int)
 T CMultiInputVar::AddValue(variant_t, int)
 T CMultiInputVar::inputitem_t::operator delete(void*)
 T CMultiInputVar::inputitem_t::operator new(unsigned int)
 T CMultiInputVar::inputitem_t::operator new(unsigned int, int, char const*, int)
 T CMultiInputVar::~CMultiInputVar()
 T CMultiSource::GetBaseMap()
 T CMultiSource::GetDataDescMap()
 T CMultiSource::IsTriggered(CBaseEntity*)
 T CMultiSource::KeyValue(char const*, char const*)
 T CMultiSource::Register()
 T CMultiSource::Spawn()
 T CMultiSource::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMultiplayRules::AllowAutoTargetCrosshair()
 T CMultiplayRules::CMultiplayRules()
 T CMultiplayRules::CanHaveItem(CBasePlayer*, CItem*)
 T CMultiplayRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::ChangeLevel()
 T CMultiplayRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CMultiplayRules::ClientDisconnected(edict_t*)
 T CMultiplayRules::DeadPlayerAmmo(CBasePlayer*)
 T CMultiplayRules::DeadPlayerWeapons(CBasePlayer*)
 T CMultiplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::FAllowFlashlight()
 T CMultiplayRules::FAllowNPCs()
 T CMultiplayRules::FPlayerCanRespawn(CBasePlayer*)
 T CMultiplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*)
 T CMultiplayRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::FlHEVChargerRechargeTime()
 T CMultiplayRules::FlHealthChargerRechargeTime()
 T CMultiplayRules::FlItemRespawnTime(CItem*)
 T CMultiplayRules::FlPlayerFallDamage(CBasePlayer*)
 T CMultiplayRules::FlPlayerSpawnTime(CBasePlayer*)
 T CMultiplayRules::FlWeaponRespawnTime(CBaseCombatWeapon*)
 T CMultiplayRules::FlWeaponTryRespawn(CBaseCombatWeapon*)
 T CMultiplayRules::GetDeathScorer(CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::GetNextLevelName(char*, int)
 T CMultiplayRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CMultiplayRules::GoToIntermission()
 T CMultiplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::InitHUD(CBasePlayer*)
 T CMultiplayRules::IsAllowedToSpawn(CBaseEntity*)
 T CMultiplayRules::IsCoOp()
 T CMultiplayRules::IsDeathmatch()
 T CMultiplayRules::IsMultiplayer()
 T CMultiplayRules::ItemShouldRespawn(CItem*)
 T CMultiplayRules::PlayFootstepSounds(CBasePlayer*)
 T CMultiplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::PlayerGotAmmo(CBaseCombatCharacter*, char*, int)
 T CMultiplayRules::PlayerGotItem(CBasePlayer*, CItem*)
 T CMultiplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::PlayerSpawn(CBasePlayer*)
 T CMultiplayRules::PlayerThink(CBasePlayer*)
 T CMultiplayRules::RefreshSkillData(bool)
 T CMultiplayRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::Think()
 T CMultiplayRules::VecItemRespawnSpot(CItem*)
 T CMultiplayRules::VecWeaponRespawnSpot(CBaseCombatWeapon*)
 T CMultiplayRules::WeaponShouldRespawn(CBaseCombatWeapon*)
 T CNPC_Furniture::Classify()
 T CNPC_Furniture::CreateVPhysics()
 T CNPC_Furniture::Die()
 T CNPC_Furniture::GetBaseMap()
 T CNPC_Furniture::GetDataDescMap()
 T CNPC_Furniture::NPCThink()
 T CNPC_Furniture::ObjectCaps()
 T CNPC_Furniture::OnRestore()
 T CNPC_Furniture::Precache()
 T CNPC_Furniture::SelectSchedule()
 T CNPC_Furniture::Spawn()
 T CNPC_Furniture::UpdateOnRemove()
 T CNPC_VehicleDriver::Activate()
 T CNPC_VehicleDriver::CNPC_VehicleDriver()
 T CNPC_VehicleDriver::CScheduleLoader::CScheduleLoader()
 T CNPC_VehicleDriver::CalculatePostPoints()
 T CNPC_VehicleDriver::CheckForTeleport()
 T CNPC_VehicleDriver::ClearWaypoints()
 T CNPC_VehicleDriver::DriveVehicle()
 T CNPC_VehicleDriver::GatherEnemyConditions(CBaseEntity*)
 T CNPC_VehicleDriver::GetBaseMap()
 T CNPC_VehicleDriver::GetDataDescMap()
 T CNPC_VehicleDriver::GetDefaultNavGoalTolerance()
 T CNPC_VehicleDriver::IRelationType(CBaseEntity*)
 T CNPC_VehicleDriver::InitCustomSchedules()
 T CNPC_VehicleDriver::InputGotoPathCorner(inputdata_t&)
 T CNPC_VehicleDriver::InputSetDriversMaxSpeed(inputdata_t&)
 T CNPC_VehicleDriver::InputSetDriversMinSpeed(inputdata_t&)
 T CNPC_VehicleDriver::InputStartFiring(inputdata_t&)
 T CNPC_VehicleDriver::InputStartForward(inputdata_t&)
 T CNPC_VehicleDriver::InputStop(inputdata_t&)
 T CNPC_VehicleDriver::InputStopFiring(inputdata_t&)
 T CNPC_VehicleDriver::LoadSchedules()
 T CNPC_VehicleDriver::LoadedSchedules()
 T CNPC_VehicleDriver::OnRestore()
 T CNPC_VehicleDriver::OverrideMove(float)
 T CNPC_VehicleDriver::OverridePathMove(float)
 T CNPC_VehicleDriver::Precache()
 T CNPC_VehicleDriver::PrescheduleThink()
 T CNPC_VehicleDriver::RangeAttack1Conditions(float, float)
 T CNPC_VehicleDriver::RangeAttack2Conditions(float, float)
 T CNPC_VehicleDriver::RecalculateSpeeds()
 T CNPC_VehicleDriver::RunTask(Task_t const*)
 T CNPC_VehicleDriver::SelectSchedule()
 T CNPC_VehicleDriver::Spawn()
 T CNPC_VehicleDriver::SquadSlotName(int)
 T CNPC_VehicleDriver::StartTask(Task_t const*)
 T CNPC_VehicleDriver::TranslateSchedule(int)
 T CNPC_VehicleDriver::UpdateOnRemove()
 T CNPC_VehicleDriver::WaypointReached()
 T CNPC_VehicleDriver::~CNPC_VehicleDriver()
 T CNavArea::AddLadderDown(CNavLadder*)
 T CNavArea::AddLadderUp(CNavLadder*)
 T CNavArea::AddSpotEncounters(CNavArea const*, NavDirType, CNavArea const*, NavDirType)
 T CNavArea::AddToOpenList()
 T CNavArea::AssignNodes(CNavArea*)
 T CNavArea::CNavArea()
 T CNavArea::CNavArea(CNavNode*, CNavNode*, CNavNode*, CNavNode*)
 T CNavArea::CNavArea(Vector const&, Vector const&)
 T CNavArea::CNavArea(Vector const&, Vector const&, Vector const&, Vector const&)
 T CNavArea::CheckFloor(CBaseEntity*)
 T CNavArea::ClearSearchLists()
 T CNavArea::CompressIDs()
 T CNavArea::ComputeApproachAreas()
 T CNavArea::ComputeClosestPointInPortal(CNavArea const*, NavDirType, Vector const&, Vector*) const
 T CNavArea::ComputeDirection(Vector*) const
 T CNavArea::ComputeEarliestOccupyTimes()
 T CNavArea::ComputeHeightChange(CNavArea const*)
 T CNavArea::ComputeHidingSpots()
 T CNavArea::ComputeNormal(Vector*, bool) const
 T CNavArea::ComputePortal(CNavArea const*, NavDirType, Vector*, float*) const
 T CNavArea::ComputeSniperSpots()
 T CNavArea::ComputeSpotEncounters()
 T CNavArea::ConnectTo(CNavArea*, NavDirType)
 T CNavArea::ConnectTo(CNavLadder*)
 T CNavArea::Contains(Vector const&) const
 T CNavArea::DecayDanger()
 T CNavArea::Disconnect(CNavArea*)
 T CNavArea::Disconnect(CNavLadder*)
 T CNavArea::Draw() const
 T CNavArea::DrawConnectedAreas() const
 T CNavArea::DrawHidingSpots() const
 T CNavArea::DrawMarkedCorner(NavCornerType) const
 T CNavArea::FinishMerge(CNavArea*)
 T CNavArea::FinishSplitEdit(CNavArea*, NavDirType)
 T CNavArea::GetClosestPointOnArea(Vector const&, Vector*) const
 T CNavArea::GetCorner(NavCornerType) const
 T CNavArea::GetDanger(int)
 T CNavArea::GetDistanceSquaredToPoint(Vector const&) const
 T CNavArea::GetRandomAdjacentArea(NavDirType) const
 T CNavArea::GetSpotEncounter(CNavArea const*, CNavArea const*)
 T CNavArea::GetZ(Vector const&) const
 T CNavArea::GetZ(float, float) const
 T CNavArea::HasNodes() const
 T CNavArea::IncreaseDanger(int, float)
 T CNavArea::Initialize()
 T CNavArea::IsConnected(CNavArea const*, NavDirType) const
 T CNavArea::IsConnected(CNavLadder const*, CNavLadder::LadderDirectionType) const
 T CNavArea::IsCoplanar(CNavArea const*) const
 T CNavArea::IsEdge(NavDirType) const
 T CNavArea::IsFlat() const
 T CNavArea::IsHidingSpotCollision(Vector const&) const
 T CNavArea::IsOverlapping(CNavArea const*) const
 T CNavArea::IsOverlapping(Vector const&) const
 T CNavArea::IsOverlappingX(CNavArea const*) const
 T CNavArea::IsOverlappingY(CNavArea const*) const
 T CNavArea::IsRoughlySquare() const
 T CNavArea::Load(void*, unsigned int)
 T CNavArea::MergeAdjacentConnections(CNavArea*)
 T CNavArea::MergeEdit(CNavArea*)
 T CNavArea::OnDestroyNotify(CNavArea*)
 T CNavArea::OnDestroyNotify(CNavLadder*)
 T CNavArea::PlaceOnGround(NavCornerType, float)
 T CNavArea::PostLoad()
 T CNavArea::RaiseCorner(NavCornerType, int)
 T CNavArea::RemoveFromOpenList()
 T CNavArea::ResetNodes()
 T CNavArea::Save(void*, unsigned int) const
 T CNavArea::SpliceEdit(CNavArea*)
 T CNavArea::SplitEdit(bool, float, CNavArea**, CNavArea**)
 T CNavArea::Strip()
 T CNavArea::UpdateBlocked()
 T CNavArea::UpdateOnOpenList()
 T CNavArea::~CNavArea()
 T CNavLadder::CompressIDs()
 T CNavLadder::ConnectGeneratedLadder()
 T CNavLadder::ConnectTo(CNavArea*)
 T CNavLadder::Disconnect(CNavArea*)
 T CNavLadder::DrawConnectedAreas()
 T CNavLadder::DrawLadder() const
 T CNavLadder::GetConnection(CNavLadder::LadderConnectionType)
 T CNavLadder::GetPosAtHeight(float) const
 T CNavLadder::IsConnected(CNavArea const*, CNavLadder::LadderDirectionType) const
 T CNavLadder::IsInUse(CBasePlayer const*) const
 T CNavLadder::Load(void*, unsigned int)
 T CNavLadder::OnDestroyNotify(CNavArea*)
 T CNavLadder::OnSplit(CNavArea*, CNavArea*, CNavArea*)
 T CNavLadder::Save(void*, unsigned int) const
 T CNavLadder::SetDir(NavDirType)
 T CNavLadder::~CNavLadder()
 T CNavMesh::AddNavArea(CNavArea*)
 T CNavMesh::AddNode(Vector const&, Vector const&, NavDirType, CNavNode*)
 T CNavMesh::AddWalkableSeed(Vector const&, Vector const&)
 T CNavMesh::AllocateGrid(float, float, float, float)
 T CNavMesh::BeginAnalysis()
 T CNavMesh::BeginGeneration(bool)
 T CNavMesh::BuildArea(CNavNode*, int, int)
 T CNavMesh::BuildLadders()
 T CNavMesh::CNavMesh()
 T CNavMesh::ClearPlayerCounts()
 T CNavMesh::CommandNavBeginArea()
 T CNavMesh::CommandNavBuildLadder()
 T CNavMesh::CommandNavConnect()
 T CNavMesh::CommandNavCornerLower()
 T CNavMesh::CommandNavCornerPlaceOnGround()
 T CNavMesh::CommandNavCornerRaise()
 T CNavMesh::CommandNavCornerSelect()
 T CNavMesh::CommandNavDelete()
 T CNavMesh::CommandNavDisconnect()
 T CNavMesh::CommandNavEndArea()
 T CNavMesh::CommandNavLadderFlip()
 T CNavMesh::CommandNavMakeSniperSpots()
 T CNavMesh::CommandNavMark()
 T CNavMesh::CommandNavMarkUnnamed()
 T CNavMesh::CommandNavMerge()
 T CNavMesh::CommandNavPlaceFloodFill()
 T CNavMesh::CommandNavPlacePick()
 T CNavMesh::CommandNavRemoveUnusedJumpAreas()
 T CNavMesh::CommandNavSplice()
 T CNavMesh::CommandNavSplit()
 T CNavMesh::CommandNavToggleAttribute(NavAttributeType)
 T CNavMesh::CommandNavTogglePlaceMode()
 T CNavMesh::CommandNavTogglePlacePainting()
 T CNavMesh::CommandNavUnmark()
 T CNavMesh::CommandNavWarpToMark()
 T CNavMesh::ComputeBattlefrontAreas()
 T CNavMesh::ConnectGeneratedAreas()
 T CNavMesh::CreateHidingSpot() const
 T CNavMesh::CreateLadder(Vector const&, Vector const&, Vector2D const*)
 T CNavMesh::CreateNavAreasFromNodes()
 T CNavMesh::DestroyHidingSpots()
 T CNavMesh::DestroyLadders()
 T CNavMesh::DestroyNavigationMesh(bool)
 T CNavMesh::DrawDanger() const
 T CNavMesh::DrawEditMode()
 T CNavMesh::DrawPlayerCounts() const
 T CNavMesh::GetActiveNavArea()
 T CNavMesh::GetFilename() const
 T CNavMesh::GetGroundHeight(Vector const&, float*, Vector*) const
 T CNavMesh::GetLadderByID(unsigned int) const
 T CNavMesh::GetNavArea(Vector const&, float) const
 T CNavMesh::GetNavAreaByID(unsigned int) const
 T CNavMesh::GetNearestNavArea(Vector const&, bool, float) const
 T CNavMesh::GetNextWalkableSeedNode()
 T CNavMesh::GetPlace(Vector const&) const
 T CNavMesh::GetPlayerSpawnName() const
 T CNavMesh::GetSimpleGroundHeight(Vector const&, float*, Vector*) const
 T CNavMesh::IncreaseDangerNearby(int, float, CNavArea*, Vector const&, float)
 T CNavMesh::Load()
 T CNavMesh::LoadPlaceDatabase()
 T CNavMesh::MarkJumpAreas()
 T CNavMesh::MergeGeneratedAreas()
 T CNavMesh::NameToPlace(char const*) const
 T CNavMesh::OnEditModeEnd()
 T CNavMesh::OnEditModeStart()
 T CNavMesh::PartialNameToPlace(char const*) const
 T CNavMesh::PlaceNameAutocomplete(char const*, char (*) [64])
 T CNavMesh::PlaceToName(unsigned int) const
 T CNavMesh::PrintAllPlaces() const
 T CNavMesh::RemoveNavArea(CNavArea*)
 T CNavMesh::RemoveUnusedJumpAreas()
 T CNavMesh::Reset()
 T CNavMesh::SampleStep()
 T CNavMesh::Save() const
 T CNavMesh::SetEditMode(bool)
 T CNavMesh::SetMarkedArea(CNavArea*)
 T CNavMesh::SetMarkedLadder(CNavLadder*)
 T CNavMesh::SetPlacePaintingMode(bool)
 T CNavMesh::SetPlayerSpawnName(char const*)
 T CNavMesh::SquareUpAreas()
 T CNavMesh::StripNavigationAreas()
 T CNavMesh::TestArea(CNavNode*, int, int)
 T CNavMesh::Update()
 T CNavMesh::UpdateGeneration(float)
 T CNavMesh::~CNavMesh()
 T CNavNode::CNavNode(Vector const&, Vector const&, CNavNode*)
 T CNavNode::CheckCrouch()
 T CNavNode::ConnectTo(CNavNode*, NavDirType)
 T CNavNode::Draw()
 T CNavNode::GetNode(Vector const&)
 T CNavNode::IsBiLinked(NavDirType) const
 T CNavNode::IsClosedCell() const
 T CNavPath::BuildTrivialPath(Vector const&, Vector const&)
 T CNavPath::ComputePathPositions()
 T CNavPath::Draw(Vector const&)
 T CNavPath::FindClosestPointOnPath(Vector const*, int, int, Vector*) const
 T CNavPath::FindNextOccludedNode(int)
 T CNavPath::GetLength() const
 T CNavPath::GetPointAlongPath(float, Vector*) const
 T CNavPath::GetSegmentIndexAlongPath(float) const
 T CNavPath::IsAtEnd(Vector const&) const
 T CNavPath::Optimize()
 T CNavPathFollower::CNavPathFollower()
 T CNavPathFollower::FeelerReflexAdjustment(Vector*, float)
 T CNavPathFollower::FindOurPositionOnPath(Vector*, bool) const
 T CNavPathFollower::FindPathPoint(float, Vector*, int*)
 T CNavPathFollower::Reset()
 T CNavPathFollower::Update(float, bool)
 T CNodeEnt::CNodeEnt()
 T CNodeEnt::GetBaseMap()
 T CNodeEnt::GetDataDescMap()
 T CNodeEnt::Spawn()
 T CNodeEnt::Spawn(char const*)
 T CNotifyList::AddEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ClearEntity(CBaseEntity*)
 T CNotifyList::LevelInitPreEntity()
 T CNotifyList::LevelShutdownPreEntity()
 T CNotifyList::OnEntityCreated(CBaseEntity*)
 T CNotifyList::OnEntityDeleted(CBaseEntity*)
 T CNotifyList::RemoveEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ReportNamedEvent(CBaseEntity*, char const*)
 T CNotifyList::ReportSystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CNullEntity::Spawn()
 T COM_Log(char*, char*, ...)
 T CONSOLE_ECHO(char*, ...)
 T COrnamentProp::Activate()
 T COrnamentProp::AttachTo(char const*, CBaseEntity*)
 T COrnamentProp::DetachFromOwner()
 T COrnamentProp::GetBaseMap()
 T COrnamentProp::GetDataDescMap()
 T COrnamentProp::InputDetach(inputdata_t&)
 T COrnamentProp::InputSetAttached(inputdata_t&)
 T COrnamentProp::Spawn()
 T COutputEvent::FireOutput(CBaseEntity*, CBaseEntity*, float)
 T CPASAttenuationFilter::Filter(Vector const&, float)
 T CParticleFire::CParticleFire()
 T CParticleFire::GetBaseMap()
 T CParticleFire::GetClassName()
 T CParticleFire::GetDataDescMap()
 T CParticleFire::GetServerClass()
 T CParticleFire::YouForgotToImplementOrDeclareServerClass()
 T CParticleLight::CParticleLight()
 T CParticleLight::GetBaseMap()
 T CParticleLight::GetDataDescMap()
 T CPathCorner::DrawDebugGeometryOverlays()
 T CPathCorner::DrawDebugTextOverlays()
 T CPathCorner::GetBaseMap()
 T CPathCorner::GetDataDescMap()
 T CPathCorner::InputInPass(inputdata_t&)
 T CPathCorner::InputSetNextPathCorner(inputdata_t&)
 T CPathCorner::Spawn()
 T CPathKeyFrame::Activate()
 T CPathKeyFrame::CalculateFrameDuration()
 T CPathKeyFrame::GetBaseMap()
 T CPathKeyFrame::GetDataDescMap()
 T CPathKeyFrame::InsertNewKey(Vector, QAngle)
 T CPathKeyFrame::Link()
 T CPathKeyFrame::NextKey(int)
 T CPathKeyFrame::PrevKey(int)
 T CPathKeyFrame::SetKeyAngles(QAngle)
 T CPathKeyFrame::Spawn()
 T CPathTrack::Activate()
 T CPathTrack::BeginIteration()
 T CPathTrack::CPathTrack()
 T CPathTrack::DisableAlternatePath()
 T CPathTrack::DisablePath()
 T CPathTrack::DrawDebugGeometryOverlays()
 T CPathTrack::EnableAlternatePath()
 T CPathTrack::EnablePath()
 T CPathTrack::EndIteration()
 T CPathTrack::GetBaseMap()
 T CPathTrack::GetDataDescMap()
 T CPathTrack::GetNext()
 T CPathTrack::GetNextInDir(bool)
 T CPathTrack::GetOrientation(bool)
 T CPathTrack::GetOrientationType()
 T CPathTrack::GetPrevious()
 T CPathTrack::HasAlternathPath() const
 T CPathTrack::HasBeenVisited() const
 T CPathTrack::InputDisableAlternatePath(inputdata_t&)
 T CPathTrack::InputDisablePath(inputdata_t&)
 T CPathTrack::InputEnableAlternatePath(inputdata_t&)
 T CPathTrack::InputEnablePath(inputdata_t&)
 T CPathTrack::InputPass(inputdata_t&)
 T CPathTrack::InputToggleAlternatePath(inputdata_t&)
 T CPathTrack::InputTogglePath(inputdata_t&)
 T CPathTrack::Instance(edict_t*)
 T CPathTrack::Link()
 T CPathTrack::LookAhead(Vector&, float, int, CPathTrack**)
 T CPathTrack::Nearest(Vector const&)
 T CPathTrack::Project(CPathTrack*, CPathTrack*, Vector&, float)
 T CPathTrack::SetPrevious(CPathTrack*)
 T CPathTrack::Spawn()
 T CPathTrack::ToggleAlternatePath()
 T CPathTrack::TogglePath()
 T CPathTrack::ValidPath(CPathTrack*, int)
 T CPathTrack::Visit()
 T CPhysBox::CreateVPhysics()
 T CPhysBox::DrawDebugTextOverlays()
 T CPhysBox::EnableMotion()
 T CPhysBox::GetBaseMap()
 T CPhysBox::GetClassName()
 T CPhysBox::GetDataDescMap()
 T CPhysBox::GetServerClass()
 T CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CPhysBox::InputDisableFloating(inputdata_t&)
 T CPhysBox::InputDisableMotion(inputdata_t&)
 T CPhysBox::InputEnableMotion(inputdata_t&)
 T CPhysBox::InputForceDrop(inputdata_t&)
 T CPhysBox::InputSleep(inputdata_t&)
 T CPhysBox::InputWake(inputdata_t&)
 T CPhysBox::Move(Vector const&)
 T CPhysBox::ObjectCaps()
 T CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysBox::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysBox::Spawn()
 T CPhysBox::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysBox::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysBox::VPhysicsUpdate(IPhysicsObject*)
 T CPhysBox::YouForgotToImplementOrDeclareServerClass()
 T CPhysBoxMultiplayer::GetBaseMap()
 T CPhysBoxMultiplayer::GetClassName()
 T CPhysBoxMultiplayer::GetDataDescMap()
 T CPhysBoxMultiplayer::GetServerClass()
 T CPhysBoxMultiplayer::YouForgotToImplementOrDeclareServerClass()
 T CPhysConstraint::Activate()
 T CPhysConstraint::ActivateConstraint()
 T CPhysConstraint::CPhysConstraint()
 T CPhysConstraint::GetBaseMap()
 T CPhysConstraint::GetConstraintObjects(hl_constraint_info_t&)
 T CPhysConstraint::GetDataDescMap()
 T CPhysConstraint::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysConstraint::Precache()
 T CPhysConstraint::SetupTeleportationHandling(hl_constraint_info_t&)
 T CPhysConstraint::Spawn()
 T CPhysConstraint::~CPhysConstraint()
 T CPhysConstraintSystem::GetBaseMap()
 T CPhysConstraintSystem::GetDataDescMap()
 T CPhysConstraintSystem::Spawn()
 T CPhysConvert::GetBaseMap()
 T CPhysConvert::GetDataDescMap()
 T CPhysConvert::InputConvertTarget(inputdata_t&)
 T CPhysExplosion::Explode(CBaseEntity*)
 T CPhysExplosion::FindEntity(CBaseEntity*, CBaseEntity*)
 T CPhysExplosion::GetBaseMap()
 T CPhysExplosion::GetDataDescMap()
 T CPhysExplosion::InputExplode(inputdata_t&)
 T CPhysExplosion::Spawn()
 T CPhysFixed::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysForce::Activate()
 T CPhysForce::ActivateForce()
 T CPhysForce::CPhysForce()
 T CPhysForce::ForceOff()
 T CPhysForce::ForceOn()
 T CPhysForce::GetBaseMap()
 T CPhysForce::GetDataDescMap()
 T CPhysForce::InputActivate(inputdata_t&)
 T CPhysForce::InputDeactivate(inputdata_t&)
 T CPhysForce::InputForceScale(inputdata_t&)
 T CPhysForce::OnRestore()
 T CPhysForce::ScaleForce(float)
 T CPhysForce::Spawn()
 T CPhysForce::~CPhysForce()
 T CPhysHinge::GetBaseMap()
 T CPhysHinge::GetDataDescMap()
 T CPhysHinge::IsWorldHinge(hl_constraint_info_t const&, int*)
 T CPhysHinge::Spawn()
 T CPhysImpact::Activate()
 T CPhysImpact::GetBaseMap()
 T CPhysImpact::GetDataDescMap()
 T CPhysImpact::InputImpact(inputdata_t&)
 T CPhysImpact::PointAtEntity()
 T CPhysImpact::Spawn()
 T CPhysLength::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysLength::GetBaseMap()
 T CPhysLength::GetDataDescMap()
 T CPhysMagnet::CPhysMagnet()
 T CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 T CPhysMagnet::DetachAll()
 T CPhysMagnet::DoMagnetSuck(CBaseEntity*)
 T CPhysMagnet::GetAttachedObject(int)
 T CPhysMagnet::GetBaseMap()
 T CPhysMagnet::GetClassName()
 T CPhysMagnet::GetDataDescMap()
 T CPhysMagnet::GetNumAttachedObjects()
 T CPhysMagnet::GetServerClass()
 T CPhysMagnet::GetTotalMassAttachedObjects()
 T CPhysMagnet::InputToggle(inputdata_t&)
 T CPhysMagnet::InputTurnOff(inputdata_t&)
 T CPhysMagnet::InputTurnOn(inputdata_t&)
 T CPhysMagnet::Precache()
 T CPhysMagnet::SetConstraintGroup(IPhysicsConstraintGroup*)
 T CPhysMagnet::Spawn()
 T CPhysMagnet::Touch(CBaseEntity*)
 T CPhysMagnet::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysMagnet::YouForgotToImplementOrDeclareServerClass()
 T CPhysMagnet::~CPhysMagnet()
 T CPhysMotor::Activate()
 T CPhysMotor::CalculateAcceleration()
 T CPhysMotor::GetBaseMap()
 T CPhysMotor::GetDataDescMap()
 T CPhysMotor::InputSetTargetSpeed(inputdata_t&)
 T CPhysMotor::InputTurnOff(inputdata_t&)
 T CPhysMotor::InputTurnOn(inputdata_t&)
 T CPhysMotor::OnRestore()
 T CPhysMotor::Spawn()
 T CPhysMotor::TargetSpeedChanged()
 T CPhysMotor::Think()
 T CPhysMotor::TurnOn()
 T CPhysMotor::~CPhysMotor()
 T CPhysPulley::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysPulley::GetBaseMap()
 T CPhysPulley::GetDataDescMap()
 T CPhysSlideConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysSlideConstraint::GetBaseMap()
 T CPhysSlideConstraint::GetDataDescMap()
 T CPhysThruster::GetBaseMap()
 T CPhysThruster::GetDataDescMap()
 T CPhysThruster::OnActivate()
 T CPhysThruster::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysTorque::GetBaseMap()
 T CPhysTorque::GetDataDescMap()
 T CPhysTorque::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysTorque::Spawn()
 T CPhysicsCannister::BeginShutdownThink()
 T CPhysicsCannister::CalcLocalThrust(Vector const&)
 T CPhysicsCannister::CannisterActivate(CBaseEntity*, Vector const&)
 T CPhysicsCannister::CannisterFire(CBaseEntity*)
 T CPhysicsCannister::CreateVPhysics()
 T CPhysicsCannister::Deactivate()
 T CPhysicsCannister::Explode(CBaseEntity*)
 T CPhysicsCannister::ExplodeTouch(CBaseEntity*)
 T CPhysicsCannister::GetBaseMap()
 T CPhysicsCannister::GetDataDescMap()
 T CPhysicsCannister::HasPhysicsAttacker(float)
 T CPhysicsCannister::InputActivate(inputdata_t&)
 T CPhysicsCannister::InputDeactivate(inputdata_t&)
 T CPhysicsCannister::InputExplode(inputdata_t&)
 T CPhysicsCannister::InputWake(inputdata_t&)
 T CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsCannister::OnRestore()
 T CPhysicsCannister::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsCannister::Precache()
 T CPhysicsCannister::SetPhysicsAttacker(CBasePlayer*, float)
 T CPhysicsCannister::ShutdownJet()
 T CPhysicsCannister::Spawn()
 T CPhysicsCannister::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPhysicsCannister::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CPhysicsCannister::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsCannister::~CPhysicsCannister()
 T CPhysicsEntitySolver::Create(CBaseEntity*, CBaseEntity*, float)
 T CPhysicsEntitySolver::GetBaseMap()
 T CPhysicsEntitySolver::GetDataDescMap()
 T CPhysicsEntitySolver::Init(CBaseEntity*, CBaseEntity*, float)
 T CPhysicsEntitySolver::Spawn()
 T CPhysicsEntitySolver::Think()
 T CPhysicsEntitySolver::UpdateOnRemove()
 T CPhysicsGameTrace::VehiclePointInWater(Vector const&)
 T CPhysicsGameTrace::VehicleTraceRay(Ray_t const&, void*, CGameTrace*)
 T CPhysicsGameTrace::VehicleTraceRayWithWater(Ray_t const&, void*, CGameTrace*)
 T CPhysicsHook::FrameUpdatePostEntityThink()
 T CPhysicsHook::Init()
 T CPhysicsHook::LevelInitPostEntity()
 T CPhysicsHook::LevelInitPreEntity()
 T CPhysicsHook::LevelShutdownPostEntity()
 T CPhysicsHook::LevelShutdownPreEntity()
 T CPhysicsHook::PreClientUpdate()
 T CPhysicsNPCSolver::BecomePenetrationSolver()
 T CPhysicsNPCSolver::CPhysicsNPCSolver()
 T CPhysicsNPCSolver::CheckTouching()
 T CPhysicsNPCSolver::Create(CAI_BaseNPC*, CBaseEntity*, bool, float)
 T CPhysicsNPCSolver::GetBaseMap()
 T CPhysicsNPCSolver::GetDataDescMap()
 T CPhysicsNPCSolver::Init(CAI_BaseNPC*, CBaseEntity*, bool, float)
 T CPhysicsNPCSolver::IsContactOnNPCHead(IPhysicsFrictionSnapshot*, IPhysicsObject*, CAI_BaseNPC*)
 T CPhysicsNPCSolver::IsIntersecting()
 T CPhysicsNPCSolver::ResetCancelTime()
 T CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsNPCSolver::Spawn()
 T CPhysicsNPCSolver::Think()
 T CPhysicsNPCSolver::UpdateOnRemove()
 T CPhysicsNPCSolver::~CPhysicsNPCSolver()
 T CPhysicsProp::ClearFlagsThink()
 T CPhysicsProp::ComputeEnablingImpulse(int, gamevcollisionevent_t*)
 T CPhysicsProp::CreateVPhysics()
 T CPhysicsProp::DrawDebugTextOverlays()
 T CPhysicsProp::EnableMotion()
 T CPhysicsProp::GetBaseMap()
 T CPhysicsProp::GetClassName()
 T CPhysicsProp::GetDataDescMap()
 T CPhysicsProp::GetMass() const
 T CPhysicsProp::GetMassCenter(Vector*)
 T CPhysicsProp::GetPreferredCarryAngles(QAngle&)
 T CPhysicsProp::GetServerClass()
 T CPhysicsProp::InputDisableFloating(inputdata_t&)
 T CPhysicsProp::InputDisableMotion(inputdata_t&)
 T CPhysicsProp::InputEnableMotion(inputdata_t&)
 T CPhysicsProp::InputSleep(inputdata_t&)
 T CPhysicsProp::InputWake(inputdata_t&)
 T CPhysicsProp::ObjectCaps()
 T CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsProp::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsProp::OverridePropdata()
 T CPhysicsProp::Precache()
 T CPhysicsProp::Spawn()
 T CPhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysicsProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsProp::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CPhysicsPropMultiplayer::GetBaseMap()
 T CPhysicsPropMultiplayer::GetClassName()
 T CPhysicsPropMultiplayer::GetDataDescMap()
 T CPhysicsPropMultiplayer::GetServerClass()
 T CPhysicsPropMultiplayer::YouForgotToImplementOrDeclareServerClass()
 T CPhysicsPropRespawnable::CPhysicsPropRespawnable()
 T CPhysicsPropRespawnable::Event_Killed(CTakeDamageInfo const&)
 T CPhysicsPropRespawnable::GetBaseMap()
 T CPhysicsPropRespawnable::GetDataDescMap()
 T CPhysicsPropRespawnable::Materialize()
 T CPhysicsPropRespawnable::Spawn()
 T CPhysicsPushedEntities::AddEntity(CBaseEntity*)
 T CPhysicsPushedEntities::BeginPush(CBaseEntity*)
 T CPhysicsPushedEntities::CPhysicsPushedEntities()
 T CPhysicsPushedEntities::ComputeRotationalPushDirection(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&, Vector*, CBaseEntity*)
 T CPhysicsPushedEntities::FinishPush(bool, CPhysicsPushedEntities::RotatingPushMove_t const*)
 T CPhysicsPushedEntities::FinishPushers()
 T CPhysicsPushedEntities::FinishRotPushedEntity(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&)
 T CPhysicsPushedEntities::GenerateBlockingEntityList()
 T CPhysicsPushedEntities::GenerateBlockingEntityListAddBox(Vector const&)
 T CPhysicsPushedEntities::IsPushedPositionValid(CBaseEntity*)
 T CPhysicsPushedEntities::LinearlyMoveRootEntity(CBaseEntity*, float, Vector*)
 T CPhysicsPushedEntities::PerformLinearPush(CBaseEntity*, float)
 T CPhysicsPushedEntities::PerformRotatePush(CBaseEntity*, float)
 T CPhysicsPushedEntities::RegisterBlockage()
 T CPhysicsPushedEntities::RelinkPusherList(int*)
 T CPhysicsPushedEntities::RestoreEntities()
 T CPhysicsPushedEntities::RotateRootEntity(CBaseEntity*, float, CPhysicsPushedEntities::RotatingPushMove_t&)
 T CPhysicsPushedEntities::SetupAllInHierarchy(CBaseEntity*)
 T CPhysicsPushedEntities::SpeculativelyCheckLinearPush(Vector const&)
 T CPhysicsPushedEntities::SpeculativelyCheckPush(CPhysicsPushedEntities::PhysicsPushedInfo_t&, Vector const&, bool)
 T CPhysicsPushedEntities::SpeculativelyCheckRotPush(CPhysicsPushedEntities::RotatingPushMove_t const&, CBaseEntity*)
 T CPhysicsPushedEntities::StoreMovedEntities(physicspushlist_t&)
 T CPhysicsPushedEntities::UnlinkPusherList(int*)
 T CPhysicsShake::GetBaseMap()
 T CPhysicsSpring::Activate()
 T CPhysicsSpring::CPhysicsSpring()
 T CPhysicsSpring::DrawDebugGeometryOverlays()
 T CPhysicsSpring::DrawDebugTextOverlays()
 T CPhysicsSpring::GetBaseMap()
 T CPhysicsSpring::GetDataDescMap()
 T CPhysicsSpring::GetSpringObjectConnections(string_t, string_t, IPhysicsObject**, IPhysicsObject**)
 T CPhysicsSpring::InputSetSpringConstant(inputdata_t&)
 T CPhysicsSpring::InputSetSpringDamping(inputdata_t&)
 T CPhysicsSpring::InputSetSpringLength(inputdata_t&)
 T CPhysicsSpring::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysicsSpring::Spawn()
 T CPhysicsSpring::~CPhysicsSpring()
 T CPhysicsWind::GetBaseMap()
 T CPhysicsWire::GetBaseMap()
 T CPhysicsWire::GetDataDescMap()
 T CPhysicsWire::Precache()
 T CPhysicsWire::SetupPhysics()
 T CPhysicsWire::Spawn()
 T CPlane::CPlane()
 T CPlane::InitializePlane(Vector const&, Vector const&)
 T CPlane::PointDist(Vector const&)
 T CPlane::PointInFront(Vector const&)
 T CPlantedC4::C4Think()
 T CPlantedC4::CPlantedC4()
 T CPlantedC4::Explode(CGameTrace*, int)
 T CPlantedC4::GetBaseMap()
 T CPlantedC4::GetClassName()
 T CPlantedC4::GetControlPanelClassName(int, char const*&)
 T CPlantedC4::GetControlPanelInfo(int, char const*&)
 T CPlantedC4::GetDataDescMap()
 T CPlantedC4::GetPredDescMap()
 T CPlantedC4::GetServerClass()
 T CPlantedC4::Init(CCSPlayer*, Vector, QAngle)
 T CPlantedC4::Precache()
 T CPlantedC4::SetTransmit(CCheckTransmitInfo*, bool)
 T CPlantedC4::ShootSatchelCharge(CCSPlayer*, Vector, QAngle)
 T CPlantedC4::ShouldTransmit(CCheckTransmitInfo const*)
 T CPlantedC4::SpawnControlPanels()
 T CPlantedC4::UpdateTransmitState()
 T CPlantedC4::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPlantedC4::YouForgotToImplementOrDeclareServerClass()
 T CPlantedC4::~CPlantedC4()
 T CPlasma::CPlasma()
 T CPlasma::EnableSmoke(int)
 T CPlasma::GetBaseMap()
 T CPlasma::GetClassName()
 T CPlasma::GetDataDescMap()
 T CPlasma::GetServerClass()
 T CPlasma::Precache()
 T CPlasma::YouForgotToImplementOrDeclareServerClass()
 T CPlasma::~CPlasma()
 T CPlatTrigger::SpawnInsideTrigger(CFuncPlat*)
 T CPlatTrigger::Touch(CBaseEntity*)
 T CPlayerInfo::ChangeTeam(int)
 T CPlayerInfo::GetAbsAngles()
 T CPlayerInfo::GetAbsOrigin()
 T CPlayerInfo::GetArmorValue()
 T CPlayerInfo::GetDeathCount()
 T CPlayerInfo::GetFragCount()
 T CPlayerInfo::GetHealth()
 T CPlayerInfo::GetLastUserCommand()
 T CPlayerInfo::GetLocalAngles()
 T CPlayerInfo::GetLocalOrigin()
 T CPlayerInfo::GetMaxHealth()
 T CPlayerInfo::GetModelName()
 T CPlayerInfo::GetName()
 T CPlayerInfo::GetNetworkIDString()
 T CPlayerInfo::GetPlayerMaxs()
 T CPlayerInfo::GetPlayerMins()
 T CPlayerInfo::GetTeamIndex()
 T CPlayerInfo::GetUserID()
 T CPlayerInfo::GetWeaponName()
 T CPlayerInfo::IsConnected()
 T CPlayerInfo::IsDead()
 T CPlayerInfo::IsEFlagSet(int)
 T CPlayerInfo::IsFakeClient()
 T CPlayerInfo::IsHLTV()
 T CPlayerInfo::IsInAVehicle()
 T CPlayerInfo::IsObserver()
 T CPlayerInfo::IsPlayer()
 T CPlayerInfo::PostClientMessagesSent()
 T CPlayerInfo::RemoveAllItems(bool)
 T CPlayerInfo::RunPlayerMove(CBotCmd*)
 T CPlayerInfo::SetAbsAngles(QAngle&)
 T CPlayerInfo::SetAbsOrigin(Vector&)
 T CPlayerInfo::SetActiveWeapon(char const*)
 T CPlayerInfo::SetLastUserCommand(CBotCmd const&)
 T CPlayerInfo::SetLocalAngles(QAngle const&)
 T CPlayerInfo::SetLocalOrigin(Vector const&)
 T CPlayerInfoManager::GetGlobalVars()
 T CPlayerInfoManager::GetPlayerInfo(edict_t*)
 T CPlayerLocalData::CPlayerLocalData()
 T CPlayerLocalData::GetBaseMap()
 T CPlayerLocalData::GetPredDescMap()
 T CPlayerLocalData::UpdateAreaBits(CBasePlayer*, unsigned char*)
 T CPlayerMove::CPlayerMove()
 T CPlayerMove::CheckMovingGround(CBasePlayer*, double)
 T CPlayerMove::FinishCommand(CBasePlayer*)
 T CPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPlayerMove::RunCommand(CBasePlayer*, CUserCmd*, IMoveHelper*)
 T CPlayerMove::RunPostThink(CBasePlayer*)
 T CPlayerMove::RunPreThink(CBasePlayer*)
 T CPlayerMove::RunThink(CBasePlayer*, double)
 T CPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPlayerMove::StartCommand(CBasePlayer*, CUserCmd*)
 T CPlayerResource::GetBaseMap()
 T CPlayerResource::GetClassName()
 T CPlayerResource::GetDataDescMap()
 T CPlayerResource::GetServerClass()
 T CPlayerResource::ResourceThink()
 T CPlayerResource::Spawn()
 T CPlayerResource::UpdatePlayerData()
 T CPlayerResource::UpdateTransmitState()
 T CPlayerResource::YouForgotToImplementOrDeclareServerClass()
 T CPlayerState::GetBaseMap()
 T CPlayerState::GetPredDescMap()
 T CPluginBotManager::CreateBot(char const*)
 T CPluginBotManager::GetBotController(edict_t*)
 T CPluginHelpersCheck::CreateMessage(char const*, edict_t*, DIALOG_TYPE, KeyValues*)
 T CPointAngleSensor::Activate()
 T CPointAngleSensor::Disable()
 T CPointAngleSensor::DrawDebugTextOverlays()
 T CPointAngleSensor::Enable()
 T CPointAngleSensor::GetBaseMap()
 T CPointAngleSensor::GetDataDescMap()
 T CPointAngleSensor::InputDisable(inputdata_t&)
 T CPointAngleSensor::InputEnable(inputdata_t&)
 T CPointAngleSensor::InputSetTargetEntity(inputdata_t&)
 T CPointAngleSensor::InputTest(inputdata_t&)
 T CPointAngleSensor::InputToggle(inputdata_t&)
 T CPointAngleSensor::IsFacingWithinTolerance(CBaseEntity*, CBaseEntity*, float, float*)
 T CPointAngleSensor::KeyValue(char const*, char const*)
 T CPointAngleSensor::Spawn()
 T CPointAngleSensor::Think()
 T CPointAngularVelocitySensor::Activate()
 T CPointAngularVelocitySensor::CompareToThreshold(CBaseEntity*, float, bool)
 T CPointAngularVelocitySensor::FireCompareOutput(int, CBaseEntity*)
 T CPointAngularVelocitySensor::GetBaseMap()
 T CPointAngularVelocitySensor::GetDataDescMap()
 T CPointAngularVelocitySensor::InputTest(inputdata_t&)
 T CPointAngularVelocitySensor::SampleAngularVelocity(CBaseEntity*)
 T CPointAngularVelocitySensor::Spawn()
 T CPointAngularVelocitySensor::Think()
 T CPointCamera::CPointCamera()
 T CPointCamera::ChangeFOVThink()
 T CPointCamera::GetBaseMap()
 T CPointCamera::GetClassName()
 T CPointCamera::GetDataDescMap()
 T CPointCamera::GetServerClass()
 T CPointCamera::InputChangeFOV(inputdata_t&)
 T CPointCamera::InputSetOff(inputdata_t&)
 T CPointCamera::InputSetOn(inputdata_t&)
 T CPointCamera::InputSetOnAndTurnOthersOff(inputdata_t&)
 T CPointCamera::SetActive(bool)
 T CPointCamera::Spawn()
 T CPointCamera::UpdateTransmitState()
 T CPointCamera::YouForgotToImplementOrDeclareServerClass()
 T CPointCamera::~CPointCamera()
 T CPointClientCommand::GetBaseMap()
 T CPointClientCommand::GetDataDescMap()
 T CPointClientCommand::InputCommand(inputdata_t&)
 T CPointDevShotCamera::DevShotThink_PostShot()
 T CPointDevShotCamera::DevShotThink_Setup()
 T CPointDevShotCamera::DevShotThink_TakeShot()
 T CPointDevShotCamera::GetBaseMap()
 T CPointDevShotCamera::GetDataDescMap()
 T CPointDevShotCamera::Spawn()
 T CPointDevShotCamera::UpdateTransmitState()
 T CPointEntity::KeyValue(char const*, char const*)
 T CPointEntity::Spawn()
 T CPointHurt::GetBaseMap()
 T CPointHurt::GetDataDescMap()
 T CPointHurt::HurtThink()
 T CPointHurt::InputHurt(inputdata_t&)
 T CPointHurt::InputToggle(inputdata_t&)
 T CPointHurt::InputTurnOff(inputdata_t&)
 T CPointHurt::InputTurnOn(inputdata_t&)
 T CPointHurt::Precache()
 T CPointHurt::Spawn()
 T CPointPlayerMoveConstraint::Activate()
 T CPointPlayerMoveConstraint::ConstraintThink()
 T CPointPlayerMoveConstraint::GetBaseMap()
 T CPointPlayerMoveConstraint::GetDataDescMap()
 T CPointPlayerMoveConstraint::InputTurnOff(inputdata_t&)
 T CPointPlayerMoveConstraint::InputTurnOn(inputdata_t&)
 T CPointPlayerMoveConstraint::UpdateTransmitState()
 T CPointServerCommand::GetBaseMap()
 T CPointServerCommand::GetDataDescMap()
 T CPointServerCommand::InputCommand(inputdata_t&)
 T CPointSpotlight::Activate()
 T CPointSpotlight::CPointSpotlight()
 T CPointSpotlight::ComputeRenderInfo()
 T CPointSpotlight::CreateEfficientSpotlight()
 T CPointSpotlight::GetBaseMap()
 T CPointSpotlight::GetDataDescMap()
 T CPointSpotlight::InputLightOff(inputdata_t&)
 T CPointSpotlight::InputLightOn(inputdata_t&)
 T CPointSpotlight::OnEntityEvent(EntityEvent_t, void*)
 T CPointSpotlight::Precache()
 T CPointSpotlight::Spawn()
 T CPointSpotlight::SpotlightCreate()
 T CPointSpotlight::SpotlightCurrentPos()
 T CPointSpotlight::SpotlightDestroy()
 T CPointSpotlight::SpotlightThink()
 T CPointSpotlight::SpotlightUpdate()
 T CPointSpotlight::UpdateTransmitState()
 T CPointTeleport::Activate()
 T CPointTeleport::GetBaseMap()
 T CPointTeleport::GetDataDescMap()
 T CPointTeleport::InputTeleport(inputdata_t&)
 T CPointTemplate::AddTemplate(CBaseEntity*, char const*, int)
 T CPointTemplate::AllowNameFixup()
 T CPointTemplate::CreateInstance(Vector const&, QAngle const&, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >*)
 T CPointTemplate::FinishBuildingTemplates()
 T CPointTemplate::GetBaseMap()
 T CPointTemplate::GetDataDescMap()
 T CPointTemplate::GetNumTemplateEntities()
 T CPointTemplate::GetNumTemplates()
 T CPointTemplate::GetTemplateEntity(int)
 T CPointTemplate::GetTemplateIndexForTemplate(int)
 T CPointTemplate::InputForceSpawn(inputdata_t&)
 T CPointTemplate::PerformPrecache()
 T CPointTemplate::Precache()
 T CPointTemplate::ShouldRemoveTemplateEntities()
 T CPointTemplate::Spawn()
 T CPointTemplate::StartBuildingTemplates()
 T CPositionInterpolator_CatmullRom::GetDetails(char**, int*, int*)
 T CPositionInterpolator_CatmullRom::InterpolatePosition(float, Vector&)
 T CPositionInterpolator_CatmullRom::Release()
 T CPositionInterpolator_CatmullRom::SetKeyPosition(int, Vector const&)
 T CPositionInterpolator_Linear::GetDetails(char**, int*, int*)
 T CPositionInterpolator_Linear::InterpolatePosition(float, Vector&)
 T CPositionInterpolator_Linear::Release()
 T CPositionInterpolator_Linear::SetKeyPosition(int, Vector const&)
 T CPositionInterpolator_Rope::CPositionInterpolator_Rope()
 T CPositionInterpolator_Rope::GetDetails(char**, int*, int*)
 T CPositionInterpolator_Rope::InterpolatePosition(float, Vector&)
 T CPositionInterpolator_Rope::ProcessKey(char const*, char const*)
 T CPositionInterpolator_Rope::Release()
 T CPositionInterpolator_Rope::SetKeyPosition(int, Vector const&)
 T CPositionWatcherList::AddToList(CBaseEntity*)
 T CPositionWatcherList::Find(CBaseEntity*)
 T CPositionWatcherList::Init()
 T CPositionWatcherList::NotifyWatchers(CBaseEntity*)
 T CPositionWatcherList::RemoveWatcher(CBaseEntity*)
 T CPositionWatcherList::~CPositionWatcherList()
 T CPrecacheOtherList::AddOrMarkPrecached(char const*)
 T CPrecacheOtherList::LevelInitPreEntity()
 T CPrecacheOtherList::LevelShutdownPostEntity()
 T CPrecacheRegister::CPrecacheRegister(void (*)(void*), void const*)
 T CPrecacheRegister::Precache()
 T CPrecacheRegister::PrecacheFn_Other(void*)
 T CPrecipitation::CPrecipitation()
 T CPrecipitation::GetBaseMap()
 T CPrecipitation::GetClassName()
 T CPrecipitation::GetDataDescMap()
 T CPrecipitation::GetServerClass()
 T CPrecipitation::Spawn()
 T CPrecipitation::YouForgotToImplementOrDeclareServerClass()
 T CPredictableId::CPredictableId()
 T CPredictableId::Describe() const
 T CPredictableId::GetAcknowledged() const
 T CPredictableId::GetCommandNumber() const
 T CPredictableId::GetHash() const
 T CPredictableId::GetInstanceNumber() const
 T CPredictableId::GetPlayer() const
 T CPredictableId::GetRaw() const
 T CPredictableId::Init(int, int, char const*, char const*, int)
 T CPredictableId::IsActive() const
 T CPredictableId::ResetInstanceCounters()
 T CPredictableId::SetAcknowledged(bool)
 T CPredictableId::SetCommandNumber(int)
 T CPredictableId::SetInstanceNumber(int)
 T CPredictableId::SetPlayer(int)
 T CPredictableId::SetRaw(int)
 T CPredictableId::operator!=(CPredictableId const&) const
 T CPredictableId::operator==(CPredictableId const&) const
 T CPredictableList::AddEntity(CBaseEntity*)
 T CPredictableList::GetPredictable(int)
 T CPredictableList::GetPredictableCount()
 T CPredictableList::RemoveEntity(CBaseEntity*)
 T CPredictedViewModel::CPredictedViewModel()
 T CPredictedViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CPredictedViewModel::GetClassName()
 T CPredictedViewModel::GetServerClass()
 T CPredictedViewModel::YouForgotToImplementOrDeclareServerClass()
 T CPredictedViewModel::~CPredictedViewModel()
 T CProjectedDecal::Activate()
 T CProjectedDecal::GetBaseMap()
 T CProjectedDecal::GetDataDescMap()
 T CProjectedDecal::InputActivate(inputdata_t&)
 T CProjectedDecal::KeyValue(char const*, char const*)
 T CProjectedDecal::ProjectDecal(CRecipientFilter&)
 T CProjectedDecal::Spawn()
 T CProjectedDecal::StaticDecal()
 T CProjectedDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropData::CPropData()
 T CPropData::GetRandomChunkModel(char const*, int)
 T CPropData::LevelInitPreEntity()
 T CPropData::ParsePropDataFile()
 T CPropData::ParsePropFromBase(CBaseEntity*, char const*)
 T CPropData::ParsePropFromKV(CBaseEntity*, KeyValues*, KeyValues*)
 T CPropData::Shutdown()
 T CPropDoorRotating::AngularMove(QAngle const&, float)
 T CPropDoorRotating::BeginClosing()
 T CPropDoorRotating::BeginOpening(CBaseEntity*)
 T CPropDoorRotating::CalculateDoorVolume(QAngle, QAngle, Vector*, Vector*)
 T CPropDoorRotating::CheckDoorClear(doorCheck_e)
 T CPropDoorRotating::DoorCanClose(bool)
 T CPropDoorRotating::DoorResume()
 T CPropDoorRotating::DoorStop()
 T CPropDoorRotating::DoorTeleportToSpawnPosition()
 T CPropDoorRotating::DrawDebugTextOverlays()
 T CPropDoorRotating::GetBaseMap()
 T CPropDoorRotating::GetDataDescMap()
 T CPropDoorRotating::GetNPCOpenData(CAI_BaseNPC*, opendata_t&)
 T CPropDoorRotating::GetOpenInterval()
 T CPropDoorRotating::GetOpenState()
 T CPropDoorRotating::MoveDone()
 T CPropDoorRotating::OnDoorClosed()
 T CPropDoorRotating::OnDoorOpened()
 T CPropDoorRotating::OnRestore()
 T CPropDoorRotating::Spawn()
 T CPropDoorRotating::~CPropDoorRotating()
 T CPropJeep::AimGunAt(Vector*, float)
 T CPropJeep::BodyTarget(Vector const&, bool)
 T CPropJeep::CPropJeep()
 T CPropJeep::CanExitVehicle(CBaseEntity*)
 T CPropJeep::ChargeCannon()
 T CPropJeep::CheckWater()
 T CPropJeep::CheckWaterLevel()
 T CPropJeep::ComputePDControllerCoefficients(float*, float, float, float)
 T CPropJeep::CreateDangerSounds()
 T CPropJeep::CreateRipple(Vector const&)
 T CPropJeep::CreateServerVehicle()
 T CPropJeep::CreateSplash(Vector const&)
 T CPropJeep::DampenEyePosition(Vector&, QAngle&)
 T CPropJeep::DampenForwardMotion(Vector&, QAngle&, float)
 T CPropJeep::DampenUpMotion(Vector&, QAngle&, float)
 T CPropJeep::DoImpactEffect(CGameTrace&, int)
 T CPropJeep::DrawBeam(Vector const&, Vector const&, float)
 T CPropJeep::DriveVehicle(float, CUserCmd*, int, int)
 T CPropJeep::EnterVehicle(CBasePlayer*)
 T CPropJeep::ExitVehicle(int)
 T CPropJeep::FireCannon()
 T CPropJeep::FireChargedCannon()
 T CPropJeep::GetBaseMap()
 T CPropJeep::GetCannonAim(Vector*)
 T CPropJeep::GetClassName()
 T CPropJeep::GetDataDescMap()
 T CPropJeep::GetServerClass()
 T CPropJeep::HandleWater()
 T CPropJeep::InitWaterData()
 T CPropJeep::InputFinishRemoveTauCannon(inputdata_t&)
 T CPropJeep::InputStartRemoveTauCannon(inputdata_t&)
 T CPropJeep::OnTakeDamage(CTakeDamageInfo const&)
 T CPropJeep::Precache()
 T CPropJeep::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropJeep::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropJeep::Spawn()
 T CPropJeep::StopChargeSound()
 T CPropJeep::Think()
 T CPropJeep::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CPropJeep::UpdateSteeringAngle()
 T CPropJeep::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropJeep::YouForgotToImplementOrDeclareServerClass()
 T CPropVehicle::CPropVehicle()
 T CPropVehicle::DrawDebugGeometryOverlays()
 T CPropVehicle::DrawDebugTextOverlays()
 T CPropVehicle::GetBaseMap()
 T CPropVehicle::GetDataDescMap()
 T CPropVehicle::GetSmoothedVelocity()
 T CPropVehicle::HasPhysicsAttacker(float)
 T CPropVehicle::InputAction(inputdata_t&)
 T CPropVehicle::InputHandBrakeOff(inputdata_t&)
 T CPropVehicle::InputHandBrakeOn(inputdata_t&)
 T CPropVehicle::InputSteering(inputdata_t&)
 T CPropVehicle::InputThrottle(inputdata_t&)
 T CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPropVehicle::Restore(IRestore&)
 T CPropVehicle::Spawn()
 T CPropVehicle::Teleport(Vector const*, QAngle const*, Vector const*)
 T CPropVehicle::Think()
 T CPropVehicle::VPhysicsUpdate(IPhysicsObject*)
 T CPropVehicle::~CPropVehicle()
 T CPropVehicleDriveable::CPropVehicleDriveable()
 T CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CreateServerVehicle()
 T CPropVehicleDriveable::DestroyServerVehicle()
 T CPropVehicleDriveable::DriveVehicle(CBasePlayer*, CUserCmd*)
 T CPropVehicleDriveable::DriveVehicle(float, CUserCmd*, int, int)
 T CPropVehicleDriveable::EnterVehicle(CBasePlayer*)
 T CPropVehicleDriveable::ExitVehicle(int)
 T CPropVehicleDriveable::GetBaseMap()
 T CPropVehicleDriveable::GetClassName()
 T CPropVehicleDriveable::GetDataDescMap()
 T CPropVehicleDriveable::GetDriver()
 T CPropVehicleDriveable::GetServerClass()
 T CPropVehicleDriveable::GetVectors(Vector*, Vector*, Vector*) const
 T CPropVehicleDriveable::InputLock(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOff(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOn(inputdata_t&)
 T CPropVehicleDriveable::InputUnlock(inputdata_t&)
 T CPropVehicleDriveable::IsEngineOn()
 T CPropVehicleDriveable::IsOverturned()
 T CPropVehicleDriveable::OnRestore()
 T CPropVehicleDriveable::Precache()
 T CPropVehicleDriveable::ResetUseKey(CBasePlayer*)
 T CPropVehicleDriveable::Restore(IRestore&)
 T CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropVehicleDriveable::Spawn()
 T CPropVehicleDriveable::StartEngine()
 T CPropVehicleDriveable::StopEngine()
 T CPropVehicleDriveable::Think()
 T CPropVehicleDriveable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CPropVehicleDriveable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropVehicleDriveable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPropVehicleDriveable::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CPropVehicleDriveable::VehicleAngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T CPropVehicleDriveable::YouForgotToImplementOrDeclareServerClass()
 T CPropVehicleDriveable::~CPropVehicleDriveable()
 T CPushable::CreateVPhysics()
 T CPushable::OnTakeDamage(CTakeDamageInfo const&)
 T CPushable::Spawn()
 T CPushable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPushable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CRC32_Final(unsigned long*)
 T CRC32_GetTableEntry(unsigned int)
 T CRC32_Init(unsigned long*)
 T CRC32_ProcessBuffer(unsigned long*, void const*, int)
 T CRagGib::Spawn(char const*, Vector const&, Vector const&, float)
 T CRagdollBoogie::AttachToEntity(CBaseEntity*)
 T CRagdollBoogie::BoogieThink()
 T CRagdollBoogie::Create(CBaseEntity*, float, float, float, int)
 T CRagdollBoogie::DecrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::GetBaseMap()
 T CRagdollBoogie::GetDataDescMap()
 T CRagdollBoogie::IncrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::SetBoogieTime(float, float)
 T CRagdollBoogie::SetMagnitude(float)
 T CRagdollBoogie::Spawn()
 T CRagdollBoogie::ZapThink()
 T CRagdollConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CRagdollConstraint::GetBaseMap()
 T CRagdollConstraint::GetDataDescMap()
 T CRagdollLRURetirement::FrameUpdatePostEntityThink()
 T CRagdollLRURetirement::LevelInitPreEntity()
 T CRagdollLRURetirement::MoveToTopOfLRU(CBaseAnimating*)
 T CRagdollLRURetirement::Update(float)
 T CRagdollLowViolenceManager::SetLowViolence(char const*)
 T CRagdollMagnet::DistToPoint(Vector const&)
 T CRagdollMagnet::FindBestMagnet(CBaseEntity*)
 T CRagdollMagnet::GetBaseMap()
 T CRagdollMagnet::GetDataDescMap()
 T CRagdollMagnet::GetForceVector(CBaseEntity*)
 T CRagdollMagnet::InputDisable(inputdata_t&)
 T CRagdollMagnet::InputEnable(inputdata_t&)
 T CRagdollManager::Activate()
 T CRagdollManager::CRagdollManager()
 T CRagdollManager::GetBaseMap()
 T CRagdollManager::GetClassName()
 T CRagdollManager::GetDataDescMap()
 T CRagdollManager::GetServerClass()
 T CRagdollManager::InputMaxRagdollCount(inputdata_t&)
 T CRagdollManager::UpdateTransmitState()
 T CRagdollManager::YouForgotToImplementOrDeclareServerClass()
 T CRagdollProp::CRagdollProp()
 T CRagdollProp::CalcRagdollSize()
 T CRagdollProp::ClearFlagsThink()
 T CRagdollProp::DisableAutoFade()
 T CRagdollProp::DrawDebugTextOverlays()
 T CRagdollProp::FadeOut(float, float)
 T CRagdollProp::FadeOutThink()
 T CRagdollProp::GetAngleOverrideFromCurrentState(char*, int)
 T CRagdollProp::GetBaseMap()
 T CRagdollProp::GetClassName()
 T CRagdollProp::GetDataDescMap()
 T CRagdollProp::GetResponseSystem()
 T CRagdollProp::GetServerClass()
 T CRagdollProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CRagdollProp::HasPhysgunInteraction(char const*, char const*)
 T CRagdollProp::HasPhysicsAttacker(float)
 T CRagdollProp::InitRagdoll(Vector const&, int, Vector const&, matrix3x4_t*, matrix3x4_t*, float, int, bool)
 T CRagdollProp::InitRagdollAnimation()
 T CRagdollProp::IsFading()
 T CRagdollProp::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CRagdollProp::ObjectCaps()
 T CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CRagdollProp::OnRestore()
 T CRagdollProp::OnSave(IEntitySaveUtils*)
 T CRagdollProp::OnTakeDamage(CTakeDamageInfo const&)
 T CRagdollProp::PhysGunLaunchAngularImpulse()
 T CRagdollProp::Precache()
 T CRagdollProp::RecheckCollisionFilter()
 T CRagdollProp::SetDamageEntity(CBaseEntity*)
 T CRagdollProp::SetDebrisThink()
 T CRagdollProp::SetOverlaySequence(Activity)
 T CRagdollProp::SetSourceClassName(char const*)
 T CRagdollProp::SetUnragdoll(CBaseAnimating*)
 T CRagdollProp::SetupBones(matrix3x4_t*, int)
 T CRagdollProp::Spawn()
 T CRagdollProp::Teleport(Vector const*, QAngle const*, Vector const*)
 T CRagdollProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CRagdollProp::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CRagdollProp::UpdateNetworkDataFromVPhysics(IPhysicsObject*, int)
 T CRagdollProp::UpdateOnRemove()
 T CRagdollProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CRagdollProp::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CRagdollProp::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollProp::YouForgotToImplementOrDeclareServerClass()
 T CRagdollProp::~CRagdollProp()
 T CRagdollPropAttached::Detach()
 T CRagdollPropAttached::DetachOnNextUpdate()
 T CRagdollPropAttached::GetBaseMap()
 T CRagdollPropAttached::GetClassName()
 T CRagdollPropAttached::GetDataDescMap()
 T CRagdollPropAttached::GetServerClass()
 T CRagdollPropAttached::InitRagdollAttached(IPhysicsObject*, Vector const&, int, matrix3x4_t*, matrix3x4_t*, float, int, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CRagdollPropAttached::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollPropAttached::YouForgotToImplementOrDeclareServerClass()
 T CRallyPoint::GetBaseMap()
 T CRallyPoint::GetDataDescMap()
 T CRandSimTimer::GetBaseMap()
 T CRandStopwatch::GetBaseMap()
 T CRecipientFilter::AddAllPlayers()
 T CRecipientFilter::AddPlayersFromBitMask(CBitVec<255>&)
 T CRecipientFilter::AddRecipient(CBasePlayer*)
 T CRecipientFilter::AddRecipientsByPAS(Vector const&)
 T CRecipientFilter::AddRecipientsByPVS(Vector const&)
 T CRecipientFilter::AddRecipientsByTeam(CTeam*)
 T CRecipientFilter::CRecipientFilter()
 T CRecipientFilter::CopyFrom(CRecipientFilter const&)
 T CRecipientFilter::GetRecipientCount() const
 T CRecipientFilter::GetRecipientIndex(int) const
 T CRecipientFilter::IgnorePredictionCull() const
 T CRecipientFilter::IsInitMessage() const
 T CRecipientFilter::IsReliable() const
 T CRecipientFilter::IsUsingPredictionRules() const
 T CRecipientFilter::MakeInitMessage()
 T CRecipientFilter::MakeReliable()
 T CRecipientFilter::RemoveAllRecipients()
 T CRecipientFilter::RemovePlayersFromBitMask(CBitVec<255>&)
 T CRecipientFilter::RemoveRecipient(CBasePlayer*)
 T CRecipientFilter::RemoveRecipientsByPVS(Vector const&)
 T CRecipientFilter::RemoveRecipientsByTeam(CTeam*)
 T CRecipientFilter::Reset()
 T CRecipientFilter::SetIgnorePredictionCull(bool)
 T CRecipientFilter::UsePredictionRules()
 T CRecipientFilter::~CRecipientFilter()
 T CResourceLRUBase::AvailableSize()
 T CResourceLRUBase::BreakAllLocks()
 T CResourceLRUBase::BreakLock(memhandle_t__*)
 T CResourceLRUBase::CResourceLRUBase(unsigned int)
 T CResourceLRUBase::CreateHandle()
 T CResourceLRUBase::DestroyResource(memhandle_t__*)
 T CResourceLRUBase::EnsureCapacity(unsigned int)
 T CResourceLRUBase::FlushAll()
 T CResourceLRUBase::FlushAllUnlocked()
 T CResourceLRUBase::FlushToTargetSize()
 T CResourceLRUBase::FreeAllLists()
 T CResourceLRUBase::FreeByIndex(unsigned short)
 T CResourceLRUBase::FreeLRU()
 T CResourceLRUBase::GetLRUHandleList(CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*> >&)
 T CResourceLRUBase::GetResource_NoLock(memhandle_t__*)
 T CResourceLRUBase::GetResource_NoLockNoLRUTouch(memhandle_t__*)
 T CResourceLRUBase::LockByIndex(unsigned short)
 T CResourceLRUBase::LockResource(memhandle_t__*)
 T CResourceLRUBase::MarkAsStale(memhandle_t__*)
 T CResourceLRUBase::MarkAsStaleByIndex(unsigned short)
 T CResourceLRUBase::SetTargetSize(unsigned int)
 T CResourceLRUBase::StoreResourceInHandle(unsigned short, void*, unsigned int)
 T CResourceLRUBase::TargetSize()
 T CResourceLRUBase::ToHandle(unsigned short)
 T CResourceLRUBase::TouchByIndex(unsigned short)
 T CResourceLRUBase::TouchResource(memhandle_t__*)
 T CResourceLRUBase::UnlockByIndex(unsigned short)
 T CResourceLRUBase::UnlockResource(memhandle_t__*)
 T CResourceLRUBase::UsedSize()
 T CResourceLRUBase::~CResourceLRUBase()
 T CResponseSystem::CResponseSystem()
 T CResponseSystem::Clear()
 T CResponseSystem::Compare(char const*, Criteria*, bool)
 T CResponseSystem::CompareUsingMatcher(char const*, Matcher&, bool)
 T CResponseSystem::ComputeMatcher(Criteria*, Matcher&)
 T CResponseSystem::DebugPrint(int, char const*, ...)
 T CResponseSystem::DescribeResponseGroup(ResponseGroup*, int, int)
 T CResponseSystem::DumpRules()
 T CResponseSystem::FindBestMatchingRule(AI_CriteriaSet const&, bool)
 T CResponseSystem::FindBestResponse(AI_CriteriaSet const&, AI_Response&, IResponseFilter*)
 T CResponseSystem::GetAllResponses(CUtlVector<AI_Response*, CUtlMemory<AI_Response*> >*)
 T CResponseSystem::GetBestResponse(CResponseSystem::ResponseSearchResult&, Rule*, bool, IResponseFilter*)
 T CResponseSystem::GetCurrentScript()
 T CResponseSystem::GetCurrentToken() const
 T CResponseSystem::IsRootCommand()
 T CResponseSystem::LoadFromBuffer(char const*, char const*)
 T CResponseSystem::LoadRuleSet(char const*)
 T CResponseSystem::LookupEnumeration(char const*, bool&)
 T CResponseSystem::ParseCriterion()
 T CResponseSystem::ParseEnumeration()
 T CResponseSystem::ParseInclude()
 T CResponseSystem::ParseOneCriterion(char const*)
 T CResponseSystem::ParseOneResponse(char const*, ResponseGroup&)
 T CResponseSystem::ParseResponse()
 T CResponseSystem::ParseRule()
 T CResponseSystem::PopScript()
 T CResponseSystem::Precache()
 T CResponseSystem::PushScript(char const*, unsigned char*)
 T CResponseSystem::RecursiveScoreSubcriteriaAgainstRule(AI_CriteriaSet const&, Criteria*, bool&, bool)
 T CResponseSystem::ResetResponseGroups()
 T CResponseSystem::ResolveResponse(CResponseSystem::ResponseSearchResult&, int, char const*, bool, IResponseFilter*)
 T CResponseSystem::ResolveToken(Matcher&)
 T CResponseSystem::ResponseWarning(char const*, ...)
 T CResponseSystem::ScoreCriteriaAgainstRule(AI_CriteriaSet const&, int, bool)
 T CResponseSystem::ScoreCriteriaAgainstRuleCriteria(AI_CriteriaSet const&, int, bool&, bool)
 T CResponseSystem::SelectWeightedResponseFromResponseGroup(ResponseGroup*, IResponseFilter*)
 T CResponseSystem::~CResponseSystem()
 T CRestore::BufferPointer()
 T CRestore::BufferReadBytes(char*, int)
 T CRestore::BufferSkipBytes(int)
 T CRestore::CRestore(CSaveRestoreData*)
 T CRestore::DoReadAll(void*, datamap_t*, datamap_t*)
 T CRestore::EmptyFields(void*, typedescription_t*, int)
 T CRestore::EndBlock()
 T CRestore::EntityFromIndex(int)
 T CRestore::FindField(char const*, typedescription_t*, int, int*)
 T CRestore::GetReadPos() const
 T CRestore::ReadBasicField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadBool(bool*, int, int)
 T CRestore::ReadData(char*, int, int)
 T CRestore::ReadEHandle(CHandle<CBaseEntity>*, int, int)
 T CRestore::ReadEdictPtr(edict_t**, int, int)
 T CRestore::ReadEntityPtr(CBaseEntity**, int, int)
 T CRestore::ReadField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)
 T CRestore::ReadFloat(float*, int, int)
 T CRestore::ReadFunction(datamap_t*, void**, int, int)
 T CRestore::ReadGameField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadHeader(SaveRestoreRecordHeader_t*)
 T CRestore::ReadInt()
 T CRestore::ReadInt(int*, int, int)
 T CRestore::ReadInterval(interval_t*, int, int)
 T CRestore::ReadMatrix3x4Worldspace(matrix3x4_t*, int, int)
 T CRestore::ReadPositionVector(Vector*)
 T CRestore::ReadPositionVector(Vector*, int, int)
 T CRestore::ReadQuaternion(Quaternion*)
 T CRestore::ReadQuaternion(Quaternion*, int, int)
 T CRestore::ReadShort()
 T CRestore::ReadShort(short*, int, int)
 T CRestore::ReadString(char*, int, int)
 T CRestore::ReadString(string_t*, int, int)
 T CRestore::ReadTick(int*, int, int)
 T CRestore::ReadTime(float*, int, int)
 T CRestore::ReadVMatrix(VMatrix*, int, int)
 T CRestore::ReadVMatrixWorldspace(VMatrix*, int, int)
 T CRestore::ReadVector(Vector*)
 T CRestore::ReadVector(Vector*, int, int)
 T CRestore::SetReadPos(int)
 T CRestore::ShouldEmptyField(typedescription_t*)
 T CRestore::ShouldReadField(typedescription_t*)
 T CRestore::StartBlock()
 T CRestore::StartBlock(SaveRestoreRecordHeader_t*)
 T CRestore::StartBlock(char*)
 T CRestore::StringFromHeaderSymbol(int)
 T CRevertSaved::GetBaseMap()
 T CRevertSaved::GetDataDescMap()
 T CRevertSaved::InputReload(inputdata_t&)
 T CRevertSaved::LoadThink()
 T CRevertSaved::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CRopeAnchor::FallThink()
 T CRopeAnchor::GetBaseMap()
 T CRopeAnchor::GetDataDescMap()
 T CRopeAnchor::RemoveThink()
 T CRopeAnchor::Spawn()
 T CRopeDelegate::ApplyConstraints(CSimplePhysics::CNode*, int)
 T CRopeDelegate::GetNodeForces(CSimplePhysics::CNode*, int, Vector*)
 T CRopeKeyframe::Activate()
 T CRopeKeyframe::ActivateEndDirectionConstraints(bool)
 T CRopeKeyframe::ActivateStartDirectionConstraints(bool)
 T CRopeKeyframe::Break()
 T CRopeKeyframe::CRopeKeyframe()
 T CRopeKeyframe::Create(CBaseEntity*, CBaseEntity*, int, int, int, char const*, int)
 T CRopeKeyframe::CreateWithSecondPointDetached(CBaseEntity*, int, int, int, char const*, int, bool)
 T CRopeKeyframe::DetachPoint(int)
 T CRopeKeyframe::DieAtNextRest()
 T CRopeKeyframe::EnableCollision()
 T CRopeKeyframe::EnablePlayerWeaponAttach(bool)
 T CRopeKeyframe::EnableWind(bool)
 T CRopeKeyframe::EndpointsChanged()
 T CRopeKeyframe::GetBaseMap()
 T CRopeKeyframe::GetClassName()
 T CRopeKeyframe::GetDataDescMap()
 T CRopeKeyframe::GetEndPointPos(int, Vector&)
 T CRopeKeyframe::GetEndPointPos2(CBaseEntity*, int, Vector&)
 T CRopeKeyframe::GetServerClass()
 T CRopeKeyframe::Init()
 T CRopeKeyframe::InputBreak(inputdata_t&)
 T CRopeKeyframe::InputSetForce(inputdata_t&)
 T CRopeKeyframe::InputSetScrollSpeed(inputdata_t&)
 T CRopeKeyframe::KeyValue(char const*, char const*)
 T CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 T CRopeKeyframe::OnTakeDamage(CTakeDamageInfo const&)
 T CRopeKeyframe::Precache()
 T CRopeKeyframe::PropagateForce(CBaseEntity*, CBaseEntity*, CBaseEntity*, float, float, float)
 T CRopeKeyframe::RecalculateLength()
 T CRopeKeyframe::SetEndPoint(CBaseEntity*, int)
 T CRopeKeyframe::SetMaterial(char const*)
 T CRopeKeyframe::SetStartPoint(CBaseEntity*, int)
 T CRopeKeyframe::SetTransmit(CCheckTransmitInfo*, bool)
 T CRopeKeyframe::SetupHangDistance(float)
 T CRopeKeyframe::ShakeRopes(Vector const&, float, float)
 T CRopeKeyframe::ShouldTransmit(CCheckTransmitInfo const*)
 T CRopeKeyframe::UpdateBBox(bool)
 T CRopeKeyframe::UpdateTransmitState()
 T CRopeKeyframe::YouForgotToImplementOrDeclareServerClass()
 T CRotButton::CreateVPhysics()
 T CRotButton::Spawn()
 T CRotDoor::CreateVPhysics()
 T CRotDoor::GetBaseMap()
 T CRotDoor::GetDataDescMap()
 T CRotDoor::SetToggleState(int)
 T CRotDoor::Spawn()
 T CRotorWashShooter::DoWashPush(float, Vector const&)
 T CRotorWashShooter::GetBaseMap()
 T CRotorWashShooter::GetDataDescMap()
 T CRotorWashShooter::Spawn()
 T CRuleBrushEntity::Spawn()
 T CRuleEntity::CanFireForActivator(CBaseEntity*)
 T CRuleEntity::GetBaseMap()
 T CRuleEntity::GetDataDescMap()
 T CRuleEntity::Spawn()
 T CRulePointEntity::GetBaseMap()
 T CRulePointEntity::GetDataDescMap()
 T CRulePointEntity::Spawn()
 T CSGameState::AllHostagesGone()
 T CSGameState::AreAllHostagesBeingRescued() const
 T CSGameState::AreAllHostagesGone() const
 T CSGameState::CSGameState(CCSBot*)
 T CSGameState::ClearBombsite(int)
 T CSGameState::GetBombPosition() const
 T CSGameState::GetNearestFreeHostage(Vector*) const
 T CSGameState::GetNearestVisibleFreeHostage() const
 T CSGameState::GetNextBombsiteToSearch()
 T CSGameState::GetPlantedBombsite() const
 T CSGameState::GetRandomFreeHostagePosition() const
 T CSGameState::InitializeHostageInfo()
 T CSGameState::IsAtPlantedBombsite() const
 T CSGameState::IsBombsiteClear(int) const
 T CSGameState::IsLooseBombLocationKnown() const
 T CSGameState::IsPlantedBombLocationKnown() const
 T CSGameState::IsRoundOver() const
 T CSGameState::MarkBombsiteAsPlanted(int)
 T CSGameState::OnBombDefused(IGameEvent*)
 T CSGameState::OnBombExploded(IGameEvent*)
 T CSGameState::OnBombPlanted(IGameEvent*)
 T CSGameState::OnHostageRescuedAll(IGameEvent*)
 T CSGameState::OnRoundEnd(IGameEvent*)
 T CSGameState::OnRoundStart(IGameEvent*)
 T CSGameState::Reset()
 T CSGameState::SetBombState(CSGameState::BombState)
 T CSGameState::TimeSinceLastSawBomber() const
 T CSGameState::TimeSinceLastSawLooseBomb() const
 T CSGameState::UpdateBomber(Vector const&)
 T CSGameState::UpdateLooseBomb(Vector const&)
 T CSGameState::UpdatePlantedBomb(Vector const&)
 T CSGameState::ValidateHostagePositions()
 T CSave::BufferData(char const*, int)
 T CSave::BufferField(char const*, int, char const*)
 T CSave::BufferString(char*, int)
 T CSave::CSave(CSaveRestoreData*)
 T CSave::CountFieldsToSave(void const*, typedescription_t*, int)
 T CSave::DataEmpty(char const*, int)
 T CSave::DoWriteAll(void const*, datamap_t*, datamap_t*)
 T CSave::EndBlock()
 T CSave::EndLogging()
 T CSave::EntityFlagsSet(int, int)
 T CSave::EntityIndex(CBaseEntity const*)
 T CSave::EntityIndex(edict_t const*)
 T CSave::GetWritePos() const
 T CSave::IsLogging()
 T CSave::Log(char const*, _fieldtypes, void*, int)
 T CSave::SetWritePos(int)
 T CSave::ShouldSaveField(void const*, typedescription_t*)
 T CSave::StartBlock()
 T CSave::StartBlock(char const*)
 T CSave::StartLogging(char const*)
 T CSave::WriteBasicField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteBool(bool const*, int)
 T CSave::WriteBool(char const*, bool const*, int)
 T CSave::WriteData(char const*, int)
 T CSave::WriteData(char const*, int, char const*)
 T CSave::WriteEHandle(CHandle<CBaseEntity> const*, int)
 T CSave::WriteEHandle(char const*, CHandle<CBaseEntity> const*, int)
 T CSave::WriteEdictPtr(char const*, edict_t**, int)
 T CSave::WriteEdictPtr(edict_t**, int)
 T CSave::WriteEntityPtr(CBaseEntity**, int)
 T CSave::WriteEntityPtr(char const*, CBaseEntity**, int)
 T CSave::WriteField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteFields(char const*, void const*, datamap_t*, typedescription_t*, int)
 T CSave::WriteFloat(char const*, float const*, int)
 T CSave::WriteFloat(float const*, int)
 T CSave::WriteFunction(datamap_t*, char const*, int const*, int)
 T CSave::WriteGameField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteHeader(char const*, int)
 T CSave::WriteInt(char const*, int const*, int)
 T CSave::WriteInt(int const*, int)
 T CSave::WriteInterval(char const*, interval_t const*, int)
 T CSave::WriteInterval(interval_t const*, int)
 T CSave::WriteMatrix3x4Worldspace(char const*, matrix3x4_t const*, int)
 T CSave::WriteMatrix3x4Worldspace(matrix3x4_t const*, int)
 T CSave::WritePositionVector(Vector const&)
 T CSave::WritePositionVector(Vector const*, int)
 T CSave::WritePositionVector(char const*, Vector const&)
 T CSave::WritePositionVector(char const*, Vector const*, int)
 T CSave::WriteQuaternion(Quaternion const&)
 T CSave::WriteQuaternion(Quaternion const*, int)
 T CSave::WriteQuaternion(char const*, Quaternion const&)
 T CSave::WriteQuaternion(char const*, Quaternion const*, int)
 T CSave::WriteShort(char const*, short const*, int)
 T CSave::WriteShort(short const*, int)
 T CSave::WriteString(char const*)
 T CSave::WriteString(char const*, char const*)
 T CSave::WriteString(char const*, string_t const*, int)
 T CSave::WriteString(string_t const*, int)
 T CSave::WriteTick(char const*, int const*, int)
 T CSave::WriteTick(int const*, int)
 T CSave::WriteTime(char const*, float const*, int)
 T CSave::WriteTime(float const*, int)
 T CSave::WriteVMatrix(VMatrix const*, int)
 T CSave::WriteVMatrix(char const*, VMatrix const*, int)
 T CSave::WriteVMatrixWorldspace(VMatrix const*, int)
 T CSave::WriteVMatrixWorldspace(char const*, VMatrix const*, int)
 T CSave::WriteVector(Vector const&)
 T CSave::WriteVector(Vector const*, int)
 T CSave::WriteVector(char const*, Vector const&)
 T CSave::WriteVector(char const*, Vector const*, int)
 T CSceneEntity::Activate()
 T CSceneEntity::BuildSortedSpeakEventSoundsPrefetchList(CChoreoScene*, CUtlSymbolTable&, CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >&, float)
 T CSceneEntity::CSceneEntity()
 T CSceneEntity::CancelPlayback()
 T CSceneEntity::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::CheckInterruptCompletion()
 T CSceneEntity::ClearActivatorTargets()
 T CSceneEntity::ClearInterrupt()
 T CSceneEntity::ClearSceneEvents(CChoreoScene*, bool)
 T CSceneEntity::ClearSchedules(CChoreoScene*)
 T CSceneEntity::DispatchEndExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchEndLookAt(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 T CSceneEntity::DispatchProcessLoop(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartLookAt(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*, soundlevel_t)
 T CSceneEntity::DispatchStartSubScene(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStopPoint(CChoreoScene*, char const*)
 T CSceneEntity::DoThink(float)
 T CSceneEntity::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::EstimateLength()
 T CSceneEntity::FindNamedActor(CChoreoActor*)
 T CSceneEntity::FindNamedActor(char const*)
 T CSceneEntity::FindNamedActor(int)
 T CSceneEntity::FindNamedEntity(char const*, CBaseEntity*, bool)
 T CSceneEntity::FindNamedTarget(string_t, bool)
 T CSceneEntity::GenerateSceneForSound(CBaseFlex*, char const*)
 T CSceneEntity::GenerateSoundScene(CBaseFlex*, char const*)
 T CSceneEntity::GetBaseMap()
 T CSceneEntity::GetDataDescMap()
 T CSceneEntity::GetSoundNameForPlayer(CChoreoEvent*, CBasePlayer*, char*, unsigned int)
 T CSceneEntity::GetSoundSystemLatency()
 T CSceneEntity::HasFlexAnimation()
 T CSceneEntity::HasUnplayedSpeech()
 T CSceneEntity::InputCancelPlayback(inputdata_t&)
 T CSceneEntity::InputInterjectResponse(inputdata_t&)
 T CSceneEntity::InputPausePlayback(inputdata_t&)
 T CSceneEntity::InputReloadScene(inputdata_t&)
 T CSceneEntity::InputResumePlayback(inputdata_t&)
 T CSceneEntity::InputStartPlayback(inputdata_t&)
 T CSceneEntity::InputStopWaitingForActor(inputdata_t&)
 T CSceneEntity::InterruptThisScene(CSceneEntity*)
 T CSceneEntity::InvolvesActor(CBaseEntity*)
 T CSceneEntity::IsBackground()
 T CSceneEntity::IsInterruptable()
 T CSceneEntity::LoadScene(char const*)
 T CSceneEntity::LoadSceneFromFile(char const*)
 T CSceneEntity::NotifyOfCompletion(CSceneEntity*)
 T CSceneEntity::OnRestore()
 T CSceneEntity::OnSceneFinished(bool, bool)
 T CSceneEntity::PausePlayback()
 T CSceneEntity::PauseThink()
 T CSceneEntity::Precache()
 T CSceneEntity::PrecacheScene(CChoreoScene*)
 T CSceneEntity::PrefetchSpeakEventSounds(CUtlSymbolTable&, CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >&)
 T CSceneEntity::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::ReloadScene()
 T CSceneEntity::RequestCompletionNotification(CSceneEntity*)
 T CSceneEntity::ResumePlayback()
 T CSceneEntity::SetBackground(bool)
 T CSceneEntity::Spawn()
 T CSceneEntity::SpeakEventSoundLessFunc(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&)
 T CSceneEntity::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::StartPlayback()
 T CSceneEntity::UnloadScene()
 T CSceneEntity::UpdateOnRemove()
 T CSceneEntity::ValidScene() const
 T CSceneEntity::~CSceneEntity()
 T CSceneEventInfo::InitWeight(CBaseFlex*)
 T CSceneEventInfo::UpdateWeight(CBaseFlex*)
 T CSceneManager::AddSceneEntity(CSceneEntity*)
 T CSceneManager::ClearAllScenes()
 T CSceneManager::GetBaseMap()
 T CSceneManager::GetDataDescMap()
 T CSceneManager::IsRunningScriptedScene(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneWithSpeech(CBaseFlex*, bool)
 T CSceneManager::OnClientActive(CBasePlayer*)
 T CSceneManager::QueueRestoredSound(CBaseFlex*, char const*, soundlevel_t, float)
 T CSceneManager::RemoveActorFromScenes(CBaseFlex*, bool)
 T CSceneManager::RemoveSceneEntity(CSceneEntity*)
 T CSceneManager::Think()
 T CSceneTokenProcessor::CurrentToken()
 T CSceneTokenProcessor::Error(char const*, ...)
 T CSceneTokenProcessor::GetToken(bool)
 T CSceneTokenProcessor::SetBuffer(char*)
 T CSceneTokenProcessor::TokenAvailable()
 T CScratchPadGraph::AddLine(Vector)
 T CScratchPadGraph::AddSample(int, float, float)
 T CScratchPadGraph::AddVerticalLine(float, float, float, CSPColor const&)
 T CScratchPadGraph::CScratchPadGraph()
 T CScratchPadGraph::GetSamplePosition(float, float)
 T CScratchPadGraph::Init(IScratchPad3D*, Vector, float, Vector, float, float, Vector, float, Vector, float)
 T CScratchPadGraph::IsInitted() const
 T CScratchPadGraph::UpdateTicksAndStuff(float, float)
 T CScriptedTarget::DrawDebugGeometryOverlays()
 T CScriptedTarget::DrawDebugTextOverlays()
 T CScriptedTarget::FindEntity()
 T CScriptedTarget::GetBaseMap()
 T CScriptedTarget::GetDataDescMap()
 T CScriptedTarget::InputDisable(inputdata_t&)
 T CScriptedTarget::InputEnable(inputdata_t&)
 T CScriptedTarget::NextScriptedTarget()
 T CScriptedTarget::ScriptThink()
 T CScriptedTarget::Spawn()
 T CScriptedTarget::TurnOff()
 T CScriptedTarget::TurnOn()
 T CServerGameClients::ClientActive(edict_t*, bool)
 T CServerGameClients::ClientCommand(edict_t*)
 T CServerGameClients::ClientConnect(edict_t*, char const*, char const*, char*, int)
 T CServerGameClients::ClientDisconnect(edict_t*)
 T CServerGameClients::ClientEarPosition(edict_t*, Vector*)
 T CServerGameClients::ClientPutInServer(edict_t*, char const*)
 T CServerGameClients::ClientSettingsChanged(edict_t*)
 T CServerGameClients::ClientSetupVisibility(edict_t*, edict_t*, unsigned char*, int)
 T CServerGameClients::GetBugReportInfo(char*, int)
 T CServerGameClients::GetPlayerLimits(int&, int&, int&) const
 T CServerGameClients::GetPlayerState(edict_t*)
 T CServerGameClients::GetReplayDelay(edict_t*)
 T CServerGameClients::PostClientMessagesSent()
 T CServerGameClients::ProcessUsercmds(edict_t*, bf_read*, int, int, int, bool, bool)
 T CServerGameClients::SetCommandClient(int)
 T CServerGameDLL::BuildAdjacentMapList()
 T CServerGameDLL::CreateEntityTransitionList(CSaveRestoreData*, int)
 T CServerGameDLL::CreateNetworkStringTables()
 T CServerGameDLL::DLLInit(void* (*)(char const*, int*), void* (*)(char const*, int*), void* (*)(char const*, int*), CGlobalVars*)
 T CServerGameDLL::DLLShutdown()
 T CServerGameDLL::GameFrame(bool)
 T CServerGameDLL::GameInit()
 T CServerGameDLL::GameShutdown()
 T CServerGameDLL::GetAllServerClasses()
 T CServerGameDLL::GetGameDescription()
 T CServerGameDLL::GetSaveComment(char*, int)
 T CServerGameDLL::GetStandardSendProxies()
 T CServerGameDLL::GetTickInterval() const
 T CServerGameDLL::GetUserMessageInfo(int, char*, int, int&)
 T CServerGameDLL::IsRestoring()
 T CServerGameDLL::LevelInit(char const*, char const*, char const*, char const*, bool, bool)
 T CServerGameDLL::LevelInit_ParseAllEntities(char const*)
 T CServerGameDLL::LevelShutdown()
 T CServerGameDLL::LoadMessageOfTheDay()
 T CServerGameDLL::PreClientUpdate(bool)
 T CServerGameDLL::PreSave(CSaveRestoreData*)
 T CServerGameDLL::ReadRestoreHeaders(CSaveRestoreData*)
 T CServerGameDLL::Restore(CSaveRestoreData*, bool)
 T CServerGameDLL::RestoreGlobalState(CSaveRestoreData*)
 T CServerGameDLL::Save(CSaveRestoreData*)
 T CServerGameDLL::SaveGlobalState(CSaveRestoreData*)
 T CServerGameDLL::SaveInit(int)
 T CServerGameDLL::SaveReadFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::SaveWriteFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::ServerActivate(edict_t*, int, int)
 T CServerGameDLL::WriteSaveHeaders(CSaveRestoreData*)
 T CServerGameEnts::BaseEntityToEdict(CBaseEntity*)
 T CServerGameEnts::CheckTransmit(CCheckTransmitInfo*, unsigned short const*, int)
 T CServerGameEnts::EdictToBaseEntity(edict_t*)
 T CServerGameEnts::FreeContainingEntity(edict_t*)
 T CServerGameEnts::MarkEntitiesAsTouching(edict_t*, edict_t*)
 T CServerGameEnts::SetDebugEdictBase(edict_t*)
 T CServerNetworkProperty::AddEFlags(int)
 T CServerNetworkProperty::AttachEdict(edict_t*)
 T CServerNetworkProperty::CServerNetworkProperty()
 T CServerNetworkProperty::DetachEdict()
 T CServerNetworkProperty::FireEvent()
 T CServerNetworkProperty::GetClassName() const
 T CServerNetworkProperty::GetEFlags() const
 T CServerNetworkProperty::GetEntityHandle()
 T CServerNetworkProperty::GetServerClass()
 T CServerNetworkProperty::Init(CBaseEntity*)
 T CServerNetworkProperty::IsInPVS(CCheckTransmitInfo const*)
 T CServerNetworkProperty::IsInPVS(edict_t const*, void const*, int)
 T CServerNetworkProperty::RecomputePVSInformation()
 T CServerNetworkProperty::Release()
 T CServerNetworkProperty::SetUpdateInterval(float)
 T CServerNetworkProperty::~CServerNetworkProperty()
 T CServerOnlyPointEntity::KeyValue(char const*, char const*)
 T CShadowControl::CShadowControl()
 T CShadowControl::GetBaseMap()
 T CShadowControl::GetClassName()
 T CShadowControl::GetDataDescMap()
 T CShadowControl::GetServerClass()
 T CShadowControl::InputSetAngles(inputdata_t&)
 T CShadowControl::KeyValue(char const*, char const*)
 T CShadowControl::Spawn()
 T CShadowControl::UpdateTransmitState()
 T CShadowControl::YouForgotToImplementOrDeclareServerClass()
 T CSheetSimulator::AddFixedPointSpring(int, int, float)
 T CSheetSimulator::AddGravityForce(int)
 T CSheetSimulator::AddSpring(int, int, float)
 T CSheetSimulator::CSheetSimulator(void (*)(Vector const&, Vector const&, unsigned int, int, CGameTrace*), void (*)(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, int, CGameTrace*))
 T CSheetSimulator::ClampPointsToCollisionPlanes()
 T CSheetSimulator::ClearForces()
 T CSheetSimulator::ComputeBounds(Vector&, Vector&)
 T CSheetSimulator::ComputeControlPoints()
 T CSheetSimulator::ComputeForces()
 T CSheetSimulator::DetectCollision(int, float)
 T CSheetSimulator::DetermineBestCollisionPlane(bool)
 T CSheetSimulator::EulerStep(float)
 T CSheetSimulator::GetFixedPoint(int)
 T CSheetSimulator::GetPoint(int) const
 T CSheetSimulator::GetPoint(int, int) const
 T CSheetSimulator::Init(int, int, int)
 T CSheetSimulator::InitPosition(int)
 T CSheetSimulator::NumHorizontal() const
 T CSheetSimulator::NumVertical() const
 T CSheetSimulator::PointCount() const
 T CSheetSimulator::SatisfyCollisionConstraints()
 T CSheetSimulator::SetBoundingBox(Vector&, Vector&)
 T CSheetSimulator::SetCollisionGroup(int)
 T CSheetSimulator::SetControlPointOffset(Vector const&)
 T CSheetSimulator::SetFixedSpringConstant(float)
 T CSheetSimulator::SetGravityConstant(float)
 T CSheetSimulator::SetPointSpringConstant(float)
 T CSheetSimulator::SetPosition(Vector const&, QAngle const&)
 T CSheetSimulator::SetSpringDampConstant(float)
 T CSheetSimulator::SetViscousDrag(float)
 T CSheetSimulator::Simulate(float)
 T CSheetSimulator::Simulate(float, int)
 T CSheetSimulator::TestVertAgainstPlane(int, int, bool)
 T CSheetSimulator::~CSheetSimulator()
 T CShower::Spawn()
 T CShower::Think()
 T CShower::Touch(CBaseEntity*)
 T CSimTimer::GetBaseMap()
 T CSimplePhysics::CSimplePhysics()
 T CSimplePhysics::Init(float)
 T CSimplePhysics::Simulate(CSimplePhysics::CNode*, int, CSimplePhysics::IHelper*, float, float)
 T CSimpleSimTimer::GetBaseMap()
 T CSingleplayRules::AllowAutoTargetCrosshair()
 T CSingleplayRules::CSingleplayRules()
 T CSingleplayRules::CanHaveItem(CBasePlayer*, CItem*)
 T CSingleplayRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CSingleplayRules::ClientDisconnected(edict_t*)
 T CSingleplayRules::DeadPlayerAmmo(CBasePlayer*)
 T CSingleplayRules::DeadPlayerWeapons(CBasePlayer*)
 T CSingleplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CSingleplayRules::FAllowNPCs()
 T CSingleplayRules::FPlayerCanRespawn(CBasePlayer*)
 T CSingleplayRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CSingleplayRules::FlHealthChargerRechargeTime()
 T CSingleplayRules::FlItemRespawnTime(CItem*)
 T CSingleplayRules::FlPlayerFallDamage(CBasePlayer*)
 T CSingleplayRules::FlPlayerSpawnTime(CBasePlayer*)
 T CSingleplayRules::FlWeaponRespawnTime(CBaseCombatWeapon*)
 T CSingleplayRules::FlWeaponTryRespawn(CBaseCombatWeapon*)
 T CSingleplayRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CSingleplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CSingleplayRules::InitHUD(CBasePlayer*)
 T CSingleplayRules::IsAllowedToSpawn(CBaseEntity*)
 T CSingleplayRules::IsCoOp()
 T CSingleplayRules::IsDeathmatch()
 T CSingleplayRules::IsMultiplayer()
 T CSingleplayRules::ItemShouldRespawn(CItem*)
 T CSingleplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CSingleplayRules::PlayerGotAmmo(CBaseCombatCharacter*, char*, int)
 T CSingleplayRules::PlayerGotItem(CBasePlayer*, CItem*)
 T CSingleplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CSingleplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CSingleplayRules::PlayerSpawn(CBasePlayer*)
 T CSingleplayRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CSingleplayRules::Think()
 T CSingleplayRules::VecItemRespawnSpot(CItem*)
 T CSingleplayRules::VecWeaponRespawnSpot(CBaseCombatWeapon*)
 T CSingleplayRules::WeaponShouldRespawn(CBaseCombatWeapon*)
 T CSkyCamera::Activate()
 T CSkyCamera::CSkyCamera()
 T CSkyCamera::GetBaseMap()
 T CSkyCamera::GetDataDescMap()
 T CSkyCamera::Spawn()
 T CSkyCamera::~CSkyCamera()
 T CSmokeGrenade::EmitGrenade(Vector, QAngle, Vector, Vector, CBasePlayer*)
 T CSmokeGrenade::GetBaseMap()
 T CSmokeGrenade::GetClassName()
 T CSmokeGrenade::GetDataDescMap()
 T CSmokeGrenade::GetPredDescMap()
 T CSmokeGrenade::GetServerClass()
 T CSmokeGrenade::YouForgotToImplementOrDeclareServerClass()
 T CSmokeGrenadeProjectile::BounceSound()
 T CSmokeGrenadeProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*)
 T CSmokeGrenadeProjectile::Detonate()
 T CSmokeGrenadeProjectile::GetBaseMap()
 T CSmokeGrenadeProjectile::GetDataDescMap()
 T CSmokeGrenadeProjectile::Precache()
 T CSmokeGrenadeProjectile::SetTimer(float)
 T CSmokeGrenadeProjectile::Spawn()
 T CSmokeGrenadeProjectile::Think_Detonate()
 T CSmokeGrenadeProjectile::Think_Fade()
 T CSmokeGrenadeProjectile::Think_Remove()
 T CSmokeStack::Activate()
 T CSmokeStack::CSmokeStack()
 T CSmokeStack::GetBaseMap()
 T CSmokeStack::GetClassName()
 T CSmokeStack::GetDataDescMap()
 T CSmokeStack::GetServerClass()
 T CSmokeStack::InputToggle(inputdata_t&)
 T CSmokeStack::InputTurnOff(inputdata_t&)
 T CSmokeStack::InputTurnOn(inputdata_t&)
 T CSmokeStack::KeyValue(char const*, char const*)
 T CSmokeStack::Precache()
 T CSmokeStack::RecalcWindVector()
 T CSmokeStack::Spawn()
 T CSmokeStack::YouForgotToImplementOrDeclareServerClass()
 T CSmokeStack::~CSmokeStack()
 T CSmokeStackLightInfo::GetBaseMap()
 T CSolidSetDefaults::ParseKeyValue(void*, char const*, char const*)
 T CSolidSetDefaults::SetDefaults(void*)
 T CSound::Clear()
 T CSound::FIsScent()
 T CSound::FIsSound()
 T CSound::GetBaseMap()
 T CSound::GetSoundReactOrigin()
 T CSound::Reset()
 T CSoundControllerImp::CheckLoopingSoundsForPlayer(CBasePlayer*)
 T CSoundControllerImp::CommandAdd(CSoundPatch*, float, soundcommands_t, float, float)
 T CSoundControllerImp::CommandClear(CSoundPatch*)
 T CSoundControllerImp::CommandInsert(SoundCommand_t*)
 T CSoundControllerImp::OnRestore()
 T CSoundControllerImp::Play(CSoundPatch*, float, float)
 T CSoundControllerImp::ProcessCommand(SoundCommand_t*)
 T CSoundControllerImp::RemoveFromList(CSoundPatch*)
 T CSoundControllerImp::RestoreSoundPatch(CSoundPatch**, IRestore*)
 T CSoundControllerImp::SaveSoundPatch(CSoundPatch*, ISave*)
 T CSoundControllerImp::Shutdown(CSoundPatch*)
 T CSoundControllerImp::SoundChangePitch(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundChangeVolume(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, EmitSound_t const&)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, char const*)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, soundlevel_t)
 T CSoundControllerImp::SoundDestroy(CSoundPatch*)
 T CSoundControllerImp::SoundFadeOut(CSoundPatch*, float, bool)
 T CSoundControllerImp::SoundGetPitch(CSoundPatch*)
 T CSoundControllerImp::SoundGetVolume(CSoundPatch*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopeDescription_t*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopePoint_t*, int)
 T CSoundControllerImp::SystemReset()
 T CSoundControllerImp::SystemUpdate()
 T CSoundEnt::ActiveList()
 T CSoundEnt::CSoundEnt()
 T CSoundEnt::ClientSoundIndex(edict_t*)
 T CSoundEnt::FindOrAllocateSound(CBaseEntity*, int)
 T CSoundEnt::FreeList()
 T CSoundEnt::FreeSound(int, int)
 T CSoundEnt::GetBaseMap()
 T CSoundEnt::GetDataDescMap()
 T CSoundEnt::GetLoudestSoundOfType(int, Vector const&)
 T CSoundEnt::IAllocSound()
 T CSoundEnt::ISoundsInList(int)
 T CSoundEnt::InitSoundEnt()
 T CSoundEnt::Initialize()
 T CSoundEnt::InsertSound(int, Vector const&, int, float)
 T CSoundEnt::InsertSound(int, Vector const&, int, float, CBaseEntity*, int)
 T CSoundEnt::OnRestore()
 T CSoundEnt::Precache()
 T CSoundEnt::ShutdownSoundEnt()
 T CSoundEnt::SoundPointerForIndex(int)
 T CSoundEnt::Spawn()
 T CSoundEnt::Think()
 T CSoundEnt::~CSoundEnt()
 T CSoundEnvelope::GetBaseMap()
 T CSoundEnvelope::SetTarget(float, float)
 T CSoundEnvelope::SetValue(float)
 T CSoundEnvelope::ShouldUpdate()
 T CSoundEnvelope::Update(float)
 T CSoundEnvelopeController::GetController()
 T CSoundPatch::AddPlayerPost(CBasePlayer*)
 T CSoundPatch::ChangePitch(float, float)
 T CSoundPatch::ChangeVolume(float, float)
 T CSoundPatch::FadeOut(float, bool)
 T CSoundPatch::GetBaseMap()
 T CSoundPatch::GetPitch()
 T CSoundPatch::GetVolume()
 T CSoundPatch::GetVolumeForEngine()
 T CSoundPatch::Init(IRecipientFilter*, CBaseEntity*, int, char const*, soundlevel_t)
 T CSoundPatch::Reset()
 T CSoundPatch::ResumeSound()
 T CSoundPatch::Shutdown()
 T CSoundPatch::StartSound()
 T CSoundPatch::Update(float, float)
 T CSoundscapeSystem::AddSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::AddSoundscapeFile(char const*)
 T CSoundscapeSystem::FrameUpdatePostEntityThink()
 T CSoundscapeSystem::GetSoundscapeIndex(char const*)
 T CSoundscapeSystem::Init()
 T CSoundscapeSystem::IsValidIndex(int)
 T CSoundscapeSystem::LevelInitPreEntity()
 T CSoundscapeSystem::PrintDebugInfo()
 T CSoundscapeSystem::RemoveSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::Shutdown()
 T CSpotlightEnd::GetBaseMap()
 T CSpotlightEnd::GetClassName()
 T CSpotlightEnd::GetDataDescMap()
 T CSpotlightEnd::GetServerClass()
 T CSpotlightEnd::Spawn()
 T CSpotlightEnd::YouForgotToImplementOrDeclareServerClass()
 T CSprayCan::Precache()
 T CSprayCan::Spawn(CBasePlayer*)
 T CSprayCan::Think()
 T CSprite::Animate(float)
 T CSprite::AnimateThink()
 T CSprite::AnimateUntilDead()
 T CSprite::CSprite()
 T CSprite::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CSprite::EnableWorldSpaceScale(bool)
 T CSprite::Expand(float, float)
 T CSprite::ExpandThink()
 T CSprite::GetBaseMap()
 T CSprite::GetClassName()
 T CSprite::GetDataDescMap()
 T CSprite::GetPredDescMap()
 T CSprite::GetServerClass()
 T CSprite::InputHideSprite(inputdata_t&)
 T CSprite::InputShowSprite(inputdata_t&)
 T CSprite::InputToggleSprite(inputdata_t&)
 T CSprite::OnRestore()
 T CSprite::Precache()
 T CSprite::SetBrightness(int, float)
 T CSprite::SetModel(char const*)
 T CSprite::SetScale(float, float)
 T CSprite::SetSpriteScale(float)
 T CSprite::ShouldTransmit(CCheckTransmitInfo const*)
 T CSprite::Spawn()
 T CSprite::SpriteCreate(char const*, Vector const&, bool)
 T CSprite::SpriteCreatePredictable(char const*, int, char const*, Vector const&, bool)
 T CSprite::SpriteInit(char const*, Vector const&)
 T CSprite::TurnOff()
 T CSprite::TurnOn()
 T CSprite::UpdateTransmitState()
 T CSprite::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSprite::YouForgotToImplementOrDeclareServerClass()
 T CSpriteTrail::CSpriteTrail()
 T CSpriteTrail::GetBaseMap()
 T CSpriteTrail::GetClassName()
 T CSpriteTrail::GetDataDescMap()
 T CSpriteTrail::GetPredDescMap()
 T CSpriteTrail::GetServerClass()
 T CSpriteTrail::IsInSkybox() const
 T CSpriteTrail::SetEndWidth(float)
 T CSpriteTrail::SetLifeTime(float)
 T CSpriteTrail::SetMinFadeLength(float)
 T CSpriteTrail::SetSkybox(Vector const&, float)
 T CSpriteTrail::SetStartWidth(float)
 T CSpriteTrail::SetStartWidthVariance(float)
 T CSpriteTrail::SetTextureResolution(float)
 T CSpriteTrail::SpriteTrailCreate(char const*, Vector const&, bool)
 T CSpriteTrail::YouForgotToImplementOrDeclareServerClass()
 T CStandardSendProxies::CStandardSendProxies()
 T CSteamJet::GetBaseMap()
 T CSteamJet::GetClassName()
 T CSteamJet::GetDataDescMap()
 T CSteamJet::GetServerClass()
 T CSteamJet::InputToggle(inputdata_t&)
 T CSteamJet::InputTurnOff(inputdata_t&)
 T CSteamJet::InputTurnOn(inputdata_t&)
 T CSteamJet::Spawn()
 T CSteamJet::YouForgotToImplementOrDeclareServerClass()
 T CStopwatch::GetBaseMap()
 T CStopwatchBase::GetBaseMap()
 T CStringPool::Allocate(char const*)
 T CStringPool::CStringPool()
 T CStringPool::Count() const
 T CStringPool::Find(char const*)
 T CStringPool::FreeAll()
 T CStringPool::~CStringPool()
 T CStringRegistry::AddString(char const*, int)
 T CStringRegistry::CStringRegistry()
 T CStringRegistry::ClearStrings()
 T CStringRegistry::First() const
 T CStringRegistry::GetIDForKey(unsigned short)
 T CStringRegistry::GetStringForKey(unsigned short)
 T CStringRegistry::GetStringID(char const*)
 T CStringRegistry::GetStringText(int)
 T CStringRegistry::InvalidIndex() const
 T CStringRegistry::Next(unsigned short) const
 T CStringRegistry::~CStringRegistry()
 T CStripWeapons::GetBaseMap()
 T CStripWeapons::GetDataDescMap()
 T CStripWeapons::InputStripWeapons(inputdata_t&)
 T CStripWeapons::InputStripWeaponsAndSuit(inputdata_t&)
 T CStripWeapons::StripWeapons(inputdata_t&, bool)
 T CStuckMonitor::CStuckMonitor()
 T CStuckMonitor::Reset()
 T CStuckMonitor::Update(CImprovLocomotor*)
 T CSun::Activate()
 T CSun::CSun()
 T CSun::GetBaseMap()
 T CSun::GetClassName()
 T CSun::GetDataDescMap()
 T CSun::GetServerClass()
 T CSun::InputSetColor(inputdata_t&)
 T CSun::InputTurnOff(inputdata_t&)
 T CSun::InputTurnOn(inputdata_t&)
 T CSun::UpdateTransmitState()
 T CSun::YouForgotToImplementOrDeclareServerClass()
 T CSurroundTest::FireCorrectOutput(inputdata_t&)
 T CSurroundTest::GetBaseMap()
 T CSurroundTest::GetDataDescMap()
 T CSurroundTest::Spawn()
 T CTEArmorRicochet::GetClassName()
 T CTEArmorRicochet::GetServerClass()
 T CTEArmorRicochet::YouForgotToImplementOrDeclareServerClass()
 T CTEBSPDecal::CTEBSPDecal(char const*)
 T CTEBSPDecal::GetClassName()
 T CTEBSPDecal::GetServerClass()
 T CTEBSPDecal::Test(Vector const&, QAngle const&)
 T CTEBSPDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEBSPDecal::~CTEBSPDecal()
 T CTEBaseBeam::CTEBaseBeam(char const*)
 T CTEBaseBeam::GetClassName()
 T CTEBaseBeam::GetServerClass()
 T CTEBaseBeam::YouForgotToImplementOrDeclareServerClass()
 T CTEBaseBeam::~CTEBaseBeam()
 T CTEBeamEntPoint::CTEBeamEntPoint(char const*)
 T CTEBeamEntPoint::GetClassName()
 T CTEBeamEntPoint::GetServerClass()
 T CTEBeamEntPoint::Test(Vector const&, QAngle const&)
 T CTEBeamEntPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEntPoint::~CTEBeamEntPoint()
 T CTEBeamEnts::CTEBeamEnts(char const*)
 T CTEBeamEnts::GetClassName()
 T CTEBeamEnts::GetServerClass()
 T CTEBeamEnts::Test(Vector const&, QAngle const&)
 T CTEBeamEnts::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEnts::~CTEBeamEnts()
 T CTEBeamFollow::CTEBeamFollow(char const*)
 T CTEBeamFollow::GetClassName()
 T CTEBeamFollow::GetServerClass()
 T CTEBeamFollow::Test(Vector const&, QAngle const&)
 T CTEBeamFollow::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamFollow::~CTEBeamFollow()
 T CTEBeamLaser::CTEBeamLaser(char const*)
 T CTEBeamLaser::GetClassName()
 T CTEBeamLaser::GetServerClass()
 T CTEBeamLaser::Test(Vector const&, QAngle const&)
 T CTEBeamLaser::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamLaser::~CTEBeamLaser()
 T CTEBeamPoints::CTEBeamPoints(char const*)
 T CTEBeamPoints::GetClassName()
 T CTEBeamPoints::GetServerClass()
 T CTEBeamPoints::Test(Vector const&, QAngle const&)
 T CTEBeamPoints::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamPoints::~CTEBeamPoints()
 T CTEBeamRing::CTEBeamRing(char const*)
 T CTEBeamRing::GetClassName()
 T CTEBeamRing::GetServerClass()
 T CTEBeamRing::Test(Vector const&, QAngle const&)
 T CTEBeamRing::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRing::~CTEBeamRing()
 T CTEBeamRingPoint::CTEBeamRingPoint(char const*)
 T CTEBeamRingPoint::GetClassName()
 T CTEBeamRingPoint::GetServerClass()
 T CTEBeamRingPoint::Test(Vector const&, QAngle const&)
 T CTEBeamRingPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRingPoint::~CTEBeamRingPoint()
 T CTEBeamSpline::CTEBeamSpline(char const*)
 T CTEBeamSpline::GetClassName()
 T CTEBeamSpline::GetServerClass()
 T CTEBeamSpline::Test(Vector const&, QAngle const&)
 T CTEBeamSpline::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamSpline::~CTEBeamSpline()
 T CTEBloodSprite::CTEBloodSprite(char const*)
 T CTEBloodSprite::GetClassName()
 T CTEBloodSprite::GetServerClass()
 T CTEBloodSprite::Test(Vector const&, QAngle const&)
 T CTEBloodSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodSprite::~CTEBloodSprite()
 T CTEBloodStream::CTEBloodStream(char const*)
 T CTEBloodStream::GetClassName()
 T CTEBloodStream::GetServerClass()
 T CTEBloodStream::Test(Vector const&, QAngle const&)
 T CTEBloodStream::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodStream::~CTEBloodStream()
 T CTEBreakModel::CTEBreakModel(char const*)
 T CTEBreakModel::GetClassName()
 T CTEBreakModel::GetServerClass()
 T CTEBreakModel::Precache()
 T CTEBreakModel::Test(Vector const&, QAngle const&)
 T CTEBreakModel::YouForgotToImplementOrDeclareServerClass()
 T CTEBreakModel::~CTEBreakModel()
 T CTEBubbleTrail::CTEBubbleTrail(char const*)
 T CTEBubbleTrail::GetClassName()
 T CTEBubbleTrail::GetServerClass()
 T CTEBubbleTrail::Test(Vector const&, QAngle const&)
 T CTEBubbleTrail::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbleTrail::~CTEBubbleTrail()
 T CTEBubbles::CTEBubbles(char const*)
 T CTEBubbles::GetClassName()
 T CTEBubbles::GetServerClass()
 T CTEBubbles::Test(Vector const&, QAngle const&)
 T CTEBubbles::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbles::~CTEBubbles()
 T CTEDecal::CTEDecal(char const*)
 T CTEDecal::GetClassName()
 T CTEDecal::GetServerClass()
 T CTEDecal::Test(Vector const&, QAngle const&)
 T CTEDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEDecal::~CTEDecal()
 T CTEDust::CTEDust(char const*)
 T CTEDust::GetClassName()
 T CTEDust::GetServerClass()
 T CTEDust::YouForgotToImplementOrDeclareServerClass()
 T CTEDust::~CTEDust()
 T CTEDynamicLight::CTEDynamicLight(char const*)
 T CTEDynamicLight::GetClassName()
 T CTEDynamicLight::GetServerClass()
 T CTEDynamicLight::Test(Vector const&, QAngle const&)
 T CTEDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CTEDynamicLight::~CTEDynamicLight()
 T CTEEffectDispatch::CTEEffectDispatch(char const*)
 T CTEEffectDispatch::GetClassName()
 T CTEEffectDispatch::GetServerClass()
 T CTEEffectDispatch::YouForgotToImplementOrDeclareServerClass()
 T CTEEffectDispatch::~CTEEffectDispatch()
 T CTEEnergySplash::CTEEnergySplash(char const*)
 T CTEEnergySplash::GetClassName()
 T CTEEnergySplash::GetServerClass()
 T CTEEnergySplash::Test(Vector const&, QAngle const&)
 T CTEEnergySplash::YouForgotToImplementOrDeclareServerClass()
 T CTEEnergySplash::~CTEEnergySplash()
 T CTEExplosion::CTEExplosion(char const*)
 T CTEExplosion::GetClassName()
 T CTEExplosion::GetServerClass()
 T CTEExplosion::Test(Vector const&, QAngle const&)
 T CTEExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEExplosion::~CTEExplosion()
 T CTEFireBullets::CTEFireBullets(char const*)
 T CTEFireBullets::GetClassName()
 T CTEFireBullets::GetServerClass()
 T CTEFireBullets::YouForgotToImplementOrDeclareServerClass()
 T CTEFireBullets::~CTEFireBullets()
 T CTEFizz::CTEFizz(char const*)
 T CTEFizz::GetClassName()
 T CTEFizz::GetServerClass()
 T CTEFizz::Precache()
 T CTEFizz::Test(Vector const&, QAngle const&)
 T CTEFizz::YouForgotToImplementOrDeclareServerClass()
 T CTEFizz::~CTEFizz()
 T CTEFootprintDecal::CTEFootprintDecal(char const*)
 T CTEFootprintDecal::GetClassName()
 T CTEFootprintDecal::GetServerClass()
 T CTEFootprintDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEFootprintDecal::~CTEFootprintDecal()
 T CTEGaussExplosion::CTEGaussExplosion(char const*)
 T CTEGaussExplosion::GetClassName()
 T CTEGaussExplosion::GetServerClass()
 T CTEGaussExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEGaussExplosion::~CTEGaussExplosion()
 T CTEGlowSprite::CTEGlowSprite(char const*)
 T CTEGlowSprite::GetClassName()
 T CTEGlowSprite::GetServerClass()
 T CTEGlowSprite::Test(Vector const&, QAngle const&)
 T CTEGlowSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEGlowSprite::~CTEGlowSprite()
 T CTEImpact::CTEImpact(char const*)
 T CTEImpact::GetClassName()
 T CTEImpact::GetServerClass()
 T CTEImpact::Precache()
 T CTEImpact::Test(Vector const&, Vector const&)
 T CTEImpact::YouForgotToImplementOrDeclareServerClass()
 T CTEImpact::~CTEImpact()
 T CTEKillPlayerAttachments::CTEKillPlayerAttachments(char const*)
 T CTEKillPlayerAttachments::GetClassName()
 T CTEKillPlayerAttachments::GetServerClass()
 T CTEKillPlayerAttachments::Test(Vector const&, QAngle const&)
 T CTEKillPlayerAttachments::YouForgotToImplementOrDeclareServerClass()
 T CTEKillPlayerAttachments::~CTEKillPlayerAttachments()
 T CTELargeFunnel::CTELargeFunnel(char const*)
 T CTELargeFunnel::GetClassName()
 T CTELargeFunnel::GetServerClass()
 T CTELargeFunnel::Test(Vector const&, QAngle const&)
 T CTELargeFunnel::YouForgotToImplementOrDeclareServerClass()
 T CTELargeFunnel::~CTELargeFunnel()
 T CTEMetalSparks::CTEMetalSparks(char const*)
 T CTEMetalSparks::GetClassName()
 T CTEMetalSparks::GetServerClass()
 T CTEMetalSparks::Test(Vector const&, QAngle const&)
 T CTEMetalSparks::YouForgotToImplementOrDeclareServerClass()
 T CTEMetalSparks::~CTEMetalSparks()
 T CTEMuzzleFlash::CTEMuzzleFlash(char const*)
 T CTEMuzzleFlash::GetClassName()
 T CTEMuzzleFlash::GetServerClass()
 T CTEMuzzleFlash::Test(Vector const&, QAngle const&)
 T CTEMuzzleFlash::YouForgotToImplementOrDeclareServerClass()
 T CTEMuzzleFlash::~CTEMuzzleFlash()
 T CTEParticleSystem::GetClassName()
 T CTEParticleSystem::GetServerClass()
 T CTEParticleSystem::YouForgotToImplementOrDeclareServerClass()
 T CTEPhysicsProp::CTEPhysicsProp(char const*)
 T CTEPhysicsProp::GetClassName()
 T CTEPhysicsProp::GetServerClass()
 T CTEPhysicsProp::Precache()
 T CTEPhysicsProp::Test(Vector const&, QAngle const&)
 T CTEPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CTEPhysicsProp::~CTEPhysicsProp()
 T CTEPlantBomb::CTEPlantBomb(char const*)
 T CTEPlantBomb::GetClassName()
 T CTEPlantBomb::GetServerClass()
 T CTEPlantBomb::YouForgotToImplementOrDeclareServerClass()
 T CTEPlantBomb::~CTEPlantBomb()
 T CTEPlayerAnimEvent::GetClassName()
 T CTEPlayerAnimEvent::GetServerClass()
 T CTEPlayerAnimEvent::YouForgotToImplementOrDeclareServerClass()
 T CTEPlayerDecal::CTEPlayerDecal(char const*)
 T CTEPlayerDecal::GetClassName()
 T CTEPlayerDecal::GetServerClass()
 T CTEPlayerDecal::Test(Vector const&, QAngle const&)
 T CTEPlayerDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEPlayerDecal::~CTEPlayerDecal()
 T CTEProjectedDecal::CTEProjectedDecal(char const*)
 T CTEProjectedDecal::GetClassName()
 T CTEProjectedDecal::GetServerClass()
 T CTEProjectedDecal::Test(Vector const&, QAngle const&)
 T CTEProjectedDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEProjectedDecal::~CTEProjectedDecal()
 T CTERadioIcon::CTERadioIcon(char const*)
 T CTERadioIcon::GetClassName()
 T CTERadioIcon::GetServerClass()
 T CTERadioIcon::Precache()
 T CTERadioIcon::YouForgotToImplementOrDeclareServerClass()
 T CTERadioIcon::~CTERadioIcon()
 T CTEShatterSurface::CTEShatterSurface(char const*)
 T CTEShatterSurface::GetClassName()
 T CTEShatterSurface::GetServerClass()
 T CTEShatterSurface::Test(Vector const&, QAngle const&)
 T CTEShatterSurface::YouForgotToImplementOrDeclareServerClass()
 T CTEShowLine::CTEShowLine(char const*)
 T CTEShowLine::GetClassName()
 T CTEShowLine::GetServerClass()
 T CTEShowLine::Test(Vector const&, QAngle const&)
 T CTEShowLine::YouForgotToImplementOrDeclareServerClass()
 T CTEShowLine::~CTEShowLine()
 T CTESmoke::CTESmoke(char const*)
 T CTESmoke::GetClassName()
 T CTESmoke::GetServerClass()
 T CTESmoke::Test(Vector const&, QAngle const&)
 T CTESmoke::YouForgotToImplementOrDeclareServerClass()
 T CTESmoke::~CTESmoke()
 T CTESparks::CTESparks(char const*)
 T CTESparks::GetClassName()
 T CTESparks::GetServerClass()
 T CTESparks::Test(Vector const&, QAngle const&)
 T CTESparks::YouForgotToImplementOrDeclareServerClass()
 T CTESparks::~CTESparks()
 T CTESprite::CTESprite(char const*)
 T CTESprite::GetClassName()
 T CTESprite::GetServerClass()
 T CTESprite::Precache()
 T CTESprite::Test(Vector const&, QAngle const&)
 T CTESprite::YouForgotToImplementOrDeclareServerClass()
 T CTESprite::~CTESprite()
 T CTESpriteSpray::CTESpriteSpray(char const*)
 T CTESpriteSpray::GetClassName()
 T CTESpriteSpray::GetServerClass()
 T CTESpriteSpray::Test(Vector const&, QAngle const&)
 T CTESpriteSpray::YouForgotToImplementOrDeclareServerClass()
 T CTESpriteSpray::~CTESpriteSpray()
 T CTEWorldDecal::CTEWorldDecal(char const*)
 T CTEWorldDecal::GetClassName()
 T CTEWorldDecal::GetServerClass()
 T CTEWorldDecal::Test(Vector const&, QAngle const&)
 T CTEWorldDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEWorldDecal::~CTEWorldDecal()
 T CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel()
 T CTakeDamageInfo::AdjustPlayerDamageTakenForSkillLevel()
 T CTakeDamageInfo::CTakeDamageInfo()
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, float, int, int)
 T CTakeDamageInfo::GetBaseMap()
 T CTakeDamageInfo::Init(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, Vector const&, float, int, int)
 T CTakeDamageInfo::Set(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::Set(CBaseEntity*, CBaseEntity*, float, int, int)
 T CTankTargetChange::GetBaseMap()
 T CTankTargetChange::GetDataDescMap()
 T CTankTargetChange::Precache()
 T CTankTargetChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTankTrainAI::Activate()
 T CTankTrainAI::FindTarget(string_t, CBaseEntity*)
 T CTankTrainAI::GetBaseMap()
 T CTankTrainAI::GetDataDescMap()
 T CTankTrainAI::InputTargetEntity(inputdata_t&)
 T CTankTrainAI::Precache()
 T CTankTrainAI::SoundEnginePitch()
 T CTankTrainAI::SoundEngineStart()
 T CTankTrainAI::SoundEngineStop()
 T CTankTrainAI::SoundShutdown()
 T CTankTrainAI::Spawn()
 T CTankTrainAI::Think()
 T CTankTrainAI::~CTankTrainAI()
 T CTargetCDAudioRep::GetBaseMap()
 T CTargetCDAudioRep::GetDataDescMap()
 T CTargetCDAudioRep::InputChangeCDTrack(inputdata_t&)
 T CTargetChangeGravity::GetBaseMap()
 T CTargetChangeGravity::GetDataDescMap()
 T CTargetChangeGravity::InputChangeGrav(inputdata_t&)
 T CTargetChangeGravity::InputResetGrav(inputdata_t&)
 T CTeam::AddPlayer(CBasePlayer*)
 T CTeam::AddScore(int)
 T CTeam::AddSpawnpoint(CTeamSpawnPoint*)
 T CTeam::CTeam()
 T CTeam::GetClassName()
 T CTeam::GetName()
 T CTeam::GetNumPlayers()
 T CTeam::GetPlayer(int)
 T CTeam::GetScore()
 T CTeam::GetServerClass()
 T CTeam::GetTeamNumber()
 T CTeam::Init(char const*, int)
 T CTeam::InitializePlayers()
 T CTeam::InitializeSpawnpoints()
 T CTeam::RemovePlayer(CBasePlayer*)
 T CTeam::RemoveSpawnpoint(CTeamSpawnPoint*)
 T CTeam::SetScore(int)
 T CTeam::ShouldTransmitToPlayer(CBasePlayer*, CBaseEntity*)
 T CTeam::SpawnPlayer(CBasePlayer*)
 T CTeam::Think()
 T CTeam::UpdateClientData(CBasePlayer*)
 T CTeam::UpdateTransmitState()
 T CTeam::YouForgotToImplementOrDeclareServerClass()
 T CTeam::~CTeam()
 T CTeamRecipientFilter::CTeamRecipientFilter(int, bool)
 T CTeamSpawnPoint::Activate()
 T CTeamSpawnPoint::GetBaseMap()
 T CTeamSpawnPoint::GetDataDescMap()
 T CTeamSpawnPoint::InputDisable(inputdata_t&)
 T CTeamSpawnPoint::InputEnable(inputdata_t&)
 T CTeamSpawnPoint::IsValid(CBasePlayer*)
 T CTeamVehicleSpawnPoint::Activate()
 T CTeamVehicleSpawnPoint::GetBaseMap()
 T CTeamVehicleSpawnPoint::GetDataDescMap()
 T CTeamVehicleSpawnPoint::IsValid()
 T CTeamplayRules::CTeamplayRules()
 T CTeamplayRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 T CTeamplayRules::ClientCommand(char const*, CBaseEntity*)
 T CTeamplayRules::ClientDisconnected(edict_t*)
 T CTeamplayRules::ClientSettingsChanged(CBasePlayer*)
 T CTeamplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*)
 T CTeamplayRules::GetIndexedTeamName(int)
 T CTeamplayRules::GetTeamID(CBaseEntity*)
 T CTeamplayRules::GetTeamIndex(char const*)
 T CTeamplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::InitHUD(CBasePlayer*)
 T CTeamplayRules::IsTeamplay()
 T CTeamplayRules::IsValidTeam(char const*)
 T CTeamplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CTeamplayRules::Precache()
 T CTeamplayRules::RecountTeams()
 T CTeamplayRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CTeamplayRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CTeamplayRules::TeamWithFewestPlayers()
 T CTeamplayRules::Think()
 T CTempEntTester::Create(Vector const&, QAngle const&, char const*, char const*)
 T CTempEntTester::Spawn()
 T CTempEntTester::Think()
 T CTerrainMorph::GetBaseMap()
 T CTerrainMorph::GetDataDescMap()
 T CTerrainMorph::InputBeginMorph(inputdata_t&)
 T CTerrainMorph::MorphThink()
 T CTerrainMorph::Spawn(CTerrainMorphParams&)
 T CTerrainMorph::Start()
 T CTesla::Activate()
 T CTesla::CTesla()
 T CTesla::DoSpark()
 T CTesla::GetBaseMap()
 T CTesla::GetClassName()
 T CTesla::GetDataDescMap()
 T CTesla::GetServerClass()
 T CTesla::GetSourceEntity()
 T CTesla::InputDoSpark(inputdata_t&)
 T CTesla::InputTurnOff(inputdata_t&)
 T CTesla::InputTurnOn(inputdata_t&)
 T CTesla::Precache()
 T CTesla::SetupForNextArc()
 T CTesla::ShootArcThink()
 T CTesla::Spawn()
 T CTesla::YouForgotToImplementOrDeclareServerClass()
 T CTestEffect::Precache()
 T CTestEffect::Spawn()
 T CTestEffect::Think()
 T CTestEffect::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTestTraceline::GetBaseMap()
 T CTestTraceline::GetClassName()
 T CTestTraceline::GetDataDescMap()
 T CTestTraceline::GetServerClass()
 T CTestTraceline::Spawn()
 T CTestTraceline::Spin()
 T CTestTraceline::UpdateTransmitState()
 T CTestTraceline::YouForgotToImplementOrDeclareServerClass()
 T CTest_ProxyToggle_Networkable::GetClassName()
 T CTest_ProxyToggle_Networkable::GetServerClass()
 T CTest_ProxyToggle_Networkable::YouForgotToImplementOrDeclareServerClass()
 T CTextStat::CTextStat()
 T CTextStat::CTextStat(bool)
 T CTextStat::CTextStat(void (*)(IFileSystem*, void*, void*), void*, CTextStatsMgr*)
 T CTextStat::GetTextStatsList()
 T CTextStat::Init(void (*)(IFileSystem*, void*, void*), void*, CTextStatsMgr*)
 T CTextStat::RemoveFn(void*)
 T CTextStat::Term()
 T CTextStat::~CTextStat()
 T CTextStatFile::CTextStatFile(void (*)())
 T CTextStatInt::CTextStatInt(char const*, int, CTextStatsMgr*)
 T CTextStatInt::PrintFn(IFileSystem*, void*, void*)
 T CTextStatsMgr::CTextStatsMgr()
 T CTextStatsMgr::GetStatsFilename()
 T CTextStatsMgr::SetStatsFilename(char*)
 T CTextStatsMgr::WriteFile(IFileSystem*, char const*)
 T CTextureToggle::GetBaseMap()
 T CTextureToggle::GetDataDescMap()
 T CTextureToggle::InputIncrementBrushTexIndex(inputdata_t&)
 T CTextureToggle::InputSetBrushTexIndex(inputdata_t&)
 T CThrustController::GetBaseMap()
 T CTimedEventMgr::CTimedEventMgr()
 T CTimedEventMgr::FireEvents()
 T CTimedEventMgr::RegisterForNextEvent(CEventRegister*)
 T CTimedEventMgr::RemoveEvent(CEventRegister*)
 T CTimerEntity::Disable()
 T CTimerEntity::Enable()
 T CTimerEntity::FireTimer()
 T CTimerEntity::GetBaseMap()
 T CTimerEntity::GetDataDescMap()
 T CTimerEntity::InputDisable(inputdata_t&)
 T CTimerEntity::InputEnable(inputdata_t&)
 T CTimerEntity::InputFireTimer(inputdata_t&)
 T CTimerEntity::InputRefireTime(inputdata_t&)
 T CTimerEntity::InputToggle(inputdata_t&)
 T CTimerEntity::ResetTimer()
 T CTimerEntity::Spawn()
 T CTimerEntity::Think()
 T CTimerEntity::Toggle()
 T CTraceFilterLOS::CTraceFilterLOS(IHandleEntity*, int)
 T CTraceFilterLOS::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterMelee::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNav::CTraceFilterNav(CAI_BaseNPC*, string_t, bool, IServerEntity const*, int)
 T CTraceFilterNav::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNoNPCsOrPlayer::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterOnlyNPCsAndPlayer::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimple::CTraceFilterSimple(IHandleEntity const*, int)
 T CTraceFilterSimple::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleList::AddEntityToIgnore(IHandleEntity*)
 T CTraceFilterSimpleList::CTraceFilterSimpleList(int)
 T CTraceFilterSimpleList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipTwoEntities::CTraceFilterSkipTwoEntities(IHandleEntity const*, IHandleEntity const*, int)
 T CTraceFilterSkipTwoEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTriggerBrush::EndTouch(CBaseEntity*)
 T CTriggerBrush::GetBaseMap()
 T CTriggerBrush::GetDataDescMap()
 T CTriggerBrush::PassesInputFilter(CBaseEntity*, int)
 T CTriggerBrush::Spawn()
 T CTriggerBrush::StartTouch(CBaseEntity*)
 T CTriggerBrush::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCDAudio::PlayTrack()
 T CTriggerCDAudio::Spawn()
 T CTriggerCDAudio::Touch(CBaseEntity*)
 T CTriggerCDAudio::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCamera::Disable()
 T CTriggerCamera::Enable()
 T CTriggerCamera::FollowTarget()
 T CTriggerCamera::GetBaseMap()
 T CTriggerCamera::GetDataDescMap()
 T CTriggerCamera::InputDisable(inputdata_t&)
 T CTriggerCamera::InputEnable(inputdata_t&)
 T CTriggerCamera::KeyValue(char const*, char const*)
 T CTriggerCamera::Move()
 T CTriggerCamera::Spawn()
 T CTriggerCamera::UpdateTransmitState()
 T CTriggerCamera::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerGravity::GetBaseMap()
 T CTriggerGravity::GetDataDescMap()
 T CTriggerGravity::GravityTouch(CBaseEntity*)
 T CTriggerGravity::Spawn()
 T CTriggerHurt::EndTouch(CBaseEntity*)
 T CTriggerHurt::GetBaseMap()
 T CTriggerHurt::GetDataDescMap()
 T CTriggerHurt::HurtAllTouchers(float)
 T CTriggerHurt::HurtEntity(CBaseEntity*, float)
 T CTriggerHurt::HurtThink()
 T CTriggerHurt::RadiationThink()
 T CTriggerHurt::Spawn()
 T CTriggerHurt::Touch(CBaseEntity*)
 T CTriggerImpact::DrawDebugTextOverlays()
 T CTriggerImpact::GetBaseMap()
 T CTriggerImpact::GetDataDescMap()
 T CTriggerImpact::InputImpact(inputdata_t&)
 T CTriggerImpact::InputSetMagnitude(inputdata_t&)
 T CTriggerImpact::Spawn()
 T CTriggerImpact::StartTouch(CBaseEntity*)
 T CTriggerLook::DrawDebugTextOverlays()
 T CTriggerLook::EndTouch(CBaseEntity*)
 T CTriggerLook::GetBaseMap()
 T CTriggerLook::GetDataDescMap()
 T CTriggerLook::Spawn()
 T CTriggerLook::StartTouch(CBaseEntity*)
 T CTriggerLook::TimeoutThink()
 T CTriggerLook::Touch(CBaseEntity*)
 T CTriggerLook::Trigger(CBaseEntity*, bool)
 T CTriggerMultiple::ActivateMultiTrigger(CBaseEntity*)
 T CTriggerMultiple::GetBaseMap()
 T CTriggerMultiple::GetDataDescMap()
 T CTriggerMultiple::MultiTouch(CBaseEntity*)
 T CTriggerMultiple::MultiWaitOver()
 T CTriggerMultiple::Spawn()
 T CTriggerOnce::Spawn()
 T CTriggerPlayerMovement::EndTouch(CBaseEntity*)
 T CTriggerPlayerMovement::GetBaseMap()
 T CTriggerPlayerMovement::GetDataDescMap()
 T CTriggerPlayerMovement::Spawn()
 T CTriggerPlayerMovement::StartTouch(CBaseEntity*)
 T CTriggerProximity::Activate()
 T CTriggerProximity::EndTouch(CBaseEntity*)
 T CTriggerProximity::GetBaseMap()
 T CTriggerProximity::GetDataDescMap()
 T CTriggerProximity::MeasureThink()
 T CTriggerProximity::Spawn()
 T CTriggerProximity::StartTouch(CBaseEntity*)
 T CTriggerPush::GetBaseMap()
 T CTriggerPush::GetDataDescMap()
 T CTriggerPush::Spawn()
 T CTriggerPush::Touch(CBaseEntity*)
 T CTriggerRemove::GetBaseMap()
 T CTriggerRemove::GetDataDescMap()
 T CTriggerRemove::Spawn()
 T CTriggerRemove::Touch(CBaseEntity*)
 T CTriggerSave::GetBaseMap()
 T CTriggerSave::GetDataDescMap()
 T CTriggerSave::Spawn()
 T CTriggerSave::Touch(CBaseEntity*)
 T CTriggerSoundscape::Activate()
 T CTriggerSoundscape::CTriggerSoundscape()
 T CTriggerSoundscape::EndTouch(CBaseEntity*)
 T CTriggerSoundscape::GetBaseMap()
 T CTriggerSoundscape::GetDataDescMap()
 T CTriggerSoundscape::PlayerUpdateThink()
 T CTriggerSoundscape::Spawn()
 T CTriggerSoundscape::StartTouch(CBaseEntity*)
 T CTriggerTeleport::GetBaseMap()
 T CTriggerTeleport::GetDataDescMap()
 T CTriggerTeleport::Spawn()
 T CTriggerTeleport::Touch(CBaseEntity*)
 T CTriggerToggleSave::GetBaseMap()
 T CTriggerToggleSave::GetDataDescMap()
 T CTriggerToggleSave::Spawn()
 T CTriggerToggleSave::Touch(CBaseEntity*)
 T CTriggerVPhysicsMotion::CreateVPhysics()
 T CTriggerVPhysicsMotion::EndTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::GetBaseMap()
 T CTriggerVPhysicsMotion::GetDataDescMap()
 T CTriggerVPhysicsMotion::InputSetVelocityLimitTime(inputdata_t&)
 T CTriggerVPhysicsMotion::LinearLimit()
 T CTriggerVPhysicsMotion::OnRestore()
 T CTriggerVPhysicsMotion::Precache()
 T CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTriggerVPhysicsMotion::Spawn()
 T CTriggerVPhysicsMotion::StartTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::UpdateOnRemove()
 T CTriggerVolume::Spawn()
 T CTriggerWind::CreateVPhysics()
 T CTriggerWind::DrawDebugTextOverlays()
 T CTriggerWind::EndTouch(CBaseEntity*)
 T CTriggerWind::GetBaseMap()
 T CTriggerWind::GetDataDescMap()
 T CTriggerWind::InputEnable(inputdata_t&)
 T CTriggerWind::InputSetSpeed(inputdata_t&)
 T CTriggerWind::KeyValue(char const*, char const*)
 T CTriggerWind::OnRestore()
 T CTriggerWind::Spawn()
 T CTriggerWind::StartTouch(CBaseEntity*)
 T CTriggerWind::UpdateOnRemove()
 T CTriggerWind::WindThink()
 T CUserMessages::CUserMessages()
 T CUserMessages::DispatchUserMessage(int, bf_read&)
 T CUserMessages::GetUserMessageName(int)
 T CUserMessages::GetUserMessageSize(int)
 T CUserMessages::HookMessage(char const*, void (*)(bf_read&))
 T CUserMessages::IsValidIndex(int)
 T CUserMessages::LookupUserMessage(char const*)
 T CUserMessages::Register(char const*, int)
 T CUserMessages::~CUserMessages()
 T CUtlBuffer::CUtlBuffer(int, int, bool)
 T CUtlBuffer::CUtlBuffer(void const*, int, bool)
 T CUtlBuffer::CheckGet(int)
 T CUtlBuffer::CheckPut(int)
 T CUtlBuffer::EatWhiteSpace()
 T CUtlBuffer::EnsureCapacity(int)
 T CUtlBuffer::Get(void*, int)
 T CUtlBuffer::GetString(char*, int)
 T CUtlBuffer::PeekStringLength()
 T CUtlBuffer::Printf(char const*, ...)
 T CUtlBuffer::Put(void const*, int)
 T CUtlBuffer::PutString(char const*)
 T CUtlBuffer::Scanf(char const*, ...)
 T CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SetExternalBuffer(void*, int, bool)
 T CUtlBuffer::SetLittleEndian(bool)
 T CUtlBuffer::VaPrintf(char const*, char*)
 T CUtlBuffer::VaScanf(char const*, char*)
 T CUtlSymbol::CUtlSymbol(char const*)
 T CUtlSymbol::CurrTable()
 T CUtlSymbol::DisableStaticSymbolTable()
 T CUtlSymbol::Initialize()
 T CUtlSymbol::String() const
 T CUtlSymbol::operator==(char const*) const
 T CUtlSymbolTable::AddString(char const*)
 T CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
 T CUtlSymbolTable::Find(char const*)
 T CUtlSymbolTable::FindPoolWithSpace(int) const
 T CUtlSymbolTable::RemoveAll()
 T CUtlSymbolTable::String(CUtlSymbol) const
 T CUtlSymbolTable::SymLess(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&, void*)
 T CUtlSymbolTable::SymLessi(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&, void*)
 T CUtlSymbolTable::~CUtlSymbolTable()
 T CVGuiScreen::Activate()
 T CVGuiScreen::CVGuiScreen()
 T CVGuiScreen::GetBaseMap()
 T CVGuiScreen::GetClassName()
 T CVGuiScreen::GetDataDescMap()
 T CVGuiScreen::GetPanelName() const
 T CVGuiScreen::GetServerClass()
 T CVGuiScreen::InputSetActive(inputdata_t&)
 T CVGuiScreen::InputSetInactive(inputdata_t&)
 T CVGuiScreen::IsActive() const
 T CVGuiScreen::IsAttachedToViewModel() const
 T CVGuiScreen::IsVisibleOnlyToTeammates() const
 T CVGuiScreen::IsVisibleToTeam(int)
 T CVGuiScreen::KeyValue(char const*, char const*)
 T CVGuiScreen::MakeVisibleOnlyToTeammates(bool)
 T CVGuiScreen::Precache()
 T CVGuiScreen::SetActive(bool)
 T CVGuiScreen::SetActualSize(float, float)
 T CVGuiScreen::SetAttachedToViewModel(bool)
 T CVGuiScreen::SetAttachmentIndex(int)
 T CVGuiScreen::SetOverlayMaterial(char const*)
 T CVGuiScreen::SetPanelName(char const*)
 T CVGuiScreen::Spawn()
 T CVGuiScreen::UpdateTransmitState()
 T CVGuiScreen::YouForgotToImplementOrDeclareServerClass()
 T CVariableBitStringBase::AllocInts(int)
 T CVariableBitStringBase::FreeInts()
 T CVariableBitStringBase::ReallocInts(int)
 T CVariableBitStringBase::Resize(int)
 T CVariableBitStringBase::ValidateOperand(CVariableBitStringBase const&) const
 T CVehicleSoundsParser::CVehicleSoundsParser()
 T CVehicleSoundsParser::ParseKeyValue(void*, char const*, char const*)
 T CVehicleSoundsParser::ParseVehicleSounds(char const*, vehiclesounds_t*)
 T CVehicleSoundsParser::SetDefaults(void*)
 T CVoiceGameMgr::CVoiceGameMgr()
 T CVoiceGameMgr::ClientCommand(CBasePlayer*, char const*)
 T CVoiceGameMgr::ClientConnected(edict_t*)
 T CVoiceGameMgr::Init(IVoiceGameMgrHelper*, int)
 T CVoiceGameMgr::SetHelper(IVoiceGameMgrHelper*)
 T CVoiceGameMgr::Update(double)
 T CVoiceGameMgr::UpdateMasks()
 T CVoiceGameMgr::~CVoiceGameMgr()
 T CWaterBullet::BulletThink()
 T CWaterBullet::GetBaseMap()
 T CWaterBullet::GetClassName()
 T CWaterBullet::GetDataDescMap()
 T CWaterBullet::GetServerClass()
 T CWaterBullet::Precache()
 T CWaterBullet::Spawn(Vector const&, Vector const&)
 T CWaterBullet::Touch(CBaseEntity*)
 T CWaterBullet::YouForgotToImplementOrDeclareServerClass()
 T CWaterLODControl::CWaterLODControl()
 T CWaterLODControl::GetBaseMap()
 T CWaterLODControl::GetClassName()
 T CWaterLODControl::GetDataDescMap()
 T CWaterLODControl::GetServerClass()
 T CWaterLODControl::KeyValue(char const*, char const*)
 T CWaterLODControl::SetCheapWaterEndDistance(inputdata_t&)
 T CWaterLODControl::SetCheapWaterStartDistance(inputdata_t&)
 T CWaterLODControl::Spawn()
 T CWaterLODControl::UpdateTransmitState()
 T CWaterLODControl::YouForgotToImplementOrDeclareServerClass()
 T CWeaponAWP::AWPFire(float)
 T CWeaponAWP::CWeaponAWP()
 T CWeaponAWP::GetBaseMap()
 T CWeaponAWP::GetClassName()
 T CWeaponAWP::GetDataDescMap()
 T CWeaponAWP::GetMaxSpeed() const
 T CWeaponAWP::GetPredDescMap()
 T CWeaponAWP::GetServerClass()
 T CWeaponAWP::IsAwp() const
 T CWeaponAWP::PrimaryAttack()
 T CWeaponAWP::SecondaryAttack()
 T CWeaponAWP::Spawn()
 T CWeaponAWP::UnzoomThink()
 T CWeaponAWP::YouForgotToImplementOrDeclareServerClass()
 T CWeaponAug::AUGFire(float, bool)
 T CWeaponAug::CWeaponAug()
 T CWeaponAug::GetClassName()
 T CWeaponAug::GetPredDescMap()
 T CWeaponAug::GetServerClass()
 T CWeaponAug::PrimaryAttack()
 T CWeaponAug::SecondaryAttack()
 T CWeaponAug::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCSBase::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 T CWeaponCSBase::AttemptToMaterialize()
 T CWeaponCSBase::BulletWasFired(Vector const&, Vector const&)
 T CWeaponCSBase::CWeaponCSBase()
 T CWeaponCSBase::CalcViewmodelBob()
 T CWeaponCSBase::CanBeSelected()
 T CWeaponCSBase::CanDeploy()
 T CWeaponCSBase::CheckRespawn()
 T CWeaponCSBase::DefaultDeploy(char*, char*, int, char*)
 T CWeaponCSBase::DefaultPistolReload()
 T CWeaponCSBase::DefaultReload(int, int, int)
 T CWeaponCSBase::DefaultTouch(CBaseEntity*)
 T CWeaponCSBase::Deploy()
 T CWeaponCSBase::Drop(Vector const&)
 T CWeaponCSBase::GetBaseMap()
 T CWeaponCSBase::GetBulletSpread()
 T CWeaponCSBase::GetCSWpnData() const
 T CWeaponCSBase::GetClassName()
 T CWeaponCSBase::GetDataDescMap()
 T CWeaponCSBase::GetDefaultAnimSpeed()
 T CWeaponCSBase::GetDeployActivity()
 T CWeaponCSBase::GetMaxSpeed() const
 T CWeaponCSBase::GetPlayerOwner() const
 T CWeaponCSBase::GetPredDescMap()
 T CWeaponCSBase::GetServerClass()
 T CWeaponCSBase::GetViewModel(int) const
 T CWeaponCSBase::Holster(CBaseCombatWeapon*)
 T CWeaponCSBase::IsAwp() const
 T CWeaponCSBase::IsPistol() const
 T CWeaponCSBase::IsPredicted() const
 T CWeaponCSBase::IsUseable()
 T CWeaponCSBase::ItemPostFrame()
 T CWeaponCSBase::KeyValue(char const*, char const*)
 T CWeaponCSBase::Materialize()
 T CWeaponCSBase::PhysicsSplash(Vector const&, Vector const&, float, float)
 T CWeaponCSBase::PlayEmptySound()
 T CWeaponCSBase::Precache()
 T CWeaponCSBase::Reload()
 T CWeaponCSBase::Respawn()
 T CWeaponCSBase::SecondaryAttack()
 T CWeaponCSBase::SendReloadEvents()
 T CWeaponCSBase::SendWeaponAnim(int)
 T CWeaponCSBase::SetWeaponModelIndex(char const*)
 T CWeaponCSBase::ShouldRemoveOnRoundRestart()
 T CWeaponCSBase::Spawn()
 T CWeaponCSBase::UpdateShieldState()
 T CWeaponCSBase::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCSBaseGun::CSBaseGunFire(float, float, bool)
 T CWeaponCSBaseGun::CWeaponCSBaseGun()
 T CWeaponCSBaseGun::Deploy()
 T CWeaponCSBaseGun::DoFireEffects()
 T CWeaponCSBaseGun::GetClassName()
 T CWeaponCSBaseGun::GetPredDescMap()
 T CWeaponCSBaseGun::GetServerClass()
 T CWeaponCSBaseGun::PrimaryAttack()
 T CWeaponCSBaseGun::Reload()
 T CWeaponCSBaseGun::Spawn()
 T CWeaponCSBaseGun::WeaponIdle()
 T CWeaponCSBaseGun::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCubemap::GetClassName()
 T CWeaponCubemap::GetServerClass()
 T CWeaponCubemap::Precache()
 T CWeaponCubemap::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCycler::Deploy()
 T CWeaponCycler::GetBaseMap()
 T CWeaponCycler::GetClassName()
 T CWeaponCycler::GetDataDescMap()
 T CWeaponCycler::GetServerClass()
 T CWeaponCycler::Holster(CBaseCombatWeapon*)
 T CWeaponCycler::PrimaryAttack()
 T CWeaponCycler::SecondaryAttack()
 T CWeaponCycler::Spawn()
 T CWeaponCycler::YouForgotToImplementOrDeclareServerClass()
 T CWeaponElite::CWeaponElite()
 T CWeaponElite::Deploy()
 T CWeaponElite::ELITEFire(float)
 T CWeaponElite::GetClassName()
 T CWeaponElite::GetPredDescMap()
 T CWeaponElite::GetServerClass()
 T CWeaponElite::Precache()
 T CWeaponElite::PrimaryAttack()
 T CWeaponElite::Reload()
 T CWeaponElite::Spawn()
 T CWeaponElite::WeaponIdle()
 T CWeaponElite::YouForgotToImplementOrDeclareServerClass()
 T CWeaponFamas::CWeaponFamas()
 T CWeaponFamas::FamasFire(float, bool)
 T CWeaponFamas::FireRemaining(int&, float&)
 T CWeaponFamas::GetClassName()
 T CWeaponFamas::GetPredDescMap()
 T CWeaponFamas::GetServerClass()
 T CWeaponFamas::ItemPostFrame()
 T CWeaponFamas::PrimaryAttack()
 T CWeaponFamas::SecondaryAttack()
 T CWeaponFamas::YouForgotToImplementOrDeclareServerClass()
 T CWeaponFiveSeven::CWeaponFiveSeven()
 T CWeaponFiveSeven::Deploy()
 T CWeaponFiveSeven::FiveSevenFire(float)
 T CWeaponFiveSeven::GetClassName()
 T CWeaponFiveSeven::GetPredDescMap()
 T CWeaponFiveSeven::GetServerClass()
 T CWeaponFiveSeven::PrimaryAttack()
 T CWeaponFiveSeven::Reload()
 T CWeaponFiveSeven::SecondaryAttack()
 T CWeaponFiveSeven::Spawn()
 T CWeaponFiveSeven::WeaponIdle()
 T CWeaponFiveSeven::YouForgotToImplementOrDeclareServerClass()
 T CWeaponG3SG1::CWeaponG3SG1()
 T CWeaponG3SG1::Deploy()
 T CWeaponG3SG1::G3SG1Fire(float)
 T CWeaponG3SG1::GetClassName()
 T CWeaponG3SG1::GetMaxSpeed()
 T CWeaponG3SG1::GetPredDescMap()
 T CWeaponG3SG1::GetServerClass()
 T CWeaponG3SG1::PrimaryAttack()
 T CWeaponG3SG1::Reload()
 T CWeaponG3SG1::SecondaryAttack()
 T CWeaponG3SG1::Spawn()
 T CWeaponG3SG1::YouForgotToImplementOrDeclareServerClass()
 T CWeaponGalil::CWeaponGalil()
 T CWeaponGalil::GalilFire(float)
 T CWeaponGalil::GetClassName()
 T CWeaponGalil::GetPredDescMap()
 T CWeaponGalil::GetServerClass()
 T CWeaponGalil::PrimaryAttack()
 T CWeaponGalil::YouForgotToImplementOrDeclareServerClass()
 T CWeaponGlock::CWeaponGlock()
 T CWeaponGlock::Deploy()
 T CWeaponGlock::FireRemaining(int&, float&)
 T CWeaponGlock::GetClassName()
 T CWeaponGlock::GetPredDescMap()
 T CWeaponGlock::GetServerClass()
 T CWeaponGlock::GlockFire(float, bool)
 T CWeaponGlock::ItemPostFrame()
 T CWeaponGlock::PrimaryAttack()
 T CWeaponGlock::Reload()
 T CWeaponGlock::SecondaryAttack()
 T CWeaponGlock::Spawn()
 T CWeaponGlock::WeaponIdle()
 T CWeaponGlock::YouForgotToImplementOrDeclareServerClass()
 T CWeaponM249::CWeaponM249()
 T CWeaponM249::GetClassName()
 T CWeaponM249::GetPredDescMap()
 T CWeaponM249::GetServerClass()
 T CWeaponM249::M249Fire(float)
 T CWeaponM249::PrimaryAttack()
 T CWeaponM249::YouForgotToImplementOrDeclareServerClass()
 T CWeaponM3::CWeaponM3()
 T CWeaponM3::GetClassName()
 T CWeaponM3::GetPredDescMap()
 T CWeaponM3::GetServerClass()
 T CWeaponM3::PrimaryAttack()
 T CWeaponM3::Reload()
 T CWeaponM3::WeaponIdle()
 T CWeaponM3::YouForgotToImplementOrDeclareServerClass()
 T CWeaponM4A1::CWeaponM4A1()
 T CWeaponM4A1::Deploy()
 T CWeaponM4A1::DoFireEffects()
 T CWeaponM4A1::GetClassName()
 T CWeaponM4A1::GetDeployActivity()
 T CWeaponM4A1::GetPredDescMap()
 T CWeaponM4A1::GetServerClass()
 T CWeaponM4A1::Holster(CBaseCombatWeapon*)
 T CWeaponM4A1::M4A1Fire(float)
 T CWeaponM4A1::PrimaryAttack()
 T CWeaponM4A1::Reload()
 T CWeaponM4A1::SecondaryAttack()
 T CWeaponM4A1::Spawn()
 T CWeaponM4A1::WeaponIdle()
 T CWeaponM4A1::YouForgotToImplementOrDeclareServerClass()
 T CWeaponMAC10::CWeaponMAC10()
 T CWeaponMAC10::Deploy()
 T CWeaponMAC10::GetClassName()
 T CWeaponMAC10::GetPredDescMap()
 T CWeaponMAC10::GetServerClass()
 T CWeaponMAC10::MAC10Fire(float)
 T CWeaponMAC10::PrimaryAttack()
 T CWeaponMAC10::Reload()
 T CWeaponMAC10::Spawn()
 T CWeaponMAC10::YouForgotToImplementOrDeclareServerClass()
 T CWeaponMP5Navy::CWeaponMP5Navy()
 T CWeaponMP5Navy::Deploy()
 T CWeaponMP5Navy::GetClassName()
 T CWeaponMP5Navy::GetPredDescMap()
 T CWeaponMP5Navy::GetServerClass()
 T CWeaponMP5Navy::MP5NFire(float)
 T CWeaponMP5Navy::PrimaryAttack()
 T CWeaponMP5Navy::Reload()
 T CWeaponMP5Navy::Spawn()
 T CWeaponMP5Navy::YouForgotToImplementOrDeclareServerClass()
 T CWeaponP228::CWeaponP228()
 T CWeaponP228::Deploy()
 T CWeaponP228::GetClassName()
 T CWeaponP228::GetPredDescMap()
 T CWeaponP228::GetServerClass()
 T CWeaponP228::P228Fire(float)
 T CWeaponP228::PrimaryAttack()
 T CWeaponP228::Reload()
 T CWeaponP228::Spawn()
 T CWeaponP228::WeaponIdle()
 T CWeaponP228::YouForgotToImplementOrDeclareServerClass()
 T CWeaponP90::CWeaponP90()
 T CWeaponP90::GetClassName()
 T CWeaponP90::GetPredDescMap()
 T CWeaponP90::GetServerClass()
 T CWeaponP90::P90Fire(float)
 T CWeaponP90::PrimaryAttack()
 T CWeaponP90::YouForgotToImplementOrDeclareServerClass()
 T CWeaponSG550::CWeaponSG550()
 T CWeaponSG550::Deploy()
 T CWeaponSG550::GetClassName()
 T CWeaponSG550::GetMaxSpeed() const
 T CWeaponSG550::GetPredDescMap()
 T CWeaponSG550::GetServerClass()
 T CWeaponSG550::PrimaryAttack()
 T CWeaponSG550::Reload()
 T CWeaponSG550::SG550Fire(float)
 T CWeaponSG550::SecondaryAttack()
 T CWeaponSG550::Spawn()
 T CWeaponSG550::YouForgotToImplementOrDeclareServerClass()
 T CWeaponSG552::CWeaponSG552()
 T CWeaponSG552::GetClassName()
 T CWeaponSG552::GetMaxSpeed() const
 T CWeaponSG552::GetPredDescMap()
 T CWeaponSG552::GetServerClass()
 T CWeaponSG552::PrimaryAttack()
 T CWeaponSG552::SG552Fire(float, bool)
 T CWeaponSG552::SecondaryAttack()
 T CWeaponSG552::YouForgotToImplementOrDeclareServerClass()
 T CWeaponScout::CWeaponScout()
 T CWeaponScout::GetClassName()
 T CWeaponScout::GetMaxSpeed() const
 T CWeaponScout::GetPredDescMap()
 T CWeaponScout::GetServerClass()
 T CWeaponScout::PrimaryAttack()
 T CWeaponScout::SCOUTFire(float)
 T CWeaponScout::SecondaryAttack()
 T CWeaponScout::YouForgotToImplementOrDeclareServerClass()
 T CWeaponTMP::CWeaponTMP()
 T CWeaponTMP::GetClassName()
 T CWeaponTMP::GetPredDescMap()
 T CWeaponTMP::GetServerClass()
 T CWeaponTMP::PrimaryAttack()
 T CWeaponTMP::TMPFire(float)
 T CWeaponTMP::YouForgotToImplementOrDeclareServerClass()
 T CWeaponUMP45::CWeaponUMP45()
 T CWeaponUMP45::Deploy()
 T CWeaponUMP45::GetClassName()
 T CWeaponUMP45::GetPredDescMap()
 T CWeaponUMP45::GetServerClass()
 T CWeaponUMP45::PrimaryAttack()
 T CWeaponUMP45::Reload()
 T CWeaponUMP45::Spawn()
 T CWeaponUMP45::UMP45Fire(float)
 T CWeaponUMP45::YouForgotToImplementOrDeclareServerClass()
 T CWeaponUSP::CWeaponUSP()
 T CWeaponUSP::Deploy()
 T CWeaponUSP::GetClassName()
 T CWeaponUSP::GetDeployActivity()
 T CWeaponUSP::GetPredDescMap()
 T CWeaponUSP::GetServerClass()
 T CWeaponUSP::Holster(CBaseCombatWeapon*)
 T CWeaponUSP::PrimaryAttack()
 T CWeaponUSP::Reload()
 T CWeaponUSP::SecondaryAttack()
 T CWeaponUSP::SendWeaponAnim(int)
 T CWeaponUSP::Spawn()
 T CWeaponUSP::USPFire(float)
 T CWeaponUSP::WeaponIdle()
 T CWeaponUSP::YouForgotToImplementOrDeclareServerClass()
 T CWeaponXM1014::CWeaponXM1014()
 T CWeaponXM1014::GetClassName()
 T CWeaponXM1014::GetPredDescMap()
 T CWeaponXM1014::GetServerClass()
 T CWeaponXM1014::PrimaryAttack()
 T CWeaponXM1014::Reload()
 T CWeaponXM1014::Spawn()
 T CWeaponXM1014::WeaponIdle()
 T CWeaponXM1014::YouForgotToImplementOrDeclareServerClass()
 T CWindowPane::CreateWindowPane(Vector const&, QAngle const&)
 T CWindowPane::Die()
 T CWindowPane::GetBaseMap()
 T CWindowPane::GetDataDescMap()
 T CWindowPane::PaneTouch(CBaseEntity*)
 T CWindowPane::Precache()
 T CWindowPane::Spawn()
 T CWorld::CWorld()
 T CWorld::DecalTrace(CGameTrace*, char const*)
 T CWorld::GetBaseMap()
 T CWorld::GetClassName()
 T CWorld::GetDataDescMap()
 T CWorld::GetDisplayTitle() const
 T CWorld::GetServerClass()
 T CWorld::GetStartDark() const
 T CWorld::KeyValue(char const*, char const*)
 T CWorld::Precache()
 T CWorld::RegisterSharedActivities()
 T CWorld::RegisterSharedEvents()
 T CWorld::SetDisplayTitle(bool)
 T CWorld::SetStartDark(bool)
 T CWorld::Spawn()
 T CWorld::YouForgotToImplementOrDeclareServerClass()
 T CWorld::~CWorld()
 T CWorldItem::GetBaseMap()
 T CWorldItem::GetDataDescMap()
 T CWorldItem::KeyValue(char const*, char const*)
 T CWorldItem::Spawn()
 T CWreckage::GetBaseMap()
 T CWreckage::GetDataDescMap()
 T CWreckage::Precache()
 T CWreckage::Spawn()
 T CWreckage::Think()
 T CalcAutoplaySequences(studiohdr_t const*, CIKContext*, Vector*, Quaternion*, float const*, int, float)
 T CalcBoneAdj(studiohdr_t const*, Vector*, Quaternion*, float const*, int)
 T CalcBoneDerivatives(Vector&, Vector&, matrix3x4_t const&, matrix3x4_t const&, float)
 T CalcBonePosition(studiohdr_t const*, int, float, mstudiobone_t const*, mstudioanim_t const*, Vector&)
 T CalcBoneQuaternion(studiohdr_t const*, int, float, mstudiobone_t const*, mstudioanim_t const*, Quaternion&)
 T CalcBoneVelocityFromDerivative(QAngle const&, Vector&, Vector&, matrix3x4_t const&)
 T CalcClosestPointOnAABB(Vector const&, Vector const&, Vector const&, Vector&)
 T CalcClosestPointOnLine(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcClosestPointOnLine2D(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&, float*)
 T CalcClosestPointOnLineSegment(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcClosestPointOnLineSegment2D(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&, float*)
 T CalcClosestPointToLineT(Vector const&, Vector const&, Vector const&, Vector&)
 T CalcClosestPointToLineT2D(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&)
 T CalcDistanceSqrToLine(Vector const&, Vector const&, Vector const&, float*)
 T CalcDistanceSqrToLine2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
 T CalcDistanceSqrToLineSegment(Vector const&, Vector const&, Vector const&, float*)
 T CalcDistanceSqrToLineSegment2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
 T CalcDistanceToLine(Vector const&, Vector const&, Vector const&, float*)
 T CalcDistanceToLine2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
 T CalcDistanceToLineSegment(Vector const&, Vector const&, Vector const&, float*)
 T CalcDistanceToLineSegment2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
 T CalcLineToLineIntersectionSegment(Vector const&, Vector const&, Vector const&, Vector const&, Vector*, Vector*, float*, float*)
 T CalcPose(studiohdr_t const*, CIKContext*, Vector*, Quaternion*, int, float, float const*, int, float, float)
 T CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)
 T CalcProceduralBone(studiohdr_t const*, int, CBoneAccessor&)
 T CalcRopeStartingConditions(Vector const&, Vector const&, int, float, float*, float*)
 T CalcSqrDistanceToAABB(Vector const&, Vector const&, Vector const&)
 T CalculateAABBFromProjectionMatrix(VMatrix const&, Vector*, Vector*)
 T CalculateAABBFromProjectionMatrixInverse(VMatrix const&, Vector*, Vector*)
 T CalculateBulletDamageForce(CTakeDamageInfo*, int, Vector const&, Vector const&, float)
 T CalculateDefaultPhysicsDamage(int, gamevcollisionevent_t*, float, bool, int&, string_t)
 T CalculateExplosiveDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateMeleeDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateObjectStress(IPhysicsObject*, CBaseEntity*, vphysics_objectstress_t*)
 T CalculatePhysicsImpactDamage(int, gamevcollisionevent_t*, impactdamagetable_t const&, float, bool, int&)
 T CalculateSphereFromProjectionMatrix(VMatrix const&, Vector*, float*)
 T CalculateSphereFromProjectionMatrixInverse(VMatrix const&, Vector*, float*)
 T CalculateVelocityOffsetLocal(IPhysicsObject*, Vector const&, Vector const&, Vector&, Vector&)
 T CanOverrideEnvZoomOwner(CBaseEntity*)
 T Catmull_Rom_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Tangent(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T CeilPow2(int)
 T ChangeDistance(float, float, float, float, float, float, float&, float&)
 T ChannelToString(int)
 T CharacterSetBuild(characterset_s*, char const*)
 T CheckChatText(char*)
 T CheckForClimbableSurface(Vector const&, Vector const&)
 T CheckForEntitiesAlongSegment(Vector const&, Vector const&, Vector const&, Vector const&, CPushAwayEnumerator*)
 T ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))
 T ClassifySniperSpot(HidingSpot*)
 T CleanupApproachAreaAnalysisPrep()
 T ClearBounds(Vector&, Vector&)
 T ClearModelSoundsCache()
 T ClearMultiDamage()
 T ClientActive(edict_t*, bool)
 T ClientCommand(CBasePlayer*)
 T ClientData_Update(CBasePlayer*)
 T ClientGamePrecache()
 T ClientKill(edict_t*)
 T ClientPrecache()
 T ClientPrint(CBasePlayer*, int, char const*, char const*, char const*, char const*, char const*)
 T ClientPutInServer(edict_t*, char const*)
 T ClientPutInServerOverride(CBasePlayer* (*)(edict_t*, char const*))
 T ClientPutInServerOverride_Bot(edict_t*, char const*)
 T Cmd_ShowtriggersToggle_f()
 T ColorRGBExp32ToVector(ColorRGBExp32 const&, Vector&)
 T CommandNavAnalyze()
 T CommandNavAvoid()
 T CommandNavBeginArea()
 T CommandNavBuildLadder()
 T CommandNavCheckFileConsistency()
 T CommandNavClearWalkableMarks()
 T CommandNavCompressID()
 T CommandNavConnect()
 T CommandNavCornerLower()
 T CommandNavCornerPlaceOnGround()
 T CommandNavCornerRaise()
 T CommandNavCornerSelect()
 T CommandNavCrouch()
 T CommandNavDelete()
 T CommandNavDisconnect()
 T CommandNavDontHide()
 T CommandNavEndArea()
 T CommandNavGenerate()
 T CommandNavGenerateIncremental()
 T CommandNavJump()
 T CommandNavLadderFlip()
 T CommandNavLoad()
 T CommandNavMakeSniperSpots()
 T CommandNavMark()
 T CommandNavMarkUnnamed()
 T CommandNavMarkWalkable()
 T CommandNavMerge()
 T CommandNavNoHostages()
 T CommandNavNoJump()
 T CommandNavPlaceFloodFill()
 T CommandNavPlaceList()
 T CommandNavPlacePick()
 T CommandNavPlaceReplace()
 T CommandNavPrecise()
 T CommandNavRemoveUnusedJumpAreas()
 T CommandNavRun()
 T CommandNavSave()
 T CommandNavSetPlaceMode()
 T CommandNavShowLadderBounds()
 T CommandNavSplice()
 T CommandNavSplit()
 T CommandNavStand()
 T CommandNavStop()
 T CommandNavStrip()
 T CommandNavTogglePlaceMode()
 T CommandNavTogglePlacePainting()
 T CommandNavTransient()
 T CommandNavUnmark()
 T CommandNavUsePlace()
 T CommandNavWalk()
 T CommandNavWarpToMark()
 T CompareEntityThinkTimes(unsigned short const*, unsigned short const*)
 T ComputeIntersectionBarycentricCoordinates(Ray_t const&, Vector const&, Vector const&, Vector const&, float&, float&, float*)
 T ComputePointFromBarycentric(Vector const&, Vector const&, Vector const&, float, float, Vector&)
 T ComputePointFromBarycentric(Vector2D const&, Vector2D const&, Vector2D const&, float, float, Vector2D&)
 T ComputeRotSpeedToAlignAxes(Vector const&, Vector const&, Vector const&, float, float, float)
 T ComputeSeparatingPlane(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, cplane_t*)
 T ComputeSurroundingBox(Vector const&, QAngle const&, Vector const&, Vector const&, Vector&, Vector&)
 T ComputeTrianglePlane(Vector const&, Vector const&, Vector const&, Vector&, float&)
 T ConCommand::AutoCompleteSuggest(char const*, char (*) [64])
 T ConCommand::CanAutoComplete()
 T ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::Create(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::Dispatch()
 T ConCommand::IsCommand() const
 T ConCommand::~ConCommand()
 T ConCommandBase::AddFlags(int)
 T ConCommandBase::AddToList(ConCommandBase*)
 T ConCommandBase::ConCommandBase()
 T ConCommandBase::ConCommandBase(char const*, char const*, int)
 T ConCommandBase::CopyString(char const*)
 T ConCommandBase::Create(char const*, char const*, int)
 T ConCommandBase::FindCommand(char const*)
 T ConCommandBase::GetCommands()
 T ConCommandBase::GetHelpText() const
 T ConCommandBase::GetName() const
 T ConCommandBase::GetNext() const
 T ConCommandBase::Init()
 T ConCommandBase::IsBitSet(int) const
 T ConCommandBase::IsCommand() const
 T ConCommandBase::IsRegistered() const
 T ConCommandBase::RemoveFlaggedCommands(int)
 T ConCommandBase::RevertFlaggedCvars(int)
 T ConCommandBase::SetNext(ConCommandBase*)
 T ConCommandBase::~ConCommandBase()
 T ConCommandBaseMgr::OneTimeInit(IConCommandBaseAccessor*)
 T ConVar::AddFlags(int)
 T ConVar::ChangeStringValue(char const*)
 T ConVar::ClampValue(float&)
 T ConVar::ConVar(char const*, char const*, int)
 T ConVar::ConVar(char const*, char const*, int, char const*)
 T ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
 T ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(ConVar*, char const*))
 T ConVar::ConVar(char const*, char const*, int, char const*, void (*)(ConVar*, char const*))
 T ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(ConVar*, char const*))
 T ConVar::GetDefault() const
 T ConVar::GetHelpText() const
 T ConVar::GetMax(float&) const
 T ConVar::GetMin(float&) const
 T ConVar::GetName() const
 T ConVar::Init()
 T ConVar::InstallChangeCallback(void (*)(ConVar*, char const*))
 T ConVar::InternalSetFloatValue(float)
 T ConVar::InternalSetIntValue(int)
 T ConVar::InternalSetValue(char const*)
 T ConVar::IsBitSet(int) const
 T ConVar::IsCommand() const
 T ConVar::IsRegistered() const
 T ConVar::Revert()
 T ConVar::RevertAll()
 T ConVar::SetValue(char const*)
 T ConVar::SetValue(float)
 T ConVar::SetValue(int)
 T ConVar::~ConVar()
 T ConcatRotations(float const (*) [3], float const (*) [3], float (*) [3])
 T ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
 T ConceptHistory_t::ConceptHistory_t(ConceptHistory_t const&)
 T ConceptHistory_t::GetBaseMap()
 T ConceptHistory_t::operator=(ConceptHistory_t const&)
 T ConceptHistory_t::~ConceptHistory_t()
 T ConceptStringLessFunc(string_t const&, string_t const&)
 T ConsoleFireTargets(CBasePlayer*, char*)
 T ConsoleKillTarget(CBasePlayer*, char*)
 T CountdownTimer::Now() const
 T CreateEntitiesInTransitionList(CSaveRestoreData*, int)
 T CreateEntityByName(char const*, int)
 T CreateEntityFlame(CBaseEntity*)
 T CreateEntityTransitionList(CSaveRestoreData*, int)
 T CreateGameRulesObject(char const*)
 T CreateHostageAnimState(CBaseAnimatingOverlay*, ICSPlayerAnimStateHelpers*, LegAnimType_t, bool)
 T CreateInfoCameraLink(CBaseEntity*, CPointCamera*)
 T CreateInterface
 T CreateKeepUpright(Vector const&, QAngle const&, CBaseEntity*, float, bool)
 T CreateNetworkStringTables_GameRules()
 T CreateNetworkableByName(char const*)
 T CreatePlayerAnimState(CBaseAnimatingOverlay*, ICSPlayerAnimStateHelpers*, LegAnimType_t, bool)
 T CreateQuadraticBeam(char const*, Vector const&, Vector const&, Vector const&, float, CBaseEntity*)
 T CreateRagGib(char const*, Vector const&, QAngle const&, Vector const&, float)
 T CreateServerRagdoll(CBaseAnimating*, int, CTakeDamageInfo const&, int, bool)
 T CreateServerRagdollAttached(CBaseAnimating*, Vector const&, int, int, IPhysicsObject*, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CreateServerRagdollSubmodel(CBaseAnimating*, char const*, Vector const&, QAngle const&, int)
 T CreateStuckTable()
 T CreateVGuiScreen(char const*, char const*, CBaseEntity*, CBaseEntity*, int)
 T CreateWeaponInfo()
 T CrossProduct(float const*, float const*, float*)
 T DebugCheckEHandleAccess(void*)
 T DebugDrawLine(Vector const&, Vector const&, int, int, int, bool, float)
 T DebugPrintBitStringBits(int const*, int)
 T DefaultCompletionFunc(char const*, char (*) [64])
 T DefuseBombState::OnEnter(CCSBot*)
 T DefuseBombState::OnExit(CCSBot*)
 T DefuseBombState::OnUpdate(CCSBot*)
 T DeleteAll(AI_Waypoint_t*)
 T DeltaV(float, float, float)
 T DescribeAxis(int)
 T DestroyVGuiScreen(CVGuiScreen*)
 T DetachAttachedRagdoll(CBaseEntity*)
 T DetachAttachedRagdollsForEntity(CBaseEntity*)
 T DevMsg(CAI_BaseNPC*, char const*, ...)
 T DevMsg(CAI_BaseNPC*, unsigned int, char const*, ...)
 T DispatchEffect(char const*, CEffectData const&)
 T DispatchSpawn(CBaseEntity*)
 T DoAxisInterpBone(mstudiobone_t*, int, CBoneAccessor&)
 T DoQuatInterpBone(mstudiobone_t*, int, CBoneAccessor&)
 T DoSpark(CBaseEntity*, Vector const&, int, int, bool, Vector const&)
 T DrawAllDebugOverlays()
 T DrawBattlefront()
 T DrawDispCollPlane(CBaseTrace*)
 T DrawMessageEntities()
 T DrawOccupyTime()
 T DrawSphere(Vector const&, float, int, int, int, float)
 T DropToGround(CBaseEntity*, Vector const&, Vector const&, Vector const&)
 T ENTINDEX(CBaseEntity*)
 T EditNav_Precache(void*)
 T Editor_BeginSession(char const*, int, bool)
 T Editor_CheckVersion(char const*, int, bool)
 T Editor_CreateEntity(char const*, float, float, float, bool)
 T Editor_CreateNode(char const*, int, float, float, float, bool)
 T Editor_CreateNodeLink(int, int, bool)
 T Editor_DeleteEntity(char const*, float, float, float, bool)
 T Editor_DeleteNode(int, bool)
 T Editor_DeleteNodeLink(int, int, bool)
 T Editor_EndSession(bool)
 T Editor_RotateEntity(char const*, float, float, float, QAngle const&, bool)
 T Editor_SendCommand(char const*, bool)
 T Editor_SetKeyValue(char const*, float, float, float, char const*, char const*, bool)
 T EffectsPrecache(void*)
 T EmitSound_t::EmitSound_t(CSoundParameters const&)
 T EndGroupingSounds()
 T EndRestoreEntities()
 T EntityFactoryDictionary()
 T EntityIsParentOf(CBaseEntity*, CBaseEntity*)
 T EntityMatrix::InitFromEntity(CBaseEntity*, int)
 T EntityMatrix::InitFromEntityLocal(CBaseEntity*)
 T EntityMessageBegin(CBaseEntity*, bool)
 T EntityParticleTrailInfo_t::EntityParticleTrailInfo_t()
 T EntityParticleTrailInfo_t::GetBaseMap()
 T EntityPhysics_CreateSolver(CBaseEntity*, CBaseEntity*, bool, float)
 T EntityPlacementTest(CBaseEntity*, Vector const&, Vector&, bool)
 T EntityTouch_Add(CBaseEntity*)
 T EscapeFromBombState::OnEnter(CCSBot*)
 T EscapeFromBombState::OnExit(CCSBot*)
 T EscapeFromBombState::OnUpdate(CCSBot*)
 T EventList_AddEventEntry(char const*, int, bool, int)
 T EventList_Free()
 T EventList_GetEventType(int)
 T EventList_IndexForName(char const*)
 T EventList_Init()
 T EventList_NameForIndex(int)
 T EventList_RegisterPrivateEvent(char const*)
 T EventList_RegisterSharedEvent(char const*, int, int)
 T EventList_RegisterSharedEvents()
 T EventQueuePrioritizedEvent_t::GetBaseMap()
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, bool, float, bool, bool)
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, int, float, CBaseEntity*)
 T ExtractAnimValue(studiohdr_t const*, int, mstudioanimvalue_t*, float, float&, float&)
 T ExtractBbox(studiohdr_t*, int, Vector&, Vector&)
 T FBoxVisible(CBaseEntity*, CBaseEntity*, Vector&, float)
 T FEntIsVisible(CBaseEntity*, CBaseEntity*)
 T FX_FireBullets(int, Vector const&, QAngle const&, int, int, int, float)
 T FX_PlantBomb(int, Vector const&)
 T FX_WeaponSound(int, WeaponSound_t, Vector const&, CCSWeaponInfo*)
 T FactoryList_Retrieve(factorylist_t&)
 T FactoryList_Store(factorylist_t const&)
 T FetchBombState::OnEnter(CCSBot*)
 T FetchBombState::OnUpdate(CCSBot*)
 T FileWeaponInfo_t::FileWeaponInfo_t()
 T FileWeaponInfo_t::Parse(KeyValues*, char const*)
 T FilterDamageType::GetBaseMap()
 T FilterDamageType::GetDataDescMap()
 T FilterTeam::GetBaseMap()
 T FilterTeam::GetDataDescMap()
 T FindBodygroupByName(studiohdr_t*, char const*)
 T FindEngineArg(char const*)
 T FindEngineArgInt(char const*, int)
 T FindEntityClassForward(CBasePlayer*, char*)
 T FindEntityForward(CBasePlayer*, bool)
 T FindEntityProcedural(char const*, CBaseEntity*, CBaseEntity*)
 T FindGroundZ(Vector const&, Vector const&, Vector const&)
 T FindGroundZFromPoint(Vector const&, Vector const&)
 T FindHitboxSetByName(studiohdr_t*, char const*)
 T FindHullIntersection(Vector const&, CGameTrace&, Vector const&, Vector const&, CBaseEntity*)
 T FindInList(char const**, char const*)
 T FindInitialEncounterSpot(CBaseEntity*, Vector const&, float, float, bool)
 T FindNearbyHidingSpot(CBaseEntity*, Vector const&, float, bool, bool)
 T FindNearbyRetreatSpot(CBaseEntity*, Vector const&, float, int)
 T FindNearbyRetreatSpot(CCSBot*, float)
 T FindPhysicsAnchor(string_t, hl_constraint_info_t&, int)
 T FindPhysicsObjectByName(char const*)
 T FindPickerAILink(CBasePlayer*)
 T FindPickerAINode(CBasePlayer*, NodeType_e)
 T FindPickerEntity(CBasePlayer*)
 T FindPickerEntityClass(CBasePlayer*, char*)
 T FindPlayerStart(char const*)
 T FindPooledString(char const*)
 T FindRandomHidingSpot(CBaseEntity*, unsigned int, bool)
 T FindTransitionSequence(studiohdr_t*, int, int, int*)
 T FinishClientPutInServer(CCSPlayer*)
 T FireSystem_AddHeatInRadius(Vector const&, float, float)
 T FireSystem_CanAddFire(Vector*, float, fireType_e, int)
 T FireSystem_ExtinguishInRadius(Vector const&, float, float)
 T FireSystem_GetFireDamageDimensions(CBaseEntity*, Vector*, Vector*)
 T FireSystem_GetFiresInSphere(CFire**, int, bool, Vector const&, float)
 T FireSystem_IsFireInWall(Vector&, fireType_e)
 T FireSystem_IsValidFirePosition(Vector const&, float)
 T FireSystem_StartFire(CBaseAnimating*, float, float, float, int, CBaseEntity*, fireType_e)
 T FireSystem_StartFire(Vector const&, float, float, float, int, CBaseEntity*, fireType_e)
 T FireTargets(char const*, CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T FixPlayerCrouchStuck(CBasePlayer*)
 T FixupAngles(QAngle&)
 T FloorDivMod(double, double, int*, int*)
 T FloorPow2(int)
 T FollowState::ComputeLeaderMotionState(float)
 T FollowState::OnEnter(CCSBot*)
 T FollowState::OnExit(CCSBot*)
 T FollowState::OnUpdate(CCSBot*)
 T FreeContainingEntity(edict_t*)
 T FrustumPlanesFromMatrix(VMatrix const&, Frustum_t&)
 T Gain(float, float)
 T GameLogSystem()
 T GameStartFrame()
 T GameStringSystem()
 T Game_SetOneWayTransition()
 T GammaToLinear(float)
 T GetAISaveRestoreBlockHandler()
 T GetAllChildren(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >&)
 T GetAllInHierarchy(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >&)
 T GetAllySpeechManager()
 T GetAmmoDef()
 T GetAnimationEvent(studiohdr_t*, int, animevent_t*, float, float, int)
 T GetAttachmentLocalSpace(studiohdr_t*, int, matrix3x4_t&)
 T GetAutoMultiplayerPhysicsMode(Vector, float)
 T GetBodygroup(studiohdr_t*, int, int)
 T GetBodygroupCount(studiohdr_t*, int)
 T GetBodygroupName(studiohdr_t*, int)
 T GetBotFollowCount(CCSPlayer*)
 T GetBreakableDamage(CTakeDamageInfo const&, IBreakableWithPropData*)
 T GetBspFilename(char const*)
 T GetCSAmmoDef()
 T GetCSClassInfo(int)
 T GetCatmullRomInterpolator()
 T GetConstraintGroup(string_t)
 T GetCurrentSkyCamera()
 T GetDeathPoseActivity(CBaseAnimating*, CTakeDamageInfo const&)
 T GetDebugOverlayLine()
 T GetDebugPlayer()
 T GetDefaultLightstyleString(int)
 T GetDefaultResponseSystemSaveRestoreBlockHandler()
 T GetDetailController()
 T GetEntitySaveRestoreBlockHandler()
 T GetEntitySaveUtils()
 T GetEventIndexForSequence(mstudioseqdesc_t&)
 T GetEyePosition(studiohdr_t*, Vector&)
 T GetFileWeaponInfoFromHandle(unsigned short)
 T GetFloorDistance(Vector const&)
 T GetFloorZ(Vector const&)
 T GetFloorZ(Vector const&, float)
 T GetGameDescription()
 T GetGameModuleHandle()
 T GetGlobalTFTeam(int)
 T GetGlobalTeam(int)
 T GetHidingSpotByID(unsigned int)
 T GetHitboxSetCount(studiohdr_t*)
 T GetHitboxSetName(studiohdr_t*, int)
 T GetInvalidWeaponInfoHandle()
 T GetLinearInterpolator()
 T GetLocalPlayer()
 T GetLongFloorZ(Vector const&)
 T GetMassEquivalent(float)
 T GetMaterialIndex(char const*)
 T GetMaterialNameFromIndex(int)
 T GetModuleHandle(char const*)
 T GetNextCommandEntity(CBasePlayer*, char*, CBaseEntity*)
 T GetNonMajorAxes(Vector const&, Vector2D&)
 T GetNumBodyGroups(studiohdr_t*)
 T GetNumberOfTeams()
 T GetPhysObjSaveRestoreOps(PhysInterfaceId_t)
 T GetPhysSaveRestoreBlockHandler()
 T GetPointCameraList()
 T GetPositionInterpolator(int)
 T GetPushawayEnts(CBaseCombatCharacter*, CBaseEntity**, int, float, int, CPushAwayEnumerator*)
 T GetRandomSpot()
 T GetRandomSpotAtPlace(unsigned int)
 T GetRandomStuckOffsets(CBasePlayer*, Vector&)
 T GetRealTime()
 T GetRopeInterpolator()
 T GetRotorWashShooter(CBaseEntity*)
 T GetSceneDuration(char const*)
 T GetSceneManager()
 T GetSequenceActivity(studiohdr_t*, int, int*)
 T GetSequenceActivityName(studiohdr_t*, int)
 T GetSequenceFlags(studiohdr_t*, int)
 T GetSequenceLinearMotion(studiohdr_t*, int, float const*, Vector*)
 T GetSequenceName(studiohdr_t*, int)
 T GetSkyCameraList()
 T GetSoundSaveRestoreOps()
 T GetTemplateSaveRestoreBlockHandler()
 T GetTranslatedWeaponAlias(char const*)
 T GetVoiceGameMgr()
 T GetWeaponProficiencyName(WeaponProficiency_t)
 T GetWindspeedAtTime(float, Vector&)
 T GetWorldEntity()
 T GetWorldFogParams(fogparams_t&)
 T GetZoomOwnerDesiredFOV(CBaseEntity*)
 T GlobalEntity_Add(char const*, char const*, GLOBALESTATE)
 T GlobalEntity_GetIndex(char const*)
 T GlobalEntity_GetMap(int)
 T GlobalEntity_GetName(int)
 T GlobalEntity_GetNumGlobals()
 T GlobalEntity_GetState(int)
 T GlobalEntity_SetMap(int, string_t)
 T GlobalEntity_SetState(int, GLOBALESTATE)
 T GreatestCommonDivisor(int, int)
 T GuessDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T HLTVDirector()
 T HLTVDirectorSystem()
 T HandleRadioAliasCommands(CCSPlayer*, char const*)
 T HasAnimationEventOfType(studiohdr_t*, int, int)
 T Hermite_Spline(Quaternion const&, Quaternion const&, Quaternion const&, float, Quaternion&)
 T Hermite_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Hermite_Spline(Vector const&, Vector const&, Vector const&, float, Vector&)
 T Hermite_Spline(float, float, float, float)
 T Hermite_Spline(float, float, float, float, float)
 T Hermite_SplineBasis(float, float*)
 T HideState::OnEnter(CCSBot*)
 T HideState::OnExit(CCSBot*)
 T HideState::OnUpdate(CCSBot*)
 T HidingSpot::HidingSpot()
 T HidingSpot::Load(void*, unsigned int)
 T HidingSpot::PostLoad()
 T HidingSpot::Save(void*, unsigned int) const
 T HintMessageToAllPlayers(char const*)
 T HintNodeData::GetBaseMap()
 T Host_Say(edict_t*, bool)
 T HuntState::OnEnter(CCSBot*)
 T HuntState::OnExit(CCSBot*)
 T HuntState::OnUpdate(CCSBot*)
 T IGameSystem::Add(IGameSystem*)
 T IGameSystem::FrameUpdatePostEntityThinkAllSystems()
 T IGameSystem::FrameUpdatePreEntityThinkAllSystems()
 T IGameSystem::InitAllSystems()
 T IGameSystem::LevelInitPostEntityAllSystems()
 T IGameSystem::LevelInitPreEntityAllSystems(char const*)
 T IGameSystem::LevelShutdownPostEntityAllSystems()
 T IGameSystem::LevelShutdownPreEntityAllSystems()
 T IGameSystem::MapName()
 T IGameSystem::OnRestoreAllSystems()
 T IGameSystem::OnSaveAllSystems()
 T IGameSystem::PreClientUpdateAllSystems()
 T IGameSystem::Remove(IGameSystem*)
 T IGameSystem::RemoveAll()
 T IGameSystem::SafeRemoveIfDesiredAllSystems()
 T IGameSystem::ShutdownAllSystems()
 T IGameSystem::~IGameSystem()
 T IRotateAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
 T ISoundEmitterSystemBase::CSoundParametersInternal::CSoundParametersInternal()
 T ISoundEmitterSystemBase::CSoundParametersInternal::CSoundParametersInternal(ISoundEmitterSystemBase::CSoundParametersInternal const&)
 T ISoundEmitterSystemBase::CSoundParametersInternal::ChannelFromString(char const*)
 T ISoundEmitterSystemBase::CSoundParametersInternal::ChannelToString()
 T ISoundEmitterSystemBase::CSoundParametersInternal::CompareInterval(interval_t const&, interval_t const&) const
 T ISoundEmitterSystemBase::CSoundParametersInternal::PitchFromString(char const*)
 T ISoundEmitterSystemBase::CSoundParametersInternal::PitchToString()
 T ISoundEmitterSystemBase::CSoundParametersInternal::SoundLevelFromString(char const*)
 T ISoundEmitterSystemBase::CSoundParametersInternal::SoundLevelToString()
 T ISoundEmitterSystemBase::CSoundParametersInternal::VolumeFromString(char const*)
 T ISoundEmitterSystemBase::CSoundParametersInternal::VolumeToString()
 T ISoundEmitterSystemBase::CSoundParametersInternal::operator==(ISoundEmitterSystemBase::CSoundParametersInternal const&) const
 T ITransformAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
 T IceKey::IceKey(int)
 T IceKey::blockSize() const
 T IceKey::decrypt(unsigned char const*, unsigned char*) const
 T IceKey::encrypt(unsigned char const*, unsigned char*) const
 T IceKey::keySize() const
 T IceKey::scheduleBuild(unsigned short*, int, int const*)
 T IceKey::set(unsigned char const*)
 T IceKey::~IceKey()
 T IdleState::OnEnter(CCSBot*)
 T IdleState::OnUpdate(CCSBot*)
 T ImpulseScale(float, float)
 T IndexModelSequences(studiohdr_t*)
 T InitBodyQue()
 T InitBotTrig()
 T InitPose(studiohdr_t const*, Vector*, Quaternion*)
 T InitSinCosTable()
 T InitializeCvars()
 T InstallBotControl()
 T InstallGameRules()
 T InstancedAutoGeneratedSoundScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*)
 T InstancedScriptedScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*, float, bool)
 T InterfaceReg::InterfaceReg(void* (*)(), char const*)
 T InternalBitBufErrorHandler(BitBufErrorType, char const*)
 T InternalSendPropArray(int, int, char*, int (*)(void const*, int))
 T IntersectInfiniteRayWithSphere(Vector const&, Vector const&, Vector const&, float, float*, float*)
 T IntersectRayWithAAPlane(Vector const&, Vector const&, int, float, float)
 T IntersectRayWithBox(Ray_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithOBB(Ray_t const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithOBB(Ray_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithOBB(Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
 T IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithPlane(Ray_t const&, cplane_t const&)
 T IntersectRayWithPlane(Vector const&, Vector const&, Vector const&, float)
 T IntersectRayWithPlane(Vector const&, Vector const&, cplane_t const&)
 T IntersectRayWithRay(Ray_t const&, Ray_t const&, float&, float&)
 T IntersectRayWithSphere(Vector const&, Vector const&, Vector const&, float, float*, float*)
 T IntersectRayWithTriangle(Ray_t const&, Vector const&, Vector const&, Vector const&, bool)
 T IntersectTriangleWithPlaneBarycentric(Vector const&, Vector const&, Vector const&, Vector4D const&, Vector2D*)
 T IntervalDistance(float, float, float)
 T IntervalTimer::Now() const
 T InvestigateNoiseState::AttendCurrentNoise(CCSBot*)
 T InvestigateNoiseState::OnEnter(CCSBot*)
 T InvestigateNoiseState::OnExit(CCSBot*)
 T InvestigateNoiseState::OnUpdate(CCSBot*)
 T IsAmmoType(int, char const*)
 T IsBoxIntersectingBox(Vector const&, Vector const&, Vector const&, Vector const&)
 T IsBoxIntersectingBoxExtents(Vector const&, Vector const&, Vector const&, Vector const&)
 T IsBoxIntersectingRay(Vector const&, Vector const&, Ray_t const&, float)
 T IsBoxIntersectingRay(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, float)
 T IsBoxIntersectingRay(Vector const&, Vector const&, Vector const&, Vector const&, float)
 T IsBoxIntersectingSphere(Vector const&, Vector const&, Vector const&, float)
 T IsBoxIntersectingSphereExtents(Vector const&, Vector const&, Vector const&, float)
 T IsBoxIntersectingTriangle(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, cplane_t const&, float)
 T IsCircleIntersectingRectangle(Vector2D const&, Vector2D const&, Vector2D const&, float)
 T IsCrossingLineOfFire(Vector const&, Vector const&, CBaseEntity*, int)
 T IsDenormal(float const&)
 T IsExplosionTraceBlocked(CGameTrace*)
 T IsHidingSpotInCover(Vector const&)
 T IsInPrediction()
 T IsOBBIntersectingOBB(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float)
 T IsPointInBox(Vector const&, Vector const&, Vector const&)
 T IsPointInCone(Vector const&, Vector const&, Vector const&, float, float)
 T IsPrimaryWeapon(int)
 T IsRayIntersectingOBB(Ray_t const&, Vector const&, QAngle const&, Vector const&, Vector const&)
 T IsRayIntersectingSphere(Vector const&, Vector const&, Vector const&, float, float)
 T IsRunningScriptedScene(CBaseFlex*, bool)
 T IsRunningScriptedSceneWithSpeech(CBaseFlex*, bool)
 T IsSecondaryWeapon(int)
 T IsSphereIntersectingSphere(Vector const&, float, Vector const&, float)
 T IsSpotOccupied(CBaseEntity*, Vector const&)
 T IsStaticPointEntity(CBaseEntity*)
 T IsTriggerClass(CBaseEntity*)
 T IsValidPath(char const*)
 T IsWalkableTraceLineClear(Vector&, Vector&, unsigned int)
 T IterateActivePhysicsEntities(void (*)(CBaseEntity*))
 T JeepWaterData_t::GetBaseMap()
 T KeyValues::AppendIncludedKeys(CUtlVector<KeyValues*, CUtlMemory<KeyValues*> >&)
 T KeyValues::ChainKeyValue(KeyValues*)
 T KeyValues::Clear()
 T KeyValues::CreateKey(char const*)
 T KeyValues::CreateNewKey()
 T KeyValues::FindKey(char const*, bool)
 T KeyValues::FindKey(int) const
 T KeyValues::GetColor(char const*)
 T KeyValues::GetDataType(char const*)
 T KeyValues::GetFirstSubKey()
 T KeyValues::GetFirstTrueSubKey()
 T KeyValues::GetFirstValue()
 T KeyValues::GetFloat(char const*, float)
 T KeyValues::GetInt(char const*, int)
 T KeyValues::GetName() const
 T KeyValues::GetNameSymbol() const
 T KeyValues::GetNextKey()
 T KeyValues::GetNextTrueSubKey()
 T KeyValues::GetNextValue()
 T KeyValues::GetPtr(char const*, void*)
 T KeyValues::GetString(char const*, char const*)
 T KeyValues::GetWString(char const*, wchar_t const*)
 T KeyValues::Init()
 T KeyValues::InternalWrite(IBaseFileSystem*, void*, CUtlBuffer*, void const*, int)
 T KeyValues::IsEmpty(char const*)
 T KeyValues::KeyValues(char const*)
 T KeyValues::KeyValues(char const*, char const*, char const*)
 T KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*)
 T KeyValues::KeyValues(char const*, char const*, int)
 T KeyValues::KeyValues(char const*, char const*, int, char const*, int)
 T KeyValues::KeyValues(char const*, char const*, wchar_t const*)
 T KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*)
 T KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*)
 T KeyValues::MakeCopy() const
 T KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*> >&)
 T KeyValues::ReadAsBinary(CUtlBuffer&)
 T KeyValues::ReadToken(char**, bool&)
 T KeyValues::RecursiveCopyKeyValues(KeyValues&)
 T KeyValues::RecursiveLoadFromBuffer(char const*, char**)
 T KeyValues::RecursiveSaveToFile(CUtlBuffer&, int)
 T KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int)
 T KeyValues::RemoveEverything()
 T KeyValues::RemoveSubKey(KeyValues*)
 T KeyValues::SaveToFile(IBaseFileSystem*, char const*, char const*)
 T KeyValues::SetColor(char const*, Color)
 T KeyValues::SetFloat(char const*, float)
 T KeyValues::SetInt(char const*, int)
 T KeyValues::SetName(char const*)
 T KeyValues::SetNextKey(KeyValues*)
 T KeyValues::SetPtr(char const*, void*)
 T KeyValues::SetString(char const*, char const*)
 T KeyValues::SetWString(char const*, wchar_t const*)
 T KeyValues::UsesEscapeSequences(bool)
 T KeyValues::WriteAsBinary(CUtlBuffer&)
 T KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
 T KeyValues::WriteIndents(IBaseFileSystem*, void*, CUtlBuffer*, int)
 T KeyValues::deleteThis()
 T KeyValues::operator delete(void*)
 T KeyValues::operator delete(void*, int, char const*, int)
 T KeyValues::operator new(unsigned int)
 T KeyValues::operator new(unsigned int, int, char const*, int)
 T KeyValues::operator=(KeyValues&)
 T KeyValues::~KeyValues()
 T KillTargets(char const*)
 T LineSphereIntersection(Vector const&, float, Vector const&, Vector const&, float*, float*)
 T LinearToGamma(float)
 T LinearToScreenGamma(float)
 T LinearToTexture(float)
 T LinkChild(CBaseEntity*, CBaseEntity*)
 T LoadBitString(int*, int, CUtlBuffer&)
 T LookupActivity(studiohdr_t*, char const*)
 T LookupSequence(studiohdr_t*, char const*)
 T LookupWeaponInfoSlot(char const*)
 T MD5Final(unsigned char*, MD5Context_t*)
 T MD5Init(MD5Context_t*)
 T MD5Update(MD5Context_t*, unsigned char const*, unsigned int)
 T MD5_Print(unsigned char*, int)
 T MD5_PseudoRandom(unsigned int)
 T MakeButtonSound(int)
 T MakeSniperSpots(CNavArea*)
 T MapEntity_ExtractValue(char const*, char const*, char*)
 T MapEntity_GetNumKeysInEntity(char const*)
 T MapEntity_ParseAllEntities(char const*, IMapEntityFilter*, bool)
 T MapEntity_ParseEntity(CBaseEntity*&, char const*, IMapEntityFilter*)
 T MapEntity_ParseToken(char const*, char*)
 T MapEntity_PrecacheEntity(char const*)
 T MapEntity_SkipToNextEntity(char const*, char*)
 T MathLib_3DNowEnabled()
 T MathLib_Init(float, float, float, int, bool, bool, bool, bool)
 T MathLib_MMXEnabled()
 T MathLib_SSE2Enabled()
 T MathLib_SSEEnabled()
 T MatrixAngles(matrix3x4_t const&, Quaternion&, Vector&)
 T MatrixAngles(matrix3x4_t const&, RadianEuler&, Vector&)
 T MatrixAngles(matrix3x4_t const&, float*)
 T MatrixBuildPerspective(VMatrix&, float, float, float, float)
 T MatrixBuildRotateZ(VMatrix&, float)
 T MatrixBuildRotation(VMatrix&, Vector const&, Vector const&)
 T MatrixBuildRotationAboutAxis(VMatrix&, Vector const&, float)
 T MatrixBuildScale(VMatrix&, Vector const&)
 T MatrixBuildScale(VMatrix&, float, float, float)
 T MatrixBuildTranslation(VMatrix&, Vector const&)
 T MatrixBuildTranslation(VMatrix&, float, float, float)
 T MatrixCopy(VMatrix const&, VMatrix&)
 T MatrixCopy(matrix3x4_t const&, matrix3x4_t&)
 T MatrixFromAngles(QAngle const&, VMatrix&)
 T MatrixGetColumn(matrix3x4_t const&, int, Vector&)
 T MatrixInitialize(matrix3x4_t&, Vector const&, Vector const&, Vector const&, Vector const&)
 T MatrixInverseGeneral(VMatrix const&, VMatrix&)
 T MatrixInverseTR(VMatrix const&, VMatrix&)
 T MatrixInverseTranspose(VMatrix const&, VMatrix&)
 T MatrixInvert(matrix3x4_t const&, matrix3x4_t&)
 T MatrixMultiply(VMatrix const&, VMatrix const&, VMatrix&)
 T MatrixSetColumn(Vector const&, int, matrix3x4_t&)
 T MatrixSetIdentity(VMatrix&)
 T MatrixToAngles(VMatrix const&, QAngle&)
 T MatrixTransformPlane(VMatrix const&, cplane_t const&, cplane_t&)
 T MatrixTranspose(VMatrix const&, VMatrix&)
 T MessageEnd()
 T MessageWriteAngle(float)
 T MessageWriteAngles(QAngle const&)
 T MessageWriteBits(void const*, int)
 T MessageWriteBool(bool)
 T MessageWriteByte(int)
 T MessageWriteChar(int)
 T MessageWriteCoord(float)
 T MessageWriteEntity(int)
 T MessageWriteFloat(float)
 T MessageWriteLong(int)
 T MessageWriteSBitLong(int, int)
 T MessageWriteShort(int)
 T MessageWriteString(char const*)
 T MessageWriteUBitLong(unsigned int, int)
 T MessageWriteVec3Coord(Vector const&)
 T MessageWriteVec3Normal(Vector const&)
 T MessageWriteWord(int)
 T MissingSceneWarning(char const*)
 T ModelSoundsCacheInit()
 T ModelSoundsCacheShutdown()
 T Motion_CalculateModifiedTime(float, int, float*)
 T Motion_GetNumberOfPositionInterpolators()
 T Motion_GetNumberOfRotationInterpolators()
 T Motion_GetNumberOfTimeModifiers()
 T Motion_GetPositionInterpolator(int)
 T Motion_GetRotationInterpolatorDetails(int, char**, int*, int*)
 T Motion_GetTimeModifierDetails(int, char**)
 T Motion_InterpolateRotation(float, int, Quaternion&)
 T Motion_SetKeyAngles(int, Quaternion&)
 T MoveBitsToNavType(int)
 T MoveHelperServer()
 T MoveToRandomSpot(CBaseEntity*)
 T MoveToState::OnEnter(CCSBot*)
 T MoveToState::OnExit(CCSBot*)
 T MoveToState::OnUpdate(CCSBot*)
 T MovieExplosion::CreateMovieExplosion(Vector const&)
 T MovieExplosion::GetClassName()
 T MovieExplosion::GetServerClass()
 T MovieExplosion::YouForgotToImplementOrDeclareServerClass()
 T NAI_Hull::Bits(int)
 T NAI_Hull::Height(int)
 T NAI_Hull::Length(int)
 T NAI_Hull::LookupId(char const*)
 T NAI_Hull::Maxs(int)
 T NAI_Hull::Mins(int)
 T NAI_Hull::Name(int)
 T NAI_Hull::SmallMaxs(int)
 T NAI_Hull::SmallMins(int)
 T NAI_Hull::Width(int)
 T NDebugOverlay::Box(Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::BoxAngles(Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::BoxDirection(Vector const&, Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::Cross3D(Vector const&, Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::Cross3D(Vector const&, float, int, int, int, bool, float)
 T NDebugOverlay::Cross3DOriented(Vector const&, QAngle const&, float, int, int, int, bool, float)
 T NDebugOverlay::Cross3DOriented(matrix3x4_t const&, float, int, bool, float)
 T NDebugOverlay::DrawGroundCrossHairOverlay()
 T NDebugOverlay::DrawTickMarkedLine(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::EntityBounds(CBaseEntity const*, int, int, int, int, float)
 T NDebugOverlay::EntityText(int, int, char const*, float, int, int, int, int)
 T NDebugOverlay::Grid(Vector const&)
 T NDebugOverlay::HorzArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Line(Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::ScreenText(float, float, char const*, int, int, int, int, float)
 T NDebugOverlay::SweptBox(Vector const&, Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::Text(Vector const&, char const*, bool, float)
 T NDebugOverlay::Triangle(Vector const&, Vector const&, Vector const&, int, int, int, int, bool, float)
 T NDebugOverlay::VertArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::YawArrow(Vector const&, float, float, float, int, int, int, int, bool, float)
 T NPCPhysics_CreateSolver(CAI_BaseNPC*, CBaseEntity*, bool, float)
 T NPCPhysics_SolverExists(CAI_BaseNPC*, CBaseEntity*)
 T NWCEdit::AirNodePlacementPosition()
 T NWCEdit::CreateAILink(CBasePlayer*)
 T NWCEdit::CreateAINode(CBasePlayer*)
 T NWCEdit::DestroyAILink(CBasePlayer*)
 T NWCEdit::DestroyAINode(CBasePlayer*)
 T NWCEdit::IsWCVersionValid()
 T NWCEdit::RememberEntityPosition(CBaseEntity*)
 T NWCEdit::UndoDestroyAINode()
 T NWCEdit::UpdateEntityPosition(CBaseEntity*)
 T NameToRadioEvent(char const*)
 T NavDrawDashedLine(Vector const&, Vector const&, NavEditColor)
 T NavDrawHorizontalArrow(Vector const&, Vector const&, float, NavEditColor)
 T NavDrawLine(Vector const&, Vector const&, NavEditColor)
 T NavDrawTriangle(Vector const&, Vector const&, Vector const&, NavEditColor)
 T NumAsString(int)
 T OnBaseCombatWeaponCreated(CBaseCombatWeapon*)
 T OnBaseCombatWeaponDestroyed(CBaseCombatWeapon*)
 T OpenDoorState::OnEnter(CCSBot*)
 T OpenDoorState::OnExit(CCSBot*)
 T OpenDoorState::OnUpdate(CCSBot*)
 T ParseFile(char const*, char*, bool*, characterset_s*)
 T ParseFile(char*, char*, bool*)
 T ParseKeyvalue(void*, typedescription_t*, int, char const*, char const*)
 T ParseVector(KeyValues*, char const*, Vector&)
 T ParticleSmokeGrenade::FillVolume()
 T ParticleSmokeGrenade::GetBaseMap()
 T ParticleSmokeGrenade::GetClassName()
 T ParticleSmokeGrenade::GetDataDescMap()
 T ParticleSmokeGrenade::GetServerClass()
 T ParticleSmokeGrenade::ParticleSmokeGrenade()
 T ParticleSmokeGrenade::SetFadeTime(float, float)
 T ParticleSmokeGrenade::UpdateTransmitState()
 T ParticleSmokeGrenade::YouForgotToImplementOrDeclareServerClass()
 T PassServerEntityFilter(IHandleEntity const*, IHandleEntity const*)
 T PathFindDirection(CPathTrack*, Vector const&, Vector const&)
 T PercentageOfFlashForPlayer(CBaseEntity*, Vector, CBaseEntity*)
 T PerformObstaclePushaway(CBaseCombatCharacter*)
 T PhysAddShadow(CBaseEntity*)
 T PhysBlockHeader_t::GetBaseMap()
 T PhysBreakSound(CBaseEntity*, IPhysicsObject*, Vector)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&, gamevcollisionevent_t&, int)
 T PhysCallbackImpulse(IPhysicsObject*, Vector const&, Vector const&)
 T PhysCallbackSetVelocity(IPhysicsObject*, Vector const&)
 T PhysCleanupFrictionSounds(CBaseEntity*)
 T PhysCollisionDust(gamevcollisionevent_t*, surfacedata_t*)
 T PhysCollisionScreenShake(gamevcollisionevent_t*, int)
 T PhysCollisionSound(CBaseEntity*, IPhysicsObject*, int, int, int, float, float)
 T PhysComputeSlideDirection(IPhysicsObject*, Vector const&, Vector const&, Vector*, Vector*, float)
 T PhysCreateBbox(Vector const&, Vector const&)
 T PhysCreateWorld_Shared(CBaseEntity*, vcollide_t*, objectparams_t const&)
 T PhysDestroyObject(IPhysicsObject*, CBaseEntity*)
 T PhysDisableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysDisableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysDisableObjectCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysEnableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableFloating(IPhysicsObject*, bool)
 T PhysEnableObjectCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEntityCollisionsAreDisabled(CBaseEntity*, CBaseEntity*)
 T PhysForceClearVelocity(IPhysicsObject*)
 T PhysForceEntityToSleep(CBaseEntity*, IPhysicsObject*)
 T PhysFrictionEffect(Vector&, Vector, float, int, int)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, char const*, float)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, float, int, int)
 T PhysGetDamageInflictorVelocityStartOfFrame(IPhysicsObject*, Vector&, Vector&)
 T PhysGetDefaultAABBSolid(solid_t&)
 T PhysGetEntityMass(CBaseEntity*)
 T PhysGetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >&)
 T PhysGetMassCenterOverride(CBaseEntity*, vcollide_t*, solid_t&)
 T PhysGetMassCenterOverrideIndex(string_t)
 T PhysGetTriggerEvent(triggerevent_t*, CBaseEntity*)
 T PhysHasContactWithOtherInDirection(IPhysicsObject*, Vector const&)
 T PhysIsFinalTick()
 T PhysIsInCallback()
 T PhysModelCreate(CBaseEntity*, int, Vector const&, QAngle const&, solid_t*)
 T PhysModelCreateBox(CBaseEntity*, Vector const&, Vector const&, Vector const&, bool)
 T PhysModelCreateCustom(CBaseEntity*, CPhysCollide const*, Vector const&, QAngle const&, char const*, bool, solid_t*)
 T PhysModelCreateOBB(CBaseEntity*, Vector const&, Vector const&, Vector const&, QAngle const&, bool)
 T PhysModelCreateUnmoveable(CBaseEntity*, int, Vector const&, QAngle const&)
 T PhysModelParseSolid(solid_t&, CBaseEntity*, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, int, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, vcollide_t*, int)
 T PhysObjectHeader_t::GetBaseMap()
 T PhysParseSurfaceData(IPhysicsSurfaceProps*, IFileSystem*)
 T PhysRecheckObjectPair(IPhysicsObject*, IPhysicsObject*)
 T PhysRemoveShadow(CBaseEntity*)
 T PhysSetMassCenterOverride(masscenteroverride_t&)
 T PhysShouldCollide(IPhysicsObject*, IPhysicsObject*)
 T PhysSolidOverride(solid_t&, string_t)
 T PhysSphereCreate(CBaseEntity*, float, Vector const&, solid_t&)
 T PhysTeleportConstrainedEntity(CBaseEntity*, IPhysicsObject*, IPhysicsObject*, Vector const&, QAngle const&, bool)
 T PhysicsCommand(void (*)(CBaseEntity*))
 T PhysicsGameSystem()
 T PhysicsImpactSound(CBaseEntity*, IPhysicsObject*, int, int, int, float, float)
 T PhysicsSplash(IPhysicsFluidController*, IPhysicsObject*, CBaseEntity*)
 T Physics_RunThinkFunctions(bool)
 T Physics_SimulateEntity(CBaseEntity*)
 T Pickup_ForcePhysGunOpen(CBaseEntity*, CBasePlayer*)
 T Pickup_ForcePlayerToDropThisObject(CBaseEntity*)
 T Pickup_GetPreferredCarryAngles(CBaseEntity*, CBasePlayer*, matrix3x4_t&, QAngle&)
 T Pickup_OnAttemptPhysGunPickup(CBaseEntity*, CBasePlayer*, PhysGunPickup_t)
 T Pickup_OnPhysGunDrop(CBaseEntity*, CBasePlayer*, PhysGunDrop_t)
 T Pickup_OnPhysGunPickup(CBaseEntity*, CBasePlayer*, PhysGunPickup_t)
 T Pickup_PhysGunLaunchAngularImpulse(CBaseEntity*)
 T Pickup_ShouldPuntUseLaunchForces(CBaseEntity*)
 T PitchToString(float)
 T PlaneIntersection(VPlane const&, VPlane const&, VPlane const&, Vector&)
 T PlantBombState::OnEnter(CCSBot*)
 T PlantBombState::OnExit(CCSBot*)
 T PlantBombState::OnUpdate(CCSBot*)
 T PlayLockSounds(CBaseEntity*, locksound_t*, int, int)
 T PlayerMove()
 T PointCameraSetupVisibility(CBaseEntity*, int, unsigned char*, int)
 T PointInQuadFromBarycentric(Vector const&, Vector const&, Vector const&, Vector const&, Vector2D const&, Vector&)
 T PointInQuadToBarycentric(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, Vector2D&)
 T PointIsNearer(IPhysicsObject*, Vector const&, Vector const&)
 T PointOnLineNearestPoint(Vector const&, Vector const&, Vector const&)
 T PrecacheCustomResponseSystem(char const*)
 T PrecacheFileWeaponInfoDatabase(IFileSystem*, unsigned char const*)
 T PrecacheInstancedScene(char const*)
 T PrecacheMaterial(char const*)
 T PrecachePointTemplates()
 T PrecacheVGuiScreen(char const*)
 T PropBreakableCapEdictsOnCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int)
 T PropBreakableCreateAll(int, IPhysicsObject*, Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int, CBaseEntity*, bool)
 T PropBreakableCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int, bool, bool)
 T PropBreakablePrecacheAll(string_t)
 T Q_log2(int)
 T QuadWithParallelEdges(Vector const&, Vector const&, float, Vector const&, float, Vector const&, Vector2D&)
 T QuaternionAccumulate(Quaternion const&, float, Quaternion const&, Quaternion&)
 T QuaternionAdd(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionAlign(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionAngleDiff(Quaternion const&, Quaternion const&)
 T QuaternionAngles(Quaternion const&, QAngle&)
 T QuaternionAngles(Quaternion const&, RadianEuler&)
 T QuaternionAxisAngle(Quaternion const&, Vector&, float&)
 T QuaternionBlend(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionBlendNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionDotProduct(Quaternion const&, Quaternion const&)
 T QuaternionIdentityBlend(Quaternion const&, float, Quaternion&)
 T QuaternionMA(Quaternion const&, float, Quaternion const&, Quaternion&)
 T QuaternionMatrix(Quaternion const&, Vector const&, matrix3x4_t&)
 T QuaternionMatrix(Quaternion const&, matrix3x4_t&)
 T QuaternionMult(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionNormalize(Quaternion&)
 T QuaternionSM(float, Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionScale(Quaternion const&, float, Quaternion&)
 T QuaternionSlerp(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionSlerpNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T R_CullBox(Vector const&, Vector const&, Frustum_t const&)
 T R_CullBoxSkipNear(Vector const&, Vector const&, Frustum_t const&)
 T RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T RadiusFlash(Vector, CBaseEntity*, CBaseEntity*, float, int, int)
 T RagdollActivate(ragdoll_t&, vcollide_t*, int, bool)
 T RagdollApplyAnimationAsVelocity(ragdoll_t&, CBoneAccessor const&)
 T RagdollApplyAnimationAsVelocity(ragdoll_t&, CBoneAccessor const&, CBoneAccessor const&, float)
 T RagdollComputeExactBbox(ragdoll_t const&, Vector const&, Vector&, Vector&)
 T RagdollCreate(ragdoll_t&, ragdollparams_t const&, IPhysicsEnvironment*)
 T RagdollDestroy(ragdoll_t&)
 T RagdollExtractBoneIndices(int*, studiohdr_t*, vcollide_t*)
 T RagdollGetBoneMatrix(ragdoll_t const&, CBoneAccessor&, int)
 T RagdollIsAsleep(ragdoll_t const&)
 T RagdollSetupAnimatedFriction(IPhysicsEnvironment*, ragdoll_t*, int)
 T RagdollSetupCollisions(ragdoll_t&, vcollide_t*, int)
 T RagdollSolveSeparation(ragdoll_t&, CBaseEntity*)
 T Ragdoll_GetAngleOverrideString(char*, int, CBaseEntity*)
 T Ragdoll_IsPropRagdoll(CBaseEntity*)
 T RandomInterval(interval_t const&)
 T RangeCompressor(float, float, float, float)
 T ReadDamageTable(impactentry_t*, int, float, bool)
 T ReadEncryptedKVFile(IFileSystem*, char const*, unsigned char const*)
 T ReadInterval(char const*)
 T ReadUsercmd(bf_read*, CUserCmd*, CUserCmd*)
 T ReadWeaponDataFromFileForSlot(IFileSystem*, char const*, unsigned short*, unsigned char const*)
 T RegisterUserMessages()
 T Relationship_t::GetBaseMap()
 T RemapAngleRange(float, float, float)
 T RememberCRC(unsigned long const&, char const*)
 T RememberInitialEntityPositions(int, HierarchicalSpawn_t*)
 T RemoveActorFromScriptedScenes(CBaseFlex*, bool)
 T RemoveBotControl()
 T RemovePositionWatcher(CBaseEntity*, CBaseEntity*)
 T ReportPositionChanged(CBaseEntity*)
 T ResetActivityIndexes(studiohdr_t*)
 T ResetEventIndexes(studiohdr_t*)
 T ResetGlobalState()
 T ResetPrecacheInstancedSceneDictionary()
 T ResetStuckOffsets(CBasePlayer*)
 T ResetWindspeed()
 T ResolveQuadratic(double, double, Vector, Vector, Vector, Vector, Vector, Vector, int, double&, double&)
 T Response::GetBaseMap()
 T ResponseContext_t::GetBaseMap()
 T ResponseGroup::GetBaseMap()
 T RestoreGlobalState(CSaveRestoreData*)
 T RotateAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
 T RotationDelta(QAngle const&, QAngle const&, QAngle*)
 T RotationDeltaAxisAngle(QAngle const&, QAngle const&, Vector&, float&)
 T RotationInterpolatorFunc_Linear(float, Quaternion&)
 T SENTENCEG_GetIndex(char const*)
 T SENTENCEG_Init()
 T SENTENCEG_Lookup(char const*)
 T SENTENCEG_PickRndSz(char const*)
 T SENTENCEG_PlayRndI(edict_t*, int, float, soundlevel_t, int, int)
 T SENTENCEG_PlayRndSz(edict_t*, char const*, float, soundlevel_t, int, int)
 T SENTENCEG_PlaySentenceIndex(edict_t*, int, float, soundlevel_t, int, int)
 T SENTENCEG_PlaySequentialSz(edict_t*, char const*, float, soundlevel_t, int, int, int, int)
 T SaveBitString(int const*, int, CUtlBuffer&)
 T SaveEntityOnTable(CBaseEntity*, CSaveRestoreData*, int&)
 T SaveGlobalState(CSaveRestoreData*)
 T SaveInit(int)
 T SaveRestoreBlockHeader_t::GetBaseMap()
 T ScaleBones(studiohdr_t const*, Quaternion*, Vector*, int, float, int)
 T SceneCacheInit()
 T SceneCacheShutdown()
 T SceneManager_ClientActive(CBasePlayer*)
 T ScratchPad_DrawArrow(IScratchPad3D*, Vector const&, Vector const&, Vector const&, float, float, float, int, int, float)
 T ScratchPad_DrawArrowSimple(IScratchPad3D*, Vector const&, Vector const&, Vector const&, float)
 T ScratchPad_DrawEntityToScratchPad(IScratchPad3D*, unsigned long, CBaseEntity*, Vector const&)
 T ScratchPad_DrawLitCone(IScratchPad3D*, Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, float, int)
 T ScratchPad_DrawLitCylinder(IScratchPad3D*, Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, float, int)
 T ScratchPad_DrawWorldToScratchPad(IScratchPad3D*, unsigned long)
 T SelectDeathPoseActivityAndFrame(CBaseAnimating*, CTakeDamageInfo const&, int, Activity&, int&)
 T SelectHeaviestSequence(studiohdr_t*, int)
 T SelectWeightedSequence(studiohdr_t*, int, int)
 T SendProp::GetNumArrayLengthBits() const
 T SendProp::SendProp()
 T SendProp::~SendProp()
 T SendPropAngle(char*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropArray3(char*, int, int, int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropBool(char*, int, int)
 T SendPropDataTable(char*, int, SendTable*, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropEHandle(char*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropExclude(char*, char*)
 T SendPropFloat(char*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropInt(char*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropIntWithMinusOneFlag(char*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropPredictableId(char*, int, int)
 T SendPropQAngles(char*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropString(char*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropStringT(char*, int, int)
 T SendPropTime(char*, int, int)
 T SendPropUtlVector(char*, int, int, void (*)(void*, int, int), int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropVector(char*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendProxyArrayLength_MagnetAttachedArray(void const*, int)
 T SendProxyArrayLength_PlayerArray(void const*, int)
 T SendProxy_AngleToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Angles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_AnimTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_CSGameRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_ClientSideAnimation(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Color32ToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_CropFlagsToPlayerFlagBitsLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_DataTablePtrToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_DataTableToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_EHandleToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FishAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FishOriginX(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FishOriginY(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FloatToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_IntAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_LengthTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_MagnetAttachedObjectList(void const*, void const*, DVariant*, int, int)
 T SendProxy_MoveCollide(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_MoveType(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_OnlyToTeam(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Origin(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_PlayerList(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_QAngles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SendActiveLocalKnifeDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendActiveLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendBaseCombatCharacterLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendNonLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_ShortAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SimulationTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringT_To_String(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_String_tToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_TestProxyToggle(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UInt16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement_DataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UtlVectorLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_VectorToVector(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendTable::Construct(SendProp*, int, char*)
 T SendTable::SendTable()
 T SendTable::SendTable(SendProp*, int, char*)
 T SendTable::~SendTable()
 T ServiceEventQueue()
 T SetActivityForSequence(studiohdr_t*, int)
 T SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))
 T SetBodygroup(studiohdr_t*, int&, int, int)
 T SetDebugBits(CBasePlayer*, char*, int)
 T SetEventIndexForSequence(mstudioseqdesc_t&)
 T SetIdentityMatrix(matrix3x4_t&)
 T SetupLightNormalFromProps(QAngle const&, float, float, Vector&)
 T SetupMatrixAngles(QAngle const&)
 T SetupMatrixAxisRot(Vector const&, float)
 T SetupMatrixIdentity()
 T SetupMatrixOrgAngles(Vector const&, QAngle const&)
 T SetupMatrixProjection(Vector const&, VPlane const&)
 T SetupMatrixReflection(VPlane const&)
 T SetupMatrixScale(Vector const&)
 T SetupMatrixTranslation(Vector const&)
 T SetupParentsForSpawnList(int, HierarchicalSpawn_t*)
 T SetupSingleBoneMatrix(studiohdr_t*, int, int, int, matrix3x4_t&)
 T SharedGetToken()
 T SharedParse(char const*)
 T SharedRandomAngle(char const*, float, float, int)
 T SharedRandomFloat(char const*, float, float, int)
 T SharedRandomInt(char const*, int, int, int)
 T SharedRandomVector(char const*, float, float, int)
 T SharedSetQuoteChar(char)
 T SharedTokenWaiting(char const*)
 T SharedVarArgs(char*, ...)
 T ShouldRemoveThisRagdoll(CBaseAnimating*)
 T ShowViewPortPanelToAll(char const*, bool, KeyValues*)
 T SignbitsForPlane(cplane_t*)
 T SimThink_EntityChanged(CBaseEntity*)
 T SimThink_ListCopy(CBaseEntity**, int)
 T SimThink_ListCount()
 T SimThink_SortThinkList()
 T SlerpBones(studiohdr_t const*, Quaternion*, Vector*, int, Quaternion const*, Vector const*, float, int)
 T SmoothCurve(float)
 T SmoothCurve_Tweak(float, float, float)
 T SolveBone(studiohdr_t const*, int, matrix3x4_t*, Vector*, Quaternion*)
 T SolveInverseQuadratic(float, float, float, float, float, float, float&, float&, float&)
 T SolveInverseReciprocalQuadratic(float, float, float, float, float, float, float&, float&, float&)
 T SolveQuadratic(float, float, float, float&, float&)
 T SoundCommandLessFunc(SoundCommand_t* const&, SoundCommand_t* const&)
 T SoundCommand_t::GetBaseMap()
 T SoundEmitterSystem()
 T SoundLevelToString(soundlevel_t)
 T SpawnAllEntities(int, HierarchicalSpawn_t*, bool)
 T SpawnBlood(Vector, Vector const&, int, float)
 T SpawnHierarchicalList(int, HierarchicalSpawn_t*, bool)
 T SpewLinks()
 T SphereToAABBIntersection(Vector const&, float, Vector const&, Vector const&)
 T SplitContext(char const*, char*, int, char*, int)
 T StandardFilterRules(IHandleEntity*, int)
 T StartGroupingSounds()
 T StepAlongClimbableSurface(Vector&, Vector const&, Vector const&)
 T StopScriptedScene(CBaseFlex*, CHandle<CBaseEntity>)
 T StrLess(char const* const&, char const* const&)
 T StringSort(char const* const*, char const* const*)
 T Studio_AlignIKMatrix(matrix3x4_t&, Vector const&)
 T Studio_AnimMovement(mstudioanimdesc_t*, float, float, Vector&, QAngle&)
 T Studio_AnimPosition(mstudioanimdesc_t*, float, Vector&, QAngle&)
 T Studio_AnimVelocity(mstudioanimdesc_t*, float, Vector&)
 T Studio_BoneIndexByName(studiohdr_t const*, char const*)
 T Studio_BuildMatrices(studiohdr_t const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, int, matrix3x4_t*, int)
 T Studio_CPS(studiohdr_t const*, int, float const*)
 T Studio_CalcBoneToBoneTransform(studiohdr_t const*, int, int, matrix3x4_t&)
 T Studio_CreateBoneCache(bonecacheparams_t&)
 T Studio_DestroyBoneCache(memhandle_t__*)
 T Studio_Duration(studiohdr_t const*, int, float const*)
 T Studio_FPS(studiohdr_t const*, int, float const*)
 T Studio_FindAnimDistance(mstudioanimdesc_t*, float)
 T Studio_FindAttachment(studiohdr_t const*, char const*)
 T Studio_FindRandomAttachment(studiohdr_t const*, char const*)
 T Studio_FindSeqDistance(studiohdr_t const*, int, float const*, float)
 T Studio_GetBoneCache(memhandle_t__*)
 T Studio_GetController(studiohdr_t const*, int, float)
 T Studio_GetDefaultSurfaceProps(studiohdr_t*)
 T Studio_GetKeyValueText(studiohdr_t const*, int)
 T Studio_GetMass(studiohdr_t*)
 T Studio_GetPoseParameter(studiohdr_t const*, int, float)
 T Studio_IKAnimationError(studiohdr_t const*, mstudioikrule_t*, mstudioanimdesc_t const*, float, Vector&, Quaternion&, float&)
 T Studio_IKRuleWeight(ikcontextikrule_t&, float)
 T Studio_IKRuleWeight(mstudioikrule_t&, float)
 T Studio_IKSequenceError(studiohdr_t const*, int, float, int, float const*, ikcontextikrule_t&)
 T Studio_IKShouldLatch(ikcontextikrule_t&, float)
 T Studio_IKTail(ikcontextikrule_t&, float)
 T Studio_InvalidateBoneCache(memhandle_t__*)
 T Studio_LocalPoseParameter(studiohdr_t const*, float const*, int, int, float&, int&)
 T Studio_MaxFrame(studiohdr_t const*, int, float const*)
 T Studio_SeqAnims(studiohdr_t const*, int, float const*, mstudioanimdesc_t**, float*)
 T Studio_SeqMovement(studiohdr_t const*, int, float, float, float const*, Vector&, QAngle&)
 T Studio_SeqVelocity(studiohdr_t const*, int, float, float const*, Vector&)
 T Studio_SetController(studiohdr_t const*, int, float, float&)
 T Studio_SetPoseParameter(studiohdr_t const*, int, float, float&)
 T Studio_SolveIK(int, int, int, Vector&, Vector&, Vector&, matrix3x4_t*)
 T Studio_SolveIK(int, int, int, Vector&, matrix3x4_t*)
 T Studio_SolveIK(mstudioikchain_t*, Vector&, matrix3x4_t*)
 T SweepBoxToStudio(Ray_t const&, studiohdr_t*, mstudiohitboxset_t*, matrix3x4_t**, int, CGameTrace&)
 T Sys_Error
 T Sys_GetFactory(CSysModule*)
 T Sys_GetFactory(char const*)
 T Sys_GetFactoryThis()
 T Sys_LoadInterface(char const*, char const*, CSysModule**, void**)
 T Sys_LoadModule(char const*)
 T Sys_UnloadModule(CSysModule*)
 T TEXTURETYPE_Find(CGameTrace*)
 T TE_ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 T TE_BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamSpline(IRecipientFilter&, float, int, Vector*)
 T TE_BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 T TE_BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 T TE_DispatchEffect(IRecipientFilter&, float, Vector const&, char const*, CEffectData const&)
 T TE_Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 T TE_DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 T TE_EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 T TE_Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 T TE_FireBullets(int, Vector const&, QAngle const&, int, int, int, float)
 T TE_Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 T TE_FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 T TE_GaussExplosion(IRecipientFilter&, float, Vector const&, Vector const&, int)
 T TE_GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 T TE_Impact(IRecipientFilter&, float)
 T TE_KillPlayerAttachments(IRecipientFilter&, float, int)
 T TE_LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 T TE_MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 T TE_PhysicsProp(IRecipientFilter&, float, int, Vector const&, QAngle const&, Vector const&, int)
 T TE_PlantBomb(int, Vector const&)
 T TE_PlayerAnimEvent(CBasePlayer*, PlayerAnimEvent_t)
 T TE_PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 T TE_RadioIcon(IRecipientFilter&, float, CBaseEntity*)
 T TE_ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 T TE_ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 T TE_Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 T TE_WorldDecal(IRecipientFilter&, float, Vector const*, int)
 T TaskFailureToString(int)
 T TemplateEntityData_t::GetBaseMap()
 T Templates_Add(CBaseEntity*, char const*, int)
 T Templates_FindByIndex(int)
 T Templates_FindByTargetName(char const*)
 T Templates_GetEntityIOFixedMapData(int)
 T Templates_IndexRequiresEntityIOFixup(int)
 T Templates_ReconnectIOForGroup(CPointTemplate*)
 T Templates_RemoveAll()
 T Templates_StartUniqueInstance()
 T TerrainMod_Add(TerrainModType, CTerrainModParams const&)
 T Test_CreateEntity()
 T Test_InitRandomEntitySpawner()
 T Test_ProxyToggle_EnableProxy()
 T Test_ProxyToggle_SetValue()
 T Test_RandomPlayerPosition()
 T Test_RandomizeInPVS()
 T Test_RemoveAllRandomEntities()
 T Test_SpawnRandomEntities()
 T TexCoordInQuadFromBarycentric(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&)
 T TextToChannel(char const*)
 T TextToSoundLevel(char const*)
 T TextureToLinear(int)
 T ThinkRebalanceCompare(AIRebalanceInfo_t const*, AIRebalanceInfo_t const*)
 T TimeModifierFunc_Cosine(float)
 T TimeModifierFunc_Linear(float)
 T TimeModifierFunc_TimeSquared(float)
 T TimedEventMgr_LessFunc(CEventRegister* const&, CEventRegister* const&)
 T TimescaleChanged(ConVar*, char const*)
 T TracePlayerBBoxForGround(Vector const&, Vector const&, Vector const&, Vector const&, IHandleEntity*, unsigned int, int, CGameTrace&)
 T TraceToStudio(Ray_t const&, studiohdr_t*, mstudiohitboxset_t*, matrix3x4_t**, int, CGameTrace&)
 T TrainSpeed(int, int)
 T TransferChildren(CBaseEntity*, CBaseEntity*)
 T TransferPhysicsObject(CBaseEntity*, CBaseEntity*, bool)
 T TransformAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
 T TransformAndRotate(Vector const&, Vector const&, matrix3x4_t const&, Vector&, Vector&)
 T TransformAnglesToLocalSpace(QAngle const&, matrix3x4_t&)
 T TransformAnglesToWorldSpace(QAngle const&, matrix3x4_t&)
 T UTIL_AddDebugLine(Vector const&, Vector const&, bool, bool)
 T UTIL_AxisStringToPointDir(Vector&, Vector&, char const*)
 T UTIL_AxisStringToPointPoint(Vector&, Vector&, char const*)
 T UTIL_AxisStringToUnitDir(Vector&, char const*)
 T UTIL_Beam(Vector&, Vector&, int, int, unsigned char, unsigned char, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
 T UTIL_BloodDecalTrace(CGameTrace*, int)
 T UTIL_BloodDrips(Vector const&, Vector const&, int, int)
 T UTIL_BloodImpact(Vector const&, Vector const&, int, int)
 T UTIL_BloodSpray(Vector const&, Vector const&, int, int, int)
 T UTIL_BloodStream(Vector const&, Vector const&, int, int)
 T UTIL_BotsInGame()
 T UTIL_BubbleTrail(Vector const&, Vector const&, int)
 T UTIL_Bubbles(Vector const&, Vector const&, int)
 T UTIL_CSRadioMessage(IRecipientFilter&, int, int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_CSSBotsInGame()
 T UTIL_CSSKickBotFromTeam(int)
 T UTIL_CheckBottom(CBaseEntity*, ITraceFilter*, float)
 T UTIL_ClearTrace(CGameTrace&)
 T UTIL_ClientPVSIsExpanded()
 T UTIL_ClientPrintAll(int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ClientPrintFilter(IRecipientFilter&, int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ClientsInGame()
 T UTIL_ClipPunchAngleOffset(QAngle&, QAngle const&, QAngle const&)
 T UTIL_ClipTraceToPlayers(CBasePlayer const*, CBasePlayer const*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T UTIL_ComputeAABBForBounds(Vector const&, Vector const&, Vector const&, Vector const&, Vector*, Vector*)
 T UTIL_ConstructBotNetName(char*, int, BotProfile const*)
 T UTIL_DecalTrace(CGameTrace*, char const*)
 T UTIL_DecodeICE(unsigned char*, int, unsigned char const*)
 T UTIL_DisableRemoveImmediate()
 T UTIL_DotPoints(Vector const&, Vector const&, Vector const&)
 T UTIL_DrawBeamFromEnt(int, Vector, int, unsigned char, unsigned char, unsigned char)
 T UTIL_DrawBeamPoints(Vector, Vector, int, unsigned char, unsigned char, unsigned char)
 T UTIL_DrawBox(Extent*, int, int, int, int)
 T UTIL_DrawOverlayLines()
 T UTIL_DrawPositioningOverlay(float)
 T UTIL_DropToFloor(CBaseEntity*, unsigned int)
 T UTIL_EmitAmbientSound(int, Vector const&, char const*, float, soundlevel_t, int, int, float, float*)
 T UTIL_EmitGroupIDSuit(edict_t*, int)
 T UTIL_EmitGroupnameSuit(edict_t*, char const*)
 T UTIL_EmitSoundSuit(edict_t*, char const*)
 T UTIL_EnableRemoveImmediate()
 T UTIL_EntitiesAlongRay(Ray_t const&, CFlaggedEntitiesEnum*)
 T UTIL_EntitiesInBox(Vector const&, Vector const&, CFlaggedEntitiesEnum*)
 T UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)
 T UTIL_EntitiesInSphere(Vector const&, float, CFlaggedEntitiesEnum*)
 T UTIL_EntityByIndex(int)
 T UTIL_EntityHasMatchingRootParent(CBaseEntity*, CBaseEntity*)
 T UTIL_EntityInSolid(CBaseEntity*)
 T UTIL_FindClientInPVS(Vector const&, Vector const&)
 T UTIL_FindClientInPVS(edict_t*)
 T UTIL_FindClientInVisibilityPVS(edict_t*)
 T UTIL_FindWaterSurface(Vector const&, float, float)
 T UTIL_FreeFile(unsigned char*)
 T UTIL_FunctionFromName(datamap_t*, char const*)
 T UTIL_FunctionToName(datamap_t*, void*)
 T UTIL_GetBotPrefix()
 T UTIL_GetClosestPlayer(Vector const&, float*)
 T UTIL_GetClosestPlayer(Vector const&, int, float*)
 T UTIL_GetCommandClient()
 T UTIL_GetCommandClientIndex()
 T UTIL_GetListenServerHost()
 T UTIL_GetLocalPlayer()
 T UTIL_GetPlayerConnectionInfo(int, int&, int&)
 T UTIL_GetSimulationInterval()
 T UTIL_HudHintText(CBaseEntity*, char const*)
 T UTIL_HudMessage(CBasePlayer*, hudtextparms_s const&, char const*)
 T UTIL_HudMessageAll(hudtextparms_s const&, char const*)
 T UTIL_HumansInGame(bool)
 T UTIL_HumansOnTeam(int, bool)
 T UTIL_ImpactTrace(CGameTrace*, int, char*)
 T UTIL_IsCommandIssuedByServerAdmin()
 T UTIL_IsLowViolence()
 T UTIL_IsMasterTriggered(string_t, CBaseEntity*)
 T UTIL_IsNameTaken(char const*, bool)
 T UTIL_IsSpaceEmpty(CBaseEntity*, Vector const&, Vector const&)
 T UTIL_IsTeamAllBots(int)
 T UTIL_IsValidEntity(CBaseEntity*)
 T UTIL_IsVisibleToTeam(Vector const&, int)
 T UTIL_KickBotFromTeam(int)
 T UTIL_LoadFileForMe(char const*, int*)
 T UTIL_LogPrintf(char*, ...)
 T UTIL_MuzzleFlash(Vector const&, QAngle const&, int, int)
 T UTIL_ParticleEffect(Vector const&, Vector const&, unsigned long, unsigned long)
 T UTIL_PlayerByIndex(int)
 T UTIL_PlayerByName(char const*)
 T UTIL_PlayerByUserId(int)
 T UTIL_PlayerDecalTrace(CGameTrace*, int)
 T UTIL_PointAtEntity(CBaseEntity*, CBaseEntity*)
 T UTIL_PointAtNamedEntity(CBaseEntity*, string_t)
 T UTIL_PointOnLineNearestPoint(Vector const&, Vector const&, Vector const&, bool)
 T UTIL_PrecacheDecal(char const*, bool)
 T UTIL_PrecacheOther(char const*, char const*)
 T UTIL_PredictedPosition(CBaseEntity*, float, Vector*)
 T UTIL_RandomBloodVector()
 T UTIL_Remove(CBaseEntity*)
 T UTIL_Remove(IServerNetworkable*)
 T UTIL_RemoveHierarchy(CBaseEntity*)
 T UTIL_RemoveImmediate(CBaseEntity*)
 T UTIL_RestartAmbientSounds()
 T UTIL_SayText(char const*, CBasePlayer*)
 T UTIL_SayText2Filter(IRecipientFilter&, CBasePlayer*, bool, char const*, char const*, char const*, char const*, char const*)
 T UTIL_SayTextAll(char const*, CBasePlayer*, bool)
 T UTIL_SayTextFilter(IRecipientFilter&, char const*, CBasePlayer*, bool)
 T UTIL_ScaleForGravity(float)
 T UTIL_ScreenFade(CBaseEntity*, color32_s const&, float, float, int)
 T UTIL_ScreenFadeAll(color32_s const&, float, float, int)
 T UTIL_ScreenFadeBuild(ScreenFade_t&, color32_s const&, float, float, int)
 T UTIL_ScreenFadeWrite(ScreenFade_t const&, CBaseEntity*)
 T UTIL_ScreenShake(Vector const&, float, float, float, float, ShakeCommand_t, bool)
 T UTIL_ScreenShakeObject(CBaseEntity*, Vector const&, float, float, float, float, ShakeCommand_t, bool)
 T UTIL_SetClientVisibilityPVS(edict_t*, unsigned char const*, int)
 T UTIL_SetModel(CBaseEntity*, char const*)
 T UTIL_SetOrigin(CBaseEntity*, Vector const&, bool)
 T UTIL_SetSize(CBaseEntity*, Vector const&, Vector const&)
 T UTIL_SetTrace(CGameTrace&, Ray_t const&, edict_t*, float, int, unsigned int, Vector const&, float)
 T UTIL_ShouldShowBlood(int)
 T UTIL_ShowMessage(char const*, CBasePlayer*)
 T UTIL_ShowMessageAll(char const*)
 T UTIL_Smoke(Vector const&, float, float)
 T UTIL_SnapDirectionToAxis(Vector&, float)
 T UTIL_StringToColor32(color32_s*, char const*)
 T UTIL_StringToFloatArray(float*, int, char const*)
 T UTIL_StringToIntArray(int*, int, char const*)
 T UTIL_StringToVector(float*, char const*)
 T UTIL_StripToken(char const*, char*)
 T UTIL_TeamsMatch(char const*, char const*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, ITraceFilter*, CGameTrace*)
 T UTIL_TraceModel(Vector const&, Vector const&, Vector const&, Vector const&, CBaseEntity*, int, CGameTrace*)
 T UTIL_Tracer(Vector const&, Vector const&, int, int, float, bool, char const*)
 T UTIL_TranslateSoundName(char const*, char const*)
 T UTIL_ValidateSoundName(string_t&, char const*)
 T UTIL_VarArgs(char*, ...)
 T UTIL_VecToPitch(Vector const&)
 T UTIL_VecToPitch(matrix3x4_t const&, Vector const&)
 T UTIL_VecToYaw(Vector const&)
 T UTIL_VecToYaw(matrix3x4_t const&, Vector const&)
 T UTIL_WaterLevel(Vector const&, float, float)
 T UTIL_YawToVector(float)
 T UnlinkAllChildren(CBaseEntity*)
 T UnlinkChild(CBaseEntity*, CBaseEntity*)
 T UnlinkFromParent(CBaseEntity*)
 T UnreachableEnt_t::GetBaseMap()
 T UpdateAllClientData()
 T UseEntityState::OnEnter(CCSBot*)
 T UseEntityState::OnExit(CCSBot*)
 T UseEntityState::OnUpdate(CCSBot*)
 T UserMessageBegin(IRecipientFilter&, char const*)
 T UtlVector_InitializeAllocatedElements(CAnimationLayer*, int)
 T VMatrix::GetScale() const
 T VMatrix::InverseGeneral(VMatrix&) const
 T VMatrix::InverseTR() const
 T VMatrix::InverseTR(VMatrix&) const
 T VMatrix::IsRotationMatrix() const
 T VMatrix::MatrixMul(VMatrix const&, VMatrix&) const
 T VMatrix::NormalizeBasisVectors() const
 T VMatrix::Scale(Vector const&)
 T VMatrix::SetupMatrixOrgAngles(Vector const&, QAngle const&)
 T VMatrix::Transpose() const
 T VMatrix::Transpose3x3() const
 T VMatrix::operator*(VMatrix const&) const
 T VMatrix::operator*(VPlane const&) const
 T VMatrix::operator=(VMatrix const&)
 T ValidateMOTDFilename(ConVar*, char const*)
 T VecCheckThrow(CBaseEntity*, Vector const&, Vector, float, float, Vector*, Vector*)
 T VecCheckToss(CBaseEntity*, Vector, Vector, float, float, bool, Vector*, Vector*)
 T Vector3DMultiply(VMatrix const&, Vector const&, Vector&)
 T Vector3DMultiplyPositionProjective(VMatrix const&, Vector const&, Vector&)
 T Vector3DMultiplyProjective(VMatrix const&, Vector const&, Vector&)
 T Vector3DMultiplyTranspose(VMatrix const&, Vector const&, Vector&)
 T Vector4DMultiply(VMatrix const&, Vector4D const&, Vector4D&)
 T Vector4DMultiplyPosition(VMatrix const&, Vector const&, Vector4D&)
 T Vector4DMultiplyTranspose(VMatrix const&, Vector4D const&, Vector4D&)
 T VectorAngles(Vector const&, QAngle&)
 T VectorAngles(float const*, float*)
 T VectorCompare(float const*, float const*)
 T VectorIRotate(float const*, matrix3x4_t const&, float*)
 T VectorITransform(float const*, matrix3x4_t const&, float*)
 T VectorMA(Vector const&, float, Vector const&, Vector&)
 T VectorMA(float const*, float, float const*, float*)
 T VectorMatrix(Vector const&, matrix3x4_t&)
 T VectorRotate(float const*, matrix3x4_t const&, float*)
 T VectorRotateSSE(float const*, matrix3x4_t const&, float*)
 T VectorToColorRGBExp32(Vector const&, ColorRGBExp32&)
 T VectorTransform(float const*, matrix3x4_t const&, float*)
 T VectorTransformSSE(float const*, matrix3x4_t const&, float*)
 T VectorVectors(Vector const&, Vector&, Vector&)
 T VectorYawRotate(Vector const&, float, Vector&)
 T VectorsEqual(float const*, float const*)
 T VerifySequenceIndex(studiohdr_t*)
 T VolumeToString(float)
 T W_Precache()
 T WatchPositionChanges(CBaseEntity*, CBaseEntity*)
 T WaveTrace(char const*, char const*)
 T WeaponIDToAlias(int)
 T WorldToLocalRotation(VMatrix const&, Vector const&, float)
 T WriteUsercmd(bf_write*, CUserCmd*, CUserCmd*)
 T _3DNow_InvRSquared(float const*)
 T _3DNow_RSqrt(float)
 T _3DNow_Sqrt(float)
 T _3DNow_VectorNormalize(Vector&)
 T _3DNow_VectorNormalizeFast(Vector&)
 T _InvRSquared(float const*)
 T _SSE_InvRSquared(float const*)
 T _SSE_Sqrt(float)
 T _SSE_VectorNormalize(Vector&)
 T _SSE_VectorNormalizeFast(Vector&)
 T _VectorNormalize(Vector&)
 T _VectorNormalizeFast(Vector&)
 T __CreateGameRules_CCSGameRules()
 T __CreateGameRules_CMultiplayRules()
 T __CreateGameRules_CTeamplayRules()
 T __cxa_bad_cast
 T __cxa_bad_typeid
 T __cxxabiv1::__array_type_info::~__array_type_info()
 T __cxxabiv1::__enum_type_info::~__enum_type_info()
 T __cxxabiv1::__function_type_info::__is_function_p() const
 T __cxxabiv1::__function_type_info::~__function_type_info()
 T __cxxabiv1::__fundamental_type_info::~__fundamental_type_info()
 T __cxxabiv1::__pbase_type_info::__do_catch(std::type_info const*, void**, unsigned int) const
 T __cxxabiv1::__pbase_type_info::~__pbase_type_info()
 T __cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const
 T __cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()
 T __cxxabiv1::__pointer_type_info::__is_pointer_p() const
 T __cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const
 T __cxxabiv1::__pointer_type_info::~__pointer_type_info()
 T __gnu_cxx::__atomic_add(int volatile*, int)
 T __gnu_cxx::__exchange_and_add(int volatile*, int)
 T _calloc_dbg
 T _expand
 T _expand_dbg
 T _fini
 T _free_base
 T _free_dbg
 T _get_sbh_threshold
 T _heap_alloc
 T _heap_init
 T _heap_term
 T _heapadd
 T _heapchk
 T _heapmin
 T _heapset
 T _heapused
 T _init
 T _malloc_base
 T _malloc_dbg
 T _msize
 T _msize_dbg
 T _nh_malloc
 T _nh_malloc_dbg
 T _realloc_base
 T _realloc_dbg
 T _rsqrtf(float)
 T _set_sbh_threshold
 T _sqrtf(float)
 T audioparams_t::GetBaseMap()
 T audioparams_t::GetDataDescMap()
 T bf_read::CheckReadUBitLong(int)
 T bf_read::ExciseBits(int, int)
 T bf_read::GetDebugName()
 T bf_read::PeekUBitLong(int)
 T bf_read::ReadAndAllocateString(bool*)
 T bf_read::ReadBitAngle(int)
 T bf_read::ReadBitAngles(QAngle&)
 T bf_read::ReadBitCoord()
 T bf_read::ReadBitLong(int, bool)
 T bf_read::ReadBitNormal()
 T bf_read::ReadBitVec3Coord(Vector&)
 T bf_read::ReadBitVec3Normal(Vector&)
 T bf_read::ReadBits(void*, int)
 T bf_read::ReadByte()
 T bf_read::ReadBytes(void*, int)
 T bf_read::ReadChar()
 T bf_read::ReadFloat()
 T bf_read::ReadLong()
 T bf_read::ReadSBitLong(int)
 T bf_read::ReadShort()
 T bf_read::ReadString(char*, int, bool, int*)
 T bf_read::ReadUBitVar()
 T bf_read::ReadWord()
 T bf_read::Reset()
 T bf_read::Seek(int)
 T bf_read::SetAssertOnOverflow(bool)
 T bf_read::SetDebugName(char const*)
 T bf_read::StartReading(void const*, int, int, int)
 T bf_read::bf_read()
 T bf_read::bf_read(char const*, void const*, int, int)
 T bf_read::bf_read(void const*, int, int)
 T bf_write::GetDebugName()
 T bf_write::Reset()
 T bf_write::SeekToBit(int)
 T bf_write::SetAssertOnOverflow(bool)
 T bf_write::SetDebugName(char const*)
 T bf_write::StartWriting(void*, int, int, int)
 T bf_write::WriteBitAngle(float, int)
 T bf_write::WriteBitAngles(QAngle const&)
 T bf_write::WriteBitCoord(float)
 T bf_write::WriteBitFloat(float)
 T bf_write::WriteBitLong(unsigned int, int, bool)
 T bf_write::WriteBitNormal(float)
 T bf_write::WriteBitVec3Coord(Vector const&)
 T bf_write::WriteBitVec3Normal(Vector const&)
 T bf_write::WriteBits(void const*, int)
 T bf_write::WriteBitsFromBuffer(bf_read*, int)
 T bf_write::WriteByte(int)
 T bf_write::WriteBytes(void const*, int)
 T bf_write::WriteChar(int)
 T bf_write::WriteFloat(float)
 T bf_write::WriteLong(long)
 T bf_write::WriteSBitLong(int, int)
 T bf_write::WriteShort(int)
 T bf_write::WriteString(char const*)
 T bf_write::WriteUBitVar(unsigned int)
 T bf_write::WriteWord(int)
 T bf_write::bf_write()
 T bf_write::bf_write(char const*, void*, int, int)
 T bf_write::bf_write(void*, int, int)
 T cc_CreatePredictionError_f()
 T datamap_t* DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)
 T datamap_t* DataMapInit<AIScheduleState_t>(AIScheduleState_t*)
 T datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)
 T datamap_t* DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)
 T datamap_t* DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)
 T datamap_t* DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)
 T datamap_t* DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)
 T datamap_t* DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)
 T datamap_t* DataMapInit<AI_Response>(AI_Response*)
 T datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)
 T datamap_t* DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)
 T datamap_t* DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)
 T datamap_t* DataMapInit<CAISound>(CAISound*)
 T datamap_t* DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)
 T datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)
 T datamap_t* DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)
 T datamap_t* DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)
 T datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)
 T datamap_t* DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)
 T datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)
 T datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)
 T datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)
 T datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)
 T datamap_t* DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)
 T datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)
 T datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)
 T datamap_t* DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)
 T datamap_t* DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)
 T datamap_t* DataMapInit<CAI_Enemies>(CAI_Enemies*)
 T datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)
 T datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)
 T datamap_t* DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)
 T datamap_t* DataMapInit<CAI_FreePass>(CAI_FreePass*)
 T datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)
 T datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)
 T datamap_t* DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)
 T datamap_t* DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)
 T datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)
 T datamap_t* DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)
 T datamap_t* DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)
 T datamap_t* DataMapInit<CAI_LookTarget>(CAI_LookTarget*)
 T datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)
 T datamap_t* DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)
 T datamap_t* DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)
 T datamap_t* DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)
 T datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)
 T datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)
 T datamap_t* DataMapInit<CAI_Path>(CAI_Path*)
 T datamap_t* DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)
 T datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)
 T datamap_t* DataMapInit<CAI_ProxTester>(CAI_ProxTester*)
 T datamap_t* DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)
 T datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)
 T datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)
 T datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)
 T datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)
 T datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)
 T datamap_t* DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)
 T datamap_t* DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)
 T datamap_t* DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)
 T datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)
 T datamap_t* DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)
 T datamap_t* DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)
 T datamap_t* DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)
 T datamap_t* DataMapInit<CAI_TrackPather>(CAI_TrackPather*)
 T datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)
 T datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)
 T datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)
 T datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)
 T datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)
 T datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)
 T datamap_t* DataMapInit<CBaseButton>(CBaseButton*)
 T datamap_t* DataMapInit<CBaseCSGrenade>(CBaseCSGrenade*)
 T datamap_t* DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)
 T datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)
 T datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)
 T datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)
 T datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)
 T datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)
 T datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)
 T datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)
 T datamap_t* DataMapInit<CBaseFire>(CBaseFire*)
 T datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)
 T datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)
 T datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)
 T datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)
 T datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)
 T datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)
 T datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)
 T datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)
 T datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)
 T datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)
 T datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)
 T datamap_t* DataMapInit<CBeam>(CBeam*)
 T datamap_t* DataMapInit<CBlendingCycler>(CBlendingCycler*)
 T datamap_t* DataMapInit<CBlood>(CBlood*)
 T datamap_t* DataMapInit<CBombTarget>(CBombTarget*)
 T datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)
 T datamap_t* DataMapInit<CBreakable>(CBreakable*)
 T datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)
 T datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)
 T datamap_t* DataMapInit<CBubbling>(CBubbling*)
 T datamap_t* DataMapInit<CBuyZone>(CBuyZone*)
 T datamap_t* DataMapInit<CCSBot>(CCSBot*)
 T datamap_t* DataMapInit<CCSPlayer>(CCSPlayer*)
 T datamap_t* DataMapInit<CCSPlayerResource>(CCSPlayerResource*)
 T datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)
 T datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)
 T datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)
 T datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)
 T datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)
 T datamap_t* DataMapInit<CCredits>(CCredits*)
 T datamap_t* DataMapInit<CCycler>(CCycler*)
 T datamap_t* DataMapInit<CDecal>(CDecal*)
 T datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)
 T datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)
 T datamap_t* DataMapInit<CEmbers>(CEmbers*)
 T datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)
 T datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)
 T datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)
 T datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)
 T datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)
 T datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)
 T datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)
 T datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)
 T datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)
 T datamap_t* DataMapInit<CEnvFade>(CEnvFade*)
 T datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)
 T datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)
 T datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)
 T datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)
 T datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)
 T datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)
 T datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)
 T datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)
 T datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)
 T datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)
 T datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)
 T datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)
 T datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)
 T datamap_t* DataMapInit<CEnvShake>(CEnvShake*)
 T datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)
 T datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)
 T datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)
 T datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)
 T datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)
 T datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)
 T datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)
 T datamap_t* DataMapInit<CEnvWind>(CEnvWind*)
 T datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)
 T datamap_t* DataMapInit<CEventAction>(CEventAction*)
 T datamap_t* DataMapInit<CEventQueue>(CEventQueue*)
 T datamap_t* DataMapInit<CFilterClass>(CFilterClass*)
 T datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)
 T datamap_t* DataMapInit<CFilterName>(CFilterName*)
 T datamap_t* DataMapInit<CFire>(CFire*)
 T datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)
 T datamap_t* DataMapInit<CFish>(CFish*)
 T datamap_t* DataMapInit<CFishPool>(CFishPool*)
 T datamap_t* DataMapInit<CFlashbang>(CFlashbang*)
 T datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)
 T datamap_t* DataMapInit<CFlextalkActor>(CFlextalkActor*)
 T datamap_t* DataMapInit<CFogController>(CFogController*)
 T datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)
 T datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)
 T datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)
 T datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)
 T datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)
 T datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)
 T datamap_t* DataMapInit<CFuncMonitor>(CFuncMonitor*)
 T datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)
 T datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)
 T datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)
 T datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)
 T datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)
 T datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)
 T datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)
 T datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)
 T datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)
 T datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)
 T datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)
 T datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)
 T datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)
 T datamap_t* DataMapInit<CFuncWall>(CFuncWall*)
 T datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)
 T datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)
 T datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)
 T datamap_t* DataMapInit<CGameEnd>(CGameEnd*)
 T datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)
 T datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)
 T datamap_t* DataMapInit<CGameScore>(CGameScore*)
 T datamap_t* DataMapInit<CGameText>(CGameText*)
 T datamap_t* DataMapInit<CGameUI>(CGameUI*)
 T datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)
 T datamap_t* DataMapInit<CGenericActor>(CGenericActor*)
 T datamap_t* DataMapInit<CGib>(CGib*)
 T datamap_t* DataMapInit<CGibShooter>(CGibShooter*)
 T datamap_t* DataMapInit<CGlobalState>(CGlobalState*)
 T datamap_t* DataMapInit<CGunTarget>(CGunTarget*)
 T datamap_t* DataMapInit<CHEGrenade>(CHEGrenade*)
 T datamap_t* DataMapInit<CHostage>(CHostage*)
 T datamap_t* DataMapInit<CHostageRescueZone>(CHostageRescueZone*)
 T datamap_t* DataMapInit<CInfoCameraLink>(CInfoCameraLink*)
 T datamap_t* DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)
 T datamap_t* DataMapInit<CInfoViewParameters>(CInfoViewParameters*)
 T datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)
 T datamap_t* DataMapInit<CItem>(CItem*)
 T datamap_t* DataMapInit<CItemDefuser>(CItemDefuser*)
 T datamap_t* DataMapInit<CItemSoda>(CItemSoda*)
 T datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)
 T datamap_t* DataMapInit<CKnife>(CKnife*)
 T datamap_t* DataMapInit<CLight>(CLight*)
 T datamap_t* DataMapInit<CLightGlow>(CLightGlow*)
 T datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)
 T datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)
 T datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)
 T datamap_t* DataMapInit<CLogicCase>(CLogicCase*)
 T datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)
 T datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)
 T datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)
 T datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)
 T datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)
 T datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)
 T datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)
 T datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)
 T datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)
 T datamap_t* DataMapInit<CMathCounter>(CMathCounter*)
 T datamap_t* DataMapInit<CMathRemap>(CMathRemap*)
 T datamap_t* DataMapInit<CMessage>(CMessage*)
 T datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)
 T datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)
 T datamap_t* DataMapInit<CMotorController>(CMotorController*)
 T datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)
 T datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)
 T datamap_t* DataMapInit<CMultiSource>(CMultiSource*)
 T datamap_t* DataMapInit<CNPC_Furniture>(CNPC_Furniture*)
 T datamap_t* DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)
 T datamap_t* DataMapInit<CNodeEnt>(CNodeEnt*)
 T datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)
 T datamap_t* DataMapInit<CParticleFire>(CParticleFire*)
 T datamap_t* DataMapInit<CParticleLight>(CParticleLight*)
 T datamap_t* DataMapInit<CPathCorner>(CPathCorner*)
 T datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)
 T datamap_t* DataMapInit<CPathTrack>(CPathTrack*)
 T datamap_t* DataMapInit<CPhysBox>(CPhysBox*)
 T datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)
 T datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)
 T datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)
 T datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)
 T datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)
 T datamap_t* DataMapInit<CPhysForce>(CPhysForce*)
 T datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)
 T datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)
 T datamap_t* DataMapInit<CPhysLength>(CPhysLength*)
 T datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)
 T datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)
 T datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)
 T datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)
 T datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)
 T datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)
 T datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)
 T datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)
 T datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)
 T datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)
 T datamap_t* DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)
 T datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)
 T datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)
 T datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)
 T datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)
 T datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)
 T datamap_t* DataMapInit<CPlantedC4>(CPlantedC4*)
 T datamap_t* DataMapInit<CPlasma>(CPlasma*)
 T datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)
 T datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)
 T datamap_t* DataMapInit<CPlayerState>(CPlayerState*)
 T datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)
 T datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)
 T datamap_t* DataMapInit<CPointCamera>(CPointCamera*)
 T datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)
 T datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)
 T datamap_t* DataMapInit<CPointHurt>(CPointHurt*)
 T datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)
 T datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)
 T datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)
 T datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)
 T datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)
 T datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)
 T datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)
 T datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)
 T datamap_t* DataMapInit<CPropJeep>(CPropJeep*)
 T datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)
 T datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)
 T datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)
 T datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)
 T datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)
 T datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)
 T datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)
 T datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)
 T datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)
 T datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)
 T datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)
 T datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)
 T datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)
 T datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)
 T datamap_t* DataMapInit<CRotDoor>(CRotDoor*)
 T datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)
 T datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)
 T datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)
 T datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)
 T datamap_t* DataMapInit<CSceneManager>(CSceneManager*)
 T datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)
 T datamap_t* DataMapInit<CShadowControl>(CShadowControl*)
 T datamap_t* DataMapInit<CSimTimer>(CSimTimer*)
 T datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)
 T datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)
 T datamap_t* DataMapInit<CSmokeGrenade>(CSmokeGrenade*)
 T datamap_t* DataMapInit<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile*)
 T datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)
 T datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)
 T datamap_t* DataMapInit<CSound>(CSound*)
 T datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)
 T datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)
 T datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)
 T datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)
 T datamap_t* DataMapInit<CSprite>(CSprite*)
 T datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)
 T datamap_t* DataMapInit<CSteamJet>(CSteamJet*)
 T datamap_t* DataMapInit<CStopwatch>(CStopwatch*)
 T datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)
 T datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)
 T datamap_t* DataMapInit<CSun>(CSun*)
 T datamap_t* DataMapInit<CSurroundTest>(CSurroundTest*)
 T datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)
 T datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)
 T datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)
 T datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)
 T datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)
 T datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)
 T datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)
 T datamap_t* DataMapInit<CTerrainMorph>(CTerrainMorph*)
 T datamap_t* DataMapInit<CTesla>(CTesla*)
 T datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)
 T datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)
 T datamap_t* DataMapInit<CThrustController>(CThrustController*)
 T datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)
 T datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)
 T datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)
 T datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)
 T datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)
 T datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)
 T datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)
 T datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)
 T datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)
 T datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)
 T datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)
 T datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)
 T datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)
 T datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)
 T datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)
 T datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)
 T datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)
 T datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)
 T datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)
 T datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)
 T datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)
 T datamap_t* DataMapInit<CWeaponAWP>(CWeaponAWP*)
 T datamap_t* DataMapInit<CWeaponCSBase>(CWeaponCSBase*)
 T datamap_t* DataMapInit<CWeaponCycler>(CWeaponCycler*)
 T datamap_t* DataMapInit<CWindowPane>(CWindowPane*)
 T datamap_t* DataMapInit<CWorld>(CWorld*)
 T datamap_t* DataMapInit<CWorldItem>(CWorldItem*)
 T datamap_t* DataMapInit<CWreckage>(CWreckage*)
 T datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)
 T datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)
 T datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)
 T datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)
 T datamap_t* DataMapInit<FilterTeam>(FilterTeam*)
 T datamap_t* DataMapInit<HintNodeData>(HintNodeData*)
 T datamap_t* DataMapInit<JeepWaterData_t>(JeepWaterData_t*)
 T datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)
 T datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)
 T datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)
 T datamap_t* DataMapInit<Relationship_t>(Relationship_t*)
 T datamap_t* DataMapInit<Response>(Response*)
 T datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)
 T datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)
 T datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)
 T datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)
 T datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)
 T datamap_t* DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)
 T datamap_t* DataMapInit<audioparams_t>(audioparams_t*)
 T datamap_t* DataMapInit<entitytable_t>(entitytable_t*)
 T datamap_t* DataMapInit<fogparams_t>(fogparams_t*)
 T datamap_t* DataMapInit<globalentity_t>(globalentity_t*)
 T datamap_t* DataMapInit<locksound_t>(locksound_t*)
 T datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)
 T datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)
 T datamap_t* DataMapInit<template_t>(template_t*)
 T datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)
 T datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)
 T datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)
 T datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)
 T datamap_t* PredMapInit<CAK47>(CAK47*)
 T datamap_t* PredMapInit<CBaseAnimating>(CBaseAnimating*)
 T datamap_t* PredMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)
 T datamap_t* PredMapInit<CBaseCSGrenade>(CBaseCSGrenade*)
 T datamap_t* PredMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)
 T datamap_t* PredMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)
 T datamap_t* PredMapInit<CBaseEntity>(CBaseEntity*)
 T datamap_t* PredMapInit<CBaseFlex>(CBaseFlex*)
 T datamap_t* PredMapInit<CBaseGrenade>(CBaseGrenade*)
 T datamap_t* PredMapInit<CBaseParticleEntity>(CBaseParticleEntity*)
 T datamap_t* PredMapInit<CBasePlayer>(CBasePlayer*)
 T datamap_t* PredMapInit<CBaseViewModel>(CBaseViewModel*)
 T datamap_t* PredMapInit<CBeam>(CBeam*)
 T datamap_t* PredMapInit<CC4>(CC4*)
 T datamap_t* PredMapInit<CCSPlayer>(CCSPlayer*)
 T datamap_t* PredMapInit<CCollisionProperty>(CCollisionProperty*)
 T datamap_t* PredMapInit<CDEagle>(CDEagle*)
 T datamap_t* PredMapInit<CFlashbang>(CFlashbang*)
 T datamap_t* PredMapInit<CHEGrenade>(CHEGrenade*)
 T datamap_t* PredMapInit<CKnife>(CKnife*)
 T datamap_t* PredMapInit<CPlantedC4>(CPlantedC4*)
 T datamap_t* PredMapInit<CPlayerLocalData>(CPlayerLocalData*)
 T datamap_t* PredMapInit<CPlayerState>(CPlayerState*)
 T datamap_t* PredMapInit<CSmokeGrenade>(CSmokeGrenade*)
 T datamap_t* PredMapInit<CSprite>(CSprite*)
 T datamap_t* PredMapInit<CSpriteTrail>(CSpriteTrail*)
 T datamap_t* PredMapInit<CWeaponAWP>(CWeaponAWP*)
 T datamap_t* PredMapInit<CWeaponAug>(CWeaponAug*)
 T datamap_t* PredMapInit<CWeaponCSBase>(CWeaponCSBase*)
 T datamap_t* PredMapInit<CWeaponCSBaseGun>(CWeaponCSBaseGun*)
 T datamap_t* PredMapInit<CWeaponElite>(CWeaponElite*)
 T datamap_t* PredMapInit<CWeaponFamas>(CWeaponFamas*)
 T datamap_t* PredMapInit<CWeaponFiveSeven>(CWeaponFiveSeven*)
 T datamap_t* PredMapInit<CWeaponG3SG1>(CWeaponG3SG1*)
 T datamap_t* PredMapInit<CWeaponGalil>(CWeaponGalil*)
 T datamap_t* PredMapInit<CWeaponGlock>(CWeaponGlock*)
 T datamap_t* PredMapInit<CWeaponM249>(CWeaponM249*)
 T datamap_t* PredMapInit<CWeaponM3>(CWeaponM3*)
 T datamap_t* PredMapInit<CWeaponM4A1>(CWeaponM4A1*)
 T datamap_t* PredMapInit<CWeaponMAC10>(CWeaponMAC10*)
 T datamap_t* PredMapInit<CWeaponMP5Navy>(CWeaponMP5Navy*)
 T datamap_t* PredMapInit<CWeaponP228>(CWeaponP228*)
 T datamap_t* PredMapInit<CWeaponP90>(CWeaponP90*)
 T datamap_t* PredMapInit<CWeaponSG550>(CWeaponSG550*)
 T datamap_t* PredMapInit<CWeaponSG552>(CWeaponSG552*)
 T datamap_t* PredMapInit<CWeaponScout>(CWeaponScout*)
 T datamap_t* PredMapInit<CWeaponTMP>(CWeaponTMP*)
 T datamap_t* PredMapInit<CWeaponUMP45>(CWeaponUMP45*)
 T datamap_t* PredMapInit<CWeaponUSP>(CWeaponUSP*)
 T datamap_t* PredMapInit<CWeaponXM1014>(CWeaponXM1014*)
 T entitem_t::operator delete(void*)
 T entitem_t::operator new(unsigned int)
 T entitem_t::operator new(unsigned int, int, char const*, int)
 T entitytable_t::GetBaseMap()
 T fogparams_t::GetBaseMap()
 T fogparams_t::GetDataDescMap()
 T free_db
 T globalentity_t::GetBaseMap()
 T int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)
 T int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)
 T int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)
 T int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)
 T int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)
 T int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)
 T int ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)
 T int ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)
 T int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)
 T int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)
 T int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)
 T int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)
 T int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)
 T int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)
 T int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)
 T int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)
 T int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)
 T int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)
 T int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)
 T int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)
 T int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)
 T int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)
 T int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)
 T int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)
 T int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)
 T int ServerClassInit<DT_CHostage::ignored>(DT_CHostage::ignored*)
 T int ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)
 T int ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)
 T int ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)
 T int ServerClassInit<DT_CSPlayerResource::ignored>(DT_CSPlayerResource::ignored*)
 T int ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)
 T int ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)
 T int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)
 T int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)
 T int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)
 T int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)
 T int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)
 T int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)
 T int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)
 T int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)
 T int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)
 T int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)
 T int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)
 T int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)
 T int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)
 T int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)
 T int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)
 T int ServerClassInit<DT_Flashbang::ignored>(DT_Flashbang::ignored*)
 T int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)
 T int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)
 T int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)
 T int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)
 T int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)
 T int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)
 T int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)
 T int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)
 T int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)
 T int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)
 T int ServerClassInit<DT_HEGrenade::ignored>(DT_HEGrenade::ignored*)
 T int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)
 T int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)
 T int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)
 T int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)
 T int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)
 T int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)
 T int ServerClassInit<DT_LocalActiveWeaponKnifeData::ignored>(DT_LocalActiveWeaponKnifeData::ignored*)
 T int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)
 T int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)
 T int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)
 T int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)
 T int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)
 T int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)
 T int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)
 T int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)
 T int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)
 T int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)
 T int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)
 T int ServerClassInit<DT_PlantedC4::ignored>(DT_PlantedC4::ignored*)
 T int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)
 T int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)
 T int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)
 T int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)
 T int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)
 T int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)
 T int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)
 T int ServerClassInit<DT_PropJeep::ignored>(DT_PropJeep::ignored*)
 T int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)
 T int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)
 T int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)
 T int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)
 T int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)
 T int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)
 T int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)
 T int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)
 T int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)
 T int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)
 T int ServerClassInit<DT_SmokeGrenade::ignored>(DT_SmokeGrenade::ignored*)
 T int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)
 T int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)
 T int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)
 T int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)
 T int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)
 T int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)
 T int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)
 T int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)
 T int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)
 T int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)
 T int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)
 T int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)
 T int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)
 T int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)
 T int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)
 T int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)
 T int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)
 T int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)
 T int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)
 T int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)
 T int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)
 T int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)
 T int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)
 T int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)
 T int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)
 T int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)
 T int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)
 T int ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)
 T int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)
 T int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)
 T int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)
 T int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)
 T int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)
 T int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)
 T int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)
 T int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)
 T int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)
 T int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)
 T int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)
 T int ServerClassInit<DT_TEPlantBomb::ignored>(DT_TEPlantBomb::ignored*)
 T int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)
 T int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)
 T int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)
 T int ServerClassInit<DT_TERadioIcon::ignored>(DT_TERadioIcon::ignored*)
 T int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)
 T int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)
 T int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)
 T int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)
 T int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)
 T int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)
 T int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)
 T int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)
 T int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)
 T int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)
 T int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)
 T int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)
 T int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)
 T int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)
 T int ServerClassInit<DT_WeaponAK47::ignored>(DT_WeaponAK47::ignored*)
 T int ServerClassInit<DT_WeaponAWP::ignored>(DT_WeaponAWP::ignored*)
 T int ServerClassInit<DT_WeaponAug::ignored>(DT_WeaponAug::ignored*)
 T int ServerClassInit<DT_WeaponC4::ignored>(DT_WeaponC4::ignored*)
 T int ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)
 T int ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)
 T int ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)
 T int ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)
 T int ServerClassInit<DT_WeaponDEagle::ignored>(DT_WeaponDEagle::ignored*)
 T int ServerClassInit<DT_WeaponElite::ignored>(DT_WeaponElite::ignored*)
 T int ServerClassInit<DT_WeaponFamas::ignored>(DT_WeaponFamas::ignored*)
 T int ServerClassInit<DT_WeaponFiveSeven::ignored>(DT_WeaponFiveSeven::ignored*)
 T int ServerClassInit<DT_WeaponG3SG1::ignored>(DT_WeaponG3SG1::ignored*)
 T int ServerClassInit<DT_WeaponGalil::ignored>(DT_WeaponGalil::ignored*)
 T int ServerClassInit<DT_WeaponGlock::ignored>(DT_WeaponGlock::ignored*)
 T int ServerClassInit<DT_WeaponKnife::ignored>(DT_WeaponKnife::ignored*)
 T int ServerClassInit<DT_WeaponM249::ignored>(DT_WeaponM249::ignored*)
 T int ServerClassInit<DT_WeaponM3::ignored>(DT_WeaponM3::ignored*)
 T int ServerClassInit<DT_WeaponM4A1::ignored>(DT_WeaponM4A1::ignored*)
 T int ServerClassInit<DT_WeaponMAC10::ignored>(DT_WeaponMAC10::ignored*)
 T int ServerClassInit<DT_WeaponMP5Navy::ignored>(DT_WeaponMP5Navy::ignored*)
 T int ServerClassInit<DT_WeaponP228::ignored>(DT_WeaponP228::ignored*)
 T int ServerClassInit<DT_WeaponP90::ignored>(DT_WeaponP90::ignored*)
 T int ServerClassInit<DT_WeaponSG550::ignored>(DT_WeaponSG550::ignored*)
 T int ServerClassInit<DT_WeaponSG552::ignored>(DT_WeaponSG552::ignored*)
 T int ServerClassInit<DT_WeaponScout::ignored>(DT_WeaponScout::ignored*)
 T int ServerClassInit<DT_WeaponTMP::ignored>(DT_WeaponTMP::ignored*)
 T int ServerClassInit<DT_WeaponUMP45::ignored>(DT_WeaponUMP45::ignored*)
 T int ServerClassInit<DT_WeaponUSP::ignored>(DT_WeaponUSP::ignored*)
 T int ServerClassInit<DT_WeaponXM1014::ignored>(DT_WeaponXM1014::ignored*)
 T locksound_t::GetBaseMap()
 T locksound_t::GetDataDescMap()
 T magnetted_objects_t::GetBaseMap()
 T malloc_db
 T msize
 T mstudioanimdesc_t::pAnim() const
 T nexttoken(char*, char const*, char)
 T operator delete(void*)
 T operator delete[](void*)
 T operator new(unsigned int)
 T operator new(unsigned int, int, char const*, int)
 T operator new[](unsigned int)
 T operator new[](unsigned int, int, char const*, int)
 T physicssound::AddImpactSound(physicssound::soundlist_t&, void*, int, int, IPhysicsObject*, int, int, float, float)
 T physicssound::PlayImpactSounds(physicssound::soundlist_t&)
 T rand
 T realloc_db
 T respawn(CBaseEntity*, bool)
 T sky3dparams_t::GetBaseMap()
 T sky3dparams_t::GetDataDescMap()
 T srand
 T std::_List_node_base::hook(std::_List_node_base*)
 T std::_List_node_base::reverse()
 T std::_List_node_base::swap(std::_List_node_base&, std::_List_node_base&)
 T std::_List_node_base::transfer(std::_List_node_base*, std::_List_node_base*)
 T std::_List_node_base::unhook()
 T std::__throw_bad_alloc()
 T std::__throw_bad_cast()
 T std::__throw_bad_exception()
 T std::__throw_bad_typeid()
 T std::__throw_domain_error(char const*)
 T std::__throw_invalid_argument(char const*)
 T std::__throw_ios_failure(char const*)
 T std::__throw_length_error(char const*)
 T std::__throw_logic_error(char const*)
 T std::__throw_out_of_range(char const*)
 T std::__throw_overflow_error(char const*)
 T std::__throw_range_error(char const*)
 T std::__throw_runtime_error(char const*)
 T std::__throw_underflow_error(char const*)
 T std::domain_error::domain_error(std::string const&)
 T std::invalid_argument::invalid_argument(std::string const&)
 T std::ios_base::failure::failure(std::string const&)
 T std::ios_base::failure::what() const
 T std::ios_base::failure::~failure()
 T std::length_error::length_error(std::string const&)
 T std::logic_error::logic_error(std::string const&)
 T std::logic_error::what() const
 T std::logic_error::~logic_error()
 T std::out_of_range::out_of_range(std::string const&)
 T std::overflow_error::overflow_error(std::string const&)
 T std::range_error::range_error(std::string const&)
 T std::runtime_error::runtime_error(std::string const&)
 T std::runtime_error::what() const
 T std::runtime_error::~runtime_error()
 T std::underflow_error::underflow_error(std::string const&)
 T studiohdr_t::CopyAutoplaySequences(unsigned short*, int) const
 T studiohdr_t::CountAutoplaySequences() const
 T studiohdr_t::EntryNode(int) const
 T studiohdr_t::ExitNode(int) const
 T studiohdr_t::FindModel(void**, char const*) const
 T studiohdr_t::GetActivityListVersion() const
 T studiohdr_t::GetAnimBlock(int) const
 T studiohdr_t::GetAttachmentBone(int) const
 T studiohdr_t::GetAutoplayList(unsigned short**) const
 T studiohdr_t::GetNumAttachments() const
 T studiohdr_t::GetNumIKAutoplayLocks() const
 T studiohdr_t::GetNumPoseParameters() const
 T studiohdr_t::GetNumSeq() const
 T studiohdr_t::GetSharedPoseParameter(int, int) const
 T studiohdr_t::GetTransition(int, int) const
 T studiohdr_t::GetVirtualModel() const
 T studiohdr_t::RemapAnimBone(int, int) const
 T studiohdr_t::RemapSeqBone(int, int) const
 T studiohdr_t::SetActivityListVersion(int) const
 T studiohdr_t::SetAttachmentBone(int, int)
 T studiohdr_t::iRelativeAnim(int, int) const
 T studiohdr_t::iRelativeSeq(int, int) const
 T studiohdr_t::pAnimdesc(int) const
 T studiohdr_t::pAttachment(int) const
 T studiohdr_t::pIKAutoplayLock(int) const
 T studiohdr_t::pPoseParameter(int) const
 T studiohdr_t::pSeqdesc(int) const
 T studiohdr_t::pszNodeName(int) const
 T template_t::GetBaseMap()
 T thinkfunc_t::GetBaseMap()
 T variant_t::Convert(_fieldtypes)
 T variant_t::Set(_fieldtypes, void*)
 T variant_t::SetEntity(CBaseEntity*)
 T variant_t::SetOther(void*)
 T variant_t::ToString() const
 T vehicle_crashsound_t::GetBaseMap()
 T vehicle_crashsound_t::GetDataDescMap()
 T vehicle_gear_t::GetBaseMap()
 T vehicle_gear_t::GetDataDescMap()
 T vehiclesounds_t::GetBaseMap()
 T vehiclesounds_t::GetDataDescMap()
 T virtualgroup_t::GetStudioHdr() const
 T virtualmodel_t::AppendAnimations(int, studiohdr_t const*)
 T virtualmodel_t::AppendAttachments(int, studiohdr_t const*)
 T virtualmodel_t::AppendBonemap(int, studiohdr_t const*)
 T virtualmodel_t::AppendIKLocks(int, studiohdr_t const*)
 T virtualmodel_t::AppendModels(int, studiohdr_t const*)
 T virtualmodel_t::AppendNodes(int, studiohdr_t const*)
 T virtualmodel_t::AppendPoseParameters(int, studiohdr_t const*)
 T virtualmodel_t::AppendSequences(int, studiohdr_t const*)
 T virtualmodel_t::UpdateAutoplaySequences(studiohdr_t const*)
 V AllocTempVector()::s_nIndex
 V AllocTempVector()::s_vecTemp
 V CAI_Network::GetNode(int, bool)::warningCount
 V CBot<CCSPlayer>::CBot()::nextID
 V CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 V CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::KeyLessFunc(bool (*)(CBaseEntity* const&, CBaseEntity* const&))::pfnLess
 V CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::KeyLessFunc(bool (*)(CBaseEntity* const&, CBaseEntity* const&))::pfnLess
 V CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::KeyLessFunc(bool (*)(CPhysCollide const* const&, CPhysCollide const* const&))::pfnLess
 V CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::KeyLessFunc(bool (*)(IPhysicsObject* const&, IPhysicsObject* const&))::pfnLess
 V CUtlMap<IPhysicsObject*, int, unsigned short>::KeyLessFunc(bool (*)(IPhysicsObject* const&, IPhysicsObject* const&))::pfnLess
 V CUtlMap<char const*, ConceptInfo_t*, unsigned short>::KeyLessFunc(bool (*)(char const* const&, char const* const&))::pfnLess
 V CUtlMap<string_t, CSimpleSimTimer, char>::KeyLessFunc(bool (*)(string_t const&, string_t const&))::pfnLess
 V CUtlMap<unsigned int, Activity, unsigned short>::KeyLessFunc(bool (*)(unsigned int const&, unsigned int const&))::pfnLess
 V CUtlMapDataopsInstantiator<2, 10>::GetDataOps<CUtlMap<string_t, CSimpleSimTimer, char> >(CUtlMap<string_t, CSimpleSimTimer, char>*)::ops
 V CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Links(unsigned char) const::s_Sentinel
 V CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Links(char) const::s_Sentinel
 V CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Links(int) const::s_Sentinel
 V CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Links(unsigned short) const::s_Sentinel
 V CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Links(unsigned short) const::s_Sentinel
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CAI_InterestTarget>(CAI_InterestTarget*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> > >(CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> > >(CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> > >(CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t> > >(CUtlVector<template_t, CUtlMemory<template_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >*)::ops
 V CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >*)::ops
 V CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >*)::ops
 V CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > > >(CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >*)::ops
 V CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >*)::ops
 V CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >*)::ops
 V CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >*)::ops
 V CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >*)::ops
 V CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >*)::ops
 V CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int> > >(CUtlVector<int, CUtlMemory<int> >*)::ops
 V GetBitstringDataOps<CFixedBitString<32> >(CFixedBitString<32>*)::ops
 V GetStdStringDataOps()::ops
 V Quaternion48::operator Quaternion()::tmp
 V VTT for CBasePlayerAnimState
 V VTT for CCSHostageAnimState
 V VTT for CCSPlayerAnimState
 V Vector48::operator Vector()::tmp
 V construction vtable for CBasePlayerAnimState-in-CCSHostageAnimState
 V construction vtable for CBasePlayerAnimState-in-CCSPlayerAnimState
 V construction vtable for CCSPlayerAnimState-in-CCSHostageAnimState
 V construction vtable for ICSPlayerAnimState-in-CCSHostageAnimState
 V construction vtable for ICSPlayerAnimState-in-CCSPlayerAnimState
 V guard variable for AllocTempVector()::s_vecTemp
 V guard variable for CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 V guard variable for CUtlMapDataopsInstantiator<2, 10>::GetDataOps<CUtlMap<string_t, CSimpleSimTimer, char> >(CUtlMap<string_t, CSimpleSimTimer, char>*)::ops
 V guard variable for CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Links(unsigned char) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Links(char) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Links(int) const::s_Sentinel
 V guard variable for CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Links(unsigned short) const::s_Sentinel
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CAI_InterestTarget>(CAI_InterestTarget*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> > >(CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> > >(CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> > >(CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t> > >(CUtlVector<template_t, CUtlMemory<template_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > > >(CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >*)::ops
 V guard variable for CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int> > >(CUtlVector<int, CUtlMemory<int> >*)::ops
 V guard variable for GetBitstringDataOps<CFixedBitString<32> >(CFixedBitString<32>*)::ops
 V guard variable for GetStdStringDataOps()::ops
 V guard variable for Normal32::operator Vector()::tmp
 V guard variable for Quaternion48::operator Quaternion()::tmp
 V guard variable for Vector32::operator Vector()::tmp
 V guard variable for Vector48::operator Vector()::tmp
 V guard variable for variant_t::Entity() const::hNull
 V std::string::_Rep::_S_empty_rep_storage
 V std::string::_Rep::_S_max_size
 V std::string::_Rep::_S_terminal
 V std::string::npos
 V typeinfo for (anonymous namespace)::CPlayerInfoManager_V1
 V typeinfo for (anonymous namespace)::IPlayerInfoManager_V1
 V typeinfo for AttackState
 V typeinfo for BotAllHostagesGoneMeme
 V typeinfo for BotBombStatusMeme
 V typeinfo for BotBombsiteStatusMeme
 V typeinfo for BotDefendHereMeme
 V typeinfo for BotFollowMeme
 V typeinfo for BotHeardNoiseMeme
 V typeinfo for BotHelpMeme
 V typeinfo for BotHostageBeingTakenMeme
 V typeinfo for BotMeme
 V typeinfo for BotRequestReportMeme
 V typeinfo for BotState
 V typeinfo for BotWarnSniperMeme
 V typeinfo for BotWhereBombMeme
 V typeinfo for BuyState
 V typeinfo for CAISound
 V typeinfo for CAI_AllySpeechManager
 V typeinfo for CAI_AssaultBehavior
 V typeinfo for CAI_AssaultGoal
 V typeinfo for CAI_BaseActor
 V typeinfo for CAI_BaseFlyingBot
 V typeinfo for CAI_BaseHumanoid
 V typeinfo for CAI_BaseNPC
 V typeinfo for CAI_BaseNPCFlyerNew
 V typeinfo for CAI_BasePhysicsFlyingBot
 V typeinfo for CAI_BattleLine
 V typeinfo for CAI_Behavior<CAI_BaseNPC, 100000>
 V typeinfo for CAI_BehaviorBase
 V typeinfo for CAI_BehaviorHost<CAI_BaseNPC>
 V typeinfo for CAI_BlendedMotor
 V typeinfo for CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >
 V typeinfo for CAI_ChangeHintGroup
 V typeinfo for CAI_ChangeTarget
 V typeinfo for CAI_Component
 V typeinfo for CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>
 V typeinfo for CAI_DefMovementSink
 V typeinfo for CAI_DynamicLink
 V typeinfo for CAI_DynamicLinkController
 V typeinfo for CAI_EnemiesListSaveRestoreOps
 V typeinfo for CAI_Expresser
 V typeinfo for CAI_ExpresserHost<CAI_BaseHumanoid>
 V typeinfo for CAI_ExpresserSink
 V typeinfo for CAI_FollowBehavior
 V typeinfo for CAI_FollowGoal
 V typeinfo for CAI_GoalEntity
 V typeinfo for CAI_Hint
 V typeinfo for CAI_LeadBehavior
 V typeinfo for CAI_LeadBehaviorHandler
 V typeinfo for CAI_LeadGoal
 V typeinfo for CAI_LeadGoal_Weapon
 V typeinfo for CAI_LocalNavigator
 V typeinfo for CAI_LookTarget
 V typeinfo for CAI_MappedActivityBehavior_Temporary
 V typeinfo for CAI_Motor
 V typeinfo for CAI_MoveAndShootOverlay
 V typeinfo for CAI_MoveProbe
 V typeinfo for CAI_Navigator
 V typeinfo for CAI_Network
 V typeinfo for CAI_NetworkManager
 V typeinfo for CAI_Pathfinder
 V typeinfo for CAI_PlayerAlly
 V typeinfo for CAI_ProxyMovementSink
 V typeinfo for CAI_RappelBehavior
 V typeinfo for CAI_SaveRestoreBlockHandler
 V typeinfo for CAI_ScriptConditions
 V typeinfo for CAI_ScriptedSchedule
 V typeinfo for CAI_ScriptedSentence
 V typeinfo for CAI_ScriptedSequence
 V typeinfo for CAI_SensedObjectsManager
 V typeinfo for CAI_Senses
 V typeinfo for CAI_SentenceBase
 V typeinfo for CAI_SpeechFilter
 V typeinfo for CAI_StandoffBehavior
 V typeinfo for CAI_StandoffGoal
 V typeinfo for CAI_SystemHook
 V typeinfo for CAI_TacticalServices
 V typeinfo for CAI_TestHull
 V typeinfo for CAI_TrackPather
 V typeinfo for CAK47
 V typeinfo for CActivityDataOps
 V typeinfo for CAimTargetManager
 V typeinfo for CAmbientGeneric
 V typeinfo for CAmmoDef
 V typeinfo for CAnchorList
 V typeinfo for CAreaPortal
 V typeinfo for CAssaultPoint
 V typeinfo for CAutoGameSystem
 V typeinfo for CBaseAnimating
 V typeinfo for CBaseAnimatingOverlay
 V typeinfo for CBaseButton
 V typeinfo for CBaseCSGrenade
 V typeinfo for CBaseCSGrenadeProjectile
 V typeinfo for CBaseCombatCharacter
 V typeinfo for CBaseCombatWeapon
 V typeinfo for CBaseDMStart
 V typeinfo for CBaseDoor
 V typeinfo for CBaseEntity
 V typeinfo for CBaseEntity*
 V typeinfo for CBaseEntity::NetworkVar_m_Collision
 V typeinfo for CBaseEntityClassList
 V typeinfo for CBaseEntityList
 V typeinfo for CBaseFilter
 V typeinfo for CBaseFire
 V typeinfo for CBaseFlex
 V typeinfo for CBaseGameSystem
 V typeinfo for CBaseGrenade
 V typeinfo for CBaseMoveBehavior
 V typeinfo for CBaseParticleEntity
 V typeinfo for CBasePlatTrain
 V typeinfo for CBasePlayer
 V typeinfo for CBasePlayer::NetworkVar_m_Local
 V typeinfo for CBasePlayer::NetworkVar_pl
 V typeinfo for CBasePlayerAnimState
 V typeinfo for CBaseProp
 V typeinfo for CBasePropDoor
 V typeinfo for CBaseRopePhysics
 V typeinfo for CBaseServerVehicle
 V typeinfo for CBaseTempEntity
 V typeinfo for CBaseToggle
 V typeinfo for CBaseTransmitProxy
 V typeinfo for CBaseTrigger
 V typeinfo for CBaseVPhysicsTrigger
 V typeinfo for CBaseViewModel
 V typeinfo for CBeam
 V typeinfo for CBitStringSaveRestoreOps<CFixedBitString<32> >
 V typeinfo for CBlendingCycler
 V typeinfo for CBlood
 V typeinfo for CBloodSplat
 V typeinfo for CBombTarget
 V typeinfo for CBoneFollower
 V typeinfo for CBot<CCSPlayer>
 V typeinfo for CBotBreakableEnumerator
 V typeinfo for CBotCmd
 V typeinfo for CBotDoorEnumerator
 V typeinfo for CBotManager
 V typeinfo for CBreakModelsPrecached
 V typeinfo for CBreakParser
 V typeinfo for CBreakable
 V typeinfo for CBreakableProp
 V typeinfo for CBreakableSurface
 V typeinfo for CBroadcastRecipientFilter
 V typeinfo for CBubbling
 V typeinfo for CBuyZone
 V typeinfo for CC4
 V typeinfo for CCSAmmoDef
 V typeinfo for CCSBot
 V typeinfo for CCSBotManager
 V typeinfo for CCSBotManager::BombBeepEvent
 V typeinfo for CCSBotManager::BombDefuseAbortEvent
 V typeinfo for CCSBotManager::BombDefuseBeginEvent
 V typeinfo for CCSBotManager::BombDefusedEvent
 V typeinfo for CCSBotManager::BombExplodedEvent
 V typeinfo for CCSBotManager::BombPickedUpEvent
 V typeinfo for CCSBotManager::BombPlantedEvent
 V typeinfo for CCSBotManager::BreakBreakableEvent
 V typeinfo for CCSBotManager::BreakPropEvent
 V typeinfo for CCSBotManager::BulletImpactEvent
 V typeinfo for CCSBotManager::DoorMovingEvent
 V typeinfo for CCSBotManager::FlashbangDetonateEvent
 V typeinfo for CCSBotManager::GrenadeBounceEvent
 V typeinfo for CCSBotManager::HEGrenadeDetonateEvent
 V typeinfo for CCSBotManager::HostageFollowsEvent
 V typeinfo for CCSBotManager::HostageRescuedAllEvent
 V typeinfo for CCSBotManager::NavBlockedEvent
 V typeinfo for CCSBotManager::PlayerDeathEvent
 V typeinfo for CCSBotManager::PlayerFallDamageEvent
 V typeinfo for CCSBotManager::PlayerFootstepEvent
 V typeinfo for CCSBotManager::PlayerRadioEvent
 V typeinfo for CCSBotManager::RoundEndEvent
 V typeinfo for CCSBotManager::RoundFreezeEndEvent
 V typeinfo for CCSBotManager::RoundStartEvent
 V typeinfo for CCSBotManager::ServerShutdownEvent
 V typeinfo for CCSBotManager::SmokeGrenadeDetonateEvent
 V typeinfo for CCSBotManager::WeaponFireEvent
 V typeinfo for CCSBotManager::WeaponFireOnEmptyEvent
 V typeinfo for CCSBotManager::WeaponReloadEvent
 V typeinfo for CCSBotManager::WeaponZoomEvent
 V typeinfo for CCSEventLog
 V typeinfo for CCSGameMovement
 V typeinfo for CCSGameRules
 V typeinfo for CCSGameRules::CleanUpMap()::CCSMapEntityFilter
 V typeinfo for CCSGameRulesProxy
 V typeinfo for CCSHLTVDirector
 V typeinfo for CCSHostageAnimState
 V typeinfo for CCSMapLoadEntityFilter
 V typeinfo for CCSPlayer
 V typeinfo for CCSPlayerAnimState
 V typeinfo for CCSPlayerMove
 V typeinfo for CCSPlayerResource
 V typeinfo for CCSRagdoll
 V typeinfo for CCSTeam
 V typeinfo for CCSWeaponInfo
 V typeinfo for CChangeLevel
 V typeinfo for CCheckClient
 V typeinfo for CChoreoEventCallback
 V typeinfo for CClassPtrSaveRestoreOps
 V typeinfo for CCleanupDefaultRelationShips
 V typeinfo for CCollisionEvent
 V typeinfo for CCollisionProperty
 V typeinfo for CConceptHistoriesDataOps
 V typeinfo for CConstantForceController
 V typeinfo for CConstraintAnchor
 V typeinfo for CCopyRecipientFilter
 V typeinfo for CCredits
 V typeinfo for CCycler
 V typeinfo for CDEagle
 V typeinfo for CDataObjectAccessSystem
 V typeinfo for CDecal
 V typeinfo for CDecal::StaticDecal()::CTraceFilterValidForDecal
 V typeinfo for CDecalEmitterSystem
 V typeinfo for CDefSaveRestoreBlockHandler
 V typeinfo for CDefSaveRestoreOps
 V typeinfo for CDefaultPlayerPickupVPhysics
 V typeinfo for CDefaultResponseSystem
 V typeinfo for CDefaultResponseSystemSaveRestoreBlockHandler
 V typeinfo for CDevShotSystem
 V typeinfo for CDirtySpatialPartitionEntityList
 V typeinfo for CDynamicLight
 V typeinfo for CDynamicProp
 V typeinfo for CEffectsServer
 V typeinfo for CEmbers
 V typeinfo for CEnableMotionFixup
 V typeinfo for CEntityBlocker
 V typeinfo for CEntityClassList<CPhysicsNPCSolver>
 V typeinfo for CEntityClassList<CPointCamera>
 V typeinfo for CEntityClassList<CSkyCamera>
 V typeinfo for CEntityDataInstantiator<CPositionWatcherList>
 V typeinfo for CEntityDataInstantiator<ModelWidthScale>
 V typeinfo for CEntityDataInstantiator<StepSimulationData>
 V typeinfo for CEntityDataInstantiator<groundlink_t>
 V typeinfo for CEntityDataInstantiator<physicspushlist_t>
 V typeinfo for CEntityDataInstantiator<touchlink_t>
 V typeinfo for CEntityDissolve
 V typeinfo for CEntityFactory<CAISound>
 V typeinfo for CEntityFactory<CAI_AllySpeechManager>
 V typeinfo for CEntityFactory<CAI_AssaultGoal>
 V typeinfo for CEntityFactory<CAI_BattleLine>
 V typeinfo for CEntityFactory<CAI_ChangeHintGroup>
 V typeinfo for CEntityFactory<CAI_ChangeTarget>
 V typeinfo for CEntityFactory<CAI_DynamicLink>
 V typeinfo for CEntityFactory<CAI_DynamicLinkController>
 V typeinfo for CEntityFactory<CAI_FollowGoal>
 V typeinfo for CEntityFactory<CAI_Hint>
 V typeinfo for CEntityFactory<CAI_LeadGoal>
 V typeinfo for CEntityFactory<CAI_LeadGoal_Weapon>
 V typeinfo for CEntityFactory<CAI_NetworkManager>
 V typeinfo for CEntityFactory<CAI_ScriptConditions>
 V typeinfo for CEntityFactory<CAI_ScriptedSchedule>
 V typeinfo for CEntityFactory<CAI_ScriptedSentence>
 V typeinfo for CEntityFactory<CAI_ScriptedSequence>
 V typeinfo for CEntityFactory<CAI_SpeechFilter>
 V typeinfo for CEntityFactory<CAI_StandoffGoal>
 V typeinfo for CEntityFactory<CAI_TestHull>
 V typeinfo for CEntityFactory<CAK47>
 V typeinfo for CEntityFactory<CAmbientGeneric>
 V typeinfo for CEntityFactory<CAreaPortal>
 V typeinfo for CEntityFactory<CAssaultPoint>
 V typeinfo for CEntityFactory<CBaseButton>
 V typeinfo for CEntityFactory<CBaseCSGrenade>
 V typeinfo for CEntityFactory<CBaseDMStart>
 V typeinfo for CEntityFactory<CBaseDoor>
 V typeinfo for CEntityFactory<CBaseFilter>
 V typeinfo for CEntityFactory<CBaseFlex>
 V typeinfo for CEntityFactory<CBaseGrenade>
 V typeinfo for CEntityFactory<CBaseMoveBehavior>
 V typeinfo for CEntityFactory<CBaseTrigger>
 V typeinfo for CEntityFactory<CBaseViewModel>
 V typeinfo for CEntityFactory<CBeam>
 V typeinfo for CEntityFactory<CBlendingCycler>
 V typeinfo for CEntityFactory<CBlood>
 V typeinfo for CEntityFactory<CBombTarget>
 V typeinfo for CEntityFactory<CBoneFollower>
 V typeinfo for CEntityFactory<CBreakable>
 V typeinfo for CEntityFactory<CBreakableSurface>
 V typeinfo for CEntityFactory<CBubbling>
 V typeinfo for CEntityFactory<CBuyZone>
 V typeinfo for CEntityFactory<CC4>
 V typeinfo for CEntityFactory<CCSBot>
 V typeinfo for CEntityFactory<CCSGameRulesProxy>
 V typeinfo for CEntityFactory<CCSPlayer>
 V typeinfo for CEntityFactory<CCSPlayerResource>
 V typeinfo for CEntityFactory<CCSRagdoll>
 V typeinfo for CEntityFactory<CCSTeam>
 V typeinfo for CEntityFactory<CChangeLevel>
 V typeinfo for CEntityFactory<CConstraintAnchor>
 V typeinfo for CEntityFactory<CCredits>
 V typeinfo for CEntityFactory<CDEagle>
 V typeinfo for CEntityFactory<CDecal>
 V typeinfo for CEntityFactory<CDynamicLight>
 V typeinfo for CEntityFactory<CDynamicProp>
 V typeinfo for CEntityFactory<CEmbers>
 V typeinfo for CEntityFactory<CEnableMotionFixup>
 V typeinfo for CEntityFactory<CEntityBlocker>
 V typeinfo for CEntityFactory<CEntityDissolve>
 V typeinfo for CEntityFactory<CEntityFlame>
 V typeinfo for CEntityFactory<CEntityParticleTrail>
 V typeinfo for CEntityFactory<CEnvBeam>
 V typeinfo for CEntityFactory<CEnvBeverage>
 V typeinfo for CEntityFactory<CEnvDetailController>
 V typeinfo for CEntityFactory<CEnvDustPuff>
 V typeinfo for CEntityFactory<CEnvEffectsScript>
 V typeinfo for CEntityFactory<CEnvEntityMaker>
 V typeinfo for CEntityFactory<CEnvExplosion>
 V typeinfo for CEntityFactory<CEnvFade>
 V typeinfo for CEntityFactory<CEnvFireSensor>
 V typeinfo for CEntityFactory<CEnvFireSource>
 V typeinfo for CEntityFactory<CEnvFunnel>
 V typeinfo for CEntityFactory<CEnvGlobal>
 V typeinfo for CEntityFactory<CEnvGunfire>
 V typeinfo for CEntityFactory<CEnvHudHint>
 V typeinfo for CEntityFactory<CEnvLaser>
 V typeinfo for CEntityFactory<CEnvLight>
 V typeinfo for CEntityFactory<CEnvMicrophone>
 V typeinfo for CEntityFactory<CEnvMuzzleFlash>
 V typeinfo for CEntityFactory<CEnvParticleScript>
 V typeinfo for CEntityFactory<CEnvPlayerSurfaceTrigger>
 V typeinfo for CEntityFactory<CEnvQuadraticBeam>
 V typeinfo for CEntityFactory<CEnvScreenOverlay>
 V typeinfo for CEntityFactory<CEnvShake>
 V typeinfo for CEntityFactory<CEnvShooter>
 V typeinfo for CEntityFactory<CEnvSoundscape>
 V typeinfo for CEntityFactory<CEnvSoundscapeProxy>
 V typeinfo for CEntityFactory<CEnvSoundscapeTriggerable>
 V typeinfo for CEntityFactory<CEnvSpark>
 V typeinfo for CEntityFactory<CEnvSplash>
 V typeinfo for CEntityFactory<CEnvTracer>
 V typeinfo for CEntityFactory<CEnvWind>
 V typeinfo for CEntityFactory<CEnvZoom>
 V typeinfo for CEntityFactory<CEventQueueSaveLoadProxy>
 V typeinfo for CEntityFactory<CFilterClass>
 V typeinfo for CEntityFactory<CFilterMultiple>
 V typeinfo for CEntityFactory<CFilterName>
 V typeinfo for CEntityFactory<CFire>
 V typeinfo for CEntityFactory<CFireSmoke>
 V typeinfo for CEntityFactory<CFish>
 V typeinfo for CEntityFactory<CFishPool>
 V typeinfo for CEntityFactory<CFlashbang>
 V typeinfo for CEntityFactory<CFlashbangProjectile>
 V typeinfo for CEntityFactory<CFlextalkActor>
 V typeinfo for CEntityFactory<CFogController>
 V typeinfo for CEntityFactory<CFuncAreaPortalWindow>
 V typeinfo for CEntityFactory<CFuncBrush>
 V typeinfo for CEntityFactory<CFuncConveyor>
 V typeinfo for CEntityFactory<CFuncIllusionary>
 V typeinfo for CEntityFactory<CFuncLadder>
 V typeinfo for CEntityFactory<CFuncLadderEndPoint>
 V typeinfo for CEntityFactory<CFuncMonitor>
 V typeinfo for CEntityFactory<CFuncMoveLinear>
 V typeinfo for CEntityFactory<CFuncOccluder>
 V typeinfo for CEntityFactory<CFuncPlat>
 V typeinfo for CEntityFactory<CFuncPlatRot>
 V typeinfo for CEntityFactory<CFuncRotating>
 V typeinfo for CEntityFactory<CFuncSmokeVolume>
 V typeinfo for CEntityFactory<CFuncTankTrain>
 V typeinfo for CEntityFactory<CFuncTrackAuto>
 V typeinfo for CEntityFactory<CFuncTrackChange>
 V typeinfo for CEntityFactory<CFuncTrackTrain>
 V typeinfo for CEntityFactory<CFuncTrain>
 V typeinfo for CEntityFactory<CFuncTrainControls>
 V typeinfo for CEntityFactory<CFuncVPhysicsClip>
 V typeinfo for CEntityFactory<CFuncVehicleClip>
 V typeinfo for CEntityFactory<CFuncWall>
 V typeinfo for CEntityFactory<CFuncWallToggle>
 V typeinfo for CEntityFactory<CFunc_DustCloud>
 V typeinfo for CEntityFactory<CFunc_DustMotes>
 V typeinfo for CEntityFactory<CFunc_LOD>
 V typeinfo for CEntityFactory<CGameEnd>
 V typeinfo for CEntityFactory<CGamePlayerEquip>
 V typeinfo for CEntityFactory<CGamePlayerTeam>
 V typeinfo for CEntityFactory<CGamePlayerZone>
 V typeinfo for CEntityFactory<CGameScore>
 V typeinfo for CEntityFactory<CGameText>
 V typeinfo for CEntityFactory<CGameUI>
 V typeinfo for CEntityFactory<CGameWeaponManager>
 V typeinfo for CEntityFactory<CGenericActor>
 V typeinfo for CEntityFactory<CGenericCycler>
 V typeinfo for CEntityFactory<CGenericFlexCycler>
 V typeinfo for CEntityFactory<CGenericNPC>
 V typeinfo for CEntityFactory<CGib>
 V typeinfo for CEntityFactory<CGibShooter>
 V typeinfo for CEntityFactory<CGunTarget>
 V typeinfo for CEntityFactory<CHEGrenade>
 V typeinfo for CEntityFactory<CHEGrenadeProjectile>
 V typeinfo for CEntityFactory<CHandleDummy>
 V typeinfo for CEntityFactory<CHandleTest>
 V typeinfo for CEntityFactory<CHostage>
 V typeinfo for CEntityFactory<CHostageRescueZone>
 V typeinfo for CEntityFactory<CInfoCameraLink>
 V typeinfo for CEntityFactory<CInfoIntermission>
 V typeinfo for CEntityFactory<CInfoLadder>
 V typeinfo for CEntityFactory<CInfoLadderDismount>
 V typeinfo for CEntityFactory<CInfoLightingRelative>
 V typeinfo for CEntityFactory<CInfoMassCenter>
 V typeinfo for CEntityFactory<CInfoViewParameters>
 V typeinfo for CEntityFactory<CInstancedSceneEntity>
 V typeinfo for CEntityFactory<CItemAmmo338MAG>
 V typeinfo for CEntityFactory<CItemAmmo357SIG>
 V typeinfo for CEntityFactory<CItemAmmo45ACP>
 V typeinfo for CEntityFactory<CItemAmmo50AE>
 V typeinfo for CEntityFactory<CItemAmmo556MM>
 V typeinfo for CEntityFactory<CItemAmmo556MM_BOX>
 V typeinfo for CEntityFactory<CItemAmmo57MM>
 V typeinfo for CEntityFactory<CItemAmmo762MM>
 V typeinfo for CEntityFactory<CItemAmmo9MM>
 V typeinfo for CEntityFactory<CItemAmmoBuckshot>
 V typeinfo for CEntityFactory<CItemAssaultSuit>
 V typeinfo for CEntityFactory<CItemDefuser>
 V typeinfo for CEntityFactory<CItemKevlar>
 V typeinfo for CEntityFactory<CItemNvgs>
 V typeinfo for CEntityFactory<CItemSoda>
 V typeinfo for CEntityFactory<CKeepUpright>
 V typeinfo for CEntityFactory<CKnife>
 V typeinfo for CEntityFactory<CLight>
 V typeinfo for CEntityFactory<CLightGlow>
 V typeinfo for CEntityFactory<CLogicAuto>
 V typeinfo for CEntityFactory<CLogicAutosave>
 V typeinfo for CEntityFactory<CLogicBranch>
 V typeinfo for CEntityFactory<CLogicCase>
 V typeinfo for CEntityFactory<CLogicCollisionPair>
 V typeinfo for CEntityFactory<CLogicCompare>
 V typeinfo for CEntityFactory<CLogicCompareInteger>
 V typeinfo for CEntityFactory<CLogicLineToEntity>
 V typeinfo for CEntityFactory<CLogicMeasureMovement>
 V typeinfo for CEntityFactory<CLogicNavigation>
 V typeinfo for CEntityFactory<CLogicRelay>
 V typeinfo for CEntityFactory<CMapInfo>
 V typeinfo for CEntityFactory<CMaterialModifyControl>
 V typeinfo for CEntityFactory<CMathColorBlend>
 V typeinfo for CEntityFactory<CMathCounter>
 V typeinfo for CEntityFactory<CMathRemap>
 V typeinfo for CEntityFactory<CMessage>
 V typeinfo for CEntityFactory<CMessageEntity>
 V typeinfo for CEntityFactory<CMomentaryRotButton>
 V typeinfo for CEntityFactory<CMovementSpeedMod>
 V typeinfo for CEntityFactory<CMultiSource>
 V typeinfo for CEntityFactory<CNPC_Furniture>
 V typeinfo for CEntityFactory<CNPC_VehicleDriver>
 V typeinfo for CEntityFactory<CNodeEnt>
 V typeinfo for CEntityFactory<CNullEntity>
 V typeinfo for CEntityFactory<COrnamentProp>
 V typeinfo for CEntityFactory<CParticleFire>
 V typeinfo for CEntityFactory<CParticleLight>
 V typeinfo for CEntityFactory<CPathCorner>
 V typeinfo for CEntityFactory<CPathCornerCrash>
 V typeinfo for CEntityFactory<CPathKeyFrame>
 V typeinfo for CEntityFactory<CPathTrack>
 V typeinfo for CEntityFactory<CPhysBallSocket>
 V typeinfo for CEntityFactory<CPhysBox>
 V typeinfo for CEntityFactory<CPhysBoxMultiplayer>
 V typeinfo for CEntityFactory<CPhysConstraintSystem>
 V typeinfo for CEntityFactory<CPhysConvert>
 V typeinfo for CEntityFactory<CPhysExplosion>
 V typeinfo for CEntityFactory<CPhysFixed>
 V typeinfo for CEntityFactory<CPhysHinge>
 V typeinfo for CEntityFactory<CPhysImpact>
 V typeinfo for CEntityFactory<CPhysLength>
 V typeinfo for CEntityFactory<CPhysMagnet>
 V typeinfo for CEntityFactory<CPhysMotor>
 V typeinfo for CEntityFactory<CPhysPulley>
 V typeinfo for CEntityFactory<CPhysSlideConstraint>
 V typeinfo for CEntityFactory<CPhysSphere>
 V typeinfo for CEntityFactory<CPhysThruster>
 V typeinfo for CEntityFactory<CPhysTorque>
 V typeinfo for CEntityFactory<CPhysicsCannister>
 V typeinfo for CEntityFactory<CPhysicsEntitySolver>
 V typeinfo for CEntityFactory<CPhysicsNPCSolver>
 V typeinfo for CEntityFactory<CPhysicsProp>
 V typeinfo for CEntityFactory<CPhysicsPropMultiplayer>
 V typeinfo for CEntityFactory<CPhysicsPropRespawnable>
 V typeinfo for CEntityFactory<CPhysicsSpring>
 V typeinfo for CEntityFactory<CPhysicsWire>
 V typeinfo for CEntityFactory<CPlantedC4>
 V typeinfo for CEntityFactory<CPlasma>
 V typeinfo for CEntityFactory<CPlayerResource>
 V typeinfo for CEntityFactory<CPointAngleSensor>
 V typeinfo for CEntityFactory<CPointAngularVelocitySensor>
 V typeinfo for CEntityFactory<CPointCamera>
 V typeinfo for CEntityFactory<CPointClientCommand>
 V typeinfo for CEntityFactory<CPointDevShotCamera>
 V typeinfo for CEntityFactory<CPointEntity>
 V typeinfo for CEntityFactory<CPointHurt>
 V typeinfo for CEntityFactory<CPointPlayerMoveConstraint>
 V typeinfo for CEntityFactory<CPointServerCommand>
 V typeinfo for CEntityFactory<CPointSpotlight>
 V typeinfo for CEntityFactory<CPointTeleport>
 V typeinfo for CEntityFactory<CPointTemplate>
 V typeinfo for CEntityFactory<CPrecipitation>
 V typeinfo for CEntityFactory<CPredictedViewModel>
 V typeinfo for CEntityFactory<CProjectedDecal>
 V typeinfo for CEntityFactory<CPropDoorRotating>
 V typeinfo for CEntityFactory<CPropVehicle>
 V typeinfo for CEntityFactory<CPropVehicleDriveable>
 V typeinfo for CEntityFactory<CPushable>
 V typeinfo for CEntityFactory<CRagGib>
 V typeinfo for CEntityFactory<CRagdollBoogie>
 V typeinfo for CEntityFactory<CRagdollConstraint>
 V typeinfo for CEntityFactory<CRagdollMagnet>
 V typeinfo for CEntityFactory<CRagdollManager>
 V typeinfo for CEntityFactory<CRagdollProp>
 V typeinfo for CEntityFactory<CRagdollPropAttached>
 V typeinfo for CEntityFactory<CRallyPoint>
 V typeinfo for CEntityFactory<CRevertSaved>
 V typeinfo for CEntityFactory<CRopeAnchor>
 V typeinfo for CEntityFactory<CRopeKeyframe>
 V typeinfo for CEntityFactory<CRotButton>
 V typeinfo for CEntityFactory<CRotDoor>
 V typeinfo for CEntityFactory<CRotorWashShooter>
 V typeinfo for CEntityFactory<CSceneEntity>
 V typeinfo for CEntityFactory<CSceneManager>
 V typeinfo for CEntityFactory<CScriptedTarget>
 V typeinfo for CEntityFactory<CShadowControl>
 V typeinfo for CEntityFactory<CShower>
 V typeinfo for CEntityFactory<CSimplePhysicsBrush>
 V typeinfo for CEntityFactory<CSimplePhysicsProp>
 V typeinfo for CEntityFactory<CSkyCamera>
 V typeinfo for CEntityFactory<CSmokeGrenade>
 V typeinfo for CEntityFactory<CSmokeGrenadeProjectile>
 V typeinfo for CEntityFactory<CSmokeStack>
 V typeinfo for CEntityFactory<CSoundEnt>
 V typeinfo for CEntityFactory<CSpotlightEnd>
 V typeinfo for CEntityFactory<CSprayCan>
 V typeinfo for CEntityFactory<CSprite>
 V typeinfo for CEntityFactory<CSpriteTrail>
 V typeinfo for CEntityFactory<CSteamJet>
 V typeinfo for CEntityFactory<CStripWeapons>
 V typeinfo for CEntityFactory<CSun>
 V typeinfo for CEntityFactory<CSurroundTest>
 V typeinfo for CEntityFactory<CTankTargetChange>
 V typeinfo for CEntityFactory<CTankTrainAI>
 V typeinfo for CEntityFactory<CTargetCDAudioRep>
 V typeinfo for CEntityFactory<CTargetChangeGravity>
 V typeinfo for CEntityFactory<CTeam>
 V typeinfo for CEntityFactory<CTeamSpawnPoint>
 V typeinfo for CEntityFactory<CTeamVehicleSpawnPoint>
 V typeinfo for CEntityFactory<CTempEntTester>
 V typeinfo for CEntityFactory<CTerrainMorph>
 V typeinfo for CEntityFactory<CTesla>
 V typeinfo for CEntityFactory<CTestEffect>
 V typeinfo for CEntityFactory<CTestTraceline>
 V typeinfo for CEntityFactory<CTest_ProxyToggle_Networkable>
 V typeinfo for CEntityFactory<CTextureToggle>
 V typeinfo for CEntityFactory<CTimerEntity>
 V typeinfo for CEntityFactory<CTriggerBrush>
 V typeinfo for CEntityFactory<CTriggerCDAudio>
 V typeinfo for CEntityFactory<CTriggerCamera>
 V typeinfo for CEntityFactory<CTriggerGravity>
 V typeinfo for CEntityFactory<CTriggerHurt>
 V typeinfo for CEntityFactory<CTriggerImpact>
 V typeinfo for CEntityFactory<CTriggerLook>
 V typeinfo for CEntityFactory<CTriggerMultiple>
 V typeinfo for CEntityFactory<CTriggerOnce>
 V typeinfo for CEntityFactory<CTriggerPlayerMovement>
 V typeinfo for CEntityFactory<CTriggerProximity>
 V typeinfo for CEntityFactory<CTriggerPush>
 V typeinfo for CEntityFactory<CTriggerRemove>
 V typeinfo for CEntityFactory<CTriggerSave>
 V typeinfo for CEntityFactory<CTriggerSoundscape>
 V typeinfo for CEntityFactory<CTriggerTeleport>
 V typeinfo for CEntityFactory<CTriggerToggleSave>
 V typeinfo for CEntityFactory<CTriggerVPhysicsMotion>
 V typeinfo for CEntityFactory<CTriggerVolume>
 V typeinfo for CEntityFactory<CTriggerWind>
 V typeinfo for CEntityFactory<CVGuiScreen>
 V typeinfo for CEntityFactory<CWaterBullet>
 V typeinfo for CEntityFactory<CWaterLODControl>
 V typeinfo for CEntityFactory<CWeaponAWP>
 V typeinfo for CEntityFactory<CWeaponAug>
 V typeinfo for CEntityFactory<CWeaponCSBase>
 V typeinfo for CEntityFactory<CWeaponCSBaseGun>
 V typeinfo for CEntityFactory<CWeaponCubemap>
 V typeinfo for CEntityFactory<CWeaponCycler>
 V typeinfo for CEntityFactory<CWeaponElite>
 V typeinfo for CEntityFactory<CWeaponFamas>
 V typeinfo for CEntityFactory<CWeaponFiveSeven>
 V typeinfo for CEntityFactory<CWeaponG3SG1>
 V typeinfo for CEntityFactory<CWeaponGalil>
 V typeinfo for CEntityFactory<CWeaponGlock>
 V typeinfo for CEntityFactory<CWeaponM249>
 V typeinfo for CEntityFactory<CWeaponM3>
 V typeinfo for CEntityFactory<CWeaponM4A1>
 V typeinfo for CEntityFactory<CWeaponMAC10>
 V typeinfo for CEntityFactory<CWeaponMP5Navy>
 V typeinfo for CEntityFactory<CWeaponP228>
 V typeinfo for CEntityFactory<CWeaponP90>
 V typeinfo for CEntityFactory<CWeaponSG550>
 V typeinfo for CEntityFactory<CWeaponSG552>
 V typeinfo for CEntityFactory<CWeaponScout>
 V typeinfo for CEntityFactory<CWeaponTMP>
 V typeinfo for CEntityFactory<CWeaponUMP45>
 V typeinfo for CEntityFactory<CWeaponUSP>
 V typeinfo for CEntityFactory<CWeaponXM1014>
 V typeinfo for CEntityFactory<CWindowPane>
 V typeinfo for CEntityFactory<CWorld>
 V typeinfo for CEntityFactory<CWorldItem>
 V typeinfo for CEntityFactory<CWreckage>
 V typeinfo for CEntityFactory<FilterDamageType>
 V typeinfo for CEntityFactory<FilterTeam>
 V typeinfo for CEntityFactory<MovieExplosion>
 V typeinfo for CEntityFactory<ParticleSmokeGrenade>
 V typeinfo for CEntityFactoryDictionary
 V typeinfo for CEntityFlame
 V typeinfo for CEntityListSystem
 V typeinfo for CEntityParticleTrail
 V typeinfo for CEntityParticleTrail::NetworkVar_m_Info
 V typeinfo for CEntitySaveRestoreBlockHandler
 V typeinfo for CEntitySaveUtils
 V typeinfo for CEntityTouchManager
 V typeinfo for CEnvBeam
 V typeinfo for CEnvBeverage
 V typeinfo for CEnvDetailController
 V typeinfo for CEnvDustPuff
 V typeinfo for CEnvEffectsScript
 V typeinfo for CEnvEntityMaker
 V typeinfo for CEnvExplosion
 V typeinfo for CEnvFade
 V typeinfo for CEnvFireSensor
 V typeinfo for CEnvFireSource
 V typeinfo for CEnvFunnel
 V typeinfo for CEnvGlobal
 V typeinfo for CEnvGunfire
 V typeinfo for CEnvHudHint
 V typeinfo for CEnvLaser
 V typeinfo for CEnvLight
 V typeinfo for CEnvMicrophone
 V typeinfo for CEnvMuzzleFlash
 V typeinfo for CEnvParticleScript
 V typeinfo for CEnvPlayerSurfaceTrigger
 V typeinfo for CEnvQuadraticBeam
 V typeinfo for CEnvScreenOverlay
 V typeinfo for CEnvShake
 V typeinfo for CEnvShooter
 V typeinfo for CEnvSoundscape
 V typeinfo for CEnvSoundscapeProxy
 V typeinfo for CEnvSoundscapeTriggerable
 V typeinfo for CEnvSpark
 V typeinfo for CEnvSplash
 V typeinfo for CEnvTracer
 V typeinfo for CEnvWind
 V typeinfo for CEnvWind::NetworkVar_m_EnvWindShared
 V typeinfo for CEnvWindShared
 V typeinfo for CEnvZoom
 V typeinfo for CEventLog
 V typeinfo for CEventQueueSaveLoadProxy
 V typeinfo for CEventsSaveDataOps
 V typeinfo for CFilterClass
 V typeinfo for CFilterMultiple
 V typeinfo for CFilterName
 V typeinfo for CFire
 V typeinfo for CFireSmoke
 V typeinfo for CFireSphere
 V typeinfo for CFish
 V typeinfo for CFishPool
 V typeinfo for CFlaggedEntitiesEnum
 V typeinfo for CFlashbang
 V typeinfo for CFlashbangProjectile
 V typeinfo for CFlexAnimationTrack
 V typeinfo for CFlexCycler
 V typeinfo for CFlexSceneFileManager
 V typeinfo for CFlextalkActor
 V typeinfo for CFogController
 V typeinfo for CFourWheelServerVehicle
 V typeinfo for CFourWheelVehiclePhysics
 V typeinfo for CFuncAreaPortalBase
 V typeinfo for CFuncAreaPortalWindow
 V typeinfo for CFuncBrush
 V typeinfo for CFuncConveyor
 V typeinfo for CFuncIllusionary
 V typeinfo for CFuncLadder
 V typeinfo for CFuncLadderEndPoint
 V typeinfo for CFuncMonitor
 V typeinfo for CFuncMoveLinear
 V typeinfo for CFuncOccluder
 V typeinfo for CFuncPlat
 V typeinfo for CFuncPlatRot
 V typeinfo for CFuncRotating
 V typeinfo for CFuncSmokeVolume
 V typeinfo for CFuncTankTrain
 V typeinfo for CFuncTrackAuto
 V typeinfo for CFuncTrackChange
 V typeinfo for CFuncTrackTrain
 V typeinfo for CFuncTrain
 V typeinfo for CFuncTrainControls
 V typeinfo for CFuncVPhysicsClip
 V typeinfo for CFuncVehicleClip
 V typeinfo for CFuncWall
 V typeinfo for CFuncWallToggle
 V typeinfo for CFunc_Dust
 V typeinfo for CFunc_DustCloud
 V typeinfo for CFunc_DustMotes
 V typeinfo for CFunc_LOD
 V typeinfo for CGameDLL_ConVarAccessor
 V typeinfo for CGameEnd
 V typeinfo for CGameMovement
 V typeinfo for CGamePlayerEquip
 V typeinfo for CGamePlayerTeam
 V typeinfo for CGamePlayerZone
 V typeinfo for CGameRules
 V typeinfo for CGameRulesProxy
 V typeinfo for CGameScore
 V typeinfo for CGameStringPool
 V typeinfo for CGameText
 V typeinfo for CGameUI
 V typeinfo for CGameWeaponManager
 V typeinfo for CGenericActor
 V typeinfo for CGenericCycler
 V typeinfo for CGenericFlexCycler
 V typeinfo for CGenericNPC
 V typeinfo for CGib
 V typeinfo for CGibShooter
 V typeinfo for CGlobalEntityList
 V typeinfo for CGlobalState
 V typeinfo for CGunTarget
 V typeinfo for CHEGrenade
 V typeinfo for CHEGrenadeProjectile
 V typeinfo for CHLTVDirector
 V typeinfo for CHandleDummy
 V typeinfo for CHandleTest
 V typeinfo for CHangRope
 V typeinfo for CHostage
 V typeinfo for CHostageRescueZone
 V typeinfo for CIKSaveRestoreOps
 V typeinfo for CImprovLocomotor
 V typeinfo for CInfoCameraLink
 V typeinfo for CInfoIntermission
 V typeinfo for CInfoLadder
 V typeinfo for CInfoLadderDismount
 V typeinfo for CInfoLightingRelative
 V typeinfo for CInfoMassCenter
 V typeinfo for CInfoViewParameters
 V typeinfo for CInstancedResponseSystem
 V typeinfo for CInstancedSceneEntity
 V typeinfo for CInstancedSceneResourceManager
 V typeinfo for CItem
 V typeinfo for CItemAmmo
 V typeinfo for CItemAmmo338MAG
 V typeinfo for CItemAmmo357SIG
 V typeinfo for CItemAmmo45ACP
 V typeinfo for CItemAmmo50AE
 V typeinfo for CItemAmmo556MM
 V typeinfo for CItemAmmo556MM_BOX
 V typeinfo for CItemAmmo57MM
 V typeinfo for CItemAmmo762MM
 V typeinfo for CItemAmmo9MM
 V typeinfo for CItemAmmoBuckshot
 V typeinfo for CItemAssaultSuit
 V typeinfo for CItemDefuser
 V typeinfo for CItemKevlar
 V typeinfo for CItemNvgs
 V typeinfo for CItemSoda
 V typeinfo for CJeepFourWheelServerVehicle
 V typeinfo for CKeepUpright
 V typeinfo for CKnife
 V typeinfo for CLagCompensationManager
 V typeinfo for CLight
 V typeinfo for CLightGlow
 V typeinfo for CLogicAuto
 V typeinfo for CLogicAutosave
 V typeinfo for CLogicBranch
 V typeinfo for CLogicCase
 V typeinfo for CLogicCollisionPair
 V typeinfo for CLogicCompare
 V typeinfo for CLogicCompareInteger
 V typeinfo for CLogicLineToEntity
 V typeinfo for CLogicMeasureMovement
 V typeinfo for CLogicNavigation
 V typeinfo for CLogicRelay
 V typeinfo for CLogicalEntity
 V typeinfo for CMapInfo
 V typeinfo for CMaterialModifyControl
 V typeinfo for CMathColorBlend
 V typeinfo for CMathCounter
 V typeinfo for CMathRemap
 V typeinfo for CMessage
 V typeinfo for CMessageEntity
 V typeinfo for CModelSoundCache
 V typeinfo for CMomentaryRotButton
 V typeinfo for CMotorController
 V typeinfo for CMoveHelperServer
 V typeinfo for CMovementSpeedMod
 V typeinfo for CMultiSource
 V typeinfo for CMultiplayRules
 V typeinfo for CNPC_Furniture
 V typeinfo for CNPC_VehicleDriver
 V typeinfo for CNavMesh
 V typeinfo for CNodeEnt
 V typeinfo for CNodeFilter
 V typeinfo for CNotifyList
 V typeinfo for CNullEntity
 V typeinfo for COrnamentProp
 V typeinfo for CPASAttenuationFilter
 V typeinfo for CPASFilter
 V typeinfo for CPVSFilter
 V typeinfo for CParticleFire
 V typeinfo for CParticleLight
 V typeinfo for CPathCorner
 V typeinfo for CPathCornerCrash
 V typeinfo for CPathKeyFrame
 V typeinfo for CPathTrack
 V typeinfo for CPathfindNearestNodeFilter
 V typeinfo for CPhysBallSocket
 V typeinfo for CPhysBox
 V typeinfo for CPhysBoxMultiplayer
 V typeinfo for CPhysConstraint
 V typeinfo for CPhysConstraintEvents
 V typeinfo for CPhysConstraintSystem
 V typeinfo for CPhysConvert
 V typeinfo for CPhysExplosion
 V typeinfo for CPhysFixed
 V typeinfo for CPhysForce
 V typeinfo for CPhysHinge
 V typeinfo for CPhysImpact
 V typeinfo for CPhysLength
 V typeinfo for CPhysMagnet
 V typeinfo for CPhysMotor
 V typeinfo for CPhysObjSaveRestoreOps
 V typeinfo for CPhysPulley
 V typeinfo for CPhysSaveRestoreBlockHandler
 V typeinfo for CPhysSlideConstraint
 V typeinfo for CPhysSphere
 V typeinfo for CPhysThruster
 V typeinfo for CPhysTorque
 V typeinfo for CPhysicsCannister
 V typeinfo for CPhysicsEntitySolver
 V typeinfo for CPhysicsGameTrace
 V typeinfo for CPhysicsHook
 V typeinfo for CPhysicsNPCSolver
 V typeinfo for CPhysicsPlayerCallback
 V typeinfo for CPhysicsProp
 V typeinfo for CPhysicsPropMultiplayer
 V typeinfo for CPhysicsPropRespawnable
 V typeinfo for CPhysicsShake
 V typeinfo for CPhysicsSpring
 V typeinfo for CPhysicsWind
 V typeinfo for CPhysicsWire
 V typeinfo for CPlantedC4
 V typeinfo for CPlasma
 V typeinfo for CPlatTrigger
 V typeinfo for CPlayerInfo
 V typeinfo for CPlayerInfoManager
 V typeinfo for CPlayerLocalData
 V typeinfo for CPlayerLocalData::NetworkVar_m_audio
 V typeinfo for CPlayerLocalData::NetworkVar_m_fog
 V typeinfo for CPlayerLocalData::NetworkVar_m_skybox3d
 V typeinfo for CPlayerMove
 V typeinfo for CPlayerResource
 V typeinfo for CPlayerState
 V typeinfo for CPluginBotManager
 V typeinfo for CPluginHelpersCheck
 V typeinfo for CPointAngleSensor
 V typeinfo for CPointAngularVelocitySensor
 V typeinfo for CPointCamera
 V typeinfo for CPointClientCommand
 V typeinfo for CPointDevShotCamera
 V typeinfo for CPointEntity
 V typeinfo for CPointHurt
 V typeinfo for CPointPlayerMoveConstraint
 V typeinfo for CPointServerCommand
 V typeinfo for CPointSpotlight
 V typeinfo for CPointTeleport
 V typeinfo for CPointTemplate
 V typeinfo for CPointTemplatePrecacher
 V typeinfo for CPositionInterpolator_CatmullRom
 V typeinfo for CPositionInterpolator_Linear
 V typeinfo for CPositionInterpolator_Rope
 V typeinfo for CPrecacheOtherList
 V typeinfo for CPrecipitation
 V typeinfo for CPredictableList
 V typeinfo for CPredictedViewModel
 V typeinfo for CProjectedDecal
 V typeinfo for CPropData
 V typeinfo for CPropDoorRotating
 V typeinfo for CPropJeep
 V typeinfo for CPropVehicle
 V typeinfo for CPropVehicleDriveable
 V typeinfo for CPushAwayEnumerator
 V typeinfo for CPushBlockerEnum
 V typeinfo for CPushable
 V typeinfo for CRagGib
 V typeinfo for CRagdollAnimatedFriction
 V typeinfo for CRagdollBoogie
 V typeinfo for CRagdollCollisionRules
 V typeinfo for CRagdollConstraint
 V typeinfo for CRagdollLRURetirement
 V typeinfo for CRagdollMagnet
 V typeinfo for CRagdollManager
 V typeinfo for CRagdollProp
 V typeinfo for CRagdollPropAttached
 V typeinfo for CRallyPoint
 V typeinfo for CRecipientFilter
 V typeinfo for CReliableBroadcastRecipientFilter
 V typeinfo for CResourceLRUBase
 V typeinfo for CResourceManager<CBoneCache, bonecacheparams_t, CBoneCache*>
 V typeinfo for CResourceManager<SceneData_t, scenedataparams_t, SceneData_t*>
 V typeinfo for CResponseSystem
 V typeinfo for CResponseSystemSaveRestoreOps
 V typeinfo for CRestore
 V typeinfo for CRevertSaved
 V typeinfo for CRopeAnchor
 V typeinfo for CRopeDelegate
 V typeinfo for CRopeKeyframe
 V typeinfo for CRopePhysics<10>
 V typeinfo for CRopePhysics<512>
 V typeinfo for CRotButton
 V typeinfo for CRotDoor
 V typeinfo for CRotorWashShooter
 V typeinfo for CRuleBrushEntity
 V typeinfo for CRuleEntity
 V typeinfo for CRulePointEntity
 V typeinfo for CSave
 V typeinfo for CSaveRestoreBlockSet
 V typeinfo for CSceneCache
 V typeinfo for CSceneEntity
 V typeinfo for CSceneManager
 V typeinfo for CSceneTokenProcessor
 V typeinfo for CScriptedTarget
 V typeinfo for CServerGameClients
 V typeinfo for CServerGameDLL
 V typeinfo for CServerGameEnts
 V typeinfo for CServerNetworkProperty
 V typeinfo for CServerOnlyEntity
 V typeinfo for CServerOnlyPointEntity
 V typeinfo for CShadowControl
 V typeinfo for CShower
 V typeinfo for CSimThinkManager
 V typeinfo for CSimplePhysics::IHelper
 V typeinfo for CSimplePhysicsBrush
 V typeinfo for CSimplePhysicsProp
 V typeinfo for CSingleUserRecipientFilter
 V typeinfo for CSingleplayRules
 V typeinfo for CSkipKeys
 V typeinfo for CSkyCamera
 V typeinfo for CSmokeGrenade
 V typeinfo for CSmokeGrenadeProjectile
 V typeinfo for CSmokeStack
 V typeinfo for CSolidSetDefaults
 V typeinfo for CSoundControllerImp
 V typeinfo for CSoundEmitterSystem
 V typeinfo for CSoundEnt
 V typeinfo for CSoundEnvelopeController
 V typeinfo for CSoundPatchSaveRestoreOps
 V typeinfo for CSoundscapeSystem
 V typeinfo for CSpotlightEnd
 V typeinfo for CSprayCan
 V typeinfo for CSprite
 V typeinfo for CSpriteTrail
 V typeinfo for CStdStringSaveRestoreOps
 V typeinfo for CSteamJet
 V typeinfo for CStringPool
 V typeinfo for CStringTableSaveRestoreOps
 V typeinfo for CStripWeapons
 V typeinfo for CSun
 V typeinfo for CSurroundTest
 V typeinfo for CTEArmorRicochet
 V typeinfo for CTEBSPDecal
 V typeinfo for CTEBaseBeam
 V typeinfo for CTEBeamEntPoint
 V typeinfo for CTEBeamEnts
 V typeinfo for CTEBeamFollow
 V typeinfo for CTEBeamLaser
 V typeinfo for CTEBeamPoints
 V typeinfo for CTEBeamRing
 V typeinfo for CTEBeamRingPoint
 V typeinfo for CTEBeamSpline
 V typeinfo for CTEBloodSprite
 V typeinfo for CTEBloodStream
 V typeinfo for CTEBreakModel
 V typeinfo for CTEBubbleTrail
 V typeinfo for CTEBubbles
 V typeinfo for CTEDecal
 V typeinfo for CTEDust
 V typeinfo for CTEDynamicLight
 V typeinfo for CTEEffectDispatch
 V typeinfo for CTEEnergySplash
 V typeinfo for CTEExplosion
 V typeinfo for CTEFireBullets
 V typeinfo for CTEFizz
 V typeinfo for CTEFootprintDecal
 V typeinfo for CTEGaussExplosion
 V typeinfo for CTEGlowSprite
 V typeinfo for CTEImpact
 V typeinfo for CTEKillPlayerAttachments
 V typeinfo for CTELargeFunnel
 V typeinfo for CTEMetalSparks
 V typeinfo for CTEMuzzleFlash
 V typeinfo for CTEParticleSystem
 V typeinfo for CTEPhysicsProp
 V typeinfo for CTEPlantBomb
 V typeinfo for CTEPlayerAnimEvent
 V typeinfo for CTEPlayerDecal
 V typeinfo for CTEProjectedDecal
 V typeinfo for CTERadioIcon
 V typeinfo for CTEShatterSurface
 V typeinfo for CTEShowLine
 V typeinfo for CTESmoke
 V typeinfo for CTESparks
 V typeinfo for CTESprite
 V typeinfo for CTESpriteSpray
 V typeinfo for CTEWorldDecal
 V typeinfo for CTankTargetChange
 V typeinfo for CTankTrainAI
 V typeinfo for CTargetCDAudioRep
 V typeinfo for CTargetChangeGravity
 V typeinfo for CTeam
 V typeinfo for CTeamRecipientFilter
 V typeinfo for CTeamSpawnPoint
 V typeinfo for CTeamVehicleSpawnPoint
 V typeinfo for CTeamplayRules
 V typeinfo for CTempEntTester
 V typeinfo for CTempEntsSystem
 V typeinfo for CTemplate_SaveRestoreBlockHandler
 V typeinfo for CTemplatesHook
 V typeinfo for CTerrainMorph
 V typeinfo for CTesla
 V typeinfo for CTestEffect
 V typeinfo for CTestTraceline
 V typeinfo for CTest_ProxyToggle_Networkable
 V typeinfo for CTextureToggle
 V typeinfo for CThinkContextsSaveDataOps
 V typeinfo for CThrustController
 V typeinfo for CTimerEntity
 V typeinfo for CTraceFilter
 V typeinfo for CTraceFilterAgainstEntityList
 V typeinfo for CTraceFilterDoor
 V typeinfo for CTraceFilterEntitiesOnly
 V typeinfo for CTraceFilterEntity
 V typeinfo for CTraceFilterEntityIgnoreOther
 V typeinfo for CTraceFilterLOS
 V typeinfo for CTraceFilterMelee
 V typeinfo for CTraceFilterNav
 V typeinfo for CTraceFilterNoNPCsOrPlayer
 V typeinfo for CTraceFilterOnlyNPCsAndPlayer
 V typeinfo for CTraceFilterPlayerAvoidance
 V typeinfo for CTraceFilterPlayersNPCs
 V typeinfo for CTraceFilterPlayersNPCsPhysicsProps
 V typeinfo for CTraceFilterPushFinal
 V typeinfo for CTraceFilterPushMove
 V typeinfo for CTraceFilterSimple
 V typeinfo for CTraceFilterSimpleList
 V typeinfo for CTraceFilterSkipNPCs
 V typeinfo for CTraceFilterSkipTwoEntities
 V typeinfo for CTraceFilterWalkableEntities
 V typeinfo for CTraceListData
 V typeinfo for CTracePassFilter
 V typeinfo for CTriggerBrush
 V typeinfo for CTriggerCDAudio
 V typeinfo for CTriggerCamera
 V typeinfo for CTriggerGravity
 V typeinfo for CTriggerHurt
 V typeinfo for CTriggerImpact
 V typeinfo for CTriggerLook
 V typeinfo for CTriggerMultiple
 V typeinfo for CTriggerOnce
 V typeinfo for CTriggerPlayerMovement
 V typeinfo for CTriggerProximity
 V typeinfo for CTriggerPush
 V typeinfo for CTriggerRemove
 V typeinfo for CTriggerSave
 V typeinfo for CTriggerSoundscape
 V typeinfo for CTriggerTeleport
 V typeinfo for CTriggerToggleSave
 V typeinfo for CTriggerTraceEnum
 V typeinfo for CTriggerVPhysicsMotion
 V typeinfo for CTriggerVolume
 V typeinfo for CTriggerWind
 V typeinfo for CUserCmd
 V typeinfo for CUtlCachedFileData<CModelSoundCache>
 V typeinfo for CUtlCachedFileData<CSceneCache>
 V typeinfo for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 V typeinfo for CUtlSymbolDataOps
 V typeinfo for CUtlVectorDataOps<CAI_InterestTarget, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >, 12>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >, 13>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >, 13>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >, 13>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >, 13>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >, 13>
 V typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >, 13>
 V typeinfo for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int> >, 5>
 V typeinfo for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >, 10>
 V typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >, 10>
 V typeinfo for CVGuiScreen
 V typeinfo for CVariantSaveDataOps
 V typeinfo for CVehicleSoundsParser
 V typeinfo for CVoiceGameMgr
 V typeinfo for CVoiceGameMgrHelper
 V typeinfo for CWaterBullet
 V typeinfo for CWaterLODControl
 V typeinfo for CWaterTraceFilter
 V typeinfo for CWeaponAWP
 V typeinfo for CWeaponAug
 V typeinfo for CWeaponCSBase
 V typeinfo for CWeaponCSBaseGun
 V typeinfo for CWeaponCubemap
 V typeinfo for CWeaponCycler
 V typeinfo for CWeaponElite
 V typeinfo for CWeaponFamas
 V typeinfo for CWeaponFiveSeven
 V typeinfo for CWeaponG3SG1
 V typeinfo for CWeaponGalil
 V typeinfo for CWeaponGlock
 V typeinfo for CWeaponList
 V typeinfo for CWeaponM249
 V typeinfo for CWeaponM3
 V typeinfo for CWeaponM4A1
 V typeinfo for CWeaponMAC10
 V typeinfo for CWeaponMP5Navy
 V typeinfo for CWeaponP228
 V typeinfo for CWeaponP90
 V typeinfo for CWeaponSG550
 V typeinfo for CWeaponSG552
 V typeinfo for CWeaponScout
 V typeinfo for CWeaponTMP
 V typeinfo for CWeaponUMP45
 V typeinfo for CWeaponUSP
 V typeinfo for CWeaponXM1014
 V typeinfo for CWindowPane
 V typeinfo for CWorld
 V typeinfo for CWorldItem
 V typeinfo for CWreckage
 V typeinfo for ConCommand
 V typeinfo for ConCommandBase
 V typeinfo for ConVar
 V typeinfo for DefuseBombState
 V typeinfo for EntityParticleTrailInfo_t
 V typeinfo for EscapeFromBombState
 V typeinfo for FetchBombState
 V typeinfo for FileWeaponInfo_t
 V typeinfo for FilterDamageType
 V typeinfo for FilterTeam
 V typeinfo for FollowState
 V typeinfo for HideState
 V typeinfo for HidingSpot
 V typeinfo for HuntState
 V typeinfo for IAI_MovementSink
 V typeinfo for IBaseCacheInfo
 V typeinfo for IBehaviorBackBridge
 V typeinfo for IBotController
 V typeinfo for IBotManager
 V typeinfo for IBreakableWithPropData
 V typeinfo for ICSPlayerAnimState
 V typeinfo for ICSPlayerAnimStateHelpers
 V typeinfo for IChoreoEventCallback
 V typeinfo for ICollideable
 V typeinfo for IConCommandBaseAccessor
 V typeinfo for IDecalEmitterSystem
 V typeinfo for IDrivableVehicle
 V typeinfo for IEffects
 V typeinfo for IEntityDataInstantiator
 V typeinfo for IEntityEnumerator
 V typeinfo for IEntityFactory
 V typeinfo for IEntityFactoryDictionary
 V typeinfo for IEntityListener
 V typeinfo for IEntitySaveUtils
 V typeinfo for IEventRegisterCallback
 V typeinfo for IGameEventListener2
 V typeinfo for IGameMovement
 V typeinfo for IGameSystem
 V typeinfo for IHLTVDirector
 V typeinfo for IHandleEntity
 V typeinfo for ILagCompensationManager
 V typeinfo for IMapEntityFilter
 V typeinfo for IMotionEvent
 V typeinfo for IMoveHelper
 V typeinfo for IMoveHelperServer
 V typeinfo for IMultiplayerPhysics
 V typeinfo for INearestNodeFilter
 V typeinfo for INodeListFilter
 V typeinfo for INotify
 V typeinfo for IPartitionEnumerator
 V typeinfo for IPartitionQueryCallback
 V typeinfo for IPhysSaveRestoreManager
 V typeinfo for IPhysicsCollisionEvent
 V typeinfo for IPhysicsCollisionSolver
 V typeinfo for IPhysicsConstraintEvent
 V typeinfo for IPhysicsGameTrace
 V typeinfo for IPhysicsObjectEvent
 V typeinfo for IPhysicsPlayerControllerEvent
 V typeinfo for IPlayerAnimState
 V typeinfo for IPlayerInfo
 V typeinfo for IPlayerInfoManager
 V typeinfo for IPlayerPickupVPhysics
 V typeinfo for IPluginHelpersCheck
 V typeinfo for IPositionInterpolator
 V typeinfo for IPositionWatcher
 V typeinfo for IPredictableList
 V typeinfo for IPredictionSystem
 V typeinfo for IRecipientFilter
 V typeinfo for IResponseFilter
 V typeinfo for IResponseSystem
 V typeinfo for IRestore
 V typeinfo for IRotorWashShooter
 V typeinfo for ISave
 V typeinfo for ISaveRestoreBlockHandler
 V typeinfo for ISaveRestoreBlockSet
 V typeinfo for ISaveRestoreOps
 V typeinfo for ISceneTokenProcessor
 V typeinfo for IScorer
 V typeinfo for IServerEntity
 V typeinfo for IServerGameClients
 V typeinfo for IServerGameDLL
 V typeinfo for IServerGameEnts
 V typeinfo for IServerNetworkable
 V typeinfo for IServerUnknown
 V typeinfo for IServerVehicle
 V typeinfo for ITempEntsSystem
 V typeinfo for ITraceFilter
 V typeinfo for IVPhysicsKeyHandler
 V typeinfo for IVehicle
 V typeinfo for IVoiceGameMgrHelper
 V typeinfo for IdleState
 V typeinfo for InvestigateNoiseState
 V typeinfo for MoveToState
 V typeinfo for MovieExplosion
 V typeinfo for OpenDoorState
 V typeinfo for ParticleSmokeGrenade
 V typeinfo for PlantBombState
 V typeinfo for SendProp
 V typeinfo for UseEntityState
 V typeinfo for __cxxabiv1::__array_type_info
 V typeinfo for __cxxabiv1::__enum_type_info
 V typeinfo for __cxxabiv1::__function_type_info
 V typeinfo for __cxxabiv1::__fundamental_type_info
 V typeinfo for __cxxabiv1::__pbase_type_info
 V typeinfo for __cxxabiv1::__pointer_to_member_type_info
 V typeinfo for __cxxabiv1::__pointer_type_info
 V typeinfo for audioparams_t
 V typeinfo for bool
 V typeinfo for bool const*
 V typeinfo for bool*
 V typeinfo for char
 V typeinfo for char const*
 V typeinfo for char*
 V typeinfo for double
 V typeinfo for double const*
 V typeinfo for double*
 V typeinfo for float
 V typeinfo for float const*
 V typeinfo for float*
 V typeinfo for fogparams_t
 V typeinfo for int
 V typeinfo for int const*
 V typeinfo for int*
 V typeinfo for locksound_t
 V typeinfo for long
 V typeinfo for long const*
 V typeinfo for long double
 V typeinfo for long double const*
 V typeinfo for long double*
 V typeinfo for long long
 V typeinfo for long long const*
 V typeinfo for long long*
 V typeinfo for long*
 V typeinfo for short
 V typeinfo for short const*
 V typeinfo for short*
 V typeinfo for signed char
 V typeinfo for signed char const*
 V typeinfo for signed char*
 V typeinfo for sky3dparams_t
 V typeinfo for sky3dparams_t::NetworkVar_fog
 V typeinfo for std::domain_error
 V typeinfo for std::invalid_argument
 V typeinfo for std::ios_base::failure
 V typeinfo for std::length_error
 V typeinfo for std::logic_error
 V typeinfo for std::out_of_range
 V typeinfo for std::overflow_error
 V typeinfo for std::range_error
 V typeinfo for std::runtime_error
 V typeinfo for std::underflow_error
 V typeinfo for unsigned char
 V typeinfo for unsigned char const*
 V typeinfo for unsigned char*
 V typeinfo for unsigned int
 V typeinfo for unsigned int const*
 V typeinfo for unsigned int*
 V typeinfo for unsigned long
 V typeinfo for unsigned long const*
 V typeinfo for unsigned long long
 V typeinfo for unsigned long long const*
 V typeinfo for unsigned long long*
 V typeinfo for unsigned long*
 V typeinfo for unsigned short
 V typeinfo for unsigned short const*
 V typeinfo for unsigned short*
 V typeinfo for vehicle_crashsound_t
 V typeinfo for vehicle_gear_t
 V typeinfo for vehiclesounds_t
 V typeinfo for void
 V typeinfo for void const*
 V typeinfo for void*
 V typeinfo for wchar_t
 V typeinfo for wchar_t const*
 V typeinfo for wchar_t*
 V typeinfo name for (anonymous namespace)::CPlayerInfoManager_V1
 V typeinfo name for (anonymous namespace)::IPlayerInfoManager_V1
 V typeinfo name for AttackState
 V typeinfo name for BotAllHostagesGoneMeme
 V typeinfo name for BotBombStatusMeme
 V typeinfo name for BotBombsiteStatusMeme
 V typeinfo name for BotDefendHereMeme
 V typeinfo name for BotFollowMeme
 V typeinfo name for BotHeardNoiseMeme
 V typeinfo name for BotHelpMeme
 V typeinfo name for BotHostageBeingTakenMeme
 V typeinfo name for BotMeme
 V typeinfo name for BotRequestReportMeme
 V typeinfo name for BotState
 V typeinfo name for BotWarnSniperMeme
 V typeinfo name for BotWhereBombMeme
 V typeinfo name for BuyState
 V typeinfo name for CAISound
 V typeinfo name for CAI_AllySpeechManager
 V typeinfo name for CAI_AssaultBehavior
 V typeinfo name for CAI_AssaultGoal
 V typeinfo name for CAI_BaseActor
 V typeinfo name for CAI_BaseFlyingBot
 V typeinfo name for CAI_BaseHumanoid
 V typeinfo name for CAI_BaseNPC
 V typeinfo name for CAI_BaseNPCFlyerNew
 V typeinfo name for CAI_BasePhysicsFlyingBot
 V typeinfo name for CAI_BattleLine
 V typeinfo name for CAI_Behavior<CAI_BaseNPC, 100000>
 V typeinfo name for CAI_BehaviorBase
 V typeinfo name for CAI_BehaviorHost<CAI_BaseNPC>
 V typeinfo name for CAI_BlendedMotor
 V typeinfo name for CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >
 V typeinfo name for CAI_ChangeHintGroup
 V typeinfo name for CAI_ChangeTarget
 V typeinfo name for CAI_Component
 V typeinfo name for CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>
 V typeinfo name for CAI_DefMovementSink
 V typeinfo name for CAI_DynamicLink
 V typeinfo name for CAI_DynamicLinkController
 V typeinfo name for CAI_EnemiesListSaveRestoreOps
 V typeinfo name for CAI_Expresser
 V typeinfo name for CAI_ExpresserHost<CAI_BaseHumanoid>
 V typeinfo name for CAI_ExpresserSink
 V typeinfo name for CAI_FollowBehavior
 V typeinfo name for CAI_FollowGoal
 V typeinfo name for CAI_GoalEntity
 V typeinfo name for CAI_Hint
 V typeinfo name for CAI_LeadBehavior
 V typeinfo name for CAI_LeadBehaviorHandler
 V typeinfo name for CAI_LeadGoal
 V typeinfo name for CAI_LeadGoal_Weapon
 V typeinfo name for CAI_LocalNavigator
 V typeinfo name for CAI_LookTarget
 V typeinfo name for CAI_MappedActivityBehavior_Temporary
 V typeinfo name for CAI_Motor
 V typeinfo name for CAI_MoveAndShootOverlay
 V typeinfo name for CAI_MoveProbe
 V typeinfo name for CAI_Navigator
 V typeinfo name for CAI_Network
 V typeinfo name for CAI_NetworkManager
 V typeinfo name for CAI_Pathfinder
 V typeinfo name for CAI_PlayerAlly
 V typeinfo name for CAI_ProxyMovementSink
 V typeinfo name for CAI_RappelBehavior
 V typeinfo name for CAI_SaveRestoreBlockHandler
 V typeinfo name for CAI_ScriptConditions
 V typeinfo name for CAI_ScriptedSchedule
 V typeinfo name for CAI_ScriptedSentence
 V typeinfo name for CAI_ScriptedSequence
 V typeinfo name for CAI_SensedObjectsManager
 V typeinfo name for CAI_Senses
 V typeinfo name for CAI_SentenceBase
 V typeinfo name for CAI_SpeechFilter
 V typeinfo name for CAI_StandoffBehavior
 V typeinfo name for CAI_StandoffGoal
 V typeinfo name for CAI_SystemHook
 V typeinfo name for CAI_TacticalServices
 V typeinfo name for CAI_TestHull
 V typeinfo name for CAI_TrackPather
 V typeinfo name for CAK47
 V typeinfo name for CActivityDataOps
 V typeinfo name for CAimTargetManager
 V typeinfo name for CAmbientGeneric
 V typeinfo name for CAmmoDef
 V typeinfo name for CAnchorList
 V typeinfo name for CAreaPortal
 V typeinfo name for CAssaultPoint
 V typeinfo name for CAutoGameSystem
 V typeinfo name for CBaseAnimating
 V typeinfo name for CBaseAnimatingOverlay
 V typeinfo name for CBaseButton
 V typeinfo name for CBaseCSGrenade
 V typeinfo name for CBaseCSGrenadeProjectile
 V typeinfo name for CBaseCombatCharacter
 V typeinfo name for CBaseCombatWeapon
 V typeinfo name for CBaseDMStart
 V typeinfo name for CBaseDoor
 V typeinfo name for CBaseEntity
 V typeinfo name for CBaseEntity*
 V typeinfo name for CBaseEntity::NetworkVar_m_Collision
 V typeinfo name for CBaseEntityClassList
 V typeinfo name for CBaseEntityList
 V typeinfo name for CBaseFilter
 V typeinfo name for CBaseFire
 V typeinfo name for CBaseFlex
 V typeinfo name for CBaseGameSystem
 V typeinfo name for CBaseGrenade
 V typeinfo name for CBaseMoveBehavior
 V typeinfo name for CBaseParticleEntity
 V typeinfo name for CBasePlatTrain
 V typeinfo name for CBasePlayer
 V typeinfo name for CBasePlayer::NetworkVar_m_Local
 V typeinfo name for CBasePlayer::NetworkVar_pl
 V typeinfo name for CBasePlayerAnimState
 V typeinfo name for CBaseProp
 V typeinfo name for CBasePropDoor
 V typeinfo name for CBaseRopePhysics
 V typeinfo name for CBaseServerVehicle
 V typeinfo name for CBaseTempEntity
 V typeinfo name for CBaseToggle
 V typeinfo name for CBaseTransmitProxy
 V typeinfo name for CBaseTrigger
 V typeinfo name for CBaseVPhysicsTrigger
 V typeinfo name for CBaseViewModel
 V typeinfo name for CBeam
 V typeinfo name for CBitStringSaveRestoreOps<CFixedBitString<32> >
 V typeinfo name for CBlendingCycler
 V typeinfo name for CBlood
 V typeinfo name for CBloodSplat
 V typeinfo name for CBombTarget
 V typeinfo name for CBoneFollower
 V typeinfo name for CBot<CCSPlayer>
 V typeinfo name for CBotBreakableEnumerator
 V typeinfo name for CBotCmd
 V typeinfo name for CBotDoorEnumerator
 V typeinfo name for CBotManager
 V typeinfo name for CBreakModelsPrecached
 V typeinfo name for CBreakParser
 V typeinfo name for CBreakable
 V typeinfo name for CBreakableProp
 V typeinfo name for CBreakableSurface
 V typeinfo name for CBroadcastRecipientFilter
 V typeinfo name for CBubbling
 V typeinfo name for CBuyZone
 V typeinfo name for CC4
 V typeinfo name for CCSAmmoDef
 V typeinfo name for CCSBot
 V typeinfo name for CCSBotManager
 V typeinfo name for CCSBotManager::BombBeepEvent
 V typeinfo name for CCSBotManager::BombDefuseAbortEvent
 V typeinfo name for CCSBotManager::BombDefuseBeginEvent
 V typeinfo name for CCSBotManager::BombDefusedEvent
 V typeinfo name for CCSBotManager::BombExplodedEvent
 V typeinfo name for CCSBotManager::BombPickedUpEvent
 V typeinfo name for CCSBotManager::BombPlantedEvent
 V typeinfo name for CCSBotManager::BreakBreakableEvent
 V typeinfo name for CCSBotManager::BreakPropEvent
 V typeinfo name for CCSBotManager::BulletImpactEvent
 V typeinfo name for CCSBotManager::DoorMovingEvent
 V typeinfo name for CCSBotManager::FlashbangDetonateEvent
 V typeinfo name for CCSBotManager::GrenadeBounceEvent
 V typeinfo name for CCSBotManager::HEGrenadeDetonateEvent
 V typeinfo name for CCSBotManager::HostageFollowsEvent
 V typeinfo name for CCSBotManager::HostageRescuedAllEvent
 V typeinfo name for CCSBotManager::NavBlockedEvent
 V typeinfo name for CCSBotManager::PlayerDeathEvent
 V typeinfo name for CCSBotManager::PlayerFallDamageEvent
 V typeinfo name for CCSBotManager::PlayerFootstepEvent
 V typeinfo name for CCSBotManager::PlayerRadioEvent
 V typeinfo name for CCSBotManager::RoundEndEvent
 V typeinfo name for CCSBotManager::RoundFreezeEndEvent
 V typeinfo name for CCSBotManager::RoundStartEvent
 V typeinfo name for CCSBotManager::ServerShutdownEvent
 V typeinfo name for CCSBotManager::SmokeGrenadeDetonateEvent
 V typeinfo name for CCSBotManager::WeaponFireEvent
 V typeinfo name for CCSBotManager::WeaponFireOnEmptyEvent
 V typeinfo name for CCSBotManager::WeaponReloadEvent
 V typeinfo name for CCSBotManager::WeaponZoomEvent
 V typeinfo name for CCSEventLog
 V typeinfo name for CCSGameMovement
 V typeinfo name for CCSGameRules
 V typeinfo name for CCSGameRules::CleanUpMap()::CCSMapEntityFilter
 V typeinfo name for CCSGameRulesProxy
 V typeinfo name for CCSHLTVDirector
 V typeinfo name for CCSHostageAnimState
 V typeinfo name for CCSMapLoadEntityFilter
 V typeinfo name for CCSPlayer
 V typeinfo name for CCSPlayerAnimState
 V typeinfo name for CCSPlayerMove
 V typeinfo name for CCSPlayerResource
 V typeinfo name for CCSRagdoll
 V typeinfo name for CCSTeam
 V typeinfo name for CCSWeaponInfo
 V typeinfo name for CChangeLevel
 V typeinfo name for CCheckClient
 V typeinfo name for CChoreoEventCallback
 V typeinfo name for CClassPtrSaveRestoreOps
 V typeinfo name for CCleanupDefaultRelationShips
 V typeinfo name for CCollisionEvent
 V typeinfo name for CCollisionProperty
 V typeinfo name for CConceptHistoriesDataOps
 V typeinfo name for CConstantForceController
 V typeinfo name for CConstraintAnchor
 V typeinfo name for CCopyRecipientFilter
 V typeinfo name for CCredits
 V typeinfo name for CCycler
 V typeinfo name for CDEagle
 V typeinfo name for CDataObjectAccessSystem
 V typeinfo name for CDecal
 V typeinfo name for CDecal::StaticDecal()::CTraceFilterValidForDecal
 V typeinfo name for CDecalEmitterSystem
 V typeinfo name for CDefSaveRestoreBlockHandler
 V typeinfo name for CDefSaveRestoreOps
 V typeinfo name for CDefaultPlayerPickupVPhysics
 V typeinfo name for CDefaultResponseSystem
 V typeinfo name for CDefaultResponseSystemSaveRestoreBlockHandler
 V typeinfo name for CDevShotSystem
 V typeinfo name for CDirtySpatialPartitionEntityList
 V typeinfo name for CDynamicLight
 V typeinfo name for CDynamicProp
 V typeinfo name for CEffectsServer
 V typeinfo name for CEmbers
 V typeinfo name for CEnableMotionFixup
 V typeinfo name for CEntityBlocker
 V typeinfo name for CEntityClassList<CPhysicsNPCSolver>
 V typeinfo name for CEntityClassList<CPointCamera>
 V typeinfo name for CEntityClassList<CSkyCamera>
 V typeinfo name for CEntityDataInstantiator<CPositionWatcherList>
 V typeinfo name for CEntityDataInstantiator<ModelWidthScale>
 V typeinfo name for CEntityDataInstantiator<StepSimulationData>
 V typeinfo name for CEntityDataInstantiator<groundlink_t>
 V typeinfo name for CEntityDataInstantiator<physicspushlist_t>
 V typeinfo name for CEntityDataInstantiator<touchlink_t>
 V typeinfo name for CEntityDissolve
 V typeinfo name for CEntityFactory<CAISound>
 V typeinfo name for CEntityFactory<CAI_AllySpeechManager>
 V typeinfo name for CEntityFactory<CAI_AssaultGoal>
 V typeinfo name for CEntityFactory<CAI_BattleLine>
 V typeinfo name for CEntityFactory<CAI_ChangeHintGroup>
 V typeinfo name for CEntityFactory<CAI_ChangeTarget>
 V typeinfo name for CEntityFactory<CAI_DynamicLink>
 V typeinfo name for CEntityFactory<CAI_DynamicLinkController>
 V typeinfo name for CEntityFactory<CAI_FollowGoal>
 V typeinfo name for CEntityFactory<CAI_Hint>
 V typeinfo name for CEntityFactory<CAI_LeadGoal>
 V typeinfo name for CEntityFactory<CAI_LeadGoal_Weapon>
 V typeinfo name for CEntityFactory<CAI_NetworkManager>
 V typeinfo name for CEntityFactory<CAI_ScriptConditions>
 V typeinfo name for CEntityFactory<CAI_ScriptedSchedule>
 V typeinfo name for CEntityFactory<CAI_ScriptedSentence>
 V typeinfo name for CEntityFactory<CAI_ScriptedSequence>
 V typeinfo name for CEntityFactory<CAI_SpeechFilter>
 V typeinfo name for CEntityFactory<CAI_StandoffGoal>
 V typeinfo name for CEntityFactory<CAI_TestHull>
 V typeinfo name for CEntityFactory<CAK47>
 V typeinfo name for CEntityFactory<CAmbientGeneric>
 V typeinfo name for CEntityFactory<CAreaPortal>
 V typeinfo name for CEntityFactory<CAssaultPoint>
 V typeinfo name for CEntityFactory<CBaseButton>
 V typeinfo name for CEntityFactory<CBaseCSGrenade>
 V typeinfo name for CEntityFactory<CBaseDMStart>
 V typeinfo name for CEntityFactory<CBaseDoor>
 V typeinfo name for CEntityFactory<CBaseFilter>
 V typeinfo name for CEntityFactory<CBaseFlex>
 V typeinfo name for CEntityFactory<CBaseGrenade>
 V typeinfo name for CEntityFactory<CBaseMoveBehavior>
 V typeinfo name for CEntityFactory<CBaseTrigger>
 V typeinfo name for CEntityFactory<CBaseViewModel>
 V typeinfo name for CEntityFactory<CBeam>
 V typeinfo name for CEntityFactory<CBlendingCycler>
 V typeinfo name for CEntityFactory<CBlood>
 V typeinfo name for CEntityFactory<CBombTarget>
 V typeinfo name for CEntityFactory<CBoneFollower>
 V typeinfo name for CEntityFactory<CBreakable>
 V typeinfo name for CEntityFactory<CBreakableSurface>
 V typeinfo name for CEntityFactory<CBubbling>
 V typeinfo name for CEntityFactory<CBuyZone>
 V typeinfo name for CEntityFactory<CC4>
 V typeinfo name for CEntityFactory<CCSBot>
 V typeinfo name for CEntityFactory<CCSGameRulesProxy>
 V typeinfo name for CEntityFactory<CCSPlayer>
 V typeinfo name for CEntityFactory<CCSPlayerResource>
 V typeinfo name for CEntityFactory<CCSRagdoll>
 V typeinfo name for CEntityFactory<CCSTeam>
 V typeinfo name for CEntityFactory<CChangeLevel>
 V typeinfo name for CEntityFactory<CConstraintAnchor>
 V typeinfo name for CEntityFactory<CCredits>
 V typeinfo name for CEntityFactory<CDEagle>
 V typeinfo name for CEntityFactory<CDecal>
 V typeinfo name for CEntityFactory<CDynamicLight>
 V typeinfo name for CEntityFactory<CDynamicProp>
 V typeinfo name for CEntityFactory<CEmbers>
 V typeinfo name for CEntityFactory<CEnableMotionFixup>
 V typeinfo name for CEntityFactory<CEntityBlocker>
 V typeinfo name for CEntityFactory<CEntityDissolve>
 V typeinfo name for CEntityFactory<CEntityFlame>
 V typeinfo name for CEntityFactory<CEntityParticleTrail>
 V typeinfo name for CEntityFactory<CEnvBeam>
 V typeinfo name for CEntityFactory<CEnvBeverage>
 V typeinfo name for CEntityFactory<CEnvDetailController>
 V typeinfo name for CEntityFactory<CEnvDustPuff>
 V typeinfo name for CEntityFactory<CEnvEffectsScript>
 V typeinfo name for CEntityFactory<CEnvEntityMaker>
 V typeinfo name for CEntityFactory<CEnvExplosion>
 V typeinfo name for CEntityFactory<CEnvFade>
 V typeinfo name for CEntityFactory<CEnvFireSensor>
 V typeinfo name for CEntityFactory<CEnvFireSource>
 V typeinfo name for CEntityFactory<CEnvFunnel>
 V typeinfo name for CEntityFactory<CEnvGlobal>
 V typeinfo name for CEntityFactory<CEnvGunfire>
 V typeinfo name for CEntityFactory<CEnvHudHint>
 V typeinfo name for CEntityFactory<CEnvLaser>
 V typeinfo name for CEntityFactory<CEnvLight>
 V typeinfo name for CEntityFactory<CEnvMicrophone>
 V typeinfo name for CEntityFactory<CEnvMuzzleFlash>
 V typeinfo name for CEntityFactory<CEnvParticleScript>
 V typeinfo name for CEntityFactory<CEnvPlayerSurfaceTrigger>
 V typeinfo name for CEntityFactory<CEnvQuadraticBeam>
 V typeinfo name for CEntityFactory<CEnvScreenOverlay>
 V typeinfo name for CEntityFactory<CEnvShake>
 V typeinfo name for CEntityFactory<CEnvShooter>
 V typeinfo name for CEntityFactory<CEnvSoundscape>
 V typeinfo name for CEntityFactory<CEnvSoundscapeProxy>
 V typeinfo name for CEntityFactory<CEnvSoundscapeTriggerable>
 V typeinfo name for CEntityFactory<CEnvSpark>
 V typeinfo name for CEntityFactory<CEnvSplash>
 V typeinfo name for CEntityFactory<CEnvTracer>
 V typeinfo name for CEntityFactory<CEnvWind>
 V typeinfo name for CEntityFactory<CEnvZoom>
 V typeinfo name for CEntityFactory<CEventQueueSaveLoadProxy>
 V typeinfo name for CEntityFactory<CFilterClass>
 V typeinfo name for CEntityFactory<CFilterMultiple>
 V typeinfo name for CEntityFactory<CFilterName>
 V typeinfo name for CEntityFactory<CFire>
 V typeinfo name for CEntityFactory<CFireSmoke>
 V typeinfo name for CEntityFactory<CFish>
 V typeinfo name for CEntityFactory<CFishPool>
 V typeinfo name for CEntityFactory<CFlashbang>
 V typeinfo name for CEntityFactory<CFlashbangProjectile>
 V typeinfo name for CEntityFactory<CFlextalkActor>
 V typeinfo name for CEntityFactory<CFogController>
 V typeinfo name for CEntityFactory<CFuncAreaPortalWindow>
 V typeinfo name for CEntityFactory<CFuncBrush>
 V typeinfo name for CEntityFactory<CFuncConveyor>
 V typeinfo name for CEntityFactory<CFuncIllusionary>
 V typeinfo name for CEntityFactory<CFuncLadder>
 V typeinfo name for CEntityFactory<CFuncLadderEndPoint>
 V typeinfo name for CEntityFactory<CFuncMonitor>
 V typeinfo name for CEntityFactory<CFuncMoveLinear>
 V typeinfo name for CEntityFactory<CFuncOccluder>
 V typeinfo name for CEntityFactory<CFuncPlat>
 V typeinfo name for CEntityFactory<CFuncPlatRot>
 V typeinfo name for CEntityFactory<CFuncRotating>
 V typeinfo name for CEntityFactory<CFuncSmokeVolume>
 V typeinfo name for CEntityFactory<CFuncTankTrain>
 V typeinfo name for CEntityFactory<CFuncTrackAuto>
 V typeinfo name for CEntityFactory<CFuncTrackChange>
 V typeinfo name for CEntityFactory<CFuncTrackTrain>
 V typeinfo name for CEntityFactory<CFuncTrain>
 V typeinfo name for CEntityFactory<CFuncTrainControls>
 V typeinfo name for CEntityFactory<CFuncVPhysicsClip>
 V typeinfo name for CEntityFactory<CFuncVehicleClip>
 V typeinfo name for CEntityFactory<CFuncWall>
 V typeinfo name for CEntityFactory<CFuncWallToggle>
 V typeinfo name for CEntityFactory<CFunc_DustCloud>
 V typeinfo name for CEntityFactory<CFunc_DustMotes>
 V typeinfo name for CEntityFactory<CFunc_LOD>
 V typeinfo name for CEntityFactory<CGameEnd>
 V typeinfo name for CEntityFactory<CGamePlayerEquip>
 V typeinfo name for CEntityFactory<CGamePlayerTeam>
 V typeinfo name for CEntityFactory<CGamePlayerZone>
 V typeinfo name for CEntityFactory<CGameScore>
 V typeinfo name for CEntityFactory<CGameText>
 V typeinfo name for CEntityFactory<CGameUI>
 V typeinfo name for CEntityFactory<CGameWeaponManager>
 V typeinfo name for CEntityFactory<CGenericActor>
 V typeinfo name for CEntityFactory<CGenericCycler>
 V typeinfo name for CEntityFactory<CGenericFlexCycler>
 V typeinfo name for CEntityFactory<CGenericNPC>
 V typeinfo name for CEntityFactory<CGib>
 V typeinfo name for CEntityFactory<CGibShooter>
 V typeinfo name for CEntityFactory<CGunTarget>
 V typeinfo name for CEntityFactory<CHEGrenade>
 V typeinfo name for CEntityFactory<CHEGrenadeProjectile>
 V typeinfo name for CEntityFactory<CHandleDummy>
 V typeinfo name for CEntityFactory<CHandleTest>
 V typeinfo name for CEntityFactory<CHostage>
 V typeinfo name for CEntityFactory<CHostageRescueZone>
 V typeinfo name for CEntityFactory<CInfoCameraLink>
 V typeinfo name for CEntityFactory<CInfoIntermission>
 V typeinfo name for CEntityFactory<CInfoLadder>
 V typeinfo name for CEntityFactory<CInfoLadderDismount>
 V typeinfo name for CEntityFactory<CInfoLightingRelative>
 V typeinfo name for CEntityFactory<CInfoMassCenter>
 V typeinfo name for CEntityFactory<CInfoViewParameters>
 V typeinfo name for CEntityFactory<CInstancedSceneEntity>
 V typeinfo name for CEntityFactory<CItemAmmo338MAG>
 V typeinfo name for CEntityFactory<CItemAmmo357SIG>
 V typeinfo name for CEntityFactory<CItemAmmo45ACP>
 V typeinfo name for CEntityFactory<CItemAmmo50AE>
 V typeinfo name for CEntityFactory<CItemAmmo556MM>
 V typeinfo name for CEntityFactory<CItemAmmo556MM_BOX>
 V typeinfo name for CEntityFactory<CItemAmmo57MM>
 V typeinfo name for CEntityFactory<CItemAmmo762MM>
 V typeinfo name for CEntityFactory<CItemAmmo9MM>
 V typeinfo name for CEntityFactory<CItemAmmoBuckshot>
 V typeinfo name for CEntityFactory<CItemAssaultSuit>
 V typeinfo name for CEntityFactory<CItemDefuser>
 V typeinfo name for CEntityFactory<CItemKevlar>
 V typeinfo name for CEntityFactory<CItemNvgs>
 V typeinfo name for CEntityFactory<CItemSoda>
 V typeinfo name for CEntityFactory<CKeepUpright>
 V typeinfo name for CEntityFactory<CKnife>
 V typeinfo name for CEntityFactory<CLight>
 V typeinfo name for CEntityFactory<CLightGlow>
 V typeinfo name for CEntityFactory<CLogicAuto>
 V typeinfo name for CEntityFactory<CLogicAutosave>
 V typeinfo name for CEntityFactory<CLogicBranch>
 V typeinfo name for CEntityFactory<CLogicCase>
 V typeinfo name for CEntityFactory<CLogicCollisionPair>
 V typeinfo name for CEntityFactory<CLogicCompare>
 V typeinfo name for CEntityFactory<CLogicCompareInteger>
 V typeinfo name for CEntityFactory<CLogicLineToEntity>
 V typeinfo name for CEntityFactory<CLogicMeasureMovement>
 V typeinfo name for CEntityFactory<CLogicNavigation>
 V typeinfo name for CEntityFactory<CLogicRelay>
 V typeinfo name for CEntityFactory<CMapInfo>
 V typeinfo name for CEntityFactory<CMaterialModifyControl>
 V typeinfo name for CEntityFactory<CMathColorBlend>
 V typeinfo name for CEntityFactory<CMathCounter>
 V typeinfo name for CEntityFactory<CMathRemap>
 V typeinfo name for CEntityFactory<CMessage>
 V typeinfo name for CEntityFactory<CMessageEntity>
 V typeinfo name for CEntityFactory<CMomentaryRotButton>
 V typeinfo name for CEntityFactory<CMovementSpeedMod>
 V typeinfo name for CEntityFactory<CMultiSource>
 V typeinfo name for CEntityFactory<CNPC_Furniture>
 V typeinfo name for CEntityFactory<CNPC_VehicleDriver>
 V typeinfo name for CEntityFactory<CNodeEnt>
 V typeinfo name for CEntityFactory<CNullEntity>
 V typeinfo name for CEntityFactory<COrnamentProp>
 V typeinfo name for CEntityFactory<CParticleFire>
 V typeinfo name for CEntityFactory<CParticleLight>
 V typeinfo name for CEntityFactory<CPathCorner>
 V typeinfo name for CEntityFactory<CPathCornerCrash>
 V typeinfo name for CEntityFactory<CPathKeyFrame>
 V typeinfo name for CEntityFactory<CPathTrack>
 V typeinfo name for CEntityFactory<CPhysBallSocket>
 V typeinfo name for CEntityFactory<CPhysBox>
 V typeinfo name for CEntityFactory<CPhysBoxMultiplayer>
 V typeinfo name for CEntityFactory<CPhysConstraintSystem>
 V typeinfo name for CEntityFactory<CPhysConvert>
 V typeinfo name for CEntityFactory<CPhysExplosion>
 V typeinfo name for CEntityFactory<CPhysFixed>
 V typeinfo name for CEntityFactory<CPhysHinge>
 V typeinfo name for CEntityFactory<CPhysImpact>
 V typeinfo name for CEntityFactory<CPhysLength>
 V typeinfo name for CEntityFactory<CPhysMagnet>
 V typeinfo name for CEntityFactory<CPhysMotor>
 V typeinfo name for CEntityFactory<CPhysPulley>
 V typeinfo name for CEntityFactory<CPhysSlideConstraint>
 V typeinfo name for CEntityFactory<CPhysSphere>
 V typeinfo name for CEntityFactory<CPhysThruster>
 V typeinfo name for CEntityFactory<CPhysTorque>
 V typeinfo name for CEntityFactory<CPhysicsCannister>
 V typeinfo name for CEntityFactory<CPhysicsEntitySolver>
 V typeinfo name for CEntityFactory<CPhysicsNPCSolver>
 V typeinfo name for CEntityFactory<CPhysicsProp>
 V typeinfo name for CEntityFactory<CPhysicsPropMultiplayer>
 V typeinfo name for CEntityFactory<CPhysicsPropRespawnable>
 V typeinfo name for CEntityFactory<CPhysicsSpring>
 V typeinfo name for CEntityFactory<CPhysicsWire>
 V typeinfo name for CEntityFactory<CPlantedC4>
 V typeinfo name for CEntityFactory<CPlasma>
 V typeinfo name for CEntityFactory<CPlayerResource>
 V typeinfo name for CEntityFactory<CPointAngleSensor>
 V typeinfo name for CEntityFactory<CPointAngularVelocitySensor>
 V typeinfo name for CEntityFactory<CPointCamera>
 V typeinfo name for CEntityFactory<CPointClientCommand>
 V typeinfo name for CEntityFactory<CPointDevShotCamera>
 V typeinfo name for CEntityFactory<CPointEntity>
 V typeinfo name for CEntityFactory<CPointHurt>
 V typeinfo name for CEntityFactory<CPointPlayerMoveConstraint>
 V typeinfo name for CEntityFactory<CPointServerCommand>
 V typeinfo name for CEntityFactory<CPointSpotlight>
 V typeinfo name for CEntityFactory<CPointTeleport>
 V typeinfo name for CEntityFactory<CPointTemplate>
 V typeinfo name for CEntityFactory<CPrecipitation>
 V typeinfo name for CEntityFactory<CPredictedViewModel>
 V typeinfo name for CEntityFactory<CProjectedDecal>
 V typeinfo name for CEntityFactory<CPropDoorRotating>
 V typeinfo name for CEntityFactory<CPropVehicle>
 V typeinfo name for CEntityFactory<CPropVehicleDriveable>
 V typeinfo name for CEntityFactory<CPushable>
 V typeinfo name for CEntityFactory<CRagGib>
 V typeinfo name for CEntityFactory<CRagdollBoogie>
 V typeinfo name for CEntityFactory<CRagdollConstraint>
 V typeinfo name for CEntityFactory<CRagdollMagnet>
 V typeinfo name for CEntityFactory<CRagdollManager>
 V typeinfo name for CEntityFactory<CRagdollProp>
 V typeinfo name for CEntityFactory<CRagdollPropAttached>
 V typeinfo name for CEntityFactory<CRallyPoint>
 V typeinfo name for CEntityFactory<CRevertSaved>
 V typeinfo name for CEntityFactory<CRopeAnchor>
 V typeinfo name for CEntityFactory<CRopeKeyframe>
 V typeinfo name for CEntityFactory<CRotButton>
 V typeinfo name for CEntityFactory<CRotDoor>
 V typeinfo name for CEntityFactory<CRotorWashShooter>
 V typeinfo name for CEntityFactory<CSceneEntity>
 V typeinfo name for CEntityFactory<CSceneManager>
 V typeinfo name for CEntityFactory<CScriptedTarget>
 V typeinfo name for CEntityFactory<CShadowControl>
 V typeinfo name for CEntityFactory<CShower>
 V typeinfo name for CEntityFactory<CSimplePhysicsBrush>
 V typeinfo name for CEntityFactory<CSimplePhysicsProp>
 V typeinfo name for CEntityFactory<CSkyCamera>
 V typeinfo name for CEntityFactory<CSmokeGrenade>
 V typeinfo name for CEntityFactory<CSmokeGrenadeProjectile>
 V typeinfo name for CEntityFactory<CSmokeStack>
 V typeinfo name for CEntityFactory<CSoundEnt>
 V typeinfo name for CEntityFactory<CSpotlightEnd>
 V typeinfo name for CEntityFactory<CSprayCan>
 V typeinfo name for CEntityFactory<CSprite>
 V typeinfo name for CEntityFactory<CSpriteTrail>
 V typeinfo name for CEntityFactory<CSteamJet>
 V typeinfo name for CEntityFactory<CStripWeapons>
 V typeinfo name for CEntityFactory<CSun>
 V typeinfo name for CEntityFactory<CSurroundTest>
 V typeinfo name for CEntityFactory<CTankTargetChange>
 V typeinfo name for CEntityFactory<CTankTrainAI>
 V typeinfo name for CEntityFactory<CTargetCDAudioRep>
 V typeinfo name for CEntityFactory<CTargetChangeGravity>
 V typeinfo name for CEntityFactory<CTeam>
 V typeinfo name for CEntityFactory<CTeamSpawnPoint>
 V typeinfo name for CEntityFactory<CTeamVehicleSpawnPoint>
 V typeinfo name for CEntityFactory<CTempEntTester>
 V typeinfo name for CEntityFactory<CTerrainMorph>
 V typeinfo name for CEntityFactory<CTesla>
 V typeinfo name for CEntityFactory<CTestEffect>
 V typeinfo name for CEntityFactory<CTestTraceline>
 V typeinfo name for CEntityFactory<CTest_ProxyToggle_Networkable>
 V typeinfo name for CEntityFactory<CTextureToggle>
 V typeinfo name for CEntityFactory<CTimerEntity>
 V typeinfo name for CEntityFactory<CTriggerBrush>
 V typeinfo name for CEntityFactory<CTriggerCDAudio>
 V typeinfo name for CEntityFactory<CTriggerCamera>
 V typeinfo name for CEntityFactory<CTriggerGravity>
 V typeinfo name for CEntityFactory<CTriggerHurt>
 V typeinfo name for CEntityFactory<CTriggerImpact>
 V typeinfo name for CEntityFactory<CTriggerLook>
 V typeinfo name for CEntityFactory<CTriggerMultiple>
 V typeinfo name for CEntityFactory<CTriggerOnce>
 V typeinfo name for CEntityFactory<CTriggerPlayerMovement>
 V typeinfo name for CEntityFactory<CTriggerProximity>
 V typeinfo name for CEntityFactory<CTriggerPush>
 V typeinfo name for CEntityFactory<CTriggerRemove>
 V typeinfo name for CEntityFactory<CTriggerSave>
 V typeinfo name for CEntityFactory<CTriggerSoundscape>
 V typeinfo name for CEntityFactory<CTriggerTeleport>
 V typeinfo name for CEntityFactory<CTriggerToggleSave>
 V typeinfo name for CEntityFactory<CTriggerVPhysicsMotion>
 V typeinfo name for CEntityFactory<CTriggerVolume>
 V typeinfo name for CEntityFactory<CTriggerWind>
 V typeinfo name for CEntityFactory<CVGuiScreen>
 V typeinfo name for CEntityFactory<CWaterBullet>
 V typeinfo name for CEntityFactory<CWaterLODControl>
 V typeinfo name for CEntityFactory<CWeaponAWP>
 V typeinfo name for CEntityFactory<CWeaponAug>
 V typeinfo name for CEntityFactory<CWeaponCSBase>
 V typeinfo name for CEntityFactory<CWeaponCSBaseGun>
 V typeinfo name for CEntityFactory<CWeaponCubemap>
 V typeinfo name for CEntityFactory<CWeaponCycler>
 V typeinfo name for CEntityFactory<CWeaponElite>
 V typeinfo name for CEntityFactory<CWeaponFamas>
 V typeinfo name for CEntityFactory<CWeaponFiveSeven>
 V typeinfo name for CEntityFactory<CWeaponG3SG1>
 V typeinfo name for CEntityFactory<CWeaponGalil>
 V typeinfo name for CEntityFactory<CWeaponGlock>
 V typeinfo name for CEntityFactory<CWeaponM249>
 V typeinfo name for CEntityFactory<CWeaponM3>
 V typeinfo name for CEntityFactory<CWeaponM4A1>
 V typeinfo name for CEntityFactory<CWeaponMAC10>
 V typeinfo name for CEntityFactory<CWeaponMP5Navy>
 V typeinfo name for CEntityFactory<CWeaponP228>
 V typeinfo name for CEntityFactory<CWeaponP90>
 V typeinfo name for CEntityFactory<CWeaponSG550>
 V typeinfo name for CEntityFactory<CWeaponSG552>
 V typeinfo name for CEntityFactory<CWeaponScout>
 V typeinfo name for CEntityFactory<CWeaponTMP>
 V typeinfo name for CEntityFactory<CWeaponUMP45>
 V typeinfo name for CEntityFactory<CWeaponUSP>
 V typeinfo name for CEntityFactory<CWeaponXM1014>
 V typeinfo name for CEntityFactory<CWindowPane>
 V typeinfo name for CEntityFactory<CWorld>
 V typeinfo name for CEntityFactory<CWorldItem>
 V typeinfo name for CEntityFactory<CWreckage>
 V typeinfo name for CEntityFactory<FilterDamageType>
 V typeinfo name for CEntityFactory<FilterTeam>
 V typeinfo name for CEntityFactory<MovieExplosion>
 V typeinfo name for CEntityFactory<ParticleSmokeGrenade>
 V typeinfo name for CEntityFactoryDictionary
 V typeinfo name for CEntityFlame
 V typeinfo name for CEntityListSystem
 V typeinfo name for CEntityParticleTrail
 V typeinfo name for CEntityParticleTrail::NetworkVar_m_Info
 V typeinfo name for CEntitySaveRestoreBlockHandler
 V typeinfo name for CEntitySaveUtils
 V typeinfo name for CEntityTouchManager
 V typeinfo name for CEnvBeam
 V typeinfo name for CEnvBeverage
 V typeinfo name for CEnvDetailController
 V typeinfo name for CEnvDustPuff
 V typeinfo name for CEnvEffectsScript
 V typeinfo name for CEnvEntityMaker
 V typeinfo name for CEnvExplosion
 V typeinfo name for CEnvFade
 V typeinfo name for CEnvFireSensor
 V typeinfo name for CEnvFireSource
 V typeinfo name for CEnvFunnel
 V typeinfo name for CEnvGlobal
 V typeinfo name for CEnvGunfire
 V typeinfo name for CEnvHudHint
 V typeinfo name for CEnvLaser
 V typeinfo name for CEnvLight
 V typeinfo name for CEnvMicrophone
 V typeinfo name for CEnvMuzzleFlash
 V typeinfo name for CEnvParticleScript
 V typeinfo name for CEnvPlayerSurfaceTrigger
 V typeinfo name for CEnvQuadraticBeam
 V typeinfo name for CEnvScreenOverlay
 V typeinfo name for CEnvShake
 V typeinfo name for CEnvShooter
 V typeinfo name for CEnvSoundscape
 V typeinfo name for CEnvSoundscapeProxy
 V typeinfo name for CEnvSoundscapeTriggerable
 V typeinfo name for CEnvSpark
 V typeinfo name for CEnvSplash
 V typeinfo name for CEnvTracer
 V typeinfo name for CEnvWind
 V typeinfo name for CEnvWind::NetworkVar_m_EnvWindShared
 V typeinfo name for CEnvWindShared
 V typeinfo name for CEnvZoom
 V typeinfo name for CEventLog
 V typeinfo name for CEventQueueSaveLoadProxy
 V typeinfo name for CEventsSaveDataOps
 V typeinfo name for CFilterClass
 V typeinfo name for CFilterMultiple
 V typeinfo name for CFilterName
 V typeinfo name for CFire
 V typeinfo name for CFireSmoke
 V typeinfo name for CFireSphere
 V typeinfo name for CFish
 V typeinfo name for CFishPool
 V typeinfo name for CFlaggedEntitiesEnum
 V typeinfo name for CFlashbang
 V typeinfo name for CFlashbangProjectile
 V typeinfo name for CFlexAnimationTrack
 V typeinfo name for CFlexCycler
 V typeinfo name for CFlexSceneFileManager
 V typeinfo name for CFlextalkActor
 V typeinfo name for CFogController
 V typeinfo name for CFourWheelServerVehicle
 V typeinfo name for CFourWheelVehiclePhysics
 V typeinfo name for CFuncAreaPortalBase
 V typeinfo name for CFuncAreaPortalWindow
 V typeinfo name for CFuncBrush
 V typeinfo name for CFuncConveyor
 V typeinfo name for CFuncIllusionary
 V typeinfo name for CFuncLadder
 V typeinfo name for CFuncLadderEndPoint
 V typeinfo name for CFuncMonitor
 V typeinfo name for CFuncMoveLinear
 V typeinfo name for CFuncOccluder
 V typeinfo name for CFuncPlat
 V typeinfo name for CFuncPlatRot
 V typeinfo name for CFuncRotating
 V typeinfo name for CFuncSmokeVolume
 V typeinfo name for CFuncTankTrain
 V typeinfo name for CFuncTrackAuto
 V typeinfo name for CFuncTrackChange
 V typeinfo name for CFuncTrackTrain
 V typeinfo name for CFuncTrain
 V typeinfo name for CFuncTrainControls
 V typeinfo name for CFuncVPhysicsClip
 V typeinfo name for CFuncVehicleClip
 V typeinfo name for CFuncWall
 V typeinfo name for CFuncWallToggle
 V typeinfo name for CFunc_Dust
 V typeinfo name for CFunc_DustCloud
 V typeinfo name for CFunc_DustMotes
 V typeinfo name for CFunc_LOD
 V typeinfo name for CGameDLL_ConVarAccessor
 V typeinfo name for CGameEnd
 V typeinfo name for CGameMovement
 V typeinfo name for CGamePlayerEquip
 V typeinfo name for CGamePlayerTeam
 V typeinfo name for CGamePlayerZone
 V typeinfo name for CGameRules
 V typeinfo name for CGameRulesProxy
 V typeinfo name for CGameScore
 V typeinfo name for CGameStringPool
 V typeinfo name for CGameText
 V typeinfo name for CGameUI
 V typeinfo name for CGameWeaponManager
 V typeinfo name for CGenericActor
 V typeinfo name for CGenericCycler
 V typeinfo name for CGenericFlexCycler
 V typeinfo name for CGenericNPC
 V typeinfo name for CGib
 V typeinfo name for CGibShooter
 V typeinfo name for CGlobalEntityList
 V typeinfo name for CGlobalState
 V typeinfo name for CGunTarget
 V typeinfo name for CHEGrenade
 V typeinfo name for CHEGrenadeProjectile
 V typeinfo name for CHLTVDirector
 V typeinfo name for CHandleDummy
 V typeinfo name for CHandleTest
 V typeinfo name for CHangRope
 V typeinfo name for CHostage
 V typeinfo name for CHostageRescueZone
 V typeinfo name for CIKSaveRestoreOps
 V typeinfo name for CImprovLocomotor
 V typeinfo name for CInfoCameraLink
 V typeinfo name for CInfoIntermission
 V typeinfo name for CInfoLadder
 V typeinfo name for CInfoLadderDismount
 V typeinfo name for CInfoLightingRelative
 V typeinfo name for CInfoMassCenter
 V typeinfo name for CInfoViewParameters
 V typeinfo name for CInstancedResponseSystem
 V typeinfo name for CInstancedSceneEntity
 V typeinfo name for CInstancedSceneResourceManager
 V typeinfo name for CItem
 V typeinfo name for CItemAmmo
 V typeinfo name for CItemAmmo338MAG
 V typeinfo name for CItemAmmo357SIG
 V typeinfo name for CItemAmmo45ACP
 V typeinfo name for CItemAmmo50AE
 V typeinfo name for CItemAmmo556MM
 V typeinfo name for CItemAmmo556MM_BOX
 V typeinfo name for CItemAmmo57MM
 V typeinfo name for CItemAmmo762MM
 V typeinfo name for CItemAmmo9MM
 V typeinfo name for CItemAmmoBuckshot
 V typeinfo name for CItemAssaultSuit
 V typeinfo name for CItemDefuser
 V typeinfo name for CItemKevlar
 V typeinfo name for CItemNvgs
 V typeinfo name for CItemSoda
 V typeinfo name for CJeepFourWheelServerVehicle
 V typeinfo name for CKeepUpright
 V typeinfo name for CKnife
 V typeinfo name for CLagCompensationManager
 V typeinfo name for CLight
 V typeinfo name for CLightGlow
 V typeinfo name for CLogicAuto
 V typeinfo name for CLogicAutosave
 V typeinfo name for CLogicBranch
 V typeinfo name for CLogicCase
 V typeinfo name for CLogicCollisionPair
 V typeinfo name for CLogicCompare
 V typeinfo name for CLogicCompareInteger
 V typeinfo name for CLogicLineToEntity
 V typeinfo name for CLogicMeasureMovement
 V typeinfo name for CLogicNavigation
 V typeinfo name for CLogicRelay
 V typeinfo name for CLogicalEntity
 V typeinfo name for CMapInfo
 V typeinfo name for CMaterialModifyControl
 V typeinfo name for CMathColorBlend
 V typeinfo name for CMathCounter
 V typeinfo name for CMathRemap
 V typeinfo name for CMessage
 V typeinfo name for CMessageEntity
 V typeinfo name for CModelSoundCache
 V typeinfo name for CMomentaryRotButton
 V typeinfo name for CMotorController
 V typeinfo name for CMoveHelperServer
 V typeinfo name for CMovementSpeedMod
 V typeinfo name for CMultiSource
 V typeinfo name for CMultiplayRules
 V typeinfo name for CNPC_Furniture
 V typeinfo name for CNPC_VehicleDriver
 V typeinfo name for CNavMesh
 V typeinfo name for CNodeEnt
 V typeinfo name for CNodeFilter
 V typeinfo name for CNotifyList
 V typeinfo name for CNullEntity
 V typeinfo name for COrnamentProp
 V typeinfo name for CPASAttenuationFilter
 V typeinfo name for CPASFilter
 V typeinfo name for CPVSFilter
 V typeinfo name for CParticleFire
 V typeinfo name for CParticleLight
 V typeinfo name for CPathCorner
 V typeinfo name for CPathCornerCrash
 V typeinfo name for CPathKeyFrame
 V typeinfo name for CPathTrack
 V typeinfo name for CPathfindNearestNodeFilter
 V typeinfo name for CPhysBallSocket
 V typeinfo name for CPhysBox
 V typeinfo name for CPhysBoxMultiplayer
 V typeinfo name for CPhysConstraint
 V typeinfo name for CPhysConstraintEvents
 V typeinfo name for CPhysConstraintSystem
 V typeinfo name for CPhysConvert
 V typeinfo name for CPhysExplosion
 V typeinfo name for CPhysFixed
 V typeinfo name for CPhysForce
 V typeinfo name for CPhysHinge
 V typeinfo name for CPhysImpact
 V typeinfo name for CPhysLength
 V typeinfo name for CPhysMagnet
 V typeinfo name for CPhysMotor
 V typeinfo name for CPhysObjSaveRestoreOps
 V typeinfo name for CPhysPulley
 V typeinfo name for CPhysSaveRestoreBlockHandler
 V typeinfo name for CPhysSlideConstraint
 V typeinfo name for CPhysSphere
 V typeinfo name for CPhysThruster
 V typeinfo name for CPhysTorque
 V typeinfo name for CPhysicsCannister
 V typeinfo name for CPhysicsEntitySolver
 V typeinfo name for CPhysicsGameTrace
 V typeinfo name for CPhysicsHook
 V typeinfo name for CPhysicsNPCSolver
 V typeinfo name for CPhysicsPlayerCallback
 V typeinfo name for CPhysicsProp
 V typeinfo name for CPhysicsPropMultiplayer
 V typeinfo name for CPhysicsPropRespawnable
 V typeinfo name for CPhysicsShake
 V typeinfo name for CPhysicsSpring
 V typeinfo name for CPhysicsWind
 V typeinfo name for CPhysicsWire
 V typeinfo name for CPlantedC4
 V typeinfo name for CPlasma
 V typeinfo name for CPlatTrigger
 V typeinfo name for CPlayerInfo
 V typeinfo name for CPlayerInfoManager
 V typeinfo name for CPlayerLocalData
 V typeinfo name for CPlayerLocalData::NetworkVar_m_audio
 V typeinfo name for CPlayerLocalData::NetworkVar_m_fog
 V typeinfo name for CPlayerLocalData::NetworkVar_m_skybox3d
 V typeinfo name for CPlayerMove
 V typeinfo name for CPlayerResource
 V typeinfo name for CPlayerState
 V typeinfo name for CPluginBotManager
 V typeinfo name for CPluginHelpersCheck
 V typeinfo name for CPointAngleSensor
 V typeinfo name for CPointAngularVelocitySensor
 V typeinfo name for CPointCamera
 V typeinfo name for CPointClientCommand
 V typeinfo name for CPointDevShotCamera
 V typeinfo name for CPointEntity
 V typeinfo name for CPointHurt
 V typeinfo name for CPointPlayerMoveConstraint
 V typeinfo name for CPointServerCommand
 V typeinfo name for CPointSpotlight
 V typeinfo name for CPointTeleport
 V typeinfo name for CPointTemplate
 V typeinfo name for CPointTemplatePrecacher
 V typeinfo name for CPositionInterpolator_CatmullRom
 V typeinfo name for CPositionInterpolator_Linear
 V typeinfo name for CPositionInterpolator_Rope
 V typeinfo name for CPrecacheOtherList
 V typeinfo name for CPrecipitation
 V typeinfo name for CPredictableList
 V typeinfo name for CPredictedViewModel
 V typeinfo name for CProjectedDecal
 V typeinfo name for CPropData
 V typeinfo name for CPropDoorRotating
 V typeinfo name for CPropJeep
 V typeinfo name for CPropVehicle
 V typeinfo name for CPropVehicleDriveable
 V typeinfo name for CPushAwayEnumerator
 V typeinfo name for CPushBlockerEnum
 V typeinfo name for CPushable
 V typeinfo name for CRagGib
 V typeinfo name for CRagdollAnimatedFriction
 V typeinfo name for CRagdollBoogie
 V typeinfo name for CRagdollCollisionRules
 V typeinfo name for CRagdollConstraint
 V typeinfo name for CRagdollLRURetirement
 V typeinfo name for CRagdollMagnet
 V typeinfo name for CRagdollManager
 V typeinfo name for CRagdollProp
 V typeinfo name for CRagdollPropAttached
 V typeinfo name for CRallyPoint
 V typeinfo name for CRecipientFilter
 V typeinfo name for CReliableBroadcastRecipientFilter
 V typeinfo name for CResourceLRUBase
 V typeinfo name for CResourceManager<CBoneCache, bonecacheparams_t, CBoneCache*>
 V typeinfo name for CResourceManager<SceneData_t, scenedataparams_t, SceneData_t*>
 V typeinfo name for CResponseSystem
 V typeinfo name for CResponseSystemSaveRestoreOps
 V typeinfo name for CRestore
 V typeinfo name for CRevertSaved
 V typeinfo name for CRopeAnchor
 V typeinfo name for CRopeDelegate
 V typeinfo name for CRopeKeyframe
 V typeinfo name for CRopePhysics<10>
 V typeinfo name for CRopePhysics<512>
 V typeinfo name for CRotButton
 V typeinfo name for CRotDoor
 V typeinfo name for CRotorWashShooter
 V typeinfo name for CRuleBrushEntity
 V typeinfo name for CRuleEntity
 V typeinfo name for CRulePointEntity
 V typeinfo name for CSave
 V typeinfo name for CSaveRestoreBlockSet
 V typeinfo name for CSceneCache
 V typeinfo name for CSceneEntity
 V typeinfo name for CSceneManager
 V typeinfo name for CSceneTokenProcessor
 V typeinfo name for CScriptedTarget
 V typeinfo name for CServerGameClients
 V typeinfo name for CServerGameDLL
 V typeinfo name for CServerGameEnts
 V typeinfo name for CServerNetworkProperty
 V typeinfo name for CServerOnlyEntity
 V typeinfo name for CServerOnlyPointEntity
 V typeinfo name for CShadowControl
 V typeinfo name for CShower
 V typeinfo name for CSimThinkManager
 V typeinfo name for CSimplePhysics::IHelper
 V typeinfo name for CSimplePhysicsBrush
 V typeinfo name for CSimplePhysicsProp
 V typeinfo name for CSingleUserRecipientFilter
 V typeinfo name for CSingleplayRules
 V typeinfo name for CSkipKeys
 V typeinfo name for CSkyCamera
 V typeinfo name for CSmokeGrenade
 V typeinfo name for CSmokeGrenadeProjectile
 V typeinfo name for CSmokeStack
 V typeinfo name for CSolidSetDefaults
 V typeinfo name for CSoundControllerImp
 V typeinfo name for CSoundEmitterSystem
 V typeinfo name for CSoundEnt
 V typeinfo name for CSoundEnvelopeController
 V typeinfo name for CSoundPatchSaveRestoreOps
 V typeinfo name for CSoundscapeSystem
 V typeinfo name for CSpotlightEnd
 V typeinfo name for CSprayCan
 V typeinfo name for CSprite
 V typeinfo name for CSpriteTrail
 V typeinfo name for CStdStringSaveRestoreOps
 V typeinfo name for CSteamJet
 V typeinfo name for CStringPool
 V typeinfo name for CStringTableSaveRestoreOps
 V typeinfo name for CStripWeapons
 V typeinfo name for CSun
 V typeinfo name for CSurroundTest
 V typeinfo name for CTEArmorRicochet
 V typeinfo name for CTEBSPDecal
 V typeinfo name for CTEBaseBeam
 V typeinfo name for CTEBeamEntPoint
 V typeinfo name for CTEBeamEnts
 V typeinfo name for CTEBeamFollow
 V typeinfo name for CTEBeamLaser
 V typeinfo name for CTEBeamPoints
 V typeinfo name for CTEBeamRing
 V typeinfo name for CTEBeamRingPoint
 V typeinfo name for CTEBeamSpline
 V typeinfo name for CTEBloodSprite
 V typeinfo name for CTEBloodStream
 V typeinfo name for CTEBreakModel
 V typeinfo name for CTEBubbleTrail
 V typeinfo name for CTEBubbles
 V typeinfo name for CTEDecal
 V typeinfo name for CTEDust
 V typeinfo name for CTEDynamicLight
 V typeinfo name for CTEEffectDispatch
 V typeinfo name for CTEEnergySplash
 V typeinfo name for CTEExplosion
 V typeinfo name for CTEFireBullets
 V typeinfo name for CTEFizz
 V typeinfo name for CTEFootprintDecal
 V typeinfo name for CTEGaussExplosion
 V typeinfo name for CTEGlowSprite
 V typeinfo name for CTEImpact
 V typeinfo name for CTEKillPlayerAttachments
 V typeinfo name for CTELargeFunnel
 V typeinfo name for CTEMetalSparks
 V typeinfo name for CTEMuzzleFlash
 V typeinfo name for CTEParticleSystem
 V typeinfo name for CTEPhysicsProp
 V typeinfo name for CTEPlantBomb
 V typeinfo name for CTEPlayerAnimEvent
 V typeinfo name for CTEPlayerDecal
 V typeinfo name for CTEProjectedDecal
 V typeinfo name for CTERadioIcon
 V typeinfo name for CTEShatterSurface
 V typeinfo name for CTEShowLine
 V typeinfo name for CTESmoke
 V typeinfo name for CTESparks
 V typeinfo name for CTESprite
 V typeinfo name for CTESpriteSpray
 V typeinfo name for CTEWorldDecal
 V typeinfo name for CTankTargetChange
 V typeinfo name for CTankTrainAI
 V typeinfo name for CTargetCDAudioRep
 V typeinfo name for CTargetChangeGravity
 V typeinfo name for CTeam
 V typeinfo name for CTeamRecipientFilter
 V typeinfo name for CTeamSpawnPoint
 V typeinfo name for CTeamVehicleSpawnPoint
 V typeinfo name for CTeamplayRules
 V typeinfo name for CTempEntTester
 V typeinfo name for CTempEntsSystem
 V typeinfo name for CTemplate_SaveRestoreBlockHandler
 V typeinfo name for CTemplatesHook
 V typeinfo name for CTerrainMorph
 V typeinfo name for CTesla
 V typeinfo name for CTestEffect
 V typeinfo name for CTestTraceline
 V typeinfo name for CTest_ProxyToggle_Networkable
 V typeinfo name for CTextureToggle
 V typeinfo name for CThinkContextsSaveDataOps
 V typeinfo name for CThrustController
 V typeinfo name for CTimerEntity
 V typeinfo name for CTraceFilter
 V typeinfo name for CTraceFilterAgainstEntityList
 V typeinfo name for CTraceFilterDoor
 V typeinfo name for CTraceFilterEntitiesOnly
 V typeinfo name for CTraceFilterEntity
 V typeinfo name for CTraceFilterEntityIgnoreOther
 V typeinfo name for CTraceFilterLOS
 V typeinfo name for CTraceFilterMelee
 V typeinfo name for CTraceFilterNav
 V typeinfo name for CTraceFilterNoNPCsOrPlayer
 V typeinfo name for CTraceFilterOnlyNPCsAndPlayer
 V typeinfo name for CTraceFilterPlayerAvoidance
 V typeinfo name for CTraceFilterPlayersNPCs
 V typeinfo name for CTraceFilterPlayersNPCsPhysicsProps
 V typeinfo name for CTraceFilterPushFinal
 V typeinfo name for CTraceFilterPushMove
 V typeinfo name for CTraceFilterSimple
 V typeinfo name for CTraceFilterSimpleList
 V typeinfo name for CTraceFilterSkipNPCs
 V typeinfo name for CTraceFilterSkipTwoEntities
 V typeinfo name for CTraceFilterWalkableEntities
 V typeinfo name for CTraceListData
 V typeinfo name for CTracePassFilter
 V typeinfo name for CTriggerBrush
 V typeinfo name for CTriggerCDAudio
 V typeinfo name for CTriggerCamera
 V typeinfo name for CTriggerGravity
 V typeinfo name for CTriggerHurt
 V typeinfo name for CTriggerImpact
 V typeinfo name for CTriggerLook
 V typeinfo name for CTriggerMultiple
 V typeinfo name for CTriggerOnce
 V typeinfo name for CTriggerPlayerMovement
 V typeinfo name for CTriggerProximity
 V typeinfo name for CTriggerPush
 V typeinfo name for CTriggerRemove
 V typeinfo name for CTriggerSave
 V typeinfo name for CTriggerSoundscape
 V typeinfo name for CTriggerTeleport
 V typeinfo name for CTriggerToggleSave
 V typeinfo name for CTriggerTraceEnum
 V typeinfo name for CTriggerVPhysicsMotion
 V typeinfo name for CTriggerVolume
 V typeinfo name for CTriggerWind
 V typeinfo name for CUserCmd
 V typeinfo name for CUtlCachedFileData<CModelSoundCache>
 V typeinfo name for CUtlCachedFileData<CSceneCache>
 V typeinfo name for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 V typeinfo name for CUtlSymbolDataOps
 V typeinfo name for CUtlVectorDataOps<CAI_InterestTarget, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >, 12>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >, 13>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >, 13>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >, 13>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >, 13>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >, 13>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >, 13>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int> >, 5>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >, 10>
 V typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >, 10>
 V typeinfo name for CVGuiScreen
 V typeinfo name for CVariantSaveDataOps
 V typeinfo name for CVehicleSoundsParser
 V typeinfo name for CVoiceGameMgr
 V typeinfo name for CVoiceGameMgrHelper
 V typeinfo name for CWaterBullet
 V typeinfo name for CWaterLODControl
 V typeinfo name for CWaterTraceFilter
 V typeinfo name for CWeaponAWP
 V typeinfo name for CWeaponAug
 V typeinfo name for CWeaponCSBase
 V typeinfo name for CWeaponCSBaseGun
 V typeinfo name for CWeaponCubemap
 V typeinfo name for CWeaponCycler
 V typeinfo name for CWeaponElite
 V typeinfo name for CWeaponFamas
 V typeinfo name for CWeaponFiveSeven
 V typeinfo name for CWeaponG3SG1
 V typeinfo name for CWeaponGalil
 V typeinfo name for CWeaponGlock
 V typeinfo name for CWeaponList
 V typeinfo name for CWeaponM249
 V typeinfo name for CWeaponM3
 V typeinfo name for CWeaponM4A1
 V typeinfo name for CWeaponMAC10
 V typeinfo name for CWeaponMP5Navy
 V typeinfo name for CWeaponP228
 V typeinfo name for CWeaponP90
 V typeinfo name for CWeaponSG550
 V typeinfo name for CWeaponSG552
 V typeinfo name for CWeaponScout
 V typeinfo name for CWeaponTMP
 V typeinfo name for CWeaponUMP45
 V typeinfo name for CWeaponUSP
 V typeinfo name for CWeaponXM1014
 V typeinfo name for CWindowPane
 V typeinfo name for CWorld
 V typeinfo name for CWorldItem
 V typeinfo name for CWreckage
 V typeinfo name for ConCommand
 V typeinfo name for ConCommandBase
 V typeinfo name for ConVar
 V typeinfo name for DefuseBombState
 V typeinfo name for EntityParticleTrailInfo_t
 V typeinfo name for EscapeFromBombState
 V typeinfo name for FetchBombState
 V typeinfo name for FileWeaponInfo_t
 V typeinfo name for FilterDamageType
 V typeinfo name for FilterTeam
 V typeinfo name for FollowState
 V typeinfo name for HideState
 V typeinfo name for HidingSpot
 V typeinfo name for HuntState
 V typeinfo name for IAI_MovementSink
 V typeinfo name for IBaseCacheInfo
 V typeinfo name for IBehaviorBackBridge
 V typeinfo name for IBotController
 V typeinfo name for IBotManager
 V typeinfo name for IBreakableWithPropData
 V typeinfo name for ICSPlayerAnimState
 V typeinfo name for ICSPlayerAnimStateHelpers
 V typeinfo name for IChoreoEventCallback
 V typeinfo name for ICollideable
 V typeinfo name for IConCommandBaseAccessor
 V typeinfo name for IDecalEmitterSystem
 V typeinfo name for IDrivableVehicle
 V typeinfo name for IEffects
 V typeinfo name for IEntityDataInstantiator
 V typeinfo name for IEntityEnumerator
 V typeinfo name for IEntityFactory
 V typeinfo name for IEntityFactoryDictionary
 V typeinfo name for IEntityListener
 V typeinfo name for IEntitySaveUtils
 V typeinfo name for IEventRegisterCallback
 V typeinfo name for IGameEventListener2
 V typeinfo name for IGameMovement
 V typeinfo name for IGameSystem
 V typeinfo name for IHLTVDirector
 V typeinfo name for IHandleEntity
 V typeinfo name for ILagCompensationManager
 V typeinfo name for IMapEntityFilter
 V typeinfo name for IMotionEvent
 V typeinfo name for IMoveHelper
 V typeinfo name for IMoveHelperServer
 V typeinfo name for IMultiplayerPhysics
 V typeinfo name for INearestNodeFilter
 V typeinfo name for INodeListFilter
 V typeinfo name for INotify
 V typeinfo name for IPartitionEnumerator
 V typeinfo name for IPartitionQueryCallback
 V typeinfo name for IPhysSaveRestoreManager
 V typeinfo name for IPhysicsCollisionEvent
 V typeinfo name for IPhysicsCollisionSolver
 V typeinfo name for IPhysicsConstraintEvent
 V typeinfo name for IPhysicsGameTrace
 V typeinfo name for IPhysicsObjectEvent
 V typeinfo name for IPhysicsPlayerControllerEvent
 V typeinfo name for IPlayerAnimState
 V typeinfo name for IPlayerInfo
 V typeinfo name for IPlayerInfoManager
 V typeinfo name for IPlayerPickupVPhysics
 V typeinfo name for IPluginHelpersCheck
 V typeinfo name for IPositionInterpolator
 V typeinfo name for IPositionWatcher
 V typeinfo name for IPredictableList
 V typeinfo name for IPredictionSystem
 V typeinfo name for IRecipientFilter
 V typeinfo name for IResponseFilter
 V typeinfo name for IResponseSystem
 V typeinfo name for IRestore
 V typeinfo name for IRotorWashShooter
 V typeinfo name for ISave
 V typeinfo name for ISaveRestoreBlockHandler
 V typeinfo name for ISaveRestoreBlockSet
 V typeinfo name for ISaveRestoreOps
 V typeinfo name for ISceneTokenProcessor
 V typeinfo name for IScorer
 V typeinfo name for IServerEntity
 V typeinfo name for IServerGameClients
 V typeinfo name for IServerGameDLL
 V typeinfo name for IServerGameEnts
 V typeinfo name for IServerNetworkable
 V typeinfo name for IServerUnknown
 V typeinfo name for IServerVehicle
 V typeinfo name for ITempEntsSystem
 V typeinfo name for ITraceFilter
 V typeinfo name for IVPhysicsKeyHandler
 V typeinfo name for IVehicle
 V typeinfo name for IVoiceGameMgrHelper
 V typeinfo name for IdleState
 V typeinfo name for InvestigateNoiseState
 V typeinfo name for MoveToState
 V typeinfo name for MovieExplosion
 V typeinfo name for OpenDoorState
 V typeinfo name for ParticleSmokeGrenade
 V typeinfo name for PlantBombState
 V typeinfo name for SendProp
 V typeinfo name for UseEntityState
 V typeinfo name for __cxxabiv1::__array_type_info
 V typeinfo name for __cxxabiv1::__enum_type_info
 V typeinfo name for __cxxabiv1::__function_type_info
 V typeinfo name for __cxxabiv1::__fundamental_type_info
 V typeinfo name for __cxxabiv1::__pbase_type_info
 V typeinfo name for __cxxabiv1::__pointer_to_member_type_info
 V typeinfo name for __cxxabiv1::__pointer_type_info
 V typeinfo name for audioparams_t
 V typeinfo name for bool
 V typeinfo name for bool const*
 V typeinfo name for bool*
 V typeinfo name for char
 V typeinfo name for char const*
 V typeinfo name for char*
 V typeinfo name for double
 V typeinfo name for double const*
 V typeinfo name for double*
 V typeinfo name for float
 V typeinfo name for float const*
 V typeinfo name for float*
 V typeinfo name for fogparams_t
 V typeinfo name for int
 V typeinfo name for int const*
 V typeinfo name for int*
 V typeinfo name for locksound_t
 V typeinfo name for long
 V typeinfo name for long const*
 V typeinfo name for long double
 V typeinfo name for long double const*
 V typeinfo name for long double*
 V typeinfo name for long long
 V typeinfo name for long long const*
 V typeinfo name for long long*
 V typeinfo name for long*
 V typeinfo name for short
 V typeinfo name for short const*
 V typeinfo name for short*
 V typeinfo name for signed char
 V typeinfo name for signed char const*
 V typeinfo name for signed char*
 V typeinfo name for sky3dparams_t
 V typeinfo name for sky3dparams_t::NetworkVar_fog
 V typeinfo name for std::domain_error
 V typeinfo name for std::invalid_argument
 V typeinfo name for std::ios_base::failure
 V typeinfo name for std::length_error
 V typeinfo name for std::logic_error
 V typeinfo name for std::out_of_range
 V typeinfo name for std::overflow_error
 V typeinfo name for std::range_error
 V typeinfo name for std::runtime_error
 V typeinfo name for std::underflow_error
 V typeinfo name for unsigned char
 V typeinfo name for unsigned char const*
 V typeinfo name for unsigned char*
 V typeinfo name for unsigned int
 V typeinfo name for unsigned int const*
 V typeinfo name for unsigned int*
 V typeinfo name for unsigned long
 V typeinfo name for unsigned long const*
 V typeinfo name for unsigned long long
 V typeinfo name for unsigned long long const*
 V typeinfo name for unsigned long long*
 V typeinfo name for unsigned long*
 V typeinfo name for unsigned short
 V typeinfo name for unsigned short const*
 V typeinfo name for unsigned short*
 V typeinfo name for vehicle_crashsound_t
 V typeinfo name for vehicle_gear_t
 V typeinfo name for vehiclesounds_t
 V typeinfo name for void
 V typeinfo name for void const*
 V typeinfo name for void*
 V typeinfo name for wchar_t
 V typeinfo name for wchar_t const*
 V typeinfo name for wchar_t*
 V variant_t::Entity() const::hNull
 V vtable for (anonymous namespace)::CPlayerInfoManager_V1
 V vtable for (anonymous namespace)::IPlayerInfoManager_V1
 V vtable for AttackState
 V vtable for BotAllHostagesGoneMeme
 V vtable for BotBombStatusMeme
 V vtable for BotBombsiteStatusMeme
 V vtable for BotDefendHereMeme
 V vtable for BotFollowMeme
 V vtable for BotHeardNoiseMeme
 V vtable for BotHelpMeme
 V vtable for BotHostageBeingTakenMeme
 V vtable for BotMeme
 V vtable for BotRequestReportMeme
 V vtable for BotState
 V vtable for BotWarnSniperMeme
 V vtable for BotWhereBombMeme
 V vtable for BuyState
 V vtable for CAISound
 V vtable for CAI_AllySpeechManager
 V vtable for CAI_AssaultBehavior
 V vtable for CAI_AssaultGoal
 V vtable for CAI_BaseActor
 V vtable for CAI_BaseFlyingBot
 V vtable for CAI_BaseHumanoid
 V vtable for CAI_BaseNPC
 V vtable for CAI_BaseNPCFlyerNew
 V vtable for CAI_BasePhysicsFlyingBot
 V vtable for CAI_BattleLine
 V vtable for CAI_Behavior<CAI_BaseNPC, 100000>
 V vtable for CAI_BehaviorBase
 V vtable for CAI_BehaviorHost<CAI_BaseNPC>
 V vtable for CAI_BlendedMotor
 V vtable for CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >
 V vtable for CAI_ChangeHintGroup
 V vtable for CAI_ChangeTarget
 V vtable for CAI_Component
 V vtable for CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>
 V vtable for CAI_DefMovementSink
 V vtable for CAI_DynamicLink
 V vtable for CAI_DynamicLinkController
 V vtable for CAI_EnemiesListSaveRestoreOps
 V vtable for CAI_Expresser
 V vtable for CAI_ExpresserHost<CAI_BaseHumanoid>
 V vtable for CAI_ExpresserSink
 V vtable for CAI_FollowBehavior
 V vtable for CAI_FollowGoal
 V vtable for CAI_GoalEntity
 V vtable for CAI_Hint
 V vtable for CAI_LeadBehavior
 V vtable for CAI_LeadBehaviorHandler
 V vtable for CAI_LeadGoal
 V vtable for CAI_LeadGoal_Weapon
 V vtable for CAI_LocalNavigator
 V vtable for CAI_LookTarget
 V vtable for CAI_MappedActivityBehavior_Temporary
 V vtable for CAI_Motor
 V vtable for CAI_MoveAndShootOverlay
 V vtable for CAI_MoveProbe
 V vtable for CAI_Navigator
 V vtable for CAI_Network
 V vtable for CAI_NetworkManager
 V vtable for CAI_Pathfinder
 V vtable for CAI_PlayerAlly
 V vtable for CAI_ProxyMovementSink
 V vtable for CAI_RappelBehavior
 V vtable for CAI_SaveRestoreBlockHandler
 V vtable for CAI_ScriptConditions
 V vtable for CAI_ScriptedSchedule
 V vtable for CAI_ScriptedSentence
 V vtable for CAI_ScriptedSequence
 V vtable for CAI_SensedObjectsManager
 V vtable for CAI_Senses
 V vtable for CAI_SentenceBase
 V vtable for CAI_SpeechFilter
 V vtable for CAI_StandoffBehavior
 V vtable for CAI_StandoffGoal
 V vtable for CAI_SystemHook
 V vtable for CAI_TacticalServices
 V vtable for CAI_TestHull
 V vtable for CAI_TrackPather
 V vtable for CAK47
 V vtable for CActivityDataOps
 V vtable for CAimTargetManager
 V vtable for CAmbientGeneric
 V vtable for CAmmoDef
 V vtable for CAnchorList
 V vtable for CAreaPortal
 V vtable for CAssaultPoint
 V vtable for CAutoGameSystem
 V vtable for CBaseAnimating
 V vtable for CBaseAnimatingOverlay
 V vtable for CBaseButton
 V vtable for CBaseCSGrenade
 V vtable for CBaseCSGrenadeProjectile
 V vtable for CBaseCombatCharacter
 V vtable for CBaseCombatWeapon
 V vtable for CBaseDMStart
 V vtable for CBaseDoor
 V vtable for CBaseEntity
 V vtable for CBaseEntity::NetworkVar_m_Collision
 V vtable for CBaseEntityClassList
 V vtable for CBaseEntityList
 V vtable for CBaseFilter
 V vtable for CBaseFire
 V vtable for CBaseFlex
 V vtable for CBaseGameSystem
 V vtable for CBaseGrenade
 V vtable for CBaseMoveBehavior
 V vtable for CBaseParticleEntity
 V vtable for CBasePlatTrain
 V vtable for CBasePlayer
 V vtable for CBasePlayer::NetworkVar_m_Local
 V vtable for CBasePlayer::NetworkVar_pl
 V vtable for CBasePlayerAnimState
 V vtable for CBaseProp
 V vtable for CBasePropDoor
 V vtable for CBaseRopePhysics
 V vtable for CBaseServerVehicle
 V vtable for CBaseTempEntity
 V vtable for CBaseToggle
 V vtable for CBaseTransmitProxy
 V vtable for CBaseTrigger
 V vtable for CBaseVPhysicsTrigger
 V vtable for CBaseViewModel
 V vtable for CBeam
 V vtable for CBitStringSaveRestoreOps<CFixedBitString<32> >
 V vtable for CBlendingCycler
 V vtable for CBlood
 V vtable for CBloodSplat
 V vtable for CBombTarget
 V vtable for CBoneFollower
 V vtable for CBot<CCSPlayer>
 V vtable for CBotBreakableEnumerator
 V vtable for CBotCmd
 V vtable for CBotDoorEnumerator
 V vtable for CBotManager
 V vtable for CBreakModelsPrecached
 V vtable for CBreakParser
 V vtable for CBreakable
 V vtable for CBreakableProp
 V vtable for CBreakableSurface
 V vtable for CBroadcastRecipientFilter
 V vtable for CBubbling
 V vtable for CBuyZone
 V vtable for CC4
 V vtable for CCSAmmoDef
 V vtable for CCSBot
 V vtable for CCSBotManager
 V vtable for CCSBotManager::BombBeepEvent
 V vtable for CCSBotManager::BombDefuseAbortEvent
 V vtable for CCSBotManager::BombDefuseBeginEvent
 V vtable for CCSBotManager::BombDefusedEvent
 V vtable for CCSBotManager::BombExplodedEvent
 V vtable for CCSBotManager::BombPickedUpEvent
 V vtable for CCSBotManager::BombPlantedEvent
 V vtable for CCSBotManager::BreakBreakableEvent
 V vtable for CCSBotManager::BreakPropEvent
 V vtable for CCSBotManager::BulletImpactEvent
 V vtable for CCSBotManager::DoorMovingEvent
 V vtable for CCSBotManager::FlashbangDetonateEvent
 V vtable for CCSBotManager::GrenadeBounceEvent
 V vtable for CCSBotManager::HEGrenadeDetonateEvent
 V vtable for CCSBotManager::HostageFollowsEvent
 V vtable for CCSBotManager::HostageRescuedAllEvent
 V vtable for CCSBotManager::NavBlockedEvent
 V vtable for CCSBotManager::PlayerDeathEvent
 V vtable for CCSBotManager::PlayerFallDamageEvent
 V vtable for CCSBotManager::PlayerFootstepEvent
 V vtable for CCSBotManager::PlayerRadioEvent
 V vtable for CCSBotManager::RoundEndEvent
 V vtable for CCSBotManager::RoundFreezeEndEvent
 V vtable for CCSBotManager::RoundStartEvent
 V vtable for CCSBotManager::ServerShutdownEvent
 V vtable for CCSBotManager::SmokeGrenadeDetonateEvent
 V vtable for CCSBotManager::WeaponFireEvent
 V vtable for CCSBotManager::WeaponFireOnEmptyEvent
 V vtable for CCSBotManager::WeaponReloadEvent
 V vtable for CCSBotManager::WeaponZoomEvent
 V vtable for CCSEventLog
 V vtable for CCSGameMovement
 V vtable for CCSGameRules
 V vtable for CCSGameRules::CleanUpMap()::CCSMapEntityFilter
 V vtable for CCSGameRulesProxy
 V vtable for CCSHLTVDirector
 V vtable for CCSHostageAnimState
 V vtable for CCSMapLoadEntityFilter
 V vtable for CCSPlayer
 V vtable for CCSPlayerAnimState
 V vtable for CCSPlayerMove
 V vtable for CCSPlayerResource
 V vtable for CCSRagdoll
 V vtable for CCSTeam
 V vtable for CCSWeaponInfo
 V vtable for CChangeLevel
 V vtable for CCheckClient
 V vtable for CChoreoEventCallback
 V vtable for CClassPtrSaveRestoreOps
 V vtable for CCleanupDefaultRelationShips
 V vtable for CCollisionEvent
 V vtable for CCollisionProperty
 V vtable for CConceptHistoriesDataOps
 V vtable for CConstantForceController
 V vtable for CConstraintAnchor
 V vtable for CCopyRecipientFilter
 V vtable for CCredits
 V vtable for CCycler
 V vtable for CDEagle
 V vtable for CDataObjectAccessSystem
 V vtable for CDecal
 V vtable for CDecal::StaticDecal()::CTraceFilterValidForDecal
 V vtable for CDecalEmitterSystem
 V vtable for CDefSaveRestoreBlockHandler
 V vtable for CDefSaveRestoreOps
 V vtable for CDefaultPlayerPickupVPhysics
 V vtable for CDefaultResponseSystem
 V vtable for CDefaultResponseSystemSaveRestoreBlockHandler
 V vtable for CDevShotSystem
 V vtable for CDirtySpatialPartitionEntityList
 V vtable for CDynamicLight
 V vtable for CDynamicProp
 V vtable for CEffectsServer
 V vtable for CEmbers
 V vtable for CEnableMotionFixup
 V vtable for CEntityBlocker
 V vtable for CEntityClassList<CPhysicsNPCSolver>
 V vtable for CEntityClassList<CPointCamera>
 V vtable for CEntityClassList<CSkyCamera>
 V vtable for CEntityDataInstantiator<CPositionWatcherList>
 V vtable for CEntityDataInstantiator<ModelWidthScale>
 V vtable for CEntityDataInstantiator<StepSimulationData>
 V vtable for CEntityDataInstantiator<groundlink_t>
 V vtable for CEntityDataInstantiator<physicspushlist_t>
 V vtable for CEntityDataInstantiator<touchlink_t>
 V vtable for CEntityDissolve
 V vtable for CEntityFactory<CAISound>
 V vtable for CEntityFactory<CAI_AllySpeechManager>
 V vtable for CEntityFactory<CAI_AssaultGoal>
 V vtable for CEntityFactory<CAI_BattleLine>
 V vtable for CEntityFactory<CAI_ChangeHintGroup>
 V vtable for CEntityFactory<CAI_ChangeTarget>
 V vtable for CEntityFactory<CAI_DynamicLink>
 V vtable for CEntityFactory<CAI_DynamicLinkController>
 V vtable for CEntityFactory<CAI_FollowGoal>
 V vtable for CEntityFactory<CAI_Hint>
 V vtable for CEntityFactory<CAI_LeadGoal>
 V vtable for CEntityFactory<CAI_LeadGoal_Weapon>
 V vtable for CEntityFactory<CAI_NetworkManager>
 V vtable for CEntityFactory<CAI_ScriptConditions>
 V vtable for CEntityFactory<CAI_ScriptedSchedule>
 V vtable for CEntityFactory<CAI_ScriptedSentence>
 V vtable for CEntityFactory<CAI_ScriptedSequence>
 V vtable for CEntityFactory<CAI_SpeechFilter>
 V vtable for CEntityFactory<CAI_StandoffGoal>
 V vtable for CEntityFactory<CAI_TestHull>
 V vtable for CEntityFactory<CAK47>
 V vtable for CEntityFactory<CAmbientGeneric>
 V vtable for CEntityFactory<CAreaPortal>
 V vtable for CEntityFactory<CAssaultPoint>
 V vtable for CEntityFactory<CBaseButton>
 V vtable for CEntityFactory<CBaseCSGrenade>
 V vtable for CEntityFactory<CBaseDMStart>
 V vtable for CEntityFactory<CBaseDoor>
 V vtable for CEntityFactory<CBaseFilter>
 V vtable for CEntityFactory<CBaseFlex>
 V vtable for CEntityFactory<CBaseGrenade>
 V vtable for CEntityFactory<CBaseMoveBehavior>
 V vtable for CEntityFactory<CBaseTrigger>
 V vtable for CEntityFactory<CBaseViewModel>
 V vtable for CEntityFactory<CBeam>
 V vtable for CEntityFactory<CBlendingCycler>
 V vtable for CEntityFactory<CBlood>
 V vtable for CEntityFactory<CBombTarget>
 V vtable for CEntityFactory<CBoneFollower>
 V vtable for CEntityFactory<CBreakable>
 V vtable for CEntityFactory<CBreakableSurface>
 V vtable for CEntityFactory<CBubbling>
 V vtable for CEntityFactory<CBuyZone>
 V vtable for CEntityFactory<CC4>
 V vtable for CEntityFactory<CCSBot>
 V vtable for CEntityFactory<CCSGameRulesProxy>
 V vtable for CEntityFactory<CCSPlayer>
 V vtable for CEntityFactory<CCSPlayerResource>
 V vtable for CEntityFactory<CCSRagdoll>
 V vtable for CEntityFactory<CCSTeam>
 V vtable for CEntityFactory<CChangeLevel>
 V vtable for CEntityFactory<CConstraintAnchor>
 V vtable for CEntityFactory<CCredits>
 V vtable for CEntityFactory<CDEagle>
 V vtable for CEntityFactory<CDecal>
 V vtable for CEntityFactory<CDynamicLight>
 V vtable for CEntityFactory<CDynamicProp>
 V vtable for CEntityFactory<CEmbers>
 V vtable for CEntityFactory<CEnableMotionFixup>
 V vtable for CEntityFactory<CEntityBlocker>
 V vtable for CEntityFactory<CEntityDissolve>
 V vtable for CEntityFactory<CEntityFlame>
 V vtable for CEntityFactory<CEntityParticleTrail>
 V vtable for CEntityFactory<CEnvBeam>
 V vtable for CEntityFactory<CEnvBeverage>
 V vtable for CEntityFactory<CEnvDetailController>
 V vtable for CEntityFactory<CEnvDustPuff>
 V vtable for CEntityFactory<CEnvEffectsScript>
 V vtable for CEntityFactory<CEnvEntityMaker>
 V vtable for CEntityFactory<CEnvExplosion>
 V vtable for CEntityFactory<CEnvFade>
 V vtable for CEntityFactory<CEnvFireSensor>
 V vtable for CEntityFactory<CEnvFireSource>
 V vtable for CEntityFactory<CEnvFunnel>
 V vtable for CEntityFactory<CEnvGlobal>
 V vtable for CEntityFactory<CEnvGunfire>
 V vtable for CEntityFactory<CEnvHudHint>
 V vtable for CEntityFactory<CEnvLaser>
 V vtable for CEntityFactory<CEnvLight>
 V vtable for CEntityFactory<CEnvMicrophone>
 V vtable for CEntityFactory<CEnvMuzzleFlash>
 V vtable for CEntityFactory<CEnvParticleScript>
 V vtable for CEntityFactory<CEnvPlayerSurfaceTrigger>
 V vtable for CEntityFactory<CEnvQuadraticBeam>
 V vtable for CEntityFactory<CEnvScreenOverlay>
 V vtable for CEntityFactory<CEnvShake>
 V vtable for CEntityFactory<CEnvShooter>
 V vtable for CEntityFactory<CEnvSoundscape>
 V vtable for CEntityFactory<CEnvSoundscapeProxy>
 V vtable for CEntityFactory<CEnvSoundscapeTriggerable>
 V vtable for CEntityFactory<CEnvSpark>
 V vtable for CEntityFactory<CEnvSplash>
 V vtable for CEntityFactory<CEnvTracer>
 V vtable for CEntityFactory<CEnvWind>
 V vtable for CEntityFactory<CEnvZoom>
 V vtable for CEntityFactory<CEventQueueSaveLoadProxy>
 V vtable for CEntityFactory<CFilterClass>
 V vtable for CEntityFactory<CFilterMultiple>
 V vtable for CEntityFactory<CFilterName>
 V vtable for CEntityFactory<CFire>
 V vtable for CEntityFactory<CFireSmoke>
 V vtable for CEntityFactory<CFish>
 V vtable for CEntityFactory<CFishPool>
 V vtable for CEntityFactory<CFlashbang>
 V vtable for CEntityFactory<CFlashbangProjectile>
 V vtable for CEntityFactory<CFlextalkActor>
 V vtable for CEntityFactory<CFogController>
 V vtable for CEntityFactory<CFuncAreaPortalWindow>
 V vtable for CEntityFactory<CFuncBrush>
 V vtable for CEntityFactory<CFuncConveyor>
 V vtable for CEntityFactory<CFuncIllusionary>
 V vtable for CEntityFactory<CFuncLadder>
 V vtable for CEntityFactory<CFuncLadderEndPoint>
 V vtable for CEntityFactory<CFuncMonitor>
 V vtable for CEntityFactory<CFuncMoveLinear>
 V vtable for CEntityFactory<CFuncOccluder>
 V vtable for CEntityFactory<CFuncPlat>
 V vtable for CEntityFactory<CFuncPlatRot>
 V vtable for CEntityFactory<CFuncRotating>
 V vtable for CEntityFactory<CFuncSmokeVolume>
 V vtable for CEntityFactory<CFuncTankTrain>
 V vtable for CEntityFactory<CFuncTrackAuto>
 V vtable for CEntityFactory<CFuncTrackChange>
 V vtable for CEntityFactory<CFuncTrackTrain>
 V vtable for CEntityFactory<CFuncTrain>
 V vtable for CEntityFactory<CFuncTrainControls>
 V vtable for CEntityFactory<CFuncVPhysicsClip>
 V vtable for CEntityFactory<CFuncVehicleClip>
 V vtable for CEntityFactory<CFuncWall>
 V vtable for CEntityFactory<CFuncWallToggle>
 V vtable for CEntityFactory<CFunc_DustCloud>
 V vtable for CEntityFactory<CFunc_DustMotes>
 V vtable for CEntityFactory<CFunc_LOD>
 V vtable for CEntityFactory<CGameEnd>
 V vtable for CEntityFactory<CGamePlayerEquip>
 V vtable for CEntityFactory<CGamePlayerTeam>
 V vtable for CEntityFactory<CGamePlayerZone>
 V vtable for CEntityFactory<CGameScore>
 V vtable for CEntityFactory<CGameText>
 V vtable for CEntityFactory<CGameUI>
 V vtable for CEntityFactory<CGameWeaponManager>
 V vtable for CEntityFactory<CGenericActor>
 V vtable for CEntityFactory<CGenericCycler>
 V vtable for CEntityFactory<CGenericFlexCycler>
 V vtable for CEntityFactory<CGenericNPC>
 V vtable for CEntityFactory<CGib>
 V vtable for CEntityFactory<CGibShooter>
 V vtable for CEntityFactory<CGunTarget>
 V vtable for CEntityFactory<CHEGrenade>
 V vtable for CEntityFactory<CHEGrenadeProjectile>
 V vtable for CEntityFactory<CHandleDummy>
 V vtable for CEntityFactory<CHandleTest>
 V vtable for CEntityFactory<CHostage>
 V vtable for CEntityFactory<CHostageRescueZone>
 V vtable for CEntityFactory<CInfoCameraLink>
 V vtable for CEntityFactory<CInfoIntermission>
 V vtable for CEntityFactory<CInfoLadder>
 V vtable for CEntityFactory<CInfoLadderDismount>
 V vtable for CEntityFactory<CInfoLightingRelative>
 V vtable for CEntityFactory<CInfoMassCenter>
 V vtable for CEntityFactory<CInfoViewParameters>
 V vtable for CEntityFactory<CInstancedSceneEntity>
 V vtable for CEntityFactory<CItemAmmo338MAG>
 V vtable for CEntityFactory<CItemAmmo357SIG>
 V vtable for CEntityFactory<CItemAmmo45ACP>
 V vtable for CEntityFactory<CItemAmmo50AE>
 V vtable for CEntityFactory<CItemAmmo556MM>
 V vtable for CEntityFactory<CItemAmmo556MM_BOX>
 V vtable for CEntityFactory<CItemAmmo57MM>
 V vtable for CEntityFactory<CItemAmmo762MM>
 V vtable for CEntityFactory<CItemAmmo9MM>
 V vtable for CEntityFactory<CItemAmmoBuckshot>
 V vtable for CEntityFactory<CItemAssaultSuit>
 V vtable for CEntityFactory<CItemDefuser>
 V vtable for CEntityFactory<CItemKevlar>
 V vtable for CEntityFactory<CItemNvgs>
 V vtable for CEntityFactory<CItemSoda>
 V vtable for CEntityFactory<CKeepUpright>
 V vtable for CEntityFactory<CKnife>
 V vtable for CEntityFactory<CLight>
 V vtable for CEntityFactory<CLightGlow>
 V vtable for CEntityFactory<CLogicAuto>
 V vtable for CEntityFactory<CLogicAutosave>
 V vtable for CEntityFactory<CLogicBranch>
 V vtable for CEntityFactory<CLogicCase>
 V vtable for CEntityFactory<CLogicCollisionPair>
 V vtable for CEntityFactory<CLogicCompare>
 V vtable for CEntityFactory<CLogicCompareInteger>
 V vtable for CEntityFactory<CLogicLineToEntity>
 V vtable for CEntityFactory<CLogicMeasureMovement>
 V vtable for CEntityFactory<CLogicNavigation>
 V vtable for CEntityFactory<CLogicRelay>
 V vtable for CEntityFactory<CMapInfo>
 V vtable for CEntityFactory<CMaterialModifyControl>
 V vtable for CEntityFactory<CMathColorBlend>
 V vtable for CEntityFactory<CMathCounter>
 V vtable for CEntityFactory<CMathRemap>
 V vtable for CEntityFactory<CMessage>
 V vtable for CEntityFactory<CMessageEntity>
 V vtable for CEntityFactory<CMomentaryRotButton>
 V vtable for CEntityFactory<CMovementSpeedMod>
 V vtable for CEntityFactory<CMultiSource>
 V vtable for CEntityFactory<CNPC_Furniture>
 V vtable for CEntityFactory<CNPC_VehicleDriver>
 V vtable for CEntityFactory<CNodeEnt>
 V vtable for CEntityFactory<CNullEntity>
 V vtable for CEntityFactory<COrnamentProp>
 V vtable for CEntityFactory<CParticleFire>
 V vtable for CEntityFactory<CParticleLight>
 V vtable for CEntityFactory<CPathCorner>
 V vtable for CEntityFactory<CPathCornerCrash>
 V vtable for CEntityFactory<CPathKeyFrame>
 V vtable for CEntityFactory<CPathTrack>
 V vtable for CEntityFactory<CPhysBallSocket>
 V vtable for CEntityFactory<CPhysBox>
 V vtable for CEntityFactory<CPhysBoxMultiplayer>
 V vtable for CEntityFactory<CPhysConstraintSystem>
 V vtable for CEntityFactory<CPhysConvert>
 V vtable for CEntityFactory<CPhysExplosion>
 V vtable for CEntityFactory<CPhysFixed>
 V vtable for CEntityFactory<CPhysHinge>
 V vtable for CEntityFactory<CPhysImpact>
 V vtable for CEntityFactory<CPhysLength>
 V vtable for CEntityFactory<CPhysMagnet>
 V vtable for CEntityFactory<CPhysMotor>
 V vtable for CEntityFactory<CPhysPulley>
 V vtable for CEntityFactory<CPhysSlideConstraint>
 V vtable for CEntityFactory<CPhysSphere>
 V vtable for CEntityFactory<CPhysThruster>
 V vtable for CEntityFactory<CPhysTorque>
 V vtable for CEntityFactory<CPhysicsCannister>
 V vtable for CEntityFactory<CPhysicsEntitySolver>
 V vtable for CEntityFactory<CPhysicsNPCSolver>
 V vtable for CEntityFactory<CPhysicsProp>
 V vtable for CEntityFactory<CPhysicsPropMultiplayer>
 V vtable for CEntityFactory<CPhysicsPropRespawnable>
 V vtable for CEntityFactory<CPhysicsSpring>
 V vtable for CEntityFactory<CPhysicsWire>
 V vtable for CEntityFactory<CPlantedC4>
 V vtable for CEntityFactory<CPlasma>
 V vtable for CEntityFactory<CPlayerResource>
 V vtable for CEntityFactory<CPointAngleSensor>
 V vtable for CEntityFactory<CPointAngularVelocitySensor>
 V vtable for CEntityFactory<CPointCamera>
 V vtable for CEntityFactory<CPointClientCommand>
 V vtable for CEntityFactory<CPointDevShotCamera>
 V vtable for CEntityFactory<CPointEntity>
 V vtable for CEntityFactory<CPointHurt>
 V vtable for CEntityFactory<CPointPlayerMoveConstraint>
 V vtable for CEntityFactory<CPointServerCommand>
 V vtable for CEntityFactory<CPointSpotlight>
 V vtable for CEntityFactory<CPointTeleport>
 V vtable for CEntityFactory<CPointTemplate>
 V vtable for CEntityFactory<CPrecipitation>
 V vtable for CEntityFactory<CPredictedViewModel>
 V vtable for CEntityFactory<CProjectedDecal>
 V vtable for CEntityFactory<CPropDoorRotating>
 V vtable for CEntityFactory<CPropVehicle>
 V vtable for CEntityFactory<CPropVehicleDriveable>
 V vtable for CEntityFactory<CPushable>
 V vtable for CEntityFactory<CRagGib>
 V vtable for CEntityFactory<CRagdollBoogie>
 V vtable for CEntityFactory<CRagdollConstraint>
 V vtable for CEntityFactory<CRagdollMagnet>
 V vtable for CEntityFactory<CRagdollManager>
 V vtable for CEntityFactory<CRagdollProp>
 V vtable for CEntityFactory<CRagdollPropAttached>
 V vtable for CEntityFactory<CRallyPoint>
 V vtable for CEntityFactory<CRevertSaved>
 V vtable for CEntityFactory<CRopeAnchor>
 V vtable for CEntityFactory<CRopeKeyframe>
 V vtable for CEntityFactory<CRotButton>
 V vtable for CEntityFactory<CRotDoor>
 V vtable for CEntityFactory<CRotorWashShooter>
 V vtable for CEntityFactory<CSceneEntity>
 V vtable for CEntityFactory<CSceneManager>
 V vtable for CEntityFactory<CScriptedTarget>
 V vtable for CEntityFactory<CShadowControl>
 V vtable for CEntityFactory<CShower>
 V vtable for CEntityFactory<CSimplePhysicsBrush>
 V vtable for CEntityFactory<CSimplePhysicsProp>
 V vtable for CEntityFactory<CSkyCamera>
 V vtable for CEntityFactory<CSmokeGrenade>
 V vtable for CEntityFactory<CSmokeGrenadeProjectile>
 V vtable for CEntityFactory<CSmokeStack>
 V vtable for CEntityFactory<CSoundEnt>
 V vtable for CEntityFactory<CSpotlightEnd>
 V vtable for CEntityFactory<CSprayCan>
 V vtable for CEntityFactory<CSprite>
 V vtable for CEntityFactory<CSpriteTrail>
 V vtable for CEntityFactory<CSteamJet>
 V vtable for CEntityFactory<CStripWeapons>
 V vtable for CEntityFactory<CSun>
 V vtable for CEntityFactory<CSurroundTest>
 V vtable for CEntityFactory<CTankTargetChange>
 V vtable for CEntityFactory<CTankTrainAI>
 V vtable for CEntityFactory<CTargetCDAudioRep>
 V vtable for CEntityFactory<CTargetChangeGravity>
 V vtable for CEntityFactory<CTeam>
 V vtable for CEntityFactory<CTeamSpawnPoint>
 V vtable for CEntityFactory<CTeamVehicleSpawnPoint>
 V vtable for CEntityFactory<CTempEntTester>
 V vtable for CEntityFactory<CTerrainMorph>
 V vtable for CEntityFactory<CTesla>
 V vtable for CEntityFactory<CTestEffect>
 V vtable for CEntityFactory<CTestTraceline>
 V vtable for CEntityFactory<CTest_ProxyToggle_Networkable>
 V vtable for CEntityFactory<CTextureToggle>
 V vtable for CEntityFactory<CTimerEntity>
 V vtable for CEntityFactory<CTriggerBrush>
 V vtable for CEntityFactory<CTriggerCDAudio>
 V vtable for CEntityFactory<CTriggerCamera>
 V vtable for CEntityFactory<CTriggerGravity>
 V vtable for CEntityFactory<CTriggerHurt>
 V vtable for CEntityFactory<CTriggerImpact>
 V vtable for CEntityFactory<CTriggerLook>
 V vtable for CEntityFactory<CTriggerMultiple>
 V vtable for CEntityFactory<CTriggerOnce>
 V vtable for CEntityFactory<CTriggerPlayerMovement>
 V vtable for CEntityFactory<CTriggerProximity>
 V vtable for CEntityFactory<CTriggerPush>
 V vtable for CEntityFactory<CTriggerRemove>
 V vtable for CEntityFactory<CTriggerSave>
 V vtable for CEntityFactory<CTriggerSoundscape>
 V vtable for CEntityFactory<CTriggerTeleport>
 V vtable for CEntityFactory<CTriggerToggleSave>
 V vtable for CEntityFactory<CTriggerVPhysicsMotion>
 V vtable for CEntityFactory<CTriggerVolume>
 V vtable for CEntityFactory<CTriggerWind>
 V vtable for CEntityFactory<CVGuiScreen>
 V vtable for CEntityFactory<CWaterBullet>
 V vtable for CEntityFactory<CWaterLODControl>
 V vtable for CEntityFactory<CWeaponAWP>
 V vtable for CEntityFactory<CWeaponAug>
 V vtable for CEntityFactory<CWeaponCSBase>
 V vtable for CEntityFactory<CWeaponCSBaseGun>
 V vtable for CEntityFactory<CWeaponCubemap>
 V vtable for CEntityFactory<CWeaponCycler>
 V vtable for CEntityFactory<CWeaponElite>
 V vtable for CEntityFactory<CWeaponFamas>
 V vtable for CEntityFactory<CWeaponFiveSeven>
 V vtable for CEntityFactory<CWeaponG3SG1>
 V vtable for CEntityFactory<CWeaponGalil>
 V vtable for CEntityFactory<CWeaponGlock>
 V vtable for CEntityFactory<CWeaponM249>
 V vtable for CEntityFactory<CWeaponM3>
 V vtable for CEntityFactory<CWeaponM4A1>
 V vtable for CEntityFactory<CWeaponMAC10>
 V vtable for CEntityFactory<CWeaponMP5Navy>
 V vtable for CEntityFactory<CWeaponP228>
 V vtable for CEntityFactory<CWeaponP90>
 V vtable for CEntityFactory<CWeaponSG550>
 V vtable for CEntityFactory<CWeaponSG552>
 V vtable for CEntityFactory<CWeaponScout>
 V vtable for CEntityFactory<CWeaponTMP>
 V vtable for CEntityFactory<CWeaponUMP45>
 V vtable for CEntityFactory<CWeaponUSP>
 V vtable for CEntityFactory<CWeaponXM1014>
 V vtable for CEntityFactory<CWindowPane>
 V vtable for CEntityFactory<CWorld>
 V vtable for CEntityFactory<CWorldItem>
 V vtable for CEntityFactory<CWreckage>
 V vtable for CEntityFactory<FilterDamageType>
 V vtable for CEntityFactory<FilterTeam>
 V vtable for CEntityFactory<MovieExplosion>
 V vtable for CEntityFactory<ParticleSmokeGrenade>
 V vtable for CEntityFactoryDictionary
 V vtable for CEntityFlame
 V vtable for CEntityListSystem
 V vtable for CEntityParticleTrail
 V vtable for CEntityParticleTrail::NetworkVar_m_Info
 V vtable for CEntitySaveRestoreBlockHandler
 V vtable for CEntitySaveUtils
 V vtable for CEntityTouchManager
 V vtable for CEnvBeam
 V vtable for CEnvBeverage
 V vtable for CEnvDetailController
 V vtable for CEnvDustPuff
 V vtable for CEnvEffectsScript
 V vtable for CEnvEntityMaker
 V vtable for CEnvExplosion
 V vtable for CEnvFade
 V vtable for CEnvFireSensor
 V vtable for CEnvFireSource
 V vtable for CEnvFunnel
 V vtable for CEnvGlobal
 V vtable for CEnvGunfire
 V vtable for CEnvHudHint
 V vtable for CEnvLaser
 V vtable for CEnvLight
 V vtable for CEnvMicrophone
 V vtable for CEnvMuzzleFlash
 V vtable for CEnvParticleScript
 V vtable for CEnvPlayerSurfaceTrigger
 V vtable for CEnvQuadraticBeam
 V vtable for CEnvScreenOverlay
 V vtable for CEnvShake
 V vtable for CEnvShooter
 V vtable for CEnvSoundscape
 V vtable for CEnvSoundscapeProxy
 V vtable for CEnvSoundscapeTriggerable
 V vtable for CEnvSpark
 V vtable for CEnvSplash
 V vtable for CEnvTracer
 V vtable for CEnvWind
 V vtable for CEnvWind::NetworkVar_m_EnvWindShared
 V vtable for CEnvWindShared
 V vtable for CEnvZoom
 V vtable for CEventLog
 V vtable for CEventQueueSaveLoadProxy
 V vtable for CEventsSaveDataOps
 V vtable for CFilterClass
 V vtable for CFilterMultiple
 V vtable for CFilterName
 V vtable for CFire
 V vtable for CFireSmoke
 V vtable for CFireSphere
 V vtable for CFish
 V vtable for CFishPool
 V vtable for CFlaggedEntitiesEnum
 V vtable for CFlashbang
 V vtable for CFlashbangProjectile
 V vtable for CFlexAnimationTrack
 V vtable for CFlexCycler
 V vtable for CFlexSceneFileManager
 V vtable for CFlextalkActor
 V vtable for CFogController
 V vtable for CFourWheelServerVehicle
 V vtable for CFourWheelVehiclePhysics
 V vtable for CFuncAreaPortalBase
 V vtable for CFuncAreaPortalWindow
 V vtable for CFuncBrush
 V vtable for CFuncConveyor
 V vtable for CFuncIllusionary
 V vtable for CFuncLadder
 V vtable for CFuncLadderEndPoint
 V vtable for CFuncMonitor
 V vtable for CFuncMoveLinear
 V vtable for CFuncOccluder
 V vtable for CFuncPlat
 V vtable for CFuncPlatRot
 V vtable for CFuncRotating
 V vtable for CFuncSmokeVolume
 V vtable for CFuncTankTrain
 V vtable for CFuncTrackAuto
 V vtable for CFuncTrackChange
 V vtable for CFuncTrackTrain
 V vtable for CFuncTrain
 V vtable for CFuncTrainControls
 V vtable for CFuncVPhysicsClip
 V vtable for CFuncVehicleClip
 V vtable for CFuncWall
 V vtable for CFuncWallToggle
 V vtable for CFunc_Dust
 V vtable for CFunc_DustCloud
 V vtable for CFunc_DustMotes
 V vtable for CFunc_LOD
 V vtable for CGameDLL_ConVarAccessor
 V vtable for CGameEnd
 V vtable for CGameMovement
 V vtable for CGamePlayerEquip
 V vtable for CGamePlayerTeam
 V vtable for CGamePlayerZone
 V vtable for CGameRules
 V vtable for CGameRulesProxy
 V vtable for CGameScore
 V vtable for CGameStringPool
 V vtable for CGameText
 V vtable for CGameUI
 V vtable for CGameWeaponManager
 V vtable for CGenericActor
 V vtable for CGenericCycler
 V vtable for CGenericFlexCycler
 V vtable for CGenericNPC
 V vtable for CGib
 V vtable for CGibShooter
 V vtable for CGlobalEntityList
 V vtable for CGlobalState
 V vtable for CGunTarget
 V vtable for CHEGrenade
 V vtable for CHEGrenadeProjectile
 V vtable for CHLTVDirector
 V vtable for CHandleDummy
 V vtable for CHandleTest
 V vtable for CHangRope
 V vtable for CHostage
 V vtable for CHostageRescueZone
 V vtable for CIKSaveRestoreOps
 V vtable for CImprovLocomotor
 V vtable for CInfoCameraLink
 V vtable for CInfoIntermission
 V vtable for CInfoLadder
 V vtable for CInfoLadderDismount
 V vtable for CInfoLightingRelative
 V vtable for CInfoMassCenter
 V vtable for CInfoViewParameters
 V vtable for CInstancedResponseSystem
 V vtable for CInstancedSceneEntity
 V vtable for CInstancedSceneResourceManager
 V vtable for CItem
 V vtable for CItemAmmo
 V vtable for CItemAmmo338MAG
 V vtable for CItemAmmo357SIG
 V vtable for CItemAmmo45ACP
 V vtable for CItemAmmo50AE
 V vtable for CItemAmmo556MM
 V vtable for CItemAmmo556MM_BOX
 V vtable for CItemAmmo57MM
 V vtable for CItemAmmo762MM
 V vtable for CItemAmmo9MM
 V vtable for CItemAmmoBuckshot
 V vtable for CItemAssaultSuit
 V vtable for CItemDefuser
 V vtable for CItemKevlar
 V vtable for CItemNvgs
 V vtable for CItemSoda
 V vtable for CJeepFourWheelServerVehicle
 V vtable for CKeepUpright
 V vtable for CKnife
 V vtable for CLagCompensationManager
 V vtable for CLight
 V vtable for CLightGlow
 V vtable for CLogicAuto
 V vtable for CLogicAutosave
 V vtable for CLogicBranch
 V vtable for CLogicCase
 V vtable for CLogicCollisionPair
 V vtable for CLogicCompare
 V vtable for CLogicCompareInteger
 V vtable for CLogicLineToEntity
 V vtable for CLogicMeasureMovement
 V vtable for CLogicNavigation
 V vtable for CLogicRelay
 V vtable for CLogicalEntity
 V vtable for CMapInfo
 V vtable for CMaterialModifyControl
 V vtable for CMathColorBlend
 V vtable for CMathCounter
 V vtable for CMathRemap
 V vtable for CMessage
 V vtable for CMessageEntity
 V vtable for CModelSoundCache
 V vtable for CMomentaryRotButton
 V vtable for CMotorController
 V vtable for CMoveHelperServer
 V vtable for CMovementSpeedMod
 V vtable for CMultiSource
 V vtable for CMultiplayRules
 V vtable for CNPC_Furniture
 V vtable for CNPC_VehicleDriver
 V vtable for CNavMesh
 V vtable for CNodeEnt
 V vtable for CNodeFilter
 V vtable for CNotifyList
 V vtable for CNullEntity
 V vtable for COrnamentProp
 V vtable for CPASAttenuationFilter
 V vtable for CPASFilter
 V vtable for CPVSFilter
 V vtable for CParticleFire
 V vtable for CParticleLight
 V vtable for CPathCorner
 V vtable for CPathCornerCrash
 V vtable for CPathKeyFrame
 V vtable for CPathTrack
 V vtable for CPathfindNearestNodeFilter
 V vtable for CPhysBallSocket
 V vtable for CPhysBox
 V vtable for CPhysBoxMultiplayer
 V vtable for CPhysConstraint
 V vtable for CPhysConstraintEvents
 V vtable for CPhysConstraintSystem
 V vtable for CPhysConvert
 V vtable for CPhysExplosion
 V vtable for CPhysFixed
 V vtable for CPhysForce
 V vtable for CPhysHinge
 V vtable for CPhysImpact
 V vtable for CPhysLength
 V vtable for CPhysMagnet
 V vtable for CPhysMotor
 V vtable for CPhysObjSaveRestoreOps
 V vtable for CPhysPulley
 V vtable for CPhysSaveRestoreBlockHandler
 V vtable for CPhysSlideConstraint
 V vtable for CPhysSphere
 V vtable for CPhysThruster
 V vtable for CPhysTorque
 V vtable for CPhysicsCannister
 V vtable for CPhysicsEntitySolver
 V vtable for CPhysicsGameTrace
 V vtable for CPhysicsHook
 V vtable for CPhysicsNPCSolver
 V vtable for CPhysicsPlayerCallback
 V vtable for CPhysicsProp
 V vtable for CPhysicsPropMultiplayer
 V vtable for CPhysicsPropRespawnable
 V vtable for CPhysicsShake
 V vtable for CPhysicsSpring
 V vtable for CPhysicsWind
 V vtable for CPhysicsWire
 V vtable for CPlantedC4
 V vtable for CPlasma
 V vtable for CPlatTrigger
 V vtable for CPlayerInfo
 V vtable for CPlayerInfoManager
 V vtable for CPlayerLocalData
 V vtable for CPlayerLocalData::NetworkVar_m_audio
 V vtable for CPlayerLocalData::NetworkVar_m_fog
 V vtable for CPlayerLocalData::NetworkVar_m_skybox3d
 V vtable for CPlayerMove
 V vtable for CPlayerResource
 V vtable for CPlayerState
 V vtable for CPluginBotManager
 V vtable for CPluginHelpersCheck
 V vtable for CPointAngleSensor
 V vtable for CPointAngularVelocitySensor
 V vtable for CPointCamera
 V vtable for CPointClientCommand
 V vtable for CPointDevShotCamera
 V vtable for CPointEntity
 V vtable for CPointHurt
 V vtable for CPointPlayerMoveConstraint
 V vtable for CPointServerCommand
 V vtable for CPointSpotlight
 V vtable for CPointTeleport
 V vtable for CPointTemplate
 V vtable for CPointTemplatePrecacher
 V vtable for CPositionInterpolator_CatmullRom
 V vtable for CPositionInterpolator_Linear
 V vtable for CPositionInterpolator_Rope
 V vtable for CPrecacheOtherList
 V vtable for CPrecipitation
 V vtable for CPredictableList
 V vtable for CPredictedViewModel
 V vtable for CProjectedDecal
 V vtable for CPropData
 V vtable for CPropDoorRotating
 V vtable for CPropJeep
 V vtable for CPropVehicle
 V vtable for CPropVehicleDriveable
 V vtable for CPushAwayEnumerator
 V vtable for CPushBlockerEnum
 V vtable for CPushable
 V vtable for CRagGib
 V vtable for CRagdollAnimatedFriction
 V vtable for CRagdollBoogie
 V vtable for CRagdollCollisionRules
 V vtable for CRagdollConstraint
 V vtable for CRagdollLRURetirement
 V vtable for CRagdollMagnet
 V vtable for CRagdollManager
 V vtable for CRagdollProp
 V vtable for CRagdollPropAttached
 V vtable for CRallyPoint
 V vtable for CRecipientFilter
 V vtable for CReliableBroadcastRecipientFilter
 V vtable for CResourceLRUBase
 V vtable for CResourceManager<CBoneCache, bonecacheparams_t, CBoneCache*>
 V vtable for CResourceManager<SceneData_t, scenedataparams_t, SceneData_t*>
 V vtable for CResponseSystem
 V vtable for CResponseSystemSaveRestoreOps
 V vtable for CRestore
 V vtable for CRevertSaved
 V vtable for CRopeAnchor
 V vtable for CRopeDelegate
 V vtable for CRopeKeyframe
 V vtable for CRopePhysics<10>
 V vtable for CRopePhysics<512>
 V vtable for CRotButton
 V vtable for CRotDoor
 V vtable for CRotorWashShooter
 V vtable for CRuleBrushEntity
 V vtable for CRuleEntity
 V vtable for CRulePointEntity
 V vtable for CSave
 V vtable for CSaveRestoreBlockSet
 V vtable for CSceneCache
 V vtable for CSceneEntity
 V vtable for CSceneManager
 V vtable for CSceneTokenProcessor
 V vtable for CScriptedTarget
 V vtable for CServerGameClients
 V vtable for CServerGameDLL
 V vtable for CServerGameEnts
 V vtable for CServerNetworkProperty
 V vtable for CServerOnlyEntity
 V vtable for CServerOnlyPointEntity
 V vtable for CShadowControl
 V vtable for CShower
 V vtable for CSimThinkManager
 V vtable for CSimplePhysics::IHelper
 V vtable for CSimplePhysicsBrush
 V vtable for CSimplePhysicsProp
 V vtable for CSingleUserRecipientFilter
 V vtable for CSingleplayRules
 V vtable for CSkipKeys
 V vtable for CSkyCamera
 V vtable for CSmokeGrenade
 V vtable for CSmokeGrenadeProjectile
 V vtable for CSmokeStack
 V vtable for CSolidSetDefaults
 V vtable for CSoundControllerImp
 V vtable for CSoundEmitterSystem
 V vtable for CSoundEnt
 V vtable for CSoundEnvelopeController
 V vtable for CSoundPatchSaveRestoreOps
 V vtable for CSoundscapeSystem
 V vtable for CSpotlightEnd
 V vtable for CSprayCan
 V vtable for CSprite
 V vtable for CSpriteTrail
 V vtable for CStdStringSaveRestoreOps
 V vtable for CSteamJet
 V vtable for CStringTableSaveRestoreOps
 V vtable for CStripWeapons
 V vtable for CSun
 V vtable for CSurroundTest
 V vtable for CTEArmorRicochet
 V vtable for CTEBSPDecal
 V vtable for CTEBaseBeam
 V vtable for CTEBeamEntPoint
 V vtable for CTEBeamEnts
 V vtable for CTEBeamFollow
 V vtable for CTEBeamLaser
 V vtable for CTEBeamPoints
 V vtable for CTEBeamRing
 V vtable for CTEBeamRingPoint
 V vtable for CTEBeamSpline
 V vtable for CTEBloodSprite
 V vtable for CTEBloodStream
 V vtable for CTEBreakModel
 V vtable for CTEBubbleTrail
 V vtable for CTEBubbles
 V vtable for CTEDecal
 V vtable for CTEDust
 V vtable for CTEDynamicLight
 V vtable for CTEEffectDispatch
 V vtable for CTEEnergySplash
 V vtable for CTEExplosion
 V vtable for CTEFireBullets
 V vtable for CTEFizz
 V vtable for CTEFootprintDecal
 V vtable for CTEGaussExplosion
 V vtable for CTEGlowSprite
 V vtable for CTEImpact
 V vtable for CTEKillPlayerAttachments
 V vtable for CTELargeFunnel
 V vtable for CTEMetalSparks
 V vtable for CTEMuzzleFlash
 V vtable for CTEParticleSystem
 V vtable for CTEPhysicsProp
 V vtable for CTEPlantBomb
 V vtable for CTEPlayerAnimEvent
 V vtable for CTEPlayerDecal
 V vtable for CTEProjectedDecal
 V vtable for CTERadioIcon
 V vtable for CTEShatterSurface
 V vtable for CTEShowLine
 V vtable for CTESmoke
 V vtable for CTESparks
 V vtable for CTESprite
 V vtable for CTESpriteSpray
 V vtable for CTEWorldDecal
 V vtable for CTankTargetChange
 V vtable for CTankTrainAI
 V vtable for CTargetCDAudioRep
 V vtable for CTargetChangeGravity
 V vtable for CTeam
 V vtable for CTeamRecipientFilter
 V vtable for CTeamSpawnPoint
 V vtable for CTeamVehicleSpawnPoint
 V vtable for CTeamplayRules
 V vtable for CTempEntTester
 V vtable for CTempEntsSystem
 V vtable for CTemplate_SaveRestoreBlockHandler
 V vtable for CTemplatesHook
 V vtable for CTerrainMorph
 V vtable for CTesla
 V vtable for CTestEffect
 V vtable for CTestTraceline
 V vtable for CTest_ProxyToggle_Networkable
 V vtable for CTextureToggle
 V vtable for CThinkContextsSaveDataOps
 V vtable for CThrustController
 V vtable for CTimerEntity
 V vtable for CTraceFilter
 V vtable for CTraceFilterAgainstEntityList
 V vtable for CTraceFilterDoor
 V vtable for CTraceFilterEntitiesOnly
 V vtable for CTraceFilterEntity
 V vtable for CTraceFilterEntityIgnoreOther
 V vtable for CTraceFilterLOS
 V vtable for CTraceFilterMelee
 V vtable for CTraceFilterNav
 V vtable for CTraceFilterNoNPCsOrPlayer
 V vtable for CTraceFilterOnlyNPCsAndPlayer
 V vtable for CTraceFilterPlayerAvoidance
 V vtable for CTraceFilterPlayersNPCs
 V vtable for CTraceFilterPlayersNPCsPhysicsProps
 V vtable for CTraceFilterPushFinal
 V vtable for CTraceFilterPushMove
 V vtable for CTraceFilterSimple
 V vtable for CTraceFilterSimpleList
 V vtable for CTraceFilterSkipNPCs
 V vtable for CTraceFilterSkipTwoEntities
 V vtable for CTraceFilterWalkableEntities
 V vtable for CTraceListData
 V vtable for CTracePassFilter
 V vtable for CTriggerBrush
 V vtable for CTriggerCDAudio
 V vtable for CTriggerCamera
 V vtable for CTriggerGravity
 V vtable for CTriggerHurt
 V vtable for CTriggerImpact
 V vtable for CTriggerLook
 V vtable for CTriggerMultiple
 V vtable for CTriggerOnce
 V vtable for CTriggerPlayerMovement
 V vtable for CTriggerProximity
 V vtable for CTriggerPush
 V vtable for CTriggerRemove
 V vtable for CTriggerSave
 V vtable for CTriggerSoundscape
 V vtable for CTriggerTeleport
 V vtable for CTriggerToggleSave
 V vtable for CTriggerTraceEnum
 V vtable for CTriggerVPhysicsMotion
 V vtable for CTriggerVolume
 V vtable for CTriggerWind
 V vtable for CUserCmd
 V vtable for CUtlCachedFileData<CModelSoundCache>
 V vtable for CUtlCachedFileData<CSceneCache>
 V vtable for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 V vtable for CUtlSymbolDataOps
 V vtable for CUtlVectorDataOps<CAI_InterestTarget, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >, 12>
 V vtable for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >, 13>
 V vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >, 13>
 V vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >, 13>
 V vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >, 13>
 V vtable for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >, 13>
 V vtable for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >, 13>
 V vtable for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int> >, 5>
 V vtable for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >, 10>
 V vtable for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >, 10>
 V vtable for CVGuiScreen
 V vtable for CVariantSaveDataOps
 V vtable for CVehicleSoundsParser
 V vtable for CVoiceGameMgr
 V vtable for CVoiceGameMgrHelper
 V vtable for CWaterBullet
 V vtable for CWaterLODControl
 V vtable for CWaterTraceFilter
 V vtable for CWeaponAWP
 V vtable for CWeaponAug
 V vtable for CWeaponCSBase
 V vtable for CWeaponCSBaseGun
 V vtable for CWeaponCubemap
 V vtable for CWeaponCycler
 V vtable for CWeaponElite
 V vtable for CWeaponFamas
 V vtable for CWeaponFiveSeven
 V vtable for CWeaponG3SG1
 V vtable for CWeaponGalil
 V vtable for CWeaponGlock
 V vtable for CWeaponList
 V vtable for CWeaponM249
 V vtable for CWeaponM3
 V vtable for CWeaponM4A1
 V vtable for CWeaponMAC10
 V vtable for CWeaponMP5Navy
 V vtable for CWeaponP228
 V vtable for CWeaponP90
 V vtable for CWeaponSG550
 V vtable for CWeaponSG552
 V vtable for CWeaponScout
 V vtable for CWeaponTMP
 V vtable for CWeaponUMP45
 V vtable for CWeaponUSP
 V vtable for CWeaponXM1014
 V vtable for CWindowPane
 V vtable for CWorld
 V vtable for CWorldItem
 V vtable for CWreckage
 V vtable for ConCommand
 V vtable for ConCommandBase
 V vtable for ConVar
 V vtable for DefuseBombState
 V vtable for EntityParticleTrailInfo_t
 V vtable for EscapeFromBombState
 V vtable for FetchBombState
 V vtable for FileWeaponInfo_t
 V vtable for FilterDamageType
 V vtable for FilterTeam
 V vtable for FollowState
 V vtable for HideState
 V vtable for HidingSpot
 V vtable for HuntState
 V vtable for IAI_MovementSink
 V vtable for IBaseCacheInfo
 V vtable for IBehaviorBackBridge
 V vtable for IBotController
 V vtable for IBotManager
 V vtable for IBreakableWithPropData
 V vtable for ICSPlayerAnimState
 V vtable for ICSPlayerAnimStateHelpers
 V vtable for IChoreoEventCallback
 V vtable for ICollideable
 V vtable for IConCommandBaseAccessor
 V vtable for IDecalEmitterSystem
 V vtable for IDrivableVehicle
 V vtable for IEffects
 V vtable for IEntityDataInstantiator
 V vtable for IEntityEnumerator
 V vtable for IEntityFactory
 V vtable for IEntityFactoryDictionary
 V vtable for IEntityListener
 V vtable for IEntitySaveUtils
 V vtable for IEventRegisterCallback
 V vtable for IGameEventListener2
 V vtable for IGameMovement
 V vtable for IGameSystem
 V vtable for IHLTVDirector
 V vtable for IHandleEntity
 V vtable for ILagCompensationManager
 V vtable for IMapEntityFilter
 V vtable for IMotionEvent
 V vtable for IMoveHelper
 V vtable for IMoveHelperServer
 V vtable for IMultiplayerPhysics
 V vtable for INearestNodeFilter
 V vtable for INodeListFilter
 V vtable for INotify
 V vtable for IPartitionEnumerator
 V vtable for IPartitionQueryCallback
 V vtable for IPhysSaveRestoreManager
 V vtable for IPhysicsCollisionEvent
 V vtable for IPhysicsCollisionSolver
 V vtable for IPhysicsConstraintEvent
 V vtable for IPhysicsGameTrace
 V vtable for IPhysicsObjectEvent
 V vtable for IPhysicsPlayerControllerEvent
 V vtable for IPlayerAnimState
 V vtable for IPlayerInfo
 V vtable for IPlayerInfoManager
 V vtable for IPlayerPickupVPhysics
 V vtable for IPluginHelpersCheck
 V vtable for IPositionInterpolator
 V vtable for IPositionWatcher
 V vtable for IPredictableList
 V vtable for IPredictionSystem
 V vtable for IRecipientFilter
 V vtable for IResponseFilter
 V vtable for IResponseSystem
 V vtable for IRestore
 V vtable for IRotorWashShooter
 V vtable for ISave
 V vtable for ISaveRestoreBlockHandler
 V vtable for ISaveRestoreBlockSet
 V vtable for ISaveRestoreOps
 V vtable for ISceneTokenProcessor
 V vtable for IServerEntity
 V vtable for IServerGameClients
 V vtable for IServerGameDLL
 V vtable for IServerGameEnts
 V vtable for IServerNetworkable
 V vtable for IServerUnknown
 V vtable for IServerVehicle
 V vtable for ITempEntsSystem
 V vtable for ITraceFilter
 V vtable for IVPhysicsKeyHandler
 V vtable for IVehicle
 V vtable for IVoiceGameMgrHelper
 V vtable for IdleState
 V vtable for InvestigateNoiseState
 V vtable for MoveToState
 V vtable for MovieExplosion
 V vtable for OpenDoorState
 V vtable for ParticleSmokeGrenade
 V vtable for PlantBombState
 V vtable for SendProp
 V vtable for UseEntityState
 V vtable for __cxxabiv1::__array_type_info
 V vtable for __cxxabiv1::__enum_type_info
 V vtable for __cxxabiv1::__function_type_info
 V vtable for __cxxabiv1::__fundamental_type_info
 V vtable for __cxxabiv1::__pbase_type_info
 V vtable for __cxxabiv1::__pointer_to_member_type_info
 V vtable for __cxxabiv1::__pointer_type_info
 V vtable for audioparams_t
 V vtable for fogparams_t
 V vtable for locksound_t
 V vtable for sky3dparams_t
 V vtable for sky3dparams_t::NetworkVar_fog
 V vtable for std::domain_error
 V vtable for std::invalid_argument
 V vtable for std::ios_base::failure
 V vtable for std::length_error
 V vtable for std::logic_error
 V vtable for std::out_of_range
 V vtable for std::overflow_error
 V vtable for std::range_error
 V vtable for std::runtime_error
 V vtable for std::underflow_error
 V vtable for vehicle_crashsound_t
 V vtable for vehicle_gear_t
 V vtable for vehiclesounds_t
 W AttackState::GetName() const
 W BotState::OnEnter(CCSBot*)
 W BotState::OnExit(CCSBot*)
 W BotState::OnUpdate(CCSBot*)
 W BuyState::GetName() const
 W CAISound* _CreateEntityTemplate<CAISound>(CAISound*, char const*)
 W CAISound::~CAISound()
 W CAI_AllySpeechManager* _CreateEntityTemplate<CAI_AllySpeechManager>(CAI_AllySpeechManager*, char const*)
 W CAI_AssaultBehavior::GetClassScheduleIdSpace()
 W CAI_AssaultBehavior::GetName()
 W CAI_AssaultBehavior::GetSchedulingErrorName()
 W CAI_AssaultBehavior::~CAI_AssaultBehavior()
 W CAI_AssaultGoal* _CreateEntityTemplate<CAI_AssaultGoal>(CAI_AssaultGoal*, char const*)
 W CAI_AssaultGoal::~CAI_AssaultGoal()
 W CAI_BaseActor::CAI_BaseActor()
 W CAI_BaseActor::OnNewLookTarget()
 W CAI_BaseActor::ShouldBruteForceFailedNav()
 W CAI_BaseActor::~CAI_BaseActor()
 W CAI_BaseFlyingBot::GetHeadTurnRate()
 W CAI_BaseFlyingBot::~CAI_BaseFlyingBot()
 W CAI_BaseHumanoid::~CAI_BaseHumanoid()
 W CAI_BaseNPC::AccessBehaviors()
 W CAI_BaseNPC::AddLookTarget(CBaseEntity*, float, float, float)
 W CAI_BaseNPC::AddLookTarget(Vector const&, float, float, float)
 W CAI_BaseNPC::AlertSound()
 W CAI_BaseNPC::AllowedToIgnite()
 W CAI_BaseNPC::BeginRappel()
 W CAI_BaseNPC::CanPlaySentence(bool)
 W CAI_BaseNPC::CheckAmmo()
 W CAI_BaseNPC::CoverRadius()
 W CAI_BaseNPC::DeathSound()
 W CAI_BaseNPC::FearSound()
 W CAI_BaseNPC::FoundEnemySound()
 W CAI_BaseNPC::GetAlternateMoveShootTarget()
 W CAI_BaseNPC::GetClassScheduleIdSpace()
 W CAI_BaseNPC::GetDefaultNavGoalTolerance()
 W CAI_BaseNPC::GetEnemy()
 W CAI_BaseNPC::GetEnemy() const
 W CAI_BaseNPC::GetExpresser()
 W CAI_BaseNPC::GetGlobalScheduleId(int)
 W CAI_BaseNPC::GetLocalScheduleId(int)
 W CAI_BaseNPC::GetLocalTaskId(int)
 W CAI_BaseNPC::GetMaxJumpSpeed() const
 W CAI_BaseNPC::GetNodeViewOffset()
 W CAI_BaseNPC::GetRunningBehavior()
 W CAI_BaseNPC::GetSchedulingErrorName()
 W CAI_BaseNPC::GetSquadCommandRepresentative()
 W CAI_BaseNPC::HearingSensitivity()
 W CAI_BaseNPC::IdleSound()
 W CAI_BaseNPC::InputGagDisable(inputdata_t&)
 W CAI_BaseNPC::InputGagEnable(inputdata_t&)
 W CAI_BaseNPC::InputStartScripting(inputdata_t&)
 W CAI_BaseNPC::InputStopScripting(inputdata_t&)
 W CAI_BaseNPC::IsCommandMoving()
 W CAI_BaseNPC::IsCommandable()
 W CAI_BaseNPC::IsMedic()
 W CAI_BaseNPC::IsNPC() const
 W CAI_BaseNPC::IsSilentSquadMember() const
 W CAI_BaseNPC::IsValidCommandTarget(CBaseEntity*)
 W CAI_BaseNPC::IsValidMoveAwayDest(Vector const&)
 W CAI_BaseNPC::IsValidReasonableFacing(Vector const&, float)
 W CAI_BaseNPC::IsWaitingToRappel()
 W CAI_BaseNPC::LostEnemySound()
 W CAI_BaseNPC::MoveOrder(Vector const&, CAI_BaseNPC**, int)
 W CAI_BaseNPC::NetworkStateChanged_m_lifeState()
 W CAI_BaseNPC::NotifyDeadFriend(CBaseEntity*)
 W CAI_BaseNPC::NumBehaviors()
 W CAI_BaseNPC::OnBeginMoveAndShoot()
 W CAI_BaseNPC::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
 W CAI_BaseNPC::OnChangeActivity(Activity)
 W CAI_BaseNPC::OnChangeHintGroup(string_t, string_t)
 W CAI_BaseNPC::OnClearGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 W CAI_BaseNPC::OnEndMoveAndShoot()
 W CAI_BaseNPC::OnMoveOrder()
 W CAI_BaseNPC::OnMoveToCommandGoalFailed()
 W CAI_BaseNPC::OnMovementComplete()
 W CAI_BaseNPC::OnMovementFailed()
 W CAI_BaseNPC::OnSeeEntity(CBaseEntity*)
 W CAI_BaseNPC::OnStartSchedule(int)
 W CAI_BaseNPC::OnStateChange(NPC_STATE, NPC_STATE)
 W CAI_BaseNPC::OnTargetOrder()
 W CAI_BaseNPC::PainSound()
 W CAI_BaseNPC::PickupItem(CBaseEntity*)
 W CAI_BaseNPC::PostNPCInit()
 W CAI_BaseNPC::PostscheduleThink()
 W CAI_BaseNPC::PrescheduleThink()
 W CAI_BaseNPC::QuerySeeEntity(CBaseEntity*)
 W CAI_BaseNPC::RunTask(Task_t*)
 W CAI_BaseNPC::SetSquad(CAI_Squad*)
 W CAI_BaseNPC::ShouldAcceptGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 W CAI_BaseNPC::ShouldAutoSummon()
 W CAI_BaseNPC::ShouldBruteForceFailedNav()
 W CAI_BaseNPC::ShouldGib(CTakeDamageInfo const&)
 W CAI_BaseNPC::ShouldGoToIdleState()
 W CAI_BaseNPC::ShouldIgnoreSound(CSound*)
 W CAI_BaseNPC::ShouldNotDistanceCull()
 W CAI_BaseNPC::ShouldSavePhysics()
 W CAI_BaseNPC::SpeakSentence(int)
 W CAI_BaseNPC::SquadSlotName(int)
 W CAI_BaseNPC::StartTask(Task_t*)
 W CAI_BaseNPC::StepHeight() const
 W CAI_BaseNPC::TargetOrder(CBaseEntity*, CAI_BaseNPC**, int)
 W CAI_BaseNPC::TestShootPosition(Vector const&, Vector const&)
 W CAI_BaseNPC::UseAttackSquadSlots()
 W CAI_BaseNPCFlyerNew::AbortedMovement()
 W CAI_BaseNPCFlyerNew::~CAI_BaseNPCFlyerNew()
 W CAI_BasePhysicsFlyingBot::ClampMotorForces(Vector&, Vector&)
 W CAI_BasePhysicsFlyingBot::GetHeadTurnRate()
 W CAI_BasePhysicsFlyingBot::ShouldSavePhysics()
 W CAI_BattleLine* _CreateEntityTemplate<CAI_BattleLine>(CAI_BattleLine*, char const*)
 W CAI_BattleLine::InputActivate(inputdata_t&)
 W CAI_BattleLine::InputDeactivate(inputdata_t&)
 W CAI_BattleLine::MovementThink()
 W CAI_BattleLine::Spawn()
 W CAI_BattleLine::UpdateOnRemove()
 W CAI_BattleLine::~CAI_BattleLine()
 W CAI_Behavior<CAI_BaseNPC, 100000>::GetClassScheduleIdSpace()
 W CAI_Behavior<CAI_BaseNPC, 100000>::IsBehaviorSchedule(int)
 W CAI_Behavior<CAI_BaseNPC, 100000>::~CAI_Behavior()
 W CAI_BehaviorBase::BeginScheduleSelection()
 W CAI_BehaviorBase::BuildScheduleTestBits()
 W CAI_BehaviorBase::CanSelectSchedule()
 W CAI_BehaviorBase::CleanupOnDeath(CBaseEntity*, bool)
 W CAI_BehaviorBase::EndScheduleSelection()
 W CAI_BehaviorBase::Event_Killed(CTakeDamageInfo const&)
 W CAI_BehaviorBase::IsBehaviorSchedule(int)
 W CAI_BehaviorBase::KeyValue(char const*, char const*)
 W CAI_BehaviorBase::LoadSchedules()
 W CAI_BehaviorBase::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 W CAI_BehaviorBase::OnChangeHintGroup(string_t, string_t)
 W CAI_BehaviorBase::OnMovementComplete()
 W CAI_BehaviorBase::OnMovementFailed()
 W CAI_BehaviorBase::OnRestore()
 W CAI_BehaviorBase::OnUpdateShotRegulator()
 W CAI_BehaviorBase::Precache()
 W CAI_BehaviorBase::Spawn()
 W CAI_BehaviorBase::UpdateOnRemove()
 W CAI_BehaviorBase::~CAI_BehaviorBase()
 W CAI_BehaviorHost<CAI_BaseNPC>::AccessBehaviors()
 W CAI_BehaviorHost<CAI_BaseNPC>::AimGun()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_BestEnemy()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GatherConditions()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetDefaultNavGoalTolerance()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetReasonableFacingDist()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsInterruptable()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_NPC_TranslateActivity(Activity)
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_SelectSchedule()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldPlayerAvoid()
 W CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_TranslateSchedule(int)
 W CAI_BehaviorHost<CAI_BaseNPC>::BestEnemy()
 W CAI_BehaviorHost<CAI_BaseNPC>::BuildScheduleTestBits()
 W CAI_BehaviorHost<CAI_BaseNPC>::CleanupOnDeath(CBaseEntity*, bool)
 W CAI_BehaviorHost<CAI_BaseNPC>::CreateBehaviors()
 W CAI_BehaviorHost<CAI_BaseNPC>::CreateComponents()
 W CAI_BehaviorHost<CAI_BaseNPC>::Event_Killed(CTakeDamageInfo const&)
 W CAI_BehaviorHost<CAI_BaseNPC>::FValidateHintType(CAI_Hint*)
 W CAI_BehaviorHost<CAI_BaseNPC>::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 W CAI_BehaviorHost<CAI_BaseNPC>::ForceSelectedGoRandom()
 W CAI_BehaviorHost<CAI_BaseNPC>::GatherConditions()
 W CAI_BehaviorHost<CAI_BaseNPC>::GetDefaultNavGoalTolerance()
 W CAI_BehaviorHost<CAI_BaseNPC>::GetFailSchedule()
 W CAI_BehaviorHost<CAI_BaseNPC>::GetNewSchedule()
 W CAI_BehaviorHost<CAI_BaseNPC>::GetReasonableFacingDist()
 W CAI_BehaviorHost<CAI_BaseNPC>::GetRunningBehavior()
 W CAI_BehaviorHost<CAI_BaseNPC>::GetSchedule(int)
 W CAI_BehaviorHost<CAI_BaseNPC>::IsCurTaskContinuousMove()
 W CAI_BehaviorHost<CAI_BaseNPC>::IsInterruptable()
 W CAI_BehaviorHost<CAI_BaseNPC>::IsValidCover(Vector const&, CAI_Hint const*)
 W CAI_BehaviorHost<CAI_BaseNPC>::IsValidEnemy(CBaseEntity*)
 W CAI_BehaviorHost<CAI_BaseNPC>::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 W CAI_BehaviorHost<CAI_BaseNPC>::NPCInit()
 W CAI_BehaviorHost<CAI_BaseNPC>::NPC_TranslateActivity(Activity)
 W CAI_BehaviorHost<CAI_BaseNPC>::NumBehaviors()
 W CAI_BehaviorHost<CAI_BaseNPC>::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
 W CAI_BehaviorHost<CAI_BaseNPC>::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 W CAI_BehaviorHost<CAI_BaseNPC>::OnChangeHintGroup(string_t, string_t)
 W CAI_BehaviorHost<CAI_BaseNPC>::OnChangeRunningBehavior(CAI_BehaviorBase*, CAI_BehaviorBase*)
 W CAI_BehaviorHost<CAI_BaseNPC>::OnMovementComplete()
 W CAI_BehaviorHost<CAI_BaseNPC>::OnMovementFailed()
 W CAI_BehaviorHost<CAI_BaseNPC>::OnRestore()
 W CAI_BehaviorHost<CAI_BaseNPC>::OnScheduleChange()
 W CAI_BehaviorHost<CAI_BaseNPC>::OnStartSchedule(int)
 W CAI_BehaviorHost<CAI_BaseNPC>::OnTakeDamage_Alive(CTakeDamageInfo const&)
 W CAI_BehaviorHost<CAI_BaseNPC>::Precache()
 W CAI_BehaviorHost<CAI_BaseNPC>::PrescheduleThink()
 W CAI_BehaviorHost<CAI_BaseNPC>::Restore(IRestore&)
 W CAI_BehaviorHost<CAI_BaseNPC>::RunTask(Task_t const*)
 W CAI_BehaviorHost<CAI_BaseNPC>::Save(ISave&)
 W CAI_BehaviorHost<CAI_BaseNPC>::ScheduledFollowPath(int, CBaseEntity*, Activity)
 W CAI_BehaviorHost<CAI_BaseNPC>::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 W CAI_BehaviorHost<CAI_BaseNPC>::SelectFailSchedule(int, int, int)
 W CAI_BehaviorHost<CAI_BaseNPC>::SelectSchedule()
 W CAI_BehaviorHost<CAI_BaseNPC>::ShouldAlwaysThink()
 W CAI_BehaviorHost<CAI_BaseNPC>::ShouldBehaviorSelectSchedule(CAI_BehaviorBase*)
 W CAI_BehaviorHost<CAI_BaseNPC>::ShouldIgnoreSound(CSound*)
 W CAI_BehaviorHost<CAI_BaseNPC>::ShouldPlayerAvoid()
 W CAI_BehaviorHost<CAI_BaseNPC>::StartTask(Task_t const*)
 W CAI_BehaviorHost<CAI_BaseNPC>::TaskName(int)
 W CAI_BehaviorHost<CAI_BaseNPC>::TranslateSchedule(int)
 W CAI_BehaviorHost<CAI_BaseNPC>::UpdateOnRemove()
 W CAI_BehaviorHost<CAI_BaseNPC>::~CAI_BehaviorHost()
 W CAI_BlendedMotor::~CAI_BlendedMotor()
 W CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::CreateMotor()
 W CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::CreateNavigator()
 W CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::GetTimeToNavGoal()
 W CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::MaxYawSpeed()
 W CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::~CAI_BlendingHost()
 W CAI_ChangeHintGroup* _CreateEntityTemplate<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*, char const*)
 W CAI_ChangeHintGroup::ObjectCaps()
 W CAI_ChangeHintGroup::~CAI_ChangeHintGroup()
 W CAI_ChangeTarget* _CreateEntityTemplate<CAI_ChangeTarget>(CAI_ChangeTarget*, char const*)
 W CAI_ChangeTarget::ObjectCaps()
 W CAI_ChangeTarget::~CAI_ChangeTarget()
 W CAI_Component::SetOuter(CAI_BaseNPC*)
 W CAI_Component::TaskComplete(bool)
 W CAI_Component::TaskFail(int)
 W CAI_Component::~CAI_Component()
 W CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>::SetOuter(CAI_BaseNPC*)
 W CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>::~CAI_ComponentWithOuter()
 W CAI_DefMovementSink::CalcYawSpeed()
 W CAI_DefMovementSink::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_DefMovementSink::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_DefMovementSink::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_DefMovementSink::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_DefMovementSink::OnMoveBlocked(AIMoveResult_t*)
 W CAI_DefMovementSink::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 W CAI_DefMovementSink::OnMoveStalled(AILocalMoveGoal_t const&)
 W CAI_DefMovementSink::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_DynamicLink* _CreateEntityTemplate<CAI_DynamicLink>(CAI_DynamicLink*, char const*)
 W CAI_DynamicLinkController* _CreateEntityTemplate<CAI_DynamicLinkController>(CAI_DynamicLinkController*, char const*)
 W CAI_DynamicLinkController::~CAI_DynamicLinkController()
 W CAI_EnemiesListSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CAI_EnemiesListSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CAI_EnemiesListSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CAI_EnemiesListSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CAI_ExpresserHost<CAI_BaseHumanoid>::DispatchResponse(char const*)
 W CAI_ExpresserHost<CAI_BaseHumanoid>::GetResponseSystem()
 W CAI_ExpresserHost<CAI_BaseHumanoid>::ModifyOrAppendCriteria(AI_CriteriaSet&)
 W CAI_ExpresserHost<CAI_BaseHumanoid>::NoteSpeaking(float, float)
 W CAI_ExpresserHost<CAI_BaseHumanoid>::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 W CAI_ExpresserHost<CAI_BaseHumanoid>::Speak(char const*, char const*)
 W CAI_ExpresserHost<CAI_BaseHumanoid>::~CAI_ExpresserHost()
 W CAI_ExpresserSink::OnSpokeConcept(char const*)
 W CAI_ExpresserSink::OnStartSpeaking()
 W CAI_ExpresserSink::UseSemaphore()
 W CAI_FollowBehavior::FarFromFollowTarget()
 W CAI_FollowBehavior::GetClassScheduleIdSpace()
 W CAI_FollowBehavior::GetName()
 W CAI_FollowBehavior::GetSchedulingErrorName()
 W CAI_FollowBehavior::TargetIsUnreachable()
 W CAI_FollowGoal* _CreateEntityTemplate<CAI_FollowGoal>(CAI_FollowGoal*, char const*)
 W CAI_FollowGoal::~CAI_FollowGoal()
 W CAI_GoalEntity::DisableGoal(CAI_BaseNPC*)
 W CAI_GoalEntity::EnableGoal(CAI_BaseNPC*)
 W CAI_GoalEntity::ObjectCaps()
 W CAI_GoalEntity::~CAI_GoalEntity()
 W CAI_Hint* _CreateEntityTemplate<CAI_Hint>(CAI_Hint*, char const*)
 W CAI_Hint::ObjectCaps()
 W CAI_LeadBehavior::GetClassScheduleIdSpace()
 W CAI_LeadBehavior::GetName()
 W CAI_LeadBehavior::GetSchedulingErrorName()
 W CAI_LeadBehavior::~CAI_LeadBehavior()
 W CAI_LeadBehaviorHandler::GetConceptModifiers(char const*)
 W CAI_LeadBehaviorHandler::OnEvent(int)
 W CAI_LeadGoal* _CreateEntityTemplate<CAI_LeadGoal>(CAI_LeadGoal*, char const*)
 W CAI_LeadGoal::~CAI_LeadGoal()
 W CAI_LeadGoal_Weapon* _CreateEntityTemplate<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*, char const*)
 W CAI_LeadGoal_Weapon::~CAI_LeadGoal_Weapon()
 W CAI_LookTarget::~CAI_LookTarget()
 W CAI_MappedActivityBehavior_Temporary::~CAI_MappedActivityBehavior_Temporary()
 W CAI_Motor::AddTurnGesture(float)
 W CAI_Motor::MaintainTurnActivity()
 W CAI_Motor::OverrideMaxYawSpeed(Activity)
 W CAI_MoveAndShootOverlay::~CAI_MoveAndShootOverlay()
 W CAI_MoveProbe::~CAI_MoveProbe()
 W CAI_NamespaceInfos::Compare(AI_NamespaceAddInfo_t const*, AI_NamespaceAddInfo_t const*)
 W CAI_Navigator::ShouldOptimizeInitialPathSegment(AI_Waypoint_t*)
 W CAI_NetworkManager* _CreateEntity<CAI_NetworkManager>(CAI_NetworkManager*, char const*)
 W CAI_NetworkManager* _CreateEntityTemplate<CAI_NetworkManager>(CAI_NetworkManager*, char const*)
 W CAI_NetworkManager::ObjectCaps()
 W CAI_Pathfinder::CanUseLocalNavigation()
 W CAI_Pathfinder::~CAI_Pathfinder()
 W CAI_PlayerAlly::GetClassScheduleIdSpace()
 W CAI_PlayerAlly::GetSchedulingErrorName()
 W CAI_PlayerAlly::InputIdleRespond(inputdata_t&)
 W CAI_PlayerAlly::ObjectCaps()
 W CAI_PlayerAlly::~CAI_PlayerAlly()
 W CAI_ProxyMovementSink::CalcYawSpeed()
 W CAI_ProxyMovementSink::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_ProxyMovementSink::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_ProxyMovementSink::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_ProxyMovementSink::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_ProxyMovementSink::OnMoveBlocked(AIMoveResult_t*)
 W CAI_ProxyMovementSink::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 W CAI_ProxyMovementSink::OnMoveStalled(AILocalMoveGoal_t const&)
 W CAI_ProxyMovementSink::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W CAI_RappelBehavior::GetClassScheduleIdSpace()
 W CAI_RappelBehavior::GetName()
 W CAI_RappelBehavior::GetSchedulingErrorName()
 W CAI_RappelBehavior::~CAI_RappelBehavior()
 W CAI_SaveRestoreBlockHandler::GetBlockName()
 W CAI_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 W CAI_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 W CAI_SaveRestoreBlockHandler::Save(ISave*)
 W CAI_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 W CAI_ScriptConditions* _CreateEntityTemplate<CAI_ScriptConditions>(CAI_ScriptConditions*, char const*)
 W CAI_ScriptConditions::~CAI_ScriptConditions()
 W CAI_ScriptedSchedule* _CreateEntityTemplate<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*, char const*)
 W CAI_ScriptedSchedule::~CAI_ScriptedSchedule()
 W CAI_ScriptedSentence* _CreateEntityTemplate<CAI_ScriptedSentence>(CAI_ScriptedSentence*, char const*)
 W CAI_ScriptedSentence::ObjectCaps()
 W CAI_ScriptedSentence::~CAI_ScriptedSentence()
 W CAI_ScriptedSequence* _CreateEntityTemplate<CAI_ScriptedSequence>(CAI_ScriptedSequence*, char const*)
 W CAI_ScriptedSequence::ObjectCaps()
 W CAI_ScriptedSequence::~CAI_ScriptedSequence()
 W CAI_Senses::~CAI_Senses()
 W CAI_SentenceBase::~CAI_SentenceBase()
 W CAI_SpeechFilter* _CreateEntityTemplate<CAI_SpeechFilter>(CAI_SpeechFilter*, char const*)
 W CAI_SpeechFilter::~CAI_SpeechFilter()
 W CAI_StandoffBehavior::GetClassScheduleIdSpace()
 W CAI_StandoffBehavior::GetName()
 W CAI_StandoffBehavior::GetSchedulingErrorName()
 W CAI_StandoffBehavior::~CAI_StandoffBehavior()
 W CAI_StandoffGoal* _CreateEntityTemplate<CAI_StandoffGoal>(CAI_StandoffGoal*, char const*)
 W CAI_StandoffGoal::DisableGoal(CAI_BaseNPC*)
 W CAI_StandoffGoal::EnableGoal(CAI_BaseNPC*)
 W CAI_StandoffGoal::InputActivate(inputdata_t&)
 W CAI_StandoffGoal::InputDeactivate(inputdata_t&)
 W CAI_StandoffGoal::InputSetAggressiveness(inputdata_t&)
 W CAI_StandoffGoal::~CAI_StandoffGoal()
 W CAI_SystemHook::LevelInitPreEntity()
 W CAI_SystemHook::LevelShutdownPostEntity()
 W CAI_SystemHook::~CAI_SystemHook()
 W CAI_TacticalServices::~CAI_TacticalServices()
 W CAI_TestHull* _CreateEntity<CAI_TestHull>(CAI_TestHull*, char const*)
 W CAI_TestHull* _CreateEntityTemplate<CAI_TestHull>(CAI_TestHull*, char const*)
 W CAI_TestHull::ObjectCaps()
 W CAI_TrackPather::GetTrackPatherTarget(Vector*)
 W CAI_TrackPather::GetTrackPatherTargetEnt()
 W CAI_TrackPather::HasReachedTarget()
 W CAI_TrackPather::ShouldUseFixedPatrolLogic()
 W CAI_TrackPather::~CAI_TrackPather()
 W CAK47* _CreateEntityTemplate<CAK47>(CAK47*, char const*)
 W CAK47::GetWeaponID() const
 W CAK47::~CAK47()
 W CActivityDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CActivityDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CActivityDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CActivityDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CAimTargetManager::OnEntityCreated(CBaseEntity*)
 W CAimTargetManager::OnEntityDeleted(CBaseEntity*)
 W CAmbientGeneric* _CreateEntityTemplate<CAmbientGeneric>(CAmbientGeneric*, char const*)
 W CAmbientGeneric::~CAmbientGeneric()
 W CAnchorList::LevelShutdownPostEntity()
 W CAnchorList::~CAnchorList()
 W CAreaPortal* _CreateEntityTemplate<CAreaPortal>(CAreaPortal*, char const*)
 W CAreaPortal::~CAreaPortal()
 W CAssaultPoint* _CreateEntityTemplate<CAssaultPoint>(CAssaultPoint*, char const*)
 W CAssaultPoint::InputSetAllowDiversion(inputdata_t&)
 W CAssaultPoint::InputSetClearOnContact(inputdata_t&)
 W CAssaultPoint::~CAssaultPoint()
 W CAutoGameSystem::~CAutoGameSystem()
 W CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
 W CBaseAnimating::Extinguish()
 W CBaseAnimating::GetBaseAnimating()
 W CBaseAnimating::HandleAnimEvent(animevent_t*)
 W CBaseAnimating::IsActivityFinished()
 W CBaseAnimating::SetLightingOrigin(CBaseEntity*)
 W CBaseAnimatingOverlay::~CBaseAnimatingOverlay()
 W CBaseButton* _CreateEntityTemplate<CBaseButton>(CBaseButton*, char const*)
 W CBaseButton::~CBaseButton()
 W CBaseCSGrenade* _CreateEntityTemplate<CBaseCSGrenade>(CBaseCSGrenade*, char const*)
 W CBaseCSGrenade::~CBaseCSGrenade()
 W CBaseCSGrenadeProjectile::GetShakeAmplitude()
 W CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
 W CBaseCombatCharacter::EyeDirection2D()
 W CBaseCombatCharacter::EyeDirection3D()
 W CBaseCombatCharacter::HeadDirection2D()
 W CBaseCombatCharacter::HeadDirection3D()
 W CBaseCombatCharacter::MyCombatCharacterPointer()
 W CBaseCombatCharacter::NetworkStateChanged_m_iAmmo()
 W CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
 W CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 W CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 W CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
 W CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon*)
 W CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
 W CBaseCombatCharacter::Spawn()
 W CBaseCombatWeapon::ActivityList()
 W CBaseCombatWeapon::ActivityListCount()
 W CBaseCombatWeapon::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 W CBaseCombatWeapon::CalcViewmodelBob()
 W CBaseCombatWeapon::CanDeploy()
 W CBaseCombatWeapon::CanHolster()
 W CBaseCombatWeapon::CapabilitiesGet()
 W CBaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
 W CBaseCombatWeapon::GetDamage(float, int)
 W CBaseCombatWeapon::GetDefaultAnimSpeed()
 W CBaseCombatWeapon::GetLastWeapon()
 W CBaseCombatWeapon::GetMaxBurst()
 W CBaseCombatWeapon::GetMaxRestTime()
 W CBaseCombatWeapon::GetMinBurst()
 W CBaseCombatWeapon::GetMinRestTime()
 W CBaseCombatWeapon::GetPrimaryAmmoType() const
 W CBaseCombatWeapon::GetRandomBurst()
 W CBaseCombatWeapon::GetSecondaryAmmoType() const
 W CBaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
 W CBaseCombatWeapon::GetSubType()
 W CBaseCombatWeapon::IsPredicted() const
 W CBaseCombatWeapon::IsRemoveable()
 W CBaseCombatWeapon::ItemHolsterFrame()
 W CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick()
 W CBaseCombatWeapon::SecondaryAttack()
 W CBaseCombatWeapon::SetSubType(int)
 W CBaseCombatWeapon::ShouldShowControlPanels()
 W CBaseCombatWeapon::StartSprinting()
 W CBaseCombatWeapon::StopSprinting()
 W CBaseDMStart* _CreateEntityTemplate<CBaseDMStart>(CBaseDMStart*, char const*)
 W CBaseDMStart::~CBaseDMStart()
 W CBaseDoor* _CreateEntityTemplate<CBaseDoor>(CBaseDoor*, char const*)
 W CBaseDoor::IsRotatingDoor()
 W CBaseDoor::ObjectCaps()
 W CBaseDoor::~CBaseDoor()
 W CBaseEntity::AttemptToPowerup(int, float, float, CBaseEntity*, CDamageModifier*)
 W CBaseEntity::CanBePoweredUp()
 W CBaseEntity::CanBeSeen()
 W CBaseEntity::CanStandOn(CBaseEntity*) const
 W CBaseEntity::CanStandOn(edict_t*) const
 W CBaseEntity::DeathNotice(CBaseEntity*)
 W CBaseEntity::EndBlocked()
 W CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
 W CBaseEntity::GetBaseAnimating()
 W CBaseEntity::GetBaseEntity()
 W CBaseEntity::GetCollideable()
 W CBaseEntity::GetDamage()
 W CBaseEntity::GetDelay()
 W CBaseEntity::GetEnemy()
 W CBaseEntity::GetEnemy() const
 W CBaseEntity::GetGroundVelocityToApply(Vector&)
 W CBaseEntity::GetModelIndex() const
 W CBaseEntity::GetModelName() const
 W CBaseEntity::GetNetworkable()
 W CBaseEntity::GetRefEHandle() const
 W CBaseEntity::GetServerVehicle()
 W CBaseEntity::GetSmoothedVelocity()
 W CBaseEntity::GetViewOffset()
 W CBaseEntity::HasPhysicsAttacker(float)
 W CBaseEntity::IsBaseObject() const
 W CBaseEntity::IsLockedByMaster()
 W CBaseEntity::IsNPC() const
 W CBaseEntity::IsNetClient() const
 W CBaseEntity::IsPlayer() const
 W CBaseEntity::IsTemplate()
 W CBaseEntity::IsTriggered(CBaseEntity*)
 W CBaseEntity::MoveDone()
 W CBaseEntity::MyCombatCharacterPointer()
 W CBaseEntity::NetworkStateChanged_m_fFlags()
 W CBaseEntity::NetworkStateChanged_m_flFriction()
 W CBaseEntity::NetworkStateChanged_m_hGroundEntity()
 W CBaseEntity::NetworkStateChanged_m_iHealth()
 W CBaseEntity::NetworkStateChanged_m_iMaxHealth()
 W CBaseEntity::NetworkStateChanged_m_lifeState()
 W CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
 W CBaseEntity::NetworkStateChanged_m_nWaterLevel()
 W CBaseEntity::NetworkStateChanged_m_takedamage()
 W CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
 W CBaseEntity::NetworkStateChanged_m_vecVelocity()
 W CBaseEntity::NetworkStateChanged_m_vecViewOffset()
 W CBaseEntity::NetworkVar_m_Collision::NetworkStateChanged()
 W CBaseEntity::OnControls(CBaseEntity*)
 W CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
 W CBaseEntity::Precache()
 W CBaseEntity::RequiredEdictIndex()
 W CBaseEntity::Respawn()
 W CBaseEntity::SUB_CallUseToggle()
 W CBaseEntity::SetDamage(float)
 W CBaseEntity::SetModelIndex(int)
 W CBaseEntity::ShouldDrawWaterImpacts()
 W CBaseEntity::Splash()
 W CBaseEntity::StartBlocked(CBaseEntity*)
 W CBaseEntity::StopLoopingSounds()
 W CBaseEntity::Think()
 W CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
 W CBaseFilter* _CreateEntityTemplate<CBaseFilter>(CBaseFilter*, char const*)
 W CBaseFilter::~CBaseFilter()
 W CBaseFlex* _CreateEntityTemplate<CBaseFlex>(CBaseFlex*, char const*)
 W CBaseGameSystem::FrameUpdatePostEntityThink()
 W CBaseGameSystem::FrameUpdatePreEntityThink()
 W CBaseGameSystem::Init()
 W CBaseGameSystem::LevelInitPostEntity()
 W CBaseGameSystem::LevelInitPreEntity()
 W CBaseGameSystem::LevelShutdownPostEntity()
 W CBaseGameSystem::LevelShutdownPreEntity()
 W CBaseGameSystem::OnRestore()
 W CBaseGameSystem::OnSave()
 W CBaseGameSystem::PreClientUpdate()
 W CBaseGameSystem::SafeRemoveIfDesired()
 W CBaseGameSystem::Shutdown()
 W CBaseGameSystem::~CBaseGameSystem()
 W CBaseGrenade* _CreateEntityTemplate<CBaseGrenade>(CBaseGrenade*, char const*)
 W CBaseGrenade::BloodColor()
 W CBaseGrenade::GetBlastForce()
 W CBaseGrenade::GetDamage()
 W CBaseGrenade::GetDamageRadius()
 W CBaseGrenade::GetShakeAmplitude()
 W CBaseGrenade::GetShakeRadius()
 W CBaseGrenade::NetworkStateChanged_m_fFlags()
 W CBaseGrenade::NetworkStateChanged_m_vecVelocity()
 W CBaseGrenade::ObjectCaps()
 W CBaseGrenade::SetDamage(float)
 W CBaseGrenade::SetDamageRadius(float)
 W CBaseMoveBehavior* _CreateEntityTemplate<CBaseMoveBehavior>(CBaseMoveBehavior*, char const*)
 W CBaseMoveBehavior::~CBaseMoveBehavior()
 W CBaseParticleEntity::~CBaseParticleEntity()
 W CBasePlatTrain::IsTogglePlat()
 W CBasePlayer::CanBreatheUnderwater() const
 W CBasePlayer::CanHearChatFrom(CBasePlayer*)
 W CBasePlayer::CanSpeak()
 W CBasePlayer::CheckChatText(char*, int)
 W CBasePlayer::CreateCorpse()
 W CBasePlayer::ExitLadder()
 W CBasePlayer::FlashlightIsOn()
 W CBasePlayer::FlashlightTurnOff()
 W CBasePlayer::FlashlightTurnOn()
 W CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
 W CBasePlayer::InitHUD()
 W CBasePlayer::IsFollowingPhysics()
 W CBasePlayer::IsNetClient() const
 W CBasePlayer::IsPlayer() const
 W CBasePlayer::IsRunning() const
 W CBasePlayer::NetworkStateChanged_m_ArmorValue()
 W CBasePlayer::NetworkStateChanged_m_flFriction()
 W CBasePlayer::NetworkStateChanged_m_hGroundEntity()
 W CBasePlayer::NetworkStateChanged_m_iAmmo()
 W CBasePlayer::NetworkStateChanged_m_lifeState()
 W CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
 W CBasePlayer::NetworkStateChanged_m_vecViewOffset()
 W CBasePlayer::NetworkVar_m_Local::NetworkStateChanged()
 W CBasePlayer::NetworkVar_pl::NetworkStateChanged()
 W CBasePlayer::NetworkVar_pl::~NetworkVar_pl()
 W CBasePlayer::ObjectCaps()
 W CBasePlayer::OnVehicleEnd(Vector&)
 W CBasePlayer::OnVehicleStart()
 W CBasePlayer::PickupObject(CBaseEntity*, bool)
 W CBasePlayer::PlayUseDenySound()
 W CBasePlayer::RequiredEdictIndex()
 W CBasePlayer::ShouldFadeOnDeath()
 W CBasePlayer::SpawnArmorValue() const
 W CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
 W CBasePlayerAnimState::SelectWeightedSequence(Activity)
 W CBasePlayerAnimState::TranslateActivity(Activity)
 W CBaseProp::IsAlive()
 W CBaseProp::OverridePropdata()
 W CBaseProp::~CBaseProp()
 W CBasePropDoor::DoorCanClose(bool)
 W CBasePropDoor::DoorCanOpen()
 W CBasePropDoor::OnDoorClosed()
 W CBasePropDoor::OnDoorOpened()
 W CBasePropDoor::~CBasePropDoor()
 W CBaseServerVehicle::ClassifyPassenger(CBasePlayer*, Class_T)
 W CBaseServerVehicle::DamageModifier(CTakeDamageInfo&)
 W CBaseServerVehicle::GetVehicleEnt()
 W CBaseServerVehicle::GetVehicleParams()
 W CBaseServerVehicle::IsPassengerDamagable(int)
 W CBaseServerVehicle::IsPassengerUsingStandardWeapons(int)
 W CBaseServerVehicle::IsPassengerVisible(int)
 W CBaseServerVehicle::IsVehicleBodyInWater()
 W CBaseServerVehicle::IsVehicleUpright()
 W CBaseServerVehicle::NPC_AimPrimaryWeapon(Vector)
 W CBaseServerVehicle::NPC_AimSecondaryWeapon(Vector)
 W CBaseServerVehicle::NPC_CanDrive()
 W CBaseServerVehicle::NPC_DriveVehicle()
 W CBaseServerVehicle::NPC_HasPrimaryWeapon()
 W CBaseServerVehicle::NPC_HasSecondaryWeapon()
 W CBaseServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 W CBaseToggle::GetDelay()
 W CBaseToggle::KeyValue(char const*, Vector)
 W CBaseToggle::KeyValue(char const*, float)
 W CBaseToggle::~CBaseToggle()
 W CBaseTrigger* _CreateEntityTemplate<CBaseTrigger>(CBaseTrigger*, char const*)
 W CBaseTrigger::~CBaseTrigger()
 W CBaseVPhysicsTrigger::~CBaseVPhysicsTrigger()
 W CBaseViewModel* _CreateEntityTemplate<CBaseViewModel>(CBaseViewModel*, char const*)
 W CBaseViewModel::GetOwner()
 W CBaseViewModel::IsViewable()
 W CBeam* _CreateEntity<CBeam>(CBeam*, char const*)
 W CBeam* _CreateEntityTemplate<CBeam>(CBeam*, char const*)
 W CBeam::ObjectCaps()
 W CBeam::WorldSpaceCenter() const
 W CBeam::~CBeam()
 W CBitStringSaveRestoreOps<CFixedBitString<32> >::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CBitStringSaveRestoreOps<CFixedBitString<32> >::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CBitStringSaveRestoreOps<CFixedBitString<32> >::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CBitStringSaveRestoreOps<CFixedBitString<32> >::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CBlendingCycler* _CreateEntityTemplate<CBlendingCycler>(CBlendingCycler*, char const*)
 W CBlendingCycler::ObjectCaps()
 W CBlendingCycler::~CBlendingCycler()
 W CBlood* _CreateEntityTemplate<CBlood>(CBlood*, char const*)
 W CBlood::~CBlood()
 W CBloodSplat* _CreateEntityTemplate<CBloodSplat>(CBloodSplat*, char const*)
 W CBloodSplat::~CBloodSplat()
 W CBombTarget* _CreateEntityTemplate<CBombTarget>(CBombTarget*, char const*)
 W CBombTarget::~CBombTarget()
 W CBoneFollower* _CreateEntityTemplate<CBoneFollower>(CBoneFollower*, char const*)
 W CBoneFollower::~CBoneFollower()
 W CBot<CCSPlayer>::BuildUserCmd(CUserCmd&, QAngle const&, float, float, float, unsigned short, unsigned char)
 W CBot<CCSPlayer>::ClearMovement()
 W CBot<CCSPlayer>::ClearPrimaryAttack()
 W CBot<CCSPlayer>::ClientCommand(char const*)
 W CBot<CCSPlayer>::Cmd_Argc()
 W CBot<CCSPlayer>::Cmd_Argv(int)
 W CBot<CCSPlayer>::Crouch()
 W CBot<CCSPlayer>::Event_Killed(CTakeDamageInfo const&)
 W CBot<CCSPlayer>::Initialize(BotProfile const*, int)
 W CBot<CCSPlayer>::IsBot() const
 W CBot<CCSPlayer>::IsNetClient() const
 W CBot<CCSPlayer>::IsRunning() const
 W CBot<CCSPlayer>::Jump(bool)
 W CBot<CCSPlayer>::MoveBackward()
 W CBot<CCSPlayer>::MoveForward()
 W CBot<CCSPlayer>::OnTakeDamage(CTakeDamageInfo const&)
 W CBot<CCSPlayer>::PrimaryAttack()
 W CBot<CCSPlayer>::PrintIfWatched(char*, ...) const
 W CBot<CCSPlayer>::Reload()
 W CBot<CCSPlayer>::Run()
 W CBot<CCSPlayer>::SecondaryAttack()
 W CBot<CCSPlayer>::SetModel(char const*)
 W CBot<CCSPlayer>::Spawn()
 W CBot<CCSPlayer>::StandUp()
 W CBot<CCSPlayer>::StrafeLeft()
 W CBot<CCSPlayer>::StrafeRight()
 W CBot<CCSPlayer>::Think()
 W CBot<CCSPlayer>::TogglePrimaryAttack()
 W CBot<CCSPlayer>::UpdatePlayer()
 W CBot<CCSPlayer>::UseEnvironment()
 W CBot<CCSPlayer>::Walk()
 W CBot<CCSPlayer>::~CBot()
 W CBotBreakableEnumerator::EnumElement(IHandleEntity*)
 W CBotCmd::~CBotCmd()
 W CBotDoorEnumerator::EnumElement(IHandleEntity*)
 W CBreakModelsPrecached::BreakLessFunc(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&)
 W CBreakModelsPrecached::LevelShutdownPostEntity()
 W CBreakModelsPrecached::~CBreakModelsPrecached()
 W CBreakParser::ParseKeyValue(void*, char const*, char const*)
 W CBreakParser::SetDefaults(void*)
 W CBreakable* _CreateEntityTemplate<CBreakable>(CBreakable*, char const*)
 W CBreakable::GetBasePropData()
 W CBreakable::GetBreakableCount()
 W CBreakable::GetBreakableModel()
 W CBreakable::GetBreakableSkin()
 W CBreakable::GetDmgModBullet()
 W CBreakable::GetDmgModClub()
 W CBreakable::GetDmgModExplosive()
 W CBreakable::GetExplosiveDamage()
 W CBreakable::GetExplosiveRadius()
 W CBreakable::GetMaxBreakableSize()
 W CBreakable::GetMultiplayerBreakMode() const
 W CBreakable::GetPhysicsDamageTable()
 W CBreakable::GetPhysicsMode()
 W CBreakable::HasInteraction(propdata_interactions_t)
 W CBreakable::SetBasePropData(string_t)
 W CBreakable::SetBreakableCount(int)
 W CBreakable::SetBreakableModel(string_t)
 W CBreakable::SetBreakableSkin(int)
 W CBreakable::SetDmgModBullet(float)
 W CBreakable::SetDmgModClub(float)
 W CBreakable::SetDmgModExplosive(float)
 W CBreakable::SetExplosiveDamage(float)
 W CBreakable::SetExplosiveRadius(float)
 W CBreakable::SetInteraction(propdata_interactions_t)
 W CBreakable::SetMaxBreakableSize(int)
 W CBreakable::SetMultiplayerBreakMode(mp_break_t)
 W CBreakable::SetPhysicsDamageTable(string_t)
 W CBreakable::SetPhysicsMode(int)
 W CBreakable::SetPropDataBlocksLOS(bool)
 W CBreakable::SetPropDataIsAIWalkable(bool)
 W CBreakable::~CBreakable()
 W CBreakableProp::GetBasePropData()
 W CBreakableProp::GetBreakableCount()
 W CBreakableProp::GetBreakableModel()
 W CBreakableProp::GetBreakableSkin()
 W CBreakableProp::GetDmgModBullet()
 W CBreakableProp::GetDmgModClub()
 W CBreakableProp::GetDmgModExplosive()
 W CBreakableProp::GetExplosiveDamage()
 W CBreakableProp::GetExplosiveRadius()
 W CBreakableProp::GetMaxBreakableSize()
 W CBreakableProp::GetMultiplayerBreakMode() const
 W CBreakableProp::GetPhysicsDamageTable()
 W CBreakableProp::GetPhysicsMode()
 W CBreakableProp::HasInteraction(propdata_interactions_t)
 W CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 W CBreakableProp::OnBreak(Vector const&, Vector const&, CBaseEntity*)
 W CBreakableProp::OverridePropdata()
 W CBreakableProp::PreferredCarryAngles()
 W CBreakableProp::SetBasePropData(string_t)
 W CBreakableProp::SetBreakableCount(int)
 W CBreakableProp::SetBreakableModel(string_t)
 W CBreakableProp::SetBreakableSkin(int)
 W CBreakableProp::SetDmgModBullet(float)
 W CBreakableProp::SetDmgModClub(float)
 W CBreakableProp::SetDmgModExplosive(float)
 W CBreakableProp::SetExplosiveDamage(float)
 W CBreakableProp::SetExplosiveRadius(float)
 W CBreakableProp::SetInteraction(propdata_interactions_t)
 W CBreakableProp::SetMaxBreakableSize(int)
 W CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 W CBreakableProp::SetPhysicsDamageTable(string_t)
 W CBreakableProp::SetPhysicsMode(int)
 W CBreakableProp::SetPropDataBlocksLOS(bool)
 W CBreakableProp::SetPropDataIsAIWalkable(bool)
 W CBreakableProp::~CBreakableProp()
 W CBreakableSurface* _CreateEntityTemplate<CBreakableSurface>(CBreakableSurface*, char const*)
 W CBreakableSurface::~CBreakableSurface()
 W CBroadcastRecipientFilter::~CBroadcastRecipientFilter()
 W CBubbling* _CreateEntityTemplate<CBubbling>(CBubbling*, char const*)
 W CBubbling::~CBubbling()
 W CBuyZone* _CreateEntityTemplate<CBuyZone>(CBuyZone*, char const*)
 W CBuyZone::~CBuyZone()
 W CC4* _CreateEntityTemplate<CC4>(CC4*, char const*)
 W CC4::GetWeaponID() const
 W CCSBot* CreateBot<CCSBot>(BotProfile const*, int)
 W CCSBot* _CreateEntityTemplate<CCSBot>(CCSBot*, char const*)
 W CCSBot::PrimaryAttack()
 W CCSBotManager::AllocateBotEntity()
 W CCSBotManager::BombBeepEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BombBeepEvent::~BombBeepEvent()
 W CCSBotManager::BombDefuseAbortEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BombDefuseAbortEvent::~BombDefuseAbortEvent()
 W CCSBotManager::BombDefuseBeginEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BombDefuseBeginEvent::~BombDefuseBeginEvent()
 W CCSBotManager::BombDefusedEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BombDefusedEvent::~BombDefusedEvent()
 W CCSBotManager::BombExplodedEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BombExplodedEvent::~BombExplodedEvent()
 W CCSBotManager::BombPickedUpEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BombPickedUpEvent::~BombPickedUpEvent()
 W CCSBotManager::BombPlantedEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BombPlantedEvent::~BombPlantedEvent()
 W CCSBotManager::BreakBreakableEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BreakBreakableEvent::~BreakBreakableEvent()
 W CCSBotManager::BreakPropEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BreakPropEvent::~BreakPropEvent()
 W CCSBotManager::BulletImpactEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::BulletImpactEvent::~BulletImpactEvent()
 W CCSBotManager::DoorMovingEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::DoorMovingEvent::~DoorMovingEvent()
 W CCSBotManager::FlashbangDetonateEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::FlashbangDetonateEvent::~FlashbangDetonateEvent()
 W CCSBotManager::GrenadeBounceEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::GrenadeBounceEvent::~GrenadeBounceEvent()
 W CCSBotManager::HEGrenadeDetonateEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::HEGrenadeDetonateEvent::~HEGrenadeDetonateEvent()
 W CCSBotManager::HostageFollowsEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::HostageFollowsEvent::~HostageFollowsEvent()
 W CCSBotManager::HostageRescuedAllEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::HostageRescuedAllEvent::~HostageRescuedAllEvent()
 W CCSBotManager::NavBlockedEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::NavBlockedEvent::~NavBlockedEvent()
 W CCSBotManager::PlayerDeathEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::PlayerDeathEvent::~PlayerDeathEvent()
 W CCSBotManager::PlayerFallDamageEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::PlayerFallDamageEvent::~PlayerFallDamageEvent()
 W CCSBotManager::PlayerFootstepEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::PlayerFootstepEvent::~PlayerFootstepEvent()
 W CCSBotManager::PlayerRadioEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::PlayerRadioEvent::~PlayerRadioEvent()
 W CCSBotManager::RoundEndEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::RoundEndEvent::~RoundEndEvent()
 W CCSBotManager::RoundFreezeEndEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::RoundFreezeEndEvent::~RoundFreezeEndEvent()
 W CCSBotManager::RoundStartEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::RoundStartEvent::~RoundStartEvent()
 W CCSBotManager::ServerShutdownEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::ServerShutdownEvent::~ServerShutdownEvent()
 W CCSBotManager::SmokeGrenadeDetonateEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::SmokeGrenadeDetonateEvent::~SmokeGrenadeDetonateEvent()
 W CCSBotManager::WeaponFireEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::WeaponFireEvent::~WeaponFireEvent()
 W CCSBotManager::WeaponFireOnEmptyEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::WeaponFireOnEmptyEvent::~WeaponFireOnEmptyEvent()
 W CCSBotManager::WeaponReloadEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::WeaponReloadEvent::~WeaponReloadEvent()
 W CCSBotManager::WeaponZoomEvent::FireGameEvent(IGameEvent*)
 W CCSBotManager::WeaponZoomEvent::~WeaponZoomEvent()
 W CCSBotManager::~CCSBotManager()
 W CCSEventLog::Init()
 W CCSEventLog::PrintCStrikeEvent(IGameEvent*)
 W CCSEventLog::PrintEvent(IGameEvent*)
 W CCSEventLog::~CCSEventLog()
 W CCSGameMovement::LadderDistance() const
 W CCSGameMovement::LadderMask() const
 W CCSGameMovement::OnLadder(CGameTrace&)
 W CCSGameMovement::~CCSGameMovement()
 W CCSGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
 W CCSGameRules::GetEncryptionKey()
 W CCSGameRules::GetGameDescription()
 W CCSGameRules::PlayTextureSounds()
 W CCSGameRulesProxy* _CreateEntityTemplate<CCSGameRulesProxy>(CCSGameRulesProxy*, char const*)
 W CCSGameRulesProxy::~CCSGameRulesProxy()
 W CCSHLTVDirector::~CCSHLTVDirector()
 W CCSHostageAnimState::SelectWeightedSequence(Activity)
 W CCSHostageAnimState::~CCSHostageAnimState()
 W CCSMapLoadEntityFilter::CreateNextEntity(char const*)
 W CCSMapLoadEntityFilter::ShouldCreateEntity(char const*)
 W CCSPlayer* _CreateEntityTemplate<CCSPlayer>(CCSPlayer*, char const*)
 W CCSPlayer::IsBeingGivenItem() const
 W CCSPlayer::NetworkStateChanged_m_ArmorValue()
 W CCSPlayer::SpawnArmorValue() const
 W CCSPlayerAnimState::~CCSPlayerAnimState()
 W CCSPlayerMove::~CCSPlayerMove()
 W CCSPlayerResource* _CreateEntityTemplate<CCSPlayerResource>(CCSPlayerResource*, char const*)
 W CCSPlayerResource::~CCSPlayerResource()
 W CCSRagdoll* _CreateEntityTemplate<CCSRagdoll>(CCSRagdoll*, char const*)
 W CCSRagdoll::UpdateTransmitState()
 W CCSRagdoll::~CCSRagdoll()
 W CCSTeam* _CreateEntityTemplate<CCSTeam>(CCSTeam*, char const*)
 W CChangeLevel* _CreateEntityTemplate<CChangeLevel>(CChangeLevel*, char const*)
 W CChangeLevel::~CChangeLevel()
 W CCheckClient::LevelInitPreEntity()
 W CCheckClient::~CCheckClient()
 W CClassPtrSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CClassPtrSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CCleanupDefaultRelationShips::Shutdown()
 W CCleanupDefaultRelationShips::~CCleanupDefaultRelationShips()
 W CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 W CCollisionEvent::ObjectSleep(IPhysicsObject*)
 W CCollisionEvent::ObjectWake(IPhysicsObject*)
 W CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 W CCollisionProperty::GetSolidFlags() const
 W CCollisionProperty::NetworkStateChanged()
 W CConceptHistoriesDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CConceptHistoriesDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CConceptHistoriesDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CConceptHistoriesDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CConstraintAnchor* _CreateEntityTemplate<CConstraintAnchor>(CConstraintAnchor*, char const*)
 W CConstraintAnchor::Spawn()
 W CConstraintAnchor::~CConstraintAnchor()
 W CCopyRecipientFilter::AddRecipient(CBasePlayer*)
 W CCopyRecipientFilter::GetRecipientCount() const
 W CCopyRecipientFilter::GetRecipientIndex(int) const
 W CCopyRecipientFilter::IsInitMessage() const
 W CCopyRecipientFilter::IsReliable() const
 W CCopyRecipientFilter::~CCopyRecipientFilter()
 W CCredits* _CreateEntityTemplate<CCredits>(CCredits*, char const*)
 W CCredits::~CCredits()
 W CCycler::IsAlive()
 W CCycler::ObjectCaps()
 W CCycler::~CCycler()
 W CDEagle* _CreateEntityTemplate<CDEagle>(CDEagle*, char const*)
 W CDEagle::GetWeaponID() const
 W CDEagle::UseDecrement()
 W CDEagle::~CDEagle()
 W CDataObjectAccessSystem::Init()
 W CDataObjectAccessSystem::Shutdown()
 W CDataObjectAccessSystem::~CDataObjectAccessSystem()
 W CDatadescGeneratedNameHolder::CDatadescGeneratedNameHolder(char const*)
 W CDatadescGeneratedNameHolder::GenerateName(char const*)
 W CDecal* _CreateEntityTemplate<CDecal>(CDecal*, char const*)
 W CDecal::~CDecal()
 W CDecalEmitterSystem::~CDecalEmitterSystem()
 W CDefOps<CAI_BaseNPC*>::LessFunc(CAI_BaseNPC* const&, CAI_BaseNPC* const&)
 W CDefOps<CBaseEntity*>::LessFunc(CBaseEntity* const&, CBaseEntity* const&)
 W CDefOps<CPhysCollide const*>::LessFunc(CPhysCollide const* const&, CPhysCollide const* const&)
 W CDefOps<IPhysicsObject*>::LessFunc(IPhysicsObject* const&, IPhysicsObject* const&)
 W CDefOps<int>::LessFunc(int const&, int const&)
 W CDefOps<unsigned int>::LessFunc(unsigned int const&, unsigned int const&)
 W CDefSaveRestoreBlockHandler::PostRestore()
 W CDefSaveRestoreBlockHandler::PostSave()
 W CDefSaveRestoreBlockHandler::PreRestore()
 W CDefSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 W CDefSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 W CDefSaveRestoreBlockHandler::Restore(IRestore*, bool)
 W CDefSaveRestoreBlockHandler::Save(ISave*)
 W CDefSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 W CDefSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CDefSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CDefSaveRestoreOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 W CDefSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CDefSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CDefaultPlayerPickupVPhysics::ForcePhysgunOpen(CBasePlayer*)
 W CDefaultPlayerPickupVPhysics::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 W CDefaultPlayerPickupVPhysics::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W CDefaultPlayerPickupVPhysics::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W CDefaultPlayerPickupVPhysics::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W CDefaultPlayerPickupVPhysics::PhysGunLaunchAngularImpulse()
 W CDefaultPlayerPickupVPhysics::PreferredCarryAngles()
 W CDefaultPlayerPickupVPhysics::ShouldPuntUseLaunchForces()
 W CDefaultResponseSystem::GetScriptFile()
 W CDefaultResponseSystem::LevelInitPostEntity()
 W CDefaultResponseSystem::LevelInitPreEntity()
 W CDefaultResponseSystem::Release()
 W CDefaultResponseSystem::~CDefaultResponseSystem()
 W CDefaultResponseSystemSaveRestoreBlockHandler::GetBlockName()
 W CDefaultResponseSystemSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 W CDefaultResponseSystemSaveRestoreBlockHandler::Restore(IRestore*, bool)
 W CDefaultResponseSystemSaveRestoreBlockHandler::Save(ISave*)
 W CDefaultResponseSystemSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 W CDevShotSystem::FrameUpdatePostEntityThink()
 W CDevShotSystem::LevelInitPreEntity()
 W CDevShotSystem::SafeRemoveIfDesired()
 W CDevShotSystem::~CDevShotSystem()
 W CDynamicLight* _CreateEntityTemplate<CDynamicLight>(CDynamicLight*, char const*)
 W CDynamicLight::~CDynamicLight()
 W CDynamicProp* _CreateEntityTemplate<CDynamicProp>(CDynamicProp*, char const*)
 W CDynamicProp::~CDynamicProp()
 W CEmbers* _CreateEntityTemplate<CEmbers>(CEmbers*, char const*)
 W CEmbers::~CEmbers()
 W CEnableMotionFixup* _CreateEntityTemplate<CEnableMotionFixup>(CEnableMotionFixup*, char const*)
 W CEnableMotionFixup::~CEnableMotionFixup()
 W CEntityBlocker* _CreateEntityTemplate<CEntityBlocker>(CEntityBlocker*, char const*)
 W CEntityBlocker::~CEntityBlocker()
 W CEntityClassList<CPhysicsNPCSolver>::LevelShutdownPostEntity()
 W CEntityClassList<CPointCamera>::LevelShutdownPostEntity()
 W CEntityClassList<CSkyCamera>::LevelShutdownPostEntity()
 W CEntityDataInstantiator<CPositionWatcherList>::CompareFunc(CEntityDataInstantiator<CPositionWatcherList>::HashEntry const&, CEntityDataInstantiator<CPositionWatcherList>::HashEntry const&)
 W CEntityDataInstantiator<CPositionWatcherList>::CreateDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<CPositionWatcherList>::DestroyDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<CPositionWatcherList>::GetDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<CPositionWatcherList>::KeyFunc(CEntityDataInstantiator<CPositionWatcherList>::HashEntry const&)
 W CEntityDataInstantiator<CPositionWatcherList>::~CEntityDataInstantiator()
 W CEntityDataInstantiator<ModelWidthScale>::CompareFunc(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)
 W CEntityDataInstantiator<ModelWidthScale>::CreateDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<ModelWidthScale>::DestroyDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<ModelWidthScale>::GetDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<ModelWidthScale>::KeyFunc(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)
 W CEntityDataInstantiator<ModelWidthScale>::~CEntityDataInstantiator()
 W CEntityDataInstantiator<StepSimulationData>::CompareFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 W CEntityDataInstantiator<StepSimulationData>::CreateDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<StepSimulationData>::DestroyDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<StepSimulationData>::GetDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<StepSimulationData>::KeyFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 W CEntityDataInstantiator<StepSimulationData>::~CEntityDataInstantiator()
 W CEntityDataInstantiator<groundlink_t>::CompareFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 W CEntityDataInstantiator<groundlink_t>::CreateDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<groundlink_t>::DestroyDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<groundlink_t>::GetDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<groundlink_t>::KeyFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 W CEntityDataInstantiator<groundlink_t>::~CEntityDataInstantiator()
 W CEntityDataInstantiator<physicspushlist_t>::CompareFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 W CEntityDataInstantiator<physicspushlist_t>::CreateDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<physicspushlist_t>::DestroyDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<physicspushlist_t>::GetDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<physicspushlist_t>::KeyFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 W CEntityDataInstantiator<physicspushlist_t>::~CEntityDataInstantiator()
 W CEntityDataInstantiator<touchlink_t>::CompareFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 W CEntityDataInstantiator<touchlink_t>::CreateDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<touchlink_t>::DestroyDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<touchlink_t>::GetDataObject(CBaseEntity const*)
 W CEntityDataInstantiator<touchlink_t>::KeyFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 W CEntityDataInstantiator<touchlink_t>::~CEntityDataInstantiator()
 W CEntityDissolve* _CreateEntityTemplate<CEntityDissolve>(CEntityDissolve*, char const*)
 W CEntityFactory<CAISound>::Create(char const*)
 W CEntityFactory<CAISound>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_AllySpeechManager>::Create(char const*)
 W CEntityFactory<CAI_AllySpeechManager>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_AssaultGoal>::Create(char const*)
 W CEntityFactory<CAI_AssaultGoal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_BattleLine>::Create(char const*)
 W CEntityFactory<CAI_BattleLine>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_ChangeHintGroup>::Create(char const*)
 W CEntityFactory<CAI_ChangeHintGroup>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_ChangeTarget>::Create(char const*)
 W CEntityFactory<CAI_ChangeTarget>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_DynamicLink>::Create(char const*)
 W CEntityFactory<CAI_DynamicLink>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_DynamicLinkController>::Create(char const*)
 W CEntityFactory<CAI_DynamicLinkController>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_FollowGoal>::Create(char const*)
 W CEntityFactory<CAI_FollowGoal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_Hint>::Create(char const*)
 W CEntityFactory<CAI_Hint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_LeadGoal>::Create(char const*)
 W CEntityFactory<CAI_LeadGoal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_LeadGoal_Weapon>::Create(char const*)
 W CEntityFactory<CAI_LeadGoal_Weapon>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_NetworkManager>::Create(char const*)
 W CEntityFactory<CAI_NetworkManager>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_ScriptConditions>::Create(char const*)
 W CEntityFactory<CAI_ScriptConditions>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_ScriptedSchedule>::Create(char const*)
 W CEntityFactory<CAI_ScriptedSchedule>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_ScriptedSentence>::Create(char const*)
 W CEntityFactory<CAI_ScriptedSentence>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_ScriptedSequence>::Create(char const*)
 W CEntityFactory<CAI_ScriptedSequence>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_SpeechFilter>::Create(char const*)
 W CEntityFactory<CAI_SpeechFilter>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_StandoffGoal>::Create(char const*)
 W CEntityFactory<CAI_StandoffGoal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAI_TestHull>::Create(char const*)
 W CEntityFactory<CAI_TestHull>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAK47>::Create(char const*)
 W CEntityFactory<CAK47>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAmbientGeneric>::Create(char const*)
 W CEntityFactory<CAmbientGeneric>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAreaPortal>::Create(char const*)
 W CEntityFactory<CAreaPortal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CAssaultPoint>::Create(char const*)
 W CEntityFactory<CAssaultPoint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseButton>::Create(char const*)
 W CEntityFactory<CBaseButton>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseCSGrenade>::Create(char const*)
 W CEntityFactory<CBaseCSGrenade>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseDMStart>::Create(char const*)
 W CEntityFactory<CBaseDMStart>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseDoor>::Create(char const*)
 W CEntityFactory<CBaseDoor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseFilter>::Create(char const*)
 W CEntityFactory<CBaseFilter>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseFlex>::Create(char const*)
 W CEntityFactory<CBaseFlex>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseGrenade>::Create(char const*)
 W CEntityFactory<CBaseGrenade>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseMoveBehavior>::Create(char const*)
 W CEntityFactory<CBaseMoveBehavior>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseTrigger>::Create(char const*)
 W CEntityFactory<CBaseTrigger>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBaseViewModel>::Create(char const*)
 W CEntityFactory<CBaseViewModel>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBeam>::Create(char const*)
 W CEntityFactory<CBeam>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBlendingCycler>::Create(char const*)
 W CEntityFactory<CBlendingCycler>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBlood>::Create(char const*)
 W CEntityFactory<CBlood>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBombTarget>::Create(char const*)
 W CEntityFactory<CBombTarget>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBoneFollower>::Create(char const*)
 W CEntityFactory<CBoneFollower>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBreakable>::Create(char const*)
 W CEntityFactory<CBreakable>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBreakableSurface>::Create(char const*)
 W CEntityFactory<CBreakableSurface>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBubbling>::Create(char const*)
 W CEntityFactory<CBubbling>::Destroy(IServerNetworkable*)
 W CEntityFactory<CBuyZone>::Create(char const*)
 W CEntityFactory<CBuyZone>::Destroy(IServerNetworkable*)
 W CEntityFactory<CC4>::Create(char const*)
 W CEntityFactory<CC4>::Destroy(IServerNetworkable*)
 W CEntityFactory<CCSBot>::Create(char const*)
 W CEntityFactory<CCSBot>::Destroy(IServerNetworkable*)
 W CEntityFactory<CCSGameRulesProxy>::Create(char const*)
 W CEntityFactory<CCSGameRulesProxy>::Destroy(IServerNetworkable*)
 W CEntityFactory<CCSPlayer>::Create(char const*)
 W CEntityFactory<CCSPlayer>::Destroy(IServerNetworkable*)
 W CEntityFactory<CCSPlayerResource>::Create(char const*)
 W CEntityFactory<CCSPlayerResource>::Destroy(IServerNetworkable*)
 W CEntityFactory<CCSRagdoll>::Create(char const*)
 W CEntityFactory<CCSRagdoll>::Destroy(IServerNetworkable*)
 W CEntityFactory<CCSTeam>::Create(char const*)
 W CEntityFactory<CCSTeam>::Destroy(IServerNetworkable*)
 W CEntityFactory<CChangeLevel>::Create(char const*)
 W CEntityFactory<CChangeLevel>::Destroy(IServerNetworkable*)
 W CEntityFactory<CConstraintAnchor>::Create(char const*)
 W CEntityFactory<CConstraintAnchor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CCredits>::Create(char const*)
 W CEntityFactory<CCredits>::Destroy(IServerNetworkable*)
 W CEntityFactory<CDEagle>::Create(char const*)
 W CEntityFactory<CDEagle>::Destroy(IServerNetworkable*)
 W CEntityFactory<CDecal>::Create(char const*)
 W CEntityFactory<CDecal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CDynamicLight>::Create(char const*)
 W CEntityFactory<CDynamicLight>::Destroy(IServerNetworkable*)
 W CEntityFactory<CDynamicProp>::Create(char const*)
 W CEntityFactory<CDynamicProp>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEmbers>::Create(char const*)
 W CEntityFactory<CEmbers>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnableMotionFixup>::Create(char const*)
 W CEntityFactory<CEnableMotionFixup>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEntityBlocker>::Create(char const*)
 W CEntityFactory<CEntityBlocker>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEntityDissolve>::Create(char const*)
 W CEntityFactory<CEntityDissolve>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEntityFlame>::Create(char const*)
 W CEntityFactory<CEntityFlame>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEntityParticleTrail>::Create(char const*)
 W CEntityFactory<CEntityParticleTrail>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvBeam>::Create(char const*)
 W CEntityFactory<CEnvBeam>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvBeverage>::Create(char const*)
 W CEntityFactory<CEnvBeverage>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvDetailController>::Create(char const*)
 W CEntityFactory<CEnvDetailController>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvDustPuff>::Create(char const*)
 W CEntityFactory<CEnvDustPuff>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvEffectsScript>::Create(char const*)
 W CEntityFactory<CEnvEffectsScript>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvEntityMaker>::Create(char const*)
 W CEntityFactory<CEnvEntityMaker>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvExplosion>::Create(char const*)
 W CEntityFactory<CEnvExplosion>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvFade>::Create(char const*)
 W CEntityFactory<CEnvFade>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvFireSensor>::Create(char const*)
 W CEntityFactory<CEnvFireSensor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvFireSource>::Create(char const*)
 W CEntityFactory<CEnvFireSource>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvFunnel>::Create(char const*)
 W CEntityFactory<CEnvFunnel>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvGlobal>::Create(char const*)
 W CEntityFactory<CEnvGlobal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvGunfire>::Create(char const*)
 W CEntityFactory<CEnvGunfire>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvHudHint>::Create(char const*)
 W CEntityFactory<CEnvHudHint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvLaser>::Create(char const*)
 W CEntityFactory<CEnvLaser>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvLight>::Create(char const*)
 W CEntityFactory<CEnvLight>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvMicrophone>::Create(char const*)
 W CEntityFactory<CEnvMicrophone>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvMuzzleFlash>::Create(char const*)
 W CEntityFactory<CEnvMuzzleFlash>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvParticleScript>::Create(char const*)
 W CEntityFactory<CEnvParticleScript>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvPlayerSurfaceTrigger>::Create(char const*)
 W CEntityFactory<CEnvPlayerSurfaceTrigger>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvQuadraticBeam>::Create(char const*)
 W CEntityFactory<CEnvQuadraticBeam>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvScreenOverlay>::Create(char const*)
 W CEntityFactory<CEnvScreenOverlay>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvShake>::Create(char const*)
 W CEntityFactory<CEnvShake>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvShooter>::Create(char const*)
 W CEntityFactory<CEnvShooter>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvSoundscape>::Create(char const*)
 W CEntityFactory<CEnvSoundscape>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvSoundscapeProxy>::Create(char const*)
 W CEntityFactory<CEnvSoundscapeProxy>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvSoundscapeTriggerable>::Create(char const*)
 W CEntityFactory<CEnvSoundscapeTriggerable>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvSpark>::Create(char const*)
 W CEntityFactory<CEnvSpark>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvSplash>::Create(char const*)
 W CEntityFactory<CEnvSplash>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvTracer>::Create(char const*)
 W CEntityFactory<CEnvTracer>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvWind>::Create(char const*)
 W CEntityFactory<CEnvWind>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEnvZoom>::Create(char const*)
 W CEntityFactory<CEnvZoom>::Destroy(IServerNetworkable*)
 W CEntityFactory<CEventQueueSaveLoadProxy>::Create(char const*)
 W CEntityFactory<CEventQueueSaveLoadProxy>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFilterClass>::Create(char const*)
 W CEntityFactory<CFilterClass>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFilterMultiple>::Create(char const*)
 W CEntityFactory<CFilterMultiple>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFilterName>::Create(char const*)
 W CEntityFactory<CFilterName>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFire>::Create(char const*)
 W CEntityFactory<CFire>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFireSmoke>::Create(char const*)
 W CEntityFactory<CFireSmoke>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFish>::Create(char const*)
 W CEntityFactory<CFish>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFishPool>::Create(char const*)
 W CEntityFactory<CFishPool>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFlashbang>::Create(char const*)
 W CEntityFactory<CFlashbang>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFlashbangProjectile>::Create(char const*)
 W CEntityFactory<CFlashbangProjectile>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFlextalkActor>::Create(char const*)
 W CEntityFactory<CFlextalkActor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFogController>::Create(char const*)
 W CEntityFactory<CFogController>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncAreaPortalWindow>::Create(char const*)
 W CEntityFactory<CFuncAreaPortalWindow>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncBrush>::Create(char const*)
 W CEntityFactory<CFuncBrush>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncConveyor>::Create(char const*)
 W CEntityFactory<CFuncConveyor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncIllusionary>::Create(char const*)
 W CEntityFactory<CFuncIllusionary>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncLadder>::Create(char const*)
 W CEntityFactory<CFuncLadder>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncLadderEndPoint>::Create(char const*)
 W CEntityFactory<CFuncLadderEndPoint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncMonitor>::Create(char const*)
 W CEntityFactory<CFuncMonitor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncMoveLinear>::Create(char const*)
 W CEntityFactory<CFuncMoveLinear>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncOccluder>::Create(char const*)
 W CEntityFactory<CFuncOccluder>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncPlat>::Create(char const*)
 W CEntityFactory<CFuncPlat>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncPlatRot>::Create(char const*)
 W CEntityFactory<CFuncPlatRot>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncRotating>::Create(char const*)
 W CEntityFactory<CFuncRotating>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncSmokeVolume>::Create(char const*)
 W CEntityFactory<CFuncSmokeVolume>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncTankTrain>::Create(char const*)
 W CEntityFactory<CFuncTankTrain>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncTrackAuto>::Create(char const*)
 W CEntityFactory<CFuncTrackAuto>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncTrackChange>::Create(char const*)
 W CEntityFactory<CFuncTrackChange>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncTrackTrain>::Create(char const*)
 W CEntityFactory<CFuncTrackTrain>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncTrain>::Create(char const*)
 W CEntityFactory<CFuncTrain>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncTrainControls>::Create(char const*)
 W CEntityFactory<CFuncTrainControls>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncVPhysicsClip>::Create(char const*)
 W CEntityFactory<CFuncVPhysicsClip>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncVehicleClip>::Create(char const*)
 W CEntityFactory<CFuncVehicleClip>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncWall>::Create(char const*)
 W CEntityFactory<CFuncWall>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFuncWallToggle>::Create(char const*)
 W CEntityFactory<CFuncWallToggle>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFunc_DustCloud>::Create(char const*)
 W CEntityFactory<CFunc_DustCloud>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFunc_DustMotes>::Create(char const*)
 W CEntityFactory<CFunc_DustMotes>::Destroy(IServerNetworkable*)
 W CEntityFactory<CFunc_LOD>::Create(char const*)
 W CEntityFactory<CFunc_LOD>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGameEnd>::Create(char const*)
 W CEntityFactory<CGameEnd>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGamePlayerEquip>::Create(char const*)
 W CEntityFactory<CGamePlayerEquip>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGamePlayerTeam>::Create(char const*)
 W CEntityFactory<CGamePlayerTeam>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGamePlayerZone>::Create(char const*)
 W CEntityFactory<CGamePlayerZone>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGameScore>::Create(char const*)
 W CEntityFactory<CGameScore>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGameText>::Create(char const*)
 W CEntityFactory<CGameText>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGameUI>::Create(char const*)
 W CEntityFactory<CGameUI>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGameWeaponManager>::Create(char const*)
 W CEntityFactory<CGameWeaponManager>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGenericActor>::Create(char const*)
 W CEntityFactory<CGenericActor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGenericCycler>::Create(char const*)
 W CEntityFactory<CGenericCycler>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGenericFlexCycler>::Create(char const*)
 W CEntityFactory<CGenericFlexCycler>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGenericNPC>::Create(char const*)
 W CEntityFactory<CGenericNPC>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGib>::Create(char const*)
 W CEntityFactory<CGib>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGibShooter>::Create(char const*)
 W CEntityFactory<CGibShooter>::Destroy(IServerNetworkable*)
 W CEntityFactory<CGunTarget>::Create(char const*)
 W CEntityFactory<CGunTarget>::Destroy(IServerNetworkable*)
 W CEntityFactory<CHEGrenade>::Create(char const*)
 W CEntityFactory<CHEGrenade>::Destroy(IServerNetworkable*)
 W CEntityFactory<CHEGrenadeProjectile>::Create(char const*)
 W CEntityFactory<CHEGrenadeProjectile>::Destroy(IServerNetworkable*)
 W CEntityFactory<CHandleDummy>::Create(char const*)
 W CEntityFactory<CHandleDummy>::Destroy(IServerNetworkable*)
 W CEntityFactory<CHandleTest>::Create(char const*)
 W CEntityFactory<CHandleTest>::Destroy(IServerNetworkable*)
 W CEntityFactory<CHostage>::Create(char const*)
 W CEntityFactory<CHostage>::Destroy(IServerNetworkable*)
 W CEntityFactory<CHostageRescueZone>::Create(char const*)
 W CEntityFactory<CHostageRescueZone>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInfoCameraLink>::Create(char const*)
 W CEntityFactory<CInfoCameraLink>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInfoIntermission>::Create(char const*)
 W CEntityFactory<CInfoIntermission>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInfoLadder>::Create(char const*)
 W CEntityFactory<CInfoLadder>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInfoLadderDismount>::Create(char const*)
 W CEntityFactory<CInfoLadderDismount>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInfoLightingRelative>::Create(char const*)
 W CEntityFactory<CInfoLightingRelative>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInfoMassCenter>::Create(char const*)
 W CEntityFactory<CInfoMassCenter>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInfoViewParameters>::Create(char const*)
 W CEntityFactory<CInfoViewParameters>::Destroy(IServerNetworkable*)
 W CEntityFactory<CInstancedSceneEntity>::Create(char const*)
 W CEntityFactory<CInstancedSceneEntity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo338MAG>::Create(char const*)
 W CEntityFactory<CItemAmmo338MAG>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo357SIG>::Create(char const*)
 W CEntityFactory<CItemAmmo357SIG>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo45ACP>::Create(char const*)
 W CEntityFactory<CItemAmmo45ACP>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo50AE>::Create(char const*)
 W CEntityFactory<CItemAmmo50AE>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo556MM>::Create(char const*)
 W CEntityFactory<CItemAmmo556MM>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo556MM_BOX>::Create(char const*)
 W CEntityFactory<CItemAmmo556MM_BOX>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo57MM>::Create(char const*)
 W CEntityFactory<CItemAmmo57MM>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo762MM>::Create(char const*)
 W CEntityFactory<CItemAmmo762MM>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmo9MM>::Create(char const*)
 W CEntityFactory<CItemAmmo9MM>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAmmoBuckshot>::Create(char const*)
 W CEntityFactory<CItemAmmoBuckshot>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemAssaultSuit>::Create(char const*)
 W CEntityFactory<CItemAssaultSuit>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemDefuser>::Create(char const*)
 W CEntityFactory<CItemDefuser>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemKevlar>::Create(char const*)
 W CEntityFactory<CItemKevlar>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemNvgs>::Create(char const*)
 W CEntityFactory<CItemNvgs>::Destroy(IServerNetworkable*)
 W CEntityFactory<CItemSoda>::Create(char const*)
 W CEntityFactory<CItemSoda>::Destroy(IServerNetworkable*)
 W CEntityFactory<CKeepUpright>::Create(char const*)
 W CEntityFactory<CKeepUpright>::Destroy(IServerNetworkable*)
 W CEntityFactory<CKnife>::Create(char const*)
 W CEntityFactory<CKnife>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLight>::Create(char const*)
 W CEntityFactory<CLight>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLightGlow>::Create(char const*)
 W CEntityFactory<CLightGlow>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicAuto>::Create(char const*)
 W CEntityFactory<CLogicAuto>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicAutosave>::Create(char const*)
 W CEntityFactory<CLogicAutosave>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicBranch>::Create(char const*)
 W CEntityFactory<CLogicBranch>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicCase>::Create(char const*)
 W CEntityFactory<CLogicCase>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicCollisionPair>::Create(char const*)
 W CEntityFactory<CLogicCollisionPair>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicCompare>::Create(char const*)
 W CEntityFactory<CLogicCompare>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicCompareInteger>::Create(char const*)
 W CEntityFactory<CLogicCompareInteger>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicLineToEntity>::Create(char const*)
 W CEntityFactory<CLogicLineToEntity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicMeasureMovement>::Create(char const*)
 W CEntityFactory<CLogicMeasureMovement>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicNavigation>::Create(char const*)
 W CEntityFactory<CLogicNavigation>::Destroy(IServerNetworkable*)
 W CEntityFactory<CLogicRelay>::Create(char const*)
 W CEntityFactory<CLogicRelay>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMapInfo>::Create(char const*)
 W CEntityFactory<CMapInfo>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMaterialModifyControl>::Create(char const*)
 W CEntityFactory<CMaterialModifyControl>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMathColorBlend>::Create(char const*)
 W CEntityFactory<CMathColorBlend>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMathCounter>::Create(char const*)
 W CEntityFactory<CMathCounter>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMathRemap>::Create(char const*)
 W CEntityFactory<CMathRemap>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMessage>::Create(char const*)
 W CEntityFactory<CMessage>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMessageEntity>::Create(char const*)
 W CEntityFactory<CMessageEntity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMomentaryRotButton>::Create(char const*)
 W CEntityFactory<CMomentaryRotButton>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMovementSpeedMod>::Create(char const*)
 W CEntityFactory<CMovementSpeedMod>::Destroy(IServerNetworkable*)
 W CEntityFactory<CMultiSource>::Create(char const*)
 W CEntityFactory<CMultiSource>::Destroy(IServerNetworkable*)
 W CEntityFactory<CNPC_Furniture>::Create(char const*)
 W CEntityFactory<CNPC_Furniture>::Destroy(IServerNetworkable*)
 W CEntityFactory<CNPC_VehicleDriver>::Create(char const*)
 W CEntityFactory<CNPC_VehicleDriver>::Destroy(IServerNetworkable*)
 W CEntityFactory<CNodeEnt>::Create(char const*)
 W CEntityFactory<CNodeEnt>::Destroy(IServerNetworkable*)
 W CEntityFactory<CNullEntity>::Create(char const*)
 W CEntityFactory<CNullEntity>::Destroy(IServerNetworkable*)
 W CEntityFactory<COrnamentProp>::Create(char const*)
 W CEntityFactory<COrnamentProp>::Destroy(IServerNetworkable*)
 W CEntityFactory<CParticleFire>::Create(char const*)
 W CEntityFactory<CParticleFire>::Destroy(IServerNetworkable*)
 W CEntityFactory<CParticleLight>::Create(char const*)
 W CEntityFactory<CParticleLight>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPathCorner>::Create(char const*)
 W CEntityFactory<CPathCorner>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPathCornerCrash>::Create(char const*)
 W CEntityFactory<CPathCornerCrash>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPathKeyFrame>::Create(char const*)
 W CEntityFactory<CPathKeyFrame>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPathTrack>::Create(char const*)
 W CEntityFactory<CPathTrack>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysBallSocket>::Create(char const*)
 W CEntityFactory<CPhysBallSocket>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysBox>::Create(char const*)
 W CEntityFactory<CPhysBox>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysBoxMultiplayer>::Create(char const*)
 W CEntityFactory<CPhysBoxMultiplayer>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysConstraintSystem>::Create(char const*)
 W CEntityFactory<CPhysConstraintSystem>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysConvert>::Create(char const*)
 W CEntityFactory<CPhysConvert>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysExplosion>::Create(char const*)
 W CEntityFactory<CPhysExplosion>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysFixed>::Create(char const*)
 W CEntityFactory<CPhysFixed>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysHinge>::Create(char const*)
 W CEntityFactory<CPhysHinge>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysImpact>::Create(char const*)
 W CEntityFactory<CPhysImpact>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysLength>::Create(char const*)
 W CEntityFactory<CPhysLength>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysMagnet>::Create(char const*)
 W CEntityFactory<CPhysMagnet>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysMotor>::Create(char const*)
 W CEntityFactory<CPhysMotor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysPulley>::Create(char const*)
 W CEntityFactory<CPhysPulley>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysSlideConstraint>::Create(char const*)
 W CEntityFactory<CPhysSlideConstraint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysSphere>::Create(char const*)
 W CEntityFactory<CPhysSphere>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysThruster>::Create(char const*)
 W CEntityFactory<CPhysThruster>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysTorque>::Create(char const*)
 W CEntityFactory<CPhysTorque>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsCannister>::Create(char const*)
 W CEntityFactory<CPhysicsCannister>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsEntitySolver>::Create(char const*)
 W CEntityFactory<CPhysicsEntitySolver>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsNPCSolver>::Create(char const*)
 W CEntityFactory<CPhysicsNPCSolver>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsProp>::Create(char const*)
 W CEntityFactory<CPhysicsProp>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsPropMultiplayer>::Create(char const*)
 W CEntityFactory<CPhysicsPropMultiplayer>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsPropRespawnable>::Create(char const*)
 W CEntityFactory<CPhysicsPropRespawnable>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsSpring>::Create(char const*)
 W CEntityFactory<CPhysicsSpring>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPhysicsWire>::Create(char const*)
 W CEntityFactory<CPhysicsWire>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPlantedC4>::Create(char const*)
 W CEntityFactory<CPlantedC4>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPlasma>::Create(char const*)
 W CEntityFactory<CPlasma>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPlayerResource>::Create(char const*)
 W CEntityFactory<CPlayerResource>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointAngleSensor>::Create(char const*)
 W CEntityFactory<CPointAngleSensor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointAngularVelocitySensor>::Create(char const*)
 W CEntityFactory<CPointAngularVelocitySensor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointCamera>::Create(char const*)
 W CEntityFactory<CPointCamera>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointClientCommand>::Create(char const*)
 W CEntityFactory<CPointClientCommand>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointDevShotCamera>::Create(char const*)
 W CEntityFactory<CPointDevShotCamera>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointEntity>::Create(char const*)
 W CEntityFactory<CPointEntity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointHurt>::Create(char const*)
 W CEntityFactory<CPointHurt>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointPlayerMoveConstraint>::Create(char const*)
 W CEntityFactory<CPointPlayerMoveConstraint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointServerCommand>::Create(char const*)
 W CEntityFactory<CPointServerCommand>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointSpotlight>::Create(char const*)
 W CEntityFactory<CPointSpotlight>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointTeleport>::Create(char const*)
 W CEntityFactory<CPointTeleport>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPointTemplate>::Create(char const*)
 W CEntityFactory<CPointTemplate>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPrecipitation>::Create(char const*)
 W CEntityFactory<CPrecipitation>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPredictedViewModel>::Create(char const*)
 W CEntityFactory<CPredictedViewModel>::Destroy(IServerNetworkable*)
 W CEntityFactory<CProjectedDecal>::Create(char const*)
 W CEntityFactory<CProjectedDecal>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPropDoorRotating>::Create(char const*)
 W CEntityFactory<CPropDoorRotating>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPropVehicle>::Create(char const*)
 W CEntityFactory<CPropVehicle>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPropVehicleDriveable>::Create(char const*)
 W CEntityFactory<CPropVehicleDriveable>::Destroy(IServerNetworkable*)
 W CEntityFactory<CPushable>::Create(char const*)
 W CEntityFactory<CPushable>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRagGib>::Create(char const*)
 W CEntityFactory<CRagGib>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRagdollBoogie>::Create(char const*)
 W CEntityFactory<CRagdollBoogie>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRagdollConstraint>::Create(char const*)
 W CEntityFactory<CRagdollConstraint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRagdollMagnet>::Create(char const*)
 W CEntityFactory<CRagdollMagnet>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRagdollManager>::Create(char const*)
 W CEntityFactory<CRagdollManager>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRagdollProp>::Create(char const*)
 W CEntityFactory<CRagdollProp>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRagdollPropAttached>::Create(char const*)
 W CEntityFactory<CRagdollPropAttached>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRallyPoint>::Create(char const*)
 W CEntityFactory<CRallyPoint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRevertSaved>::Create(char const*)
 W CEntityFactory<CRevertSaved>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRopeAnchor>::Create(char const*)
 W CEntityFactory<CRopeAnchor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRopeKeyframe>::Create(char const*)
 W CEntityFactory<CRopeKeyframe>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRotButton>::Create(char const*)
 W CEntityFactory<CRotButton>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRotDoor>::Create(char const*)
 W CEntityFactory<CRotDoor>::Destroy(IServerNetworkable*)
 W CEntityFactory<CRotorWashShooter>::Create(char const*)
 W CEntityFactory<CRotorWashShooter>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSceneEntity>::Create(char const*)
 W CEntityFactory<CSceneEntity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSceneManager>::Create(char const*)
 W CEntityFactory<CSceneManager>::Destroy(IServerNetworkable*)
 W CEntityFactory<CScriptedTarget>::Create(char const*)
 W CEntityFactory<CScriptedTarget>::Destroy(IServerNetworkable*)
 W CEntityFactory<CShadowControl>::Create(char const*)
 W CEntityFactory<CShadowControl>::Destroy(IServerNetworkable*)
 W CEntityFactory<CShower>::Create(char const*)
 W CEntityFactory<CShower>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSimplePhysicsBrush>::Create(char const*)
 W CEntityFactory<CSimplePhysicsBrush>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSimplePhysicsProp>::Create(char const*)
 W CEntityFactory<CSimplePhysicsProp>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSkyCamera>::Create(char const*)
 W CEntityFactory<CSkyCamera>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSmokeGrenade>::Create(char const*)
 W CEntityFactory<CSmokeGrenade>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSmokeGrenadeProjectile>::Create(char const*)
 W CEntityFactory<CSmokeGrenadeProjectile>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSmokeStack>::Create(char const*)
 W CEntityFactory<CSmokeStack>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSoundEnt>::Create(char const*)
 W CEntityFactory<CSoundEnt>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSpotlightEnd>::Create(char const*)
 W CEntityFactory<CSpotlightEnd>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSprayCan>::Create(char const*)
 W CEntityFactory<CSprayCan>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSprite>::Create(char const*)
 W CEntityFactory<CSprite>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSpriteTrail>::Create(char const*)
 W CEntityFactory<CSpriteTrail>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSteamJet>::Create(char const*)
 W CEntityFactory<CSteamJet>::Destroy(IServerNetworkable*)
 W CEntityFactory<CStripWeapons>::Create(char const*)
 W CEntityFactory<CStripWeapons>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSun>::Create(char const*)
 W CEntityFactory<CSun>::Destroy(IServerNetworkable*)
 W CEntityFactory<CSurroundTest>::Create(char const*)
 W CEntityFactory<CSurroundTest>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTankTargetChange>::Create(char const*)
 W CEntityFactory<CTankTargetChange>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTankTrainAI>::Create(char const*)
 W CEntityFactory<CTankTrainAI>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTargetCDAudioRep>::Create(char const*)
 W CEntityFactory<CTargetCDAudioRep>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTargetChangeGravity>::Create(char const*)
 W CEntityFactory<CTargetChangeGravity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTeam>::Create(char const*)
 W CEntityFactory<CTeam>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTeamSpawnPoint>::Create(char const*)
 W CEntityFactory<CTeamSpawnPoint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTeamVehicleSpawnPoint>::Create(char const*)
 W CEntityFactory<CTeamVehicleSpawnPoint>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTempEntTester>::Create(char const*)
 W CEntityFactory<CTempEntTester>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTerrainMorph>::Create(char const*)
 W CEntityFactory<CTerrainMorph>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTesla>::Create(char const*)
 W CEntityFactory<CTesla>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTestEffect>::Create(char const*)
 W CEntityFactory<CTestEffect>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTestTraceline>::Create(char const*)
 W CEntityFactory<CTestTraceline>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTest_ProxyToggle_Networkable>::Create(char const*)
 W CEntityFactory<CTest_ProxyToggle_Networkable>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTextureToggle>::Create(char const*)
 W CEntityFactory<CTextureToggle>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTimerEntity>::Create(char const*)
 W CEntityFactory<CTimerEntity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerBrush>::Create(char const*)
 W CEntityFactory<CTriggerBrush>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerCDAudio>::Create(char const*)
 W CEntityFactory<CTriggerCDAudio>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerCamera>::Create(char const*)
 W CEntityFactory<CTriggerCamera>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerGravity>::Create(char const*)
 W CEntityFactory<CTriggerGravity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerHurt>::Create(char const*)
 W CEntityFactory<CTriggerHurt>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerImpact>::Create(char const*)
 W CEntityFactory<CTriggerImpact>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerLook>::Create(char const*)
 W CEntityFactory<CTriggerLook>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerMultiple>::Create(char const*)
 W CEntityFactory<CTriggerMultiple>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerOnce>::Create(char const*)
 W CEntityFactory<CTriggerOnce>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerPlayerMovement>::Create(char const*)
 W CEntityFactory<CTriggerPlayerMovement>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerProximity>::Create(char const*)
 W CEntityFactory<CTriggerProximity>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerPush>::Create(char const*)
 W CEntityFactory<CTriggerPush>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerRemove>::Create(char const*)
 W CEntityFactory<CTriggerRemove>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerSave>::Create(char const*)
 W CEntityFactory<CTriggerSave>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerSoundscape>::Create(char const*)
 W CEntityFactory<CTriggerSoundscape>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerTeleport>::Create(char const*)
 W CEntityFactory<CTriggerTeleport>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerToggleSave>::Create(char const*)
 W CEntityFactory<CTriggerToggleSave>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerVPhysicsMotion>::Create(char const*)
 W CEntityFactory<CTriggerVPhysicsMotion>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerVolume>::Create(char const*)
 W CEntityFactory<CTriggerVolume>::Destroy(IServerNetworkable*)
 W CEntityFactory<CTriggerWind>::Create(char const*)
 W CEntityFactory<CTriggerWind>::Destroy(IServerNetworkable*)
 W CEntityFactory<CVGuiScreen>::Create(char const*)
 W CEntityFactory<CVGuiScreen>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWaterBullet>::Create(char const*)
 W CEntityFactory<CWaterBullet>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWaterLODControl>::Create(char const*)
 W CEntityFactory<CWaterLODControl>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponAWP>::Create(char const*)
 W CEntityFactory<CWeaponAWP>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponAug>::Create(char const*)
 W CEntityFactory<CWeaponAug>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponCSBase>::Create(char const*)
 W CEntityFactory<CWeaponCSBase>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponCSBaseGun>::Create(char const*)
 W CEntityFactory<CWeaponCSBaseGun>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponCubemap>::Create(char const*)
 W CEntityFactory<CWeaponCubemap>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponCycler>::Create(char const*)
 W CEntityFactory<CWeaponCycler>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponElite>::Create(char const*)
 W CEntityFactory<CWeaponElite>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponFamas>::Create(char const*)
 W CEntityFactory<CWeaponFamas>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponFiveSeven>::Create(char const*)
 W CEntityFactory<CWeaponFiveSeven>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponG3SG1>::Create(char const*)
 W CEntityFactory<CWeaponG3SG1>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponGalil>::Create(char const*)
 W CEntityFactory<CWeaponGalil>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponGlock>::Create(char const*)
 W CEntityFactory<CWeaponGlock>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponM249>::Create(char const*)
 W CEntityFactory<CWeaponM249>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponM3>::Create(char const*)
 W CEntityFactory<CWeaponM3>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponM4A1>::Create(char const*)
 W CEntityFactory<CWeaponM4A1>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponMAC10>::Create(char const*)
 W CEntityFactory<CWeaponMAC10>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponMP5Navy>::Create(char const*)
 W CEntityFactory<CWeaponMP5Navy>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponP228>::Create(char const*)
 W CEntityFactory<CWeaponP228>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponP90>::Create(char const*)
 W CEntityFactory<CWeaponP90>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponSG550>::Create(char const*)
 W CEntityFactory<CWeaponSG550>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponSG552>::Create(char const*)
 W CEntityFactory<CWeaponSG552>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponScout>::Create(char const*)
 W CEntityFactory<CWeaponScout>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponTMP>::Create(char const*)
 W CEntityFactory<CWeaponTMP>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponUMP45>::Create(char const*)
 W CEntityFactory<CWeaponUMP45>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponUSP>::Create(char const*)
 W CEntityFactory<CWeaponUSP>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWeaponXM1014>::Create(char const*)
 W CEntityFactory<CWeaponXM1014>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWindowPane>::Create(char const*)
 W CEntityFactory<CWindowPane>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWorld>::Create(char const*)
 W CEntityFactory<CWorld>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWorldItem>::Create(char const*)
 W CEntityFactory<CWorldItem>::Destroy(IServerNetworkable*)
 W CEntityFactory<CWreckage>::Create(char const*)
 W CEntityFactory<CWreckage>::Destroy(IServerNetworkable*)
 W CEntityFactory<FilterDamageType>::Create(char const*)
 W CEntityFactory<FilterDamageType>::Destroy(IServerNetworkable*)
 W CEntityFactory<FilterTeam>::Create(char const*)
 W CEntityFactory<FilterTeam>::Destroy(IServerNetworkable*)
 W CEntityFactory<MovieExplosion>::Create(char const*)
 W CEntityFactory<MovieExplosion>::Destroy(IServerNetworkable*)
 W CEntityFactory<ParticleSmokeGrenade>::Create(char const*)
 W CEntityFactory<ParticleSmokeGrenade>::Destroy(IServerNetworkable*)
 W CEntityFlame* _CreateEntityTemplate<CEntityFlame>(CEntityFlame*, char const*)
 W CEntityFlame::~CEntityFlame()
 W CEntityListSystem::FrameUpdatePostEntityThink()
 W CEntityListSystem::LevelInitPreEntity()
 W CEntityListSystem::LevelShutdownPostEntity()
 W CEntityListSystem::LevelShutdownPreEntity()
 W CEntityListSystem::~CEntityListSystem()
 W CEntityParticleTrail* _CreateEntityTemplate<CEntityParticleTrail>(CEntityParticleTrail*, char const*)
 W CEntityParticleTrail::NetworkVar_m_Info::NetworkStateChanged()
 W CEntityParticleTrail::~CEntityParticleTrail()
 W CEntityTouchManager::OnEntityCreated(CBaseEntity*)
 W CEntityTouchManager::OnEntityDeleted(CBaseEntity*)
 W CEnvBeam* _CreateEntityTemplate<CEnvBeam>(CEnvBeam*, char const*)
 W CEnvBeam::~CEnvBeam()
 W CEnvBeverage* _CreateEntityTemplate<CEnvBeverage>(CEnvBeverage*, char const*)
 W CEnvBeverage::~CEnvBeverage()
 W CEnvDetailController* _CreateEntityTemplate<CEnvDetailController>(CEnvDetailController*, char const*)
 W CEnvDustPuff* _CreateEntityTemplate<CEnvDustPuff>(CEnvDustPuff*, char const*)
 W CEnvDustPuff::~CEnvDustPuff()
 W CEnvEffectsScript* _CreateEntityTemplate<CEnvEffectsScript>(CEnvEffectsScript*, char const*)
 W CEnvEffectsScript::~CEnvEffectsScript()
 W CEnvEntityMaker* _CreateEntityTemplate<CEnvEntityMaker>(CEnvEntityMaker*, char const*)
 W CEnvEntityMaker::~CEnvEntityMaker()
 W CEnvExplosion* _CreateEntityTemplate<CEnvExplosion>(CEnvExplosion*, char const*)
 W CEnvExplosion::~CEnvExplosion()
 W CEnvFade* _CreateEntityTemplate<CEnvFade>(CEnvFade*, char const*)
 W CEnvFade::~CEnvFade()
 W CEnvFireSensor* _CreateEntityTemplate<CEnvFireSensor>(CEnvFireSensor*, char const*)
 W CEnvFireSensor::~CEnvFireSensor()
 W CEnvFireSource* _CreateEntityTemplate<CEnvFireSource>(CEnvFireSource*, char const*)
 W CEnvFireSource::~CEnvFireSource()
 W CEnvFunnel* _CreateEntityTemplate<CEnvFunnel>(CEnvFunnel*, char const*)
 W CEnvFunnel::~CEnvFunnel()
 W CEnvGlobal* _CreateEntityTemplate<CEnvGlobal>(CEnvGlobal*, char const*)
 W CEnvGlobal::~CEnvGlobal()
 W CEnvGunfire* _CreateEntityTemplate<CEnvGunfire>(CEnvGunfire*, char const*)
 W CEnvGunfire::~CEnvGunfire()
 W CEnvHudHint* _CreateEntityTemplate<CEnvHudHint>(CEnvHudHint*, char const*)
 W CEnvHudHint::~CEnvHudHint()
 W CEnvLaser* _CreateEntityTemplate<CEnvLaser>(CEnvLaser*, char const*)
 W CEnvLaser::~CEnvLaser()
 W CEnvLight* _CreateEntityTemplate<CEnvLight>(CEnvLight*, char const*)
 W CEnvLight::~CEnvLight()
 W CEnvMicrophone* _CreateEntityTemplate<CEnvMicrophone>(CEnvMicrophone*, char const*)
 W CEnvMuzzleFlash* _CreateEntityTemplate<CEnvMuzzleFlash>(CEnvMuzzleFlash*, char const*)
 W CEnvMuzzleFlash::~CEnvMuzzleFlash()
 W CEnvParticleScript* _CreateEntityTemplate<CEnvParticleScript>(CEnvParticleScript*, char const*)
 W CEnvParticleScript::~CEnvParticleScript()
 W CEnvPlayerSurfaceTrigger* _CreateEntityTemplate<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*, char const*)
 W CEnvQuadraticBeam* _CreateEntityTemplate<CEnvQuadraticBeam>(CEnvQuadraticBeam*, char const*)
 W CEnvQuadraticBeam::~CEnvQuadraticBeam()
 W CEnvScreenOverlay* _CreateEntityTemplate<CEnvScreenOverlay>(CEnvScreenOverlay*, char const*)
 W CEnvScreenOverlay::~CEnvScreenOverlay()
 W CEnvShake* _CreateEntityTemplate<CEnvShake>(CEnvShake*, char const*)
 W CEnvShooter* _CreateEntityTemplate<CEnvShooter>(CEnvShooter*, char const*)
 W CEnvShooter::~CEnvShooter()
 W CEnvSoundscape* _CreateEntityTemplate<CEnvSoundscape>(CEnvSoundscape*, char const*)
 W CEnvSoundscapeProxy* _CreateEntityTemplate<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*, char const*)
 W CEnvSoundscapeProxy::~CEnvSoundscapeProxy()
 W CEnvSoundscapeTriggerable* _CreateEntityTemplate<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*, char const*)
 W CEnvSoundscapeTriggerable::~CEnvSoundscapeTriggerable()
 W CEnvSpark* _CreateEntityTemplate<CEnvSpark>(CEnvSpark*, char const*)
 W CEnvSpark::~CEnvSpark()
 W CEnvSplash* _CreateEntityTemplate<CEnvSplash>(CEnvSplash*, char const*)
 W CEnvSplash::~CEnvSplash()
 W CEnvTracer* _CreateEntityTemplate<CEnvTracer>(CEnvTracer*, char const*)
 W CEnvTracer::~CEnvTracer()
 W CEnvWind* _CreateEntityTemplate<CEnvWind>(CEnvWind*, char const*)
 W CEnvWind::NetworkVar_m_EnvWindShared::NetworkStateChanged()
 W CEnvWind::~CEnvWind()
 W CEnvWindShared::NetworkStateChanged()
 W CEnvZoom* _CreateEntityTemplate<CEnvZoom>(CEnvZoom*, char const*)
 W CEnvZoom::~CEnvZoom()
 W CEventQueueSaveLoadProxy* _CreateEntityTemplate<CEventQueueSaveLoadProxy>(CEventQueueSaveLoadProxy*, char const*)
 W CEventQueueSaveLoadProxy::Restore(IRestore&)
 W CEventQueueSaveLoadProxy::Save(ISave&)
 W CEventQueueSaveLoadProxy::~CEventQueueSaveLoadProxy()
 W CEventsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CEventsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CEventsSaveDataOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 W CEventsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CEventsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CFilterClass* _CreateEntityTemplate<CFilterClass>(CFilterClass*, char const*)
 W CFilterClass::PassesFilterImpl(CBaseEntity*)
 W CFilterClass::~CFilterClass()
 W CFilterMultiple* _CreateEntityTemplate<CFilterMultiple>(CFilterMultiple*, char const*)
 W CFilterMultiple::~CFilterMultiple()
 W CFilterName* _CreateEntityTemplate<CFilterName>(CFilterName*, char const*)
 W CFilterName::PassesFilterImpl(CBaseEntity*)
 W CFilterName::~CFilterName()
 W CFire* _CreateEntityTemplate<CFire>(CFire*, char const*)
 W CFire::DrawDebugGeometryOverlays()
 W CFire::~CFire()
 W CFireSmoke* _CreateEntityTemplate<CFireSmoke>(CFireSmoke*, char const*)
 W CFish* _CreateEntityTemplate<CFish>(CFish*, char const*)
 W CFishPool* _CreateEntityTemplate<CFishPool>(CFishPool*, char const*)
 W CFlashbang* _CreateEntityTemplate<CFlashbang>(CFlashbang*, char const*)
 W CFlashbang::GetWeaponID() const
 W CFlashbang::~CFlashbang()
 W CFlashbangProjectile* _CreateEntityTemplate<CFlashbangProjectile>(CFlashbangProjectile*, char const*)
 W CFlashbangProjectile::~CFlashbangProjectile()
 W CFlexCycler::IsAlive()
 W CFlexCycler::ObjectCaps()
 W CFlexCycler::~CFlexCycler()
 W CFlexSceneFileManager::Init()
 W CFlexSceneFileManager::Shutdown()
 W CFlexSceneFileManager::~CFlexSceneFileManager()
 W CFlextalkActor* _CreateEntityTemplate<CFlextalkActor>(CFlextalkActor*, char const*)
 W CFlextalkActor::~CFlextalkActor()
 W CFmtStrN<256>::CFmtStrN(char const**, ...)
 W CFmtStrN<256>::CFmtStrN(char const*, ...)
 W CFmtStrN<256>::sprintf(char const*, ...)
 W CFogController* _CreateEntityTemplate<CFogController>(CFogController*, char const*)
 W CFourWheelServerVehicle::~CFourWheelServerVehicle()
 W CFuncAreaPortalBase::ObjectCaps()
 W CFuncAreaPortalWindow* _CreateEntityTemplate<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*, char const*)
 W CFuncBrush* _CreateEntityTemplate<CFuncBrush>(CFuncBrush*, char const*)
 W CFuncBrush::ObjectCaps()
 W CFuncBrush::~CFuncBrush()
 W CFuncConveyor* _CreateEntityTemplate<CFuncConveyor>(CFuncConveyor*, char const*)
 W CFuncConveyor::~CFuncConveyor()
 W CFuncIllusionary* _CreateEntityTemplate<CFuncIllusionary>(CFuncIllusionary*, char const*)
 W CFuncIllusionary::~CFuncIllusionary()
 W CFuncLadder* _CreateEntityTemplate<CFuncLadder>(CFuncLadder*, char const*)
 W CFuncLadderEndPoint* _CreateEntityTemplate<CFuncLadderEndPoint>(CFuncLadderEndPoint*, char const*)
 W CFuncLadderEndPoint::~CFuncLadderEndPoint()
 W CFuncMonitor* _CreateEntityTemplate<CFuncMonitor>(CFuncMonitor*, char const*)
 W CFuncMonitor::~CFuncMonitor()
 W CFuncMoveLinear* _CreateEntityTemplate<CFuncMoveLinear>(CFuncMoveLinear*, char const*)
 W CFuncMoveLinear::~CFuncMoveLinear()
 W CFuncOccluder* _CreateEntityTemplate<CFuncOccluder>(CFuncOccluder*, char const*)
 W CFuncOccluder::~CFuncOccluder()
 W CFuncPlat* _CreateEntityTemplate<CFuncPlat>(CFuncPlat*, char const*)
 W CFuncPlat::CallGoDown()
 W CFuncPlat::CallHitBottom()
 W CFuncPlat::CallHitTop()
 W CFuncPlat::~CFuncPlat()
 W CFuncPlatRot* _CreateEntityTemplate<CFuncPlatRot>(CFuncPlatRot*, char const*)
 W CFuncPlatRot::~CFuncPlatRot()
 W CFuncRotating* _CreateEntityTemplate<CFuncRotating>(CFuncRotating*, char const*)
 W CFuncRotating::~CFuncRotating()
 W CFuncSmokeVolume* _CreateEntityTemplate<CFuncSmokeVolume>(CFuncSmokeVolume*, char const*)
 W CFuncSmokeVolume::~CFuncSmokeVolume()
 W CFuncTankTrain* _CreateEntityTemplate<CFuncTankTrain>(CFuncTankTrain*, char const*)
 W CFuncTankTrain::Blocked(CBaseEntity*)
 W CFuncTankTrain::~CFuncTankTrain()
 W CFuncTrackAuto* _CreateEntityTemplate<CFuncTrackAuto>(CFuncTrackAuto*, char const*)
 W CFuncTrackAuto::~CFuncTrackAuto()
 W CFuncTrackChange* _CreateEntityTemplate<CFuncTrackChange>(CFuncTrackChange*, char const*)
 W CFuncTrackChange::IsTogglePlat()
 W CFuncTrackChange::~CFuncTrackChange()
 W CFuncTrackTrain* _CreateEntityTemplate<CFuncTrackTrain>(CFuncTrackTrain*, char const*)
 W CFuncTrackTrain::ObjectCaps()
 W CFuncTrackTrain::~CFuncTrackTrain()
 W CFuncTrain* _CreateEntityTemplate<CFuncTrain>(CFuncTrain*, char const*)
 W CFuncTrain::~CFuncTrain()
 W CFuncTrainControls* _CreateEntityTemplate<CFuncTrainControls>(CFuncTrainControls*, char const*)
 W CFuncTrainControls::~CFuncTrainControls()
 W CFuncVPhysicsClip* _CreateEntityTemplate<CFuncVPhysicsClip>(CFuncVPhysicsClip*, char const*)
 W CFuncVPhysicsClip::~CFuncVPhysicsClip()
 W CFuncVehicleClip* _CreateEntityTemplate<CFuncVehicleClip>(CFuncVehicleClip*, char const*)
 W CFuncVehicleClip::~CFuncVehicleClip()
 W CFuncWall* _CreateEntityTemplate<CFuncWall>(CFuncWall*, char const*)
 W CFuncWall::~CFuncWall()
 W CFuncWallToggle* _CreateEntityTemplate<CFuncWallToggle>(CFuncWallToggle*, char const*)
 W CFuncWallToggle::~CFuncWallToggle()
 W CFunc_DustCloud* _CreateEntityTemplate<CFunc_DustCloud>(CFunc_DustCloud*, char const*)
 W CFunc_DustCloud::~CFunc_DustCloud()
 W CFunc_DustMotes* _CreateEntityTemplate<CFunc_DustMotes>(CFunc_DustMotes*, char const*)
 W CFunc_DustMotes::~CFunc_DustMotes()
 W CFunc_LOD* _CreateEntityTemplate<CFunc_LOD>(CFunc_LOD*, char const*)
 W CGameDLL_ConVarAccessor::RegisterConCommandBase(ConCommandBase*)
 W CGameEnd* _CreateEntityTemplate<CGameEnd>(CGameEnd*, char const*)
 W CGameEnd::~CGameEnd()
 W CGameMovement::LadderDistance() const
 W CGameMovement::LadderMask() const
 W CGameMovement::OnLadder(CGameTrace&)
 W CGameMovement::OnTryPlayerMoveCollision(CGameTrace&)
 W CGamePlayerEquip* _CreateEntityTemplate<CGamePlayerEquip>(CGamePlayerEquip*, char const*)
 W CGamePlayerEquip::~CGamePlayerEquip()
 W CGamePlayerTeam* _CreateEntityTemplate<CGamePlayerTeam>(CGamePlayerTeam*, char const*)
 W CGamePlayerTeam::~CGamePlayerTeam()
 W CGamePlayerZone* _CreateEntityTemplate<CGamePlayerZone>(CGamePlayerZone*, char const*)
 W CGamePlayerZone::~CGamePlayerZone()
 W CGameRules::AIClassText(int)
 W CGameRules::AdjustPlayerDamageInflicted(float)
 W CGameRules::AdjustPlayerDamageTaken(CTakeDamageInfo*)
 W CGameRules::AllowAutoTargetCrosshair()
 W CGameRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 W CGameRules::DefaultFOV()
 W CGameRules::EndMultiplayerGame()
 W CGameRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*)
 W CGameRules::FlHEVChargerRechargeTime()
 W CGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
 W CGameRules::GetAmmoQuantityScale(int)
 W CGameRules::GetAutoAimScale(CBasePlayer*)
 W CGameRules::GetChatFormat(bool, CBasePlayer*)
 W CGameRules::GetChatLocation(bool, CBasePlayer*)
 W CGameRules::GetCustomKillString(CTakeDamageInfo const&)
 W CGameRules::GetEncryptionKey()
 W CGameRules::GetGameDescription()
 W CGameRules::GetIndexedTeamName(int)
 W CGameRules::GetSkillLevel()
 W CGameRules::GetTeamIndex(char const*)
 W CGameRules::InitDefaultAIRelationships()
 W CGameRules::IsSkillLevel(int)
 W CGameRules::IsTeamplay()
 W CGameRules::IsValidTeam(char const*)
 W CGameRules::LevelShutdown()
 W CGameRules::OnSkillLevelChanged(int)
 W CGameRules::PlayFootstepSounds(CBasePlayer*)
 W CGameRules::PlayTextureSounds()
 W CGameRules::Precache()
 W CGameRules::SetDefaultPlayerTeam(CBasePlayer*)
 W CGameRules::SetSkillLevel(int)
 W CGameRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 W CGameRules::ShouldUseRobustRadiusDamage(CBaseEntity*)
 W CGameRules::UpdateClientData(CBasePlayer*)
 W CGameRulesProxy::ObjectCaps()
 W CGameScore* _CreateEntityTemplate<CGameScore>(CGameScore*, char const*)
 W CGameScore::~CGameScore()
 W CGameStringPool::LevelShutdownPostEntity()
 W CGameStringPool::~CGameStringPool()
 W CGameText* _CreateEntityTemplate<CGameText>(CGameText*, char const*)
 W CGameText::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 W CGameText::~CGameText()
 W CGameUI* _CreateEntityTemplate<CGameUI>(CGameUI*, char const*)
 W CGameUI::~CGameUI()
 W CGameWeaponManager* _CreateEntityTemplate<CGameWeaponManager>(CGameWeaponManager*, char const*)
 W CGameWeaponManager::~CGameWeaponManager()
 W CGenericActor* _CreateEntityTemplate<CGenericActor>(CGenericActor*, char const*)
 W CGenericActor::~CGenericActor()
 W CGenericCycler* _CreateEntityTemplate<CGenericCycler>(CGenericCycler*, char const*)
 W CGenericCycler::Spawn()
 W CGenericCycler::~CGenericCycler()
 W CGenericFlexCycler* _CreateEntityTemplate<CGenericFlexCycler>(CGenericFlexCycler*, char const*)
 W CGenericFlexCycler::Spawn()
 W CGenericFlexCycler::~CGenericFlexCycler()
 W CGenericNPC* _CreateEntityTemplate<CGenericNPC>(CGenericNPC*, char const*)
 W CGenericNPC::~CGenericNPC()
 W CGib* _CreateEntity<CGib>(CGib*, char const*)
 W CGib* _CreateEntityTemplate<CGib>(CGib*, char const*)
 W CGib::ObjectCaps()
 W CGib::~CGib()
 W CGibShooter* _CreateEntityTemplate<CGibShooter>(CGibShooter*, char const*)
 W CGibShooter::~CGibShooter()
 W CGlobalState::LevelShutdownPostEntity()
 W CGlobalState::LevelShutdownPreEntity()
 W CGlobalState::~CGlobalState()
 W CGunTarget* _CreateEntityTemplate<CGunTarget>(CGunTarget*, char const*)
 W CGunTarget::BloodColor()
 W CGunTarget::BodyTarget(Vector const&, bool)
 W CGunTarget::Classify()
 W CGunTarget::~CGunTarget()
 W CHEGrenade* _CreateEntityTemplate<CHEGrenade>(CHEGrenade*, char const*)
 W CHEGrenade::GetWeaponID() const
 W CHEGrenade::~CHEGrenade()
 W CHEGrenadeProjectile* _CreateEntityTemplate<CHEGrenadeProjectile>(CHEGrenadeProjectile*, char const*)
 W CHEGrenadeProjectile::~CHEGrenadeProjectile()
 W CHandle<CAI_BaseNPC>::CHandle()
 W CHandle<CAI_BaseNPC>::CHandle(CAI_BaseNPC*)
 W CHandle<CAI_BaseNPC>::Set(CAI_BaseNPC const*)
 W CHandle<CAI_BaseNPC>::operator->() const
 W CHandle<CAI_DynamicLink>::CHandle(CAI_DynamicLink*)
 W CHandle<CAI_DynamicLink>::Set(CAI_DynamicLink const*)
 W CHandle<CAI_DynamicLink>::operator->() const
 W CHandle<CAI_FollowGoal>::CHandle()
 W CHandle<CAI_FollowGoal>::Set(CAI_FollowGoal const*)
 W CHandle<CAI_Hint>::CHandle()
 W CHandle<CAI_Hint>::Set(CAI_Hint const*)
 W CHandle<CAI_Hint>::operator->() const
 W CHandle<CAI_ScriptedSequence>::CHandle()
 W CHandle<CAI_ScriptedSequence>::Set(CAI_ScriptedSequence const*)
 W CHandle<CAI_ScriptedSequence>::operator->() const
 W CHandle<CAssaultPoint>::CHandle()
 W CHandle<CAssaultPoint>::Set(CAssaultPoint const*)
 W CHandle<CAssaultPoint>::operator->() const
 W CHandle<CBaseAnimating>::CHandle()
 W CHandle<CBaseAnimating>::CHandle(CBaseAnimating*)
 W CHandle<CBaseAnimating>::Set(CBaseAnimating const*)
 W CHandle<CBaseAnimating>::operator->() const
 W CHandle<CBaseCombatCharacter>::CHandle()
 W CHandle<CBaseCombatCharacter>::CHandle(CBaseCombatCharacter*)
 W CHandle<CBaseCombatCharacter>::Set(CBaseCombatCharacter const*)
 W CHandle<CBaseCombatCharacter>::operator->() const
 W CHandle<CBaseCombatWeapon>::CHandle()
 W CHandle<CBaseCombatWeapon>::CHandle(CBaseCombatWeapon*)
 W CHandle<CBaseCombatWeapon>::Set(CBaseCombatWeapon const*)
 W CHandle<CBaseCombatWeapon>::operator->() const
 W CHandle<CBaseEntity>::CHandle()
 W CHandle<CBaseEntity>::CHandle(CBaseEntity*)
 W CHandle<CBaseEntity>::CHandle(CBaseHandle const&)
 W CHandle<CBaseEntity>::Set(CBaseEntity const*)
 W CHandle<CBaseEntity>::operator->() const
 W CHandle<CBaseFilter>::CHandle()
 W CHandle<CBaseFilter>::Set(CBaseFilter const*)
 W CHandle<CBaseFire>::CHandle()
 W CHandle<CBaseFire>::Set(CBaseFire const*)
 W CHandle<CBaseFire>::operator->() const
 W CHandle<CBaseFlex>::CHandle()
 W CHandle<CBaseFlex>::Set(CBaseFlex const*)
 W CHandle<CBaseFlex>::operator->() const
 W CHandle<CBasePlayer>::CHandle()
 W CHandle<CBasePlayer>::CHandle(CBasePlayer*)
 W CHandle<CBasePlayer>::Set(CBasePlayer const*)
 W CHandle<CBasePlayer>::operator->() const
 W CHandle<CBasePropDoor>::CHandle()
 W CHandle<CBasePropDoor>::CHandle(CBasePropDoor*)
 W CHandle<CBasePropDoor>::Set(CBasePropDoor const*)
 W CHandle<CBasePropDoor>::operator->() const
 W CHandle<CBaseViewModel>::CHandle()
 W CHandle<CBaseViewModel>::CHandle(CBaseViewModel*)
 W CHandle<CBaseViewModel>::Set(CBaseViewModel const*)
 W CHandle<CBeam>::CHandle()
 W CHandle<CBeam>::Set(CBeam const*)
 W CHandle<CBeam>::operator->() const
 W CHandle<CBoneFollower>::CHandle()
 W CHandle<CBoneFollower>::Set(CBoneFollower const*)
 W CHandle<CBoneFollower>::operator->() const
 W CHandle<CCSPlayer>::CHandle()
 W CHandle<CCSPlayer>::Set(CCSPlayer const*)
 W CHandle<CCSPlayer>::operator->() const
 W CHandle<CEntityBlocker>::CHandle()
 W CHandle<CEntityBlocker>::Set(CEntityBlocker const*)
 W CHandle<CEntityBlocker>::operator->() const
 W CHandle<CEnvMicrophone>::CHandle(CEnvMicrophone*)
 W CHandle<CEnvMicrophone>::Set(CEnvMicrophone const*)
 W CHandle<CEnvMicrophone>::operator->() const
 W CHandle<CEnvPlayerSurfaceTrigger>::CHandle(CEnvPlayerSurfaceTrigger*)
 W CHandle<CEnvPlayerSurfaceTrigger>::Set(CEnvPlayerSurfaceTrigger const*)
 W CHandle<CEnvPlayerSurfaceTrigger>::operator->() const
 W CHandle<CEnvSoundscape>::CHandle()
 W CHandle<CEnvSoundscape>::Set(CEnvSoundscape const*)
 W CHandle<CEnvSoundscape>::operator->() const
 W CHandle<CEnvSoundscapeTriggerable>::CHandle()
 W CHandle<CEnvSoundscapeTriggerable>::Set(CEnvSoundscapeTriggerable const*)
 W CHandle<CEnvSoundscapeTriggerable>::operator->() const
 W CHandle<CFuncTrackTrain>::CHandle()
 W CHandle<CFuncTrackTrain>::Set(CFuncTrackTrain const*)
 W CHandle<CHandleTest>::CHandle()
 W CHandle<CHandleTest>::Set(CHandleTest const*)
 W CHandle<CHandleTest>::operator->() const
 W CHandle<CHostage>::CHandle()
 W CHandle<CHostage>::Set(CHostage const*)
 W CHandle<CHostage>::operator->() const
 W CHandle<CInfoLadderDismount>::CHandle()
 W CHandle<CInfoLadderDismount>::Set(CInfoLadderDismount const*)
 W CHandle<CMessageEntity>::CHandle()
 W CHandle<CMessageEntity>::Set(CMessageEntity const*)
 W CHandle<CNPC_VehicleDriver>::CHandle()
 W CHandle<CNPC_VehicleDriver>::Set(CNPC_VehicleDriver const*)
 W CHandle<CPathTrack>::Set(CPathTrack const*)
 W CHandle<CPathTrack>::operator->() const
 W CHandle<CPointCamera>::CHandle()
 W CHandle<CPointCamera>::Set(CPointCamera const*)
 W CHandle<CPointTemplate>::CHandle(CBaseHandle const&)
 W CHandle<CRallyPoint>::CHandle()
 W CHandle<CRallyPoint>::Set(CRallyPoint const*)
 W CHandle<CRallyPoint>::operator->() const
 W CHandle<CSceneEntity>::CHandle()
 W CHandle<CSceneEntity>::Set(CSceneEntity const*)
 W CHandle<CSceneManager>::CHandle()
 W CHandle<CSceneManager>::Set(CSceneManager const*)
 W CHandle<CSceneManager>::operator->() const
 W CHandle<CSpotlightEnd>::CHandle()
 W CHandle<CSpotlightEnd>::Set(CSpotlightEnd const*)
 W CHandle<CSpotlightEnd>::operator->() const
 W CHandle<CSprite>::CHandle()
 W CHandle<CSprite>::Set(CSprite const*)
 W CHandle<CSprite>::operator->() const
 W CHandle<CSpriteTrail>::CHandle()
 W CHandle<CSpriteTrail>::Set(CSpriteTrail const*)
 W CHandle<CSpriteTrail>::operator->() const
 W CHandle<CVGuiScreen>::CHandle()
 W CHandle<CVGuiScreen>::Set(CVGuiScreen const*)
 W CHandle<CVGuiScreen>::operator->() const
 W CHandleDummy* _CreateEntity<CHandleDummy>(CHandleDummy*, char const*)
 W CHandleDummy* _CreateEntityTemplate<CHandleDummy>(CHandleDummy*, char const*)
 W CHandleDummy::~CHandleDummy()
 W CHandleTest* _CreateEntity<CHandleTest>(CHandleTest*, char const*)
 W CHandleTest* _CreateEntityTemplate<CHandleTest>(CHandleTest*, char const*)
 W CHandleTest::SetTransmit(CCheckTransmitInfo*, bool)
 W CHandleTest::UpdateTransmitState()
 W CHandleTest::~CHandleTest()
 W CHangRope::ApplyConstraints(CSimplePhysics::CNode*, int)
 W CHangRope::GetNodeForces(CSimplePhysics::CNode*, int, Vector*)
 W CHostage* _CreateEntityTemplate<CHostage>(CHostage*, char const*)
 W CHostage::Classify()
 W CHostage::NetworkStateChanged_m_iHealth()
 W CHostage::NetworkStateChanged_m_iMaxHealth()
 W CHostage::ObjectCaps()
 W CHostageRescueZone* _CreateEntityTemplate<CHostageRescueZone>(CHostageRescueZone*, char const*)
 W CHostageRescueZone::~CHostageRescueZone()
 W CIKSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CIKSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CImprovLocomotor::OnMoveToFailure(Vector const&, CImprovLocomotor::MoveToFailureType)
 W CImprovLocomotor::OnMoveToSuccess(Vector const&)
 W CInfoCameraLink* _CreateEntityTemplate<CInfoCameraLink>(CInfoCameraLink*, char const*)
 W CInfoIntermission* _CreateEntityTemplate<CInfoIntermission>(CInfoIntermission*, char const*)
 W CInfoIntermission::~CInfoIntermission()
 W CInfoLadder* _CreateEntityTemplate<CInfoLadder>(CInfoLadder*, char const*)
 W CInfoLadder::~CInfoLadder()
 W CInfoLadderDismount* _CreateEntityTemplate<CInfoLadderDismount>(CInfoLadderDismount*, char const*)
 W CInfoLadderDismount::~CInfoLadderDismount()
 W CInfoLightingRelative* _CreateEntityTemplate<CInfoLightingRelative>(CInfoLightingRelative*, char const*)
 W CInfoLightingRelative::~CInfoLightingRelative()
 W CInfoMassCenter* _CreateEntityTemplate<CInfoMassCenter>(CInfoMassCenter*, char const*)
 W CInfoMassCenter::Spawn()
 W CInfoMassCenter::~CInfoMassCenter()
 W CInfoViewParameters* _CreateEntityTemplate<CInfoViewParameters>(CInfoViewParameters*, char const*)
 W CInfoViewParameters::~CInfoViewParameters()
 W CInstancedResponseSystem::GetScriptFile()
 W CInstancedResponseSystem::Init()
 W CInstancedResponseSystem::LevelInitPostEntity()
 W CInstancedResponseSystem::Release()
 W CInstancedSceneEntity* _CreateEntityTemplate<CInstancedSceneEntity>(CInstancedSceneEntity*, char const*)
 W CInstancedSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 W CInstancedSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 W CInstancedSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 W CInstancedSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 W CInstancedSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 W CInstancedSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 W CInstancedSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 W CInstancedSceneEntity::GetPostSpeakDelay()
 W CInstancedSceneEntity::SetPostSpeakDelay(float)
 W CInstancedSceneEntity::~CInstancedSceneEntity()
 W CInstancedSceneResourceManager::Init()
 W CInstancedSceneResourceManager::LevelInitPostEntity()
 W CInstancedSceneResourceManager::Shutdown()
 W CInstancedSceneResourceManager::~CInstancedSceneResourceManager()
 W CItem::MyTouch(CBasePlayer*)
 W CItem::ObjectCaps()
 W CItem::~CItem()
 W CItemAmmo338MAG* _CreateEntityTemplate<CItemAmmo338MAG>(CItemAmmo338MAG*, char const*)
 W CItemAmmo338MAG::GetAmmoName() const
 W CItemAmmo338MAG::~CItemAmmo338MAG()
 W CItemAmmo357SIG* _CreateEntityTemplate<CItemAmmo357SIG>(CItemAmmo357SIG*, char const*)
 W CItemAmmo357SIG::GetAmmoName() const
 W CItemAmmo357SIG::~CItemAmmo357SIG()
 W CItemAmmo45ACP* _CreateEntityTemplate<CItemAmmo45ACP>(CItemAmmo45ACP*, char const*)
 W CItemAmmo45ACP::GetAmmoName() const
 W CItemAmmo45ACP::~CItemAmmo45ACP()
 W CItemAmmo50AE* _CreateEntityTemplate<CItemAmmo50AE>(CItemAmmo50AE*, char const*)
 W CItemAmmo50AE::GetAmmoName() const
 W CItemAmmo50AE::~CItemAmmo50AE()
 W CItemAmmo556MM* _CreateEntityTemplate<CItemAmmo556MM>(CItemAmmo556MM*, char const*)
 W CItemAmmo556MM::GetAmmoName() const
 W CItemAmmo556MM::~CItemAmmo556MM()
 W CItemAmmo556MM_BOX* _CreateEntityTemplate<CItemAmmo556MM_BOX>(CItemAmmo556MM_BOX*, char const*)
 W CItemAmmo556MM_BOX::GetAmmoName() const
 W CItemAmmo556MM_BOX::~CItemAmmo556MM_BOX()
 W CItemAmmo57MM* _CreateEntityTemplate<CItemAmmo57MM>(CItemAmmo57MM*, char const*)
 W CItemAmmo57MM::GetAmmoName() const
 W CItemAmmo57MM::~CItemAmmo57MM()
 W CItemAmmo762MM* _CreateEntityTemplate<CItemAmmo762MM>(CItemAmmo762MM*, char const*)
 W CItemAmmo762MM::GetAmmoName() const
 W CItemAmmo762MM::~CItemAmmo762MM()
 W CItemAmmo9MM* _CreateEntityTemplate<CItemAmmo9MM>(CItemAmmo9MM*, char const*)
 W CItemAmmo9MM::GetAmmoName() const
 W CItemAmmo9MM::~CItemAmmo9MM()
 W CItemAmmo::GetAmmoName() const
 W CItemAmmo::MyTouch(CBasePlayer*)
 W CItemAmmo::~CItemAmmo()
 W CItemAmmoBuckshot* _CreateEntityTemplate<CItemAmmoBuckshot>(CItemAmmoBuckshot*, char const*)
 W CItemAmmoBuckshot::GetAmmoName() const
 W CItemAmmoBuckshot::~CItemAmmoBuckshot()
 W CItemAssaultSuit* _CreateEntityTemplate<CItemAssaultSuit>(CItemAssaultSuit*, char const*)
 W CItemAssaultSuit::MyTouch(CBasePlayer*)
 W CItemAssaultSuit::Precache()
 W CItemAssaultSuit::Spawn()
 W CItemAssaultSuit::~CItemAssaultSuit()
 W CItemDefuser* _CreateEntityTemplate<CItemDefuser>(CItemDefuser*, char const*)
 W CItemDefuser::~CItemDefuser()
 W CItemKevlar* _CreateEntityTemplate<CItemKevlar>(CItemKevlar*, char const*)
 W CItemKevlar::MyTouch(CBasePlayer*)
 W CItemKevlar::Precache()
 W CItemKevlar::Spawn()
 W CItemKevlar::~CItemKevlar()
 W CItemNvgs* _CreateEntityTemplate<CItemNvgs>(CItemNvgs*, char const*)
 W CItemNvgs::MyTouch(CBasePlayer*)
 W CItemNvgs::Precache()
 W CItemNvgs::Spawn()
 W CItemNvgs::~CItemNvgs()
 W CItemSoda* _CreateEntityTemplate<CItemSoda>(CItemSoda*, char const*)
 W CItemSoda::~CItemSoda()
 W CJeepFourWheelServerVehicle::NPC_HasPrimaryWeapon()
 W CJeepFourWheelServerVehicle::~CJeepFourWheelServerVehicle()
 W CKeepUpright* _CreateEntityTemplate<CKeepUpright>(CKeepUpright*, char const*)
 W CKeepUpright::InputTurnOff(inputdata_t&)
 W CKeepUpright::InputTurnOn(inputdata_t&)
 W CKnife* _CreateEntityTemplate<CKnife>(CKnife*, char const*)
 W CKnife::GetWeaponID() const
 W CKnife::~CKnife()
 W CLagCompensationManager::LevelShutdownPostEntity()
 W CLagCompensationManager::Shutdown()
 W CLagCompensationManager::~CLagCompensationManager()
 W CLight* _CreateEntityTemplate<CLight>(CLight*, char const*)
 W CLight::~CLight()
 W CLightGlow* _CreateEntityTemplate<CLightGlow>(CLightGlow*, char const*)
 W CLightGlow::~CLightGlow()
 W CLogicAuto* _CreateEntityTemplate<CLogicAuto>(CLogicAuto*, char const*)
 W CLogicAuto::ObjectCaps()
 W CLogicAuto::~CLogicAuto()
 W CLogicAutosave* _CreateEntityTemplate<CLogicAutosave>(CLogicAutosave*, char const*)
 W CLogicAutosave::~CLogicAutosave()
 W CLogicBranch* _CreateEntityTemplate<CLogicBranch>(CLogicBranch*, char const*)
 W CLogicBranch::~CLogicBranch()
 W CLogicCase* _CreateEntityTemplate<CLogicCase>(CLogicCase*, char const*)
 W CLogicCase::~CLogicCase()
 W CLogicCollisionPair* _CreateEntityTemplate<CLogicCollisionPair>(CLogicCollisionPair*, char const*)
 W CLogicCollisionPair::Activate()
 W CLogicCollisionPair::InputDisableCollisions(inputdata_t&)
 W CLogicCollisionPair::InputEnableCollisions(inputdata_t&)
 W CLogicCollisionPair::~CLogicCollisionPair()
 W CLogicCompare* _CreateEntityTemplate<CLogicCompare>(CLogicCompare*, char const*)
 W CLogicCompare::~CLogicCompare()
 W CLogicCompareInteger* _CreateEntityTemplate<CLogicCompareInteger>(CLogicCompareInteger*, char const*)
 W CLogicCompareInteger::~CLogicCompareInteger()
 W CLogicLineToEntity* _CreateEntityTemplate<CLogicLineToEntity>(CLogicLineToEntity*, char const*)
 W CLogicLineToEntity::~CLogicLineToEntity()
 W CLogicMeasureMovement* _CreateEntityTemplate<CLogicMeasureMovement>(CLogicMeasureMovement*, char const*)
 W CLogicMeasureMovement::~CLogicMeasureMovement()
 W CLogicNavigation* _CreateEntityTemplate<CLogicNavigation>(CLogicNavigation*, char const*)
 W CLogicNavigation::InputToggle(inputdata_t&)
 W CLogicNavigation::InputTurnOff(inputdata_t&)
 W CLogicNavigation::InputTurnOn(inputdata_t&)
 W CLogicNavigation::~CLogicNavigation()
 W CLogicRelay* _CreateEntityTemplate<CLogicRelay>(CLogicRelay*, char const*)
 W CLogicRelay::~CLogicRelay()
 W CLogicalEntity::~CLogicalEntity()
 W CMapInfo* _CreateEntityTemplate<CMapInfo>(CMapInfo*, char const*)
 W CMaterialModifyControl* _CreateEntityTemplate<CMaterialModifyControl>(CMaterialModifyControl*, char const*)
 W CMaterialModifyControl::ObjectCaps()
 W CMaterialModifyControl::~CMaterialModifyControl()
 W CMathColorBlend* _CreateEntityTemplate<CMathColorBlend>(CMathColorBlend*, char const*)
 W CMathColorBlend::~CMathColorBlend()
 W CMathCounter* _CreateEntityTemplate<CMathCounter>(CMathCounter*, char const*)
 W CMathCounter::~CMathCounter()
 W CMathRemap* _CreateEntityTemplate<CMathRemap>(CMathRemap*, char const*)
 W CMathRemap::~CMathRemap()
 W CMessage* _CreateEntityTemplate<CMessage>(CMessage*, char const*)
 W CMessage::~CMessage()
 W CMessageEntity* _CreateEntityTemplate<CMessageEntity>(CMessageEntity*, char const*)
 W CMessageEntity::~CMessageEntity()
 W CModelSoundCache::ComputeSoundScriptFileTimestampChecksum()
 W CModelSoundCache::Rebuild(char const*)
 W CModelSoundCache::Restore(CUtlBuffer&)
 W CModelSoundCache::Save(CUtlBuffer&)
 W CMomentaryRotButton* _CreateEntityTemplate<CMomentaryRotButton>(CMomentaryRotButton*, char const*)
 W CMomentaryRotButton::~CMomentaryRotButton()
 W CMovementSpeedMod* _CreateEntityTemplate<CMovementSpeedMod>(CMovementSpeedMod*, char const*)
 W CMovementSpeedMod::~CMovementSpeedMod()
 W CMultiSource* _CreateEntityTemplate<CMultiSource>(CMultiSource*, char const*)
 W CMultiSource::ObjectCaps()
 W CMultiSource::~CMultiSource()
 W CMultiplayRules::EndMultiplayerGame()
 W CMultiplayRules::GetTeamID(CBaseEntity*)
 W CMultiplayRules::PlayTextureSounds()
 W CMultiplayRules::~CMultiplayRules()
 W CNPC_Furniture* _CreateEntityTemplate<CNPC_Furniture>(CNPC_Furniture*, char const*)
 W CNPC_Furniture::MaxYawSpeed()
 W CNPC_Furniture::UpdateEfficiency(bool)
 W CNPC_Furniture::~CNPC_Furniture()
 W CNPC_VehicleDriver* _CreateEntityTemplate<CNPC_VehicleDriver>(CNPC_VehicleDriver*, char const*)
 W CNPC_VehicleDriver::BloodColor()
 W CNPC_VehicleDriver::Classify()
 W CNPC_VehicleDriver::GetClassScheduleIdSpace()
 W CNPC_VehicleDriver::GetSchedulingErrorName()
 W CNavArea* FindMinimumCostArea<FarAwayFromPositionFunctor>(CNavArea*, FarAwayFromPositionFunctor&)
 W CNodeEnt* _CreateEntityTemplate<CNodeEnt>(CNodeEnt*, char const*)
 W CNodeEnt::SetOwnerEntity(CBaseEntity*)
 W CNodeEnt::~CNodeEnt()
 W CNodeFilter::NodeDistanceSqr(CAI_Node&)
 W CNodeFilter::NodeIsValid(CAI_Node&)
 W CNodeList::IsLowerPriority(AI_NearNode_t const&, AI_NearNode_t const&)
 W CNodeList::RevIsLowerPriority(AI_NearNode_t const&, AI_NearNode_t const&)
 W CNullEntity* _CreateEntityTemplate<CNullEntity>(CNullEntity*, char const*)
 W CNullEntity::~CNullEntity()
 W COrnamentProp* _CreateEntityTemplate<COrnamentProp>(COrnamentProp*, char const*)
 W COrnamentProp::~COrnamentProp()
 W CPASAttenuationFilter::~CPASAttenuationFilter()
 W CPASFilter::~CPASFilter()
 W CPVSFilter::~CPVSFilter()
 W CParticleFire* _CreateEntityTemplate<CParticleFire>(CParticleFire*, char const*)
 W CParticleFire::~CParticleFire()
 W CParticleLight* _CreateEntityTemplate<CParticleLight>(CParticleLight*, char const*)
 W CParticleLight::~CParticleLight()
 W CPathCorner* _CreateEntityTemplate<CPathCorner>(CPathCorner*, char const*)
 W CPathCorner::GetDelay()
 W CPathCorner::~CPathCorner()
 W CPathCornerCrash* _CreateEntityTemplate<CPathCornerCrash>(CPathCornerCrash*, char const*)
 W CPathCornerCrash::~CPathCornerCrash()
 W CPathKeyFrame* _CreateEntity<CPathKeyFrame>(CPathKeyFrame*, char const*)
 W CPathKeyFrame* _CreateEntityTemplate<CPathKeyFrame>(CPathKeyFrame*, char const*)
 W CPathKeyFrame::~CPathKeyFrame()
 W CPathTrack* _CreateEntityTemplate<CPathTrack>(CPathTrack*, char const*)
 W CPathTrack::~CPathTrack()
 W CPathfindNearestNodeFilter::IsValid(CAI_Node*)
 W CPathfindNearestNodeFilter::ShouldContinue()
 W CPhysBallSocket* _CreateEntityTemplate<CPhysBallSocket>(CPhysBallSocket*, char const*)
 W CPhysBallSocket::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 W CPhysBallSocket::~CPhysBallSocket()
 W CPhysBox* _CreateEntityTemplate<CPhysBox>(CPhysBox*, char const*)
 W CPhysBox::PreferredCarryAngles()
 W CPhysBox::~CPhysBox()
 W CPhysBoxMultiplayer* _CreateEntityTemplate<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*, char const*)
 W CPhysBoxMultiplayer::Activate()
 W CPhysBoxMultiplayer::GetMass()
 W CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 W CPhysBoxMultiplayer::IsAsleep()
 W CPhysBoxMultiplayer::~CPhysBoxMultiplayer()
 W CPhysConstraint::Deactivate()
 W CPhysConstraint::InputBreak(inputdata_t&)
 W CPhysConstraint::InputOnBreak(inputdata_t&)
 W CPhysConstraint::InputTurnOff(inputdata_t&)
 W CPhysConstraint::InputTurnOn(inputdata_t&)
 W CPhysConstraint::OnBreak()
 W CPhysConstraintEvents::ConstraintBroken(IPhysicsConstraint*)
 W CPhysConstraintSystem* _CreateEntityTemplate<CPhysConstraintSystem>(CPhysConstraintSystem*, char const*)
 W CPhysConstraintSystem::~CPhysConstraintSystem()
 W CPhysConvert* _CreateEntityTemplate<CPhysConvert>(CPhysConvert*, char const*)
 W CPhysConvert::~CPhysConvert()
 W CPhysExplosion* _CreateEntityTemplate<CPhysExplosion>(CPhysExplosion*, char const*)
 W CPhysExplosion::~CPhysExplosion()
 W CPhysFixed* _CreateEntityTemplate<CPhysFixed>(CPhysFixed*, char const*)
 W CPhysFixed::~CPhysFixed()
 W CPhysForce::OnActivate()
 W CPhysHinge* _CreateEntityTemplate<CPhysHinge>(CPhysHinge*, char const*)
 W CPhysHinge::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 W CPhysHinge::Deactivate()
 W CPhysHinge::DrawDebugGeometryOverlays()
 W CPhysHinge::InputSetVelocity(inputdata_t&)
 W CPhysHinge::~CPhysHinge()
 W CPhysImpact* _CreateEntityTemplate<CPhysImpact>(CPhysImpact*, char const*)
 W CPhysImpact::~CPhysImpact()
 W CPhysLength* _CreateEntityTemplate<CPhysLength>(CPhysLength*, char const*)
 W CPhysLength::DrawDebugGeometryOverlays()
 W CPhysLength::~CPhysLength()
 W CPhysMagnet* _CreateEntityTemplate<CPhysMagnet>(CPhysMagnet*, char const*)
 W CPhysMotor* _CreateEntityTemplate<CPhysMotor>(CPhysMotor*, char const*)
 W CPhysObjSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CPhysObjSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CPhysObjSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CPhysObjSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CPhysPulley* _CreateEntityTemplate<CPhysPulley>(CPhysPulley*, char const*)
 W CPhysPulley::DrawDebugGeometryOverlays()
 W CPhysPulley::~CPhysPulley()
 W CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 W CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 W CPhysSaveRestoreBlockHandler::ForgetAllModels()
 W CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 W CPhysSaveRestoreBlockHandler::GetBlockName()
 W CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 W CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 W CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 W CPhysSaveRestoreBlockHandler::PostRestore()
 W CPhysSaveRestoreBlockHandler::PostSave()
 W CPhysSaveRestoreBlockHandler::PreRestore()
 W CPhysSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 W CPhysSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 W CPhysSaveRestoreBlockHandler::Restore(IRestore*, bool)
 W CPhysSaveRestoreBlockHandler::Save(ISave*)
 W CPhysSaveRestoreBlockHandler::SaveQueueFunc(CPhysSaveRestoreBlockHandler::QueuedItem_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 W CPhysSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 W CPhysSlideConstraint* _CreateEntityTemplate<CPhysSlideConstraint>(CPhysSlideConstraint*, char const*)
 W CPhysSlideConstraint::InputSetVelocity(inputdata_t&)
 W CPhysSlideConstraint::~CPhysSlideConstraint()
 W CPhysSphere* _CreateEntityTemplate<CPhysSphere>(CPhysSphere*, char const*)
 W CPhysSphere::CreateVPhysics()
 W CPhysSphere::OverridePropdata()
 W CPhysSphere::~CPhysSphere()
 W CPhysThruster* _CreateEntityTemplate<CPhysThruster>(CPhysThruster*, char const*)
 W CPhysThruster::~CPhysThruster()
 W CPhysTorque* _CreateEntityTemplate<CPhysTorque>(CPhysTorque*, char const*)
 W CPhysTorque::~CPhysTorque()
 W CPhysicsCannister* _CreateEntityTemplate<CPhysicsCannister>(CPhysicsCannister*, char const*)
 W CPhysicsCannister::IsAlive()
 W CPhysicsCannister::ObjectCaps()
 W CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W CPhysicsCannister::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 W CPhysicsCannister::VPhysicsUpdate(IPhysicsObject*)
 W CPhysicsEntitySolver* _CreateEntityTemplate<CPhysicsEntitySolver>(CPhysicsEntitySolver*, char const*)
 W CPhysicsEntitySolver::~CPhysicsEntitySolver()
 W CPhysicsHook::~CPhysicsHook()
 W CPhysicsNPCSolver* _CreateEntityTemplate<CPhysicsNPCSolver>(CPhysicsNPCSolver*, char const*)
 W CPhysicsNPCSolver::OnRestore()
 W CPhysicsPlayerCallback::ShouldMoveTo(IPhysicsObject*, Vector const&)
 W CPhysicsProp* _CreateEntityTemplate<CPhysicsProp>(CPhysicsProp*, char const*)
 W CPhysicsProp::~CPhysicsProp()
 W CPhysicsPropMultiplayer* _CreateEntityTemplate<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*, char const*)
 W CPhysicsPropMultiplayer::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 W CPhysicsPropMultiplayer::GetMass()
 W CPhysicsPropMultiplayer::GetMultiplayerPhysicsMode()
 W CPhysicsPropMultiplayer::GetPhysicsMode()
 W CPhysicsPropMultiplayer::IsAsleep()
 W CPhysicsPropMultiplayer::SetPhysicsMode(int)
 W CPhysicsPropMultiplayer::Spawn()
 W CPhysicsPropMultiplayer::VPhysicsUpdate(IPhysicsObject*)
 W CPhysicsPropMultiplayer::~CPhysicsPropMultiplayer()
 W CPhysicsPropRespawnable* _CreateEntityTemplate<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*, char const*)
 W CPhysicsPropRespawnable::~CPhysicsPropRespawnable()
 W CPhysicsShake::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 W CPhysicsSpring* _CreateEntityTemplate<CPhysicsSpring>(CPhysicsSpring*, char const*)
 W CPhysicsWind::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 W CPhysicsWire* _CreateEntityTemplate<CPhysicsWire>(CPhysicsWire*, char const*)
 W CPhysicsWire::~CPhysicsWire()
 W CPlantedC4* _CreateEntityTemplate<CPlantedC4>(CPlantedC4*, char const*)
 W CPlantedC4::ObjectCaps()
 W CPlasma* _CreateEntityTemplate<CPlasma>(CPlasma*, char const*)
 W CPlatTrigger* _CreateEntityTemplate<CPlatTrigger>(CPlatTrigger*, char const*)
 W CPlatTrigger::ObjectCaps()
 W CPlatTrigger::~CPlatTrigger()
 W CPlayerLocalData::NetworkStateChanged()
 W CPlayerLocalData::NetworkVar_m_audio::NetworkStateChanged()
 W CPlayerLocalData::NetworkVar_m_fog::NetworkStateChanged()
 W CPlayerLocalData::NetworkVar_m_skybox3d::NetworkStateChanged()
 W CPlayerMove::~CPlayerMove()
 W CPlayerResource* _CreateEntityTemplate<CPlayerResource>(CPlayerResource*, char const*)
 W CPlayerResource::ObjectCaps()
 W CPlayerResource::~CPlayerResource()
 W CPlayerState::NetworkStateChanged()
 W CPlayerState::~CPlayerState()
 W CPointAngleSensor* _CreateEntityTemplate<CPointAngleSensor>(CPointAngleSensor*, char const*)
 W CPointAngleSensor::~CPointAngleSensor()
 W CPointAngularVelocitySensor* _CreateEntityTemplate<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*, char const*)
 W CPointAngularVelocitySensor::~CPointAngularVelocitySensor()
 W CPointCamera* _CreateEntityTemplate<CPointCamera>(CPointCamera*, char const*)
 W CPointClientCommand* _CreateEntityTemplate<CPointClientCommand>(CPointClientCommand*, char const*)
 W CPointClientCommand::~CPointClientCommand()
 W CPointDevShotCamera* _CreateEntityTemplate<CPointDevShotCamera>(CPointDevShotCamera*, char const*)
 W CPointDevShotCamera::~CPointDevShotCamera()
 W CPointEntity* _CreateEntityTemplate<CPointEntity>(CPointEntity*, char const*)
 W CPointEntity::ObjectCaps()
 W CPointEntity::~CPointEntity()
 W CPointHurt* _CreateEntityTemplate<CPointHurt>(CPointHurt*, char const*)
 W CPointHurt::~CPointHurt()
 W CPointPlayerMoveConstraint* _CreateEntityTemplate<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*, char const*)
 W CPointPlayerMoveConstraint::~CPointPlayerMoveConstraint()
 W CPointServerCommand* _CreateEntityTemplate<CPointServerCommand>(CPointServerCommand*, char const*)
 W CPointServerCommand::~CPointServerCommand()
 W CPointSpotlight* _CreateEntityTemplate<CPointSpotlight>(CPointSpotlight*, char const*)
 W CPointSpotlight::~CPointSpotlight()
 W CPointTeleport* _CreateEntityTemplate<CPointTeleport>(CPointTeleport*, char const*)
 W CPointTeleport::~CPointTeleport()
 W CPointTemplate* _CreateEntityTemplate<CPointTemplate>(CPointTemplate*, char const*)
 W CPointTemplate::~CPointTemplate()
 W CPointTemplatePrecacher::LevelInitPreEntity()
 W CPointTemplatePrecacher::Shutdown()
 W CPointTemplatePrecacher::~CPointTemplatePrecacher()
 W CPositionInterpolator_CatmullRom::ProcessKey(char const*, char const*)
 W CPositionInterpolator_Linear::ProcessKey(char const*, char const*)
 W CPrecacheOtherList::~CPrecacheOtherList()
 W CPrecipitation* _CreateEntityTemplate<CPrecipitation>(CPrecipitation*, char const*)
 W CPrecipitation::~CPrecipitation()
 W CPredictedViewModel* _CreateEntityTemplate<CPredictedViewModel>(CPredictedViewModel*, char const*)
 W CProjectedDecal* _CreateEntityTemplate<CProjectedDecal>(CProjectedDecal*, char const*)
 W CProjectedDecal::~CProjectedDecal()
 W CPropData::~CPropData()
 W CPropDoorRotating* _CreateEntityTemplate<CPropDoorRotating>(CPropDoorRotating*, char const*)
 W CPropDoorRotating::OverridePropdata()
 W CPropJeep::AllowBlockedExit(CBasePlayer*, int)
 W CPropJeep::GetTracerType()
 W CPropJeep::IsVehicleBodyInWater()
 W CPropJeep::~CPropJeep()
 W CPropVehicle* _CreateEntityTemplate<CPropVehicle>(CPropVehicle*, char const*)
 W CPropVehicle::DampenEyePosition(Vector&, QAngle&)
 W CPropVehicleDriveable* _CreateEntityTemplate<CPropVehicleDriveable>(CPropVehicleDriveable*, char const*)
 W CPropVehicleDriveable::AllowBlockedExit(CBasePlayer*, int)
 W CPropVehicleDriveable::AllowMidairExit(CBasePlayer*, int)
 W CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 W CPropVehicleDriveable::GetServerVehicle()
 W CPropVehicleDriveable::IsVehicleBodyInWater()
 W CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 W CPropVehicleDriveable::ObjectCaps()
 W CPropVehicleDriveable::PreExitVehicle(CBasePlayer*, int)
 W CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 W CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 W CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 W CPropVehicleDriveable::ShouldThink()
 W CPushAwayEnumerator::EnumElement(IHandleEntity*)
 W CPushBlockerEnum::EnumElement(IHandleEntity*)
 W CPushable* _CreateEntityTemplate<CPushable>(CPushable*, char const*)
 W CPushable::ObjectCaps()
 W CPushable::PhysicsSolidMaskForEntity() const
 W CPushable::~CPushable()
 W CRagGib* _CreateEntityTemplate<CRagGib>(CRagGib*, char const*)
 W CRagGib::~CRagGib()
 W CRagdollAnimatedFriction::ParseKeyValue(void*, char const*, char const*)
 W CRagdollAnimatedFriction::SetDefaults(void*)
 W CRagdollBoogie* _CreateEntityTemplate<CRagdollBoogie>(CRagdollBoogie*, char const*)
 W CRagdollBoogie::~CRagdollBoogie()
 W CRagdollCollisionRules::ParseKeyValue(void*, char const*, char const*)
 W CRagdollCollisionRules::SetDefaults(void*)
 W CRagdollConstraint* _CreateEntityTemplate<CRagdollConstraint>(CRagdollConstraint*, char const*)
 W CRagdollConstraint::~CRagdollConstraint()
 W CRagdollLRURetirement::~CRagdollLRURetirement()
 W CRagdollMagnet* _CreateEntityTemplate<CRagdollMagnet>(CRagdollMagnet*, char const*)
 W CRagdollMagnet::~CRagdollMagnet()
 W CRagdollManager* _CreateEntityTemplate<CRagdollManager>(CRagdollManager*, char const*)
 W CRagdollManager::~CRagdollManager()
 W CRagdollProp* _CreateEntityTemplate<CRagdollProp>(CRagdollProp*, char const*)
 W CRagdollProp::DrawDebugGeometryOverlays()
 W CRagdollProp::IsAlive()
 W CRagdollProp::IsRagdoll()
 W CRagdollPropAttached* _CreateEntityTemplate<CRagdollPropAttached>(CRagdollPropAttached*, char const*)
 W CRagdollPropAttached::~CRagdollPropAttached()
 W CRallyPoint* _CreateEntityTemplate<CRallyPoint>(CRallyPoint*, char const*)
 W CRallyPoint::~CRallyPoint()
 W CReliableBroadcastRecipientFilter::~CReliableBroadcastRecipientFilter()
 W CResourceManager<CBoneCache, bonecacheparams_t, CBoneCache*>::DestroyResourceStorage(void*)
 W CResourceManager<CBoneCache, bonecacheparams_t, CBoneCache*>::GetRealSize(void*)
 W CResourceManager<CBoneCache, bonecacheparams_t, CBoneCache*>::~CResourceManager()
 W CResourceManager<SceneData_t, scenedataparams_t, SceneData_t*>::DestroyResourceStorage(void*)
 W CResourceManager<SceneData_t, scenedataparams_t, SceneData_t*>::GetRealSize(void*)
 W CResourceManager<SceneData_t, scenedataparams_t, SceneData_t*>::~CResourceManager()
 W CResponseSystem::PrecacheResponses(bool)
 W CResponseSystemSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CResponseSystemSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CRestore::GetGameSaveRestoreInfo()
 W CRestore::GetPrecacheMode()
 W CRestore::ReadAll(void*, datamap_t*)
 W CRestore::SkipHeader()
 W CRestore::~CRestore()
 W CRevertSaved* _CreateEntityTemplate<CRevertSaved>(CRevertSaved*, char const*)
 W CRevertSaved::~CRevertSaved()
 W CRopeAnchor* _CreateEntityTemplate<CRopeAnchor>(CRopeAnchor*, char const*)
 W CRopeAnchor::~CRopeAnchor()
 W CRopeKeyframe* _CreateEntityTemplate<CRopeKeyframe>(CRopeKeyframe*, char const*)
 W CRopeKeyframe::ObjectCaps()
 W CRopeKeyframe::~CRopeKeyframe()
 W CRopePhysics<10>::CRopePhysics()
 W CRopePhysics<512>::CRopePhysics()
 W CRotButton* _CreateEntityTemplate<CRotButton>(CRotButton*, char const*)
 W CRotButton::~CRotButton()
 W CRotDoor* _CreateEntityTemplate<CRotDoor>(CRotDoor*, char const*)
 W CRotDoor::IsRotatingDoor()
 W CRotDoor::~CRotDoor()
 W CRotorWashShooter* _CreateEntityTemplate<CRotorWashShooter>(CRotorWashShooter*, char const*)
 W CRotorWashShooter::~CRotorWashShooter()
 W CRuleBrushEntity::~CRuleBrushEntity()
 W CRuleEntity::~CRuleEntity()
 W CRulePointEntity::~CRulePointEntity()
 W CSave::GetGameSaveRestoreInfo()
 W CSave::WriteAll(void const*, datamap_t*)
 W CSave::~CSave()
 W CSaveRestoreBlockSet::AddBlockHandler(ISaveRestoreBlockHandler*)
 W CSaveRestoreBlockSet::CallBlockHandlerRestore(ISaveRestoreBlockHandler*, int, IRestore*, bool)
 W CSaveRestoreBlockSet::GetBlockName()
 W CSaveRestoreBlockSet::PostRestore()
 W CSaveRestoreBlockSet::PostSave()
 W CSaveRestoreBlockSet::PreRestore()
 W CSaveRestoreBlockSet::PreSave(CSaveRestoreData*)
 W CSaveRestoreBlockSet::ReadRestoreHeaders(IRestore*)
 W CSaveRestoreBlockSet::RemoveBlockHandler(ISaveRestoreBlockHandler*)
 W CSaveRestoreBlockSet::Restore(IRestore*, bool)
 W CSaveRestoreBlockSet::Save(ISave*)
 W CSaveRestoreBlockSet::WriteSaveHeaders(ISave*)
 W CSceneCache::ComputeSoundScriptFileTimestampChecksum()
 W CSceneCache::Rebuild(char const*)
 W CSceneCache::Restore(CUtlBuffer&)
 W CSceneCache::Save(CUtlBuffer&)
 W CSceneEntity* _CreateEntityTemplate<CSceneEntity>(CSceneEntity*, char const*)
 W CSceneEntity::GetPostSpeakDelay()
 W CSceneEntity::Think()
 W CSceneManager* _CreateEntityTemplate<CSceneManager>(CSceneManager*, char const*)
 W CSceneManager::ObjectCaps()
 W CSceneManager::Spawn()
 W CSceneManager::~CSceneManager()
 W CScriptedTarget* _CreateEntityTemplate<CScriptedTarget>(CScriptedTarget*, char const*)
 W CScriptedTarget::ObjectCaps()
 W CScriptedTarget::~CScriptedTarget()
 W CServerGameEnts::~CServerGameEnts()
 W CServerNetworkProperty::AreaNum() const
 W CServerNetworkProperty::GetBaseEntity()
 W CServerNetworkProperty::GetBaseNetworkable()
 W CServerNetworkProperty::GetEdict() const
 W CServerNetworkProperty::GetPVSInfo()
 W CServerOnlyEntity::ObjectCaps()
 W CServerOnlyEntity::~CServerOnlyEntity()
 W CServerOnlyPointEntity::~CServerOnlyPointEntity()
 W CShadowControl* _CreateEntityTemplate<CShadowControl>(CShadowControl*, char const*)
 W CShadowControl::ObjectCaps()
 W CShadowControl::~CShadowControl()
 W CShower* _CreateEntityTemplate<CShower>(CShower*, char const*)
 W CShower::ObjectCaps()
 W CShower::~CShower()
 W CSimThinkManager::OnEntityCreated(CBaseEntity*)
 W CSimThinkManager::OnEntityDeleted(CBaseEntity*)
 W CSimplePhysicsBrush* _CreateEntityTemplate<CSimplePhysicsBrush>(CSimplePhysicsBrush*, char const*)
 W CSimplePhysicsBrush::Spawn()
 W CSimplePhysicsBrush::VPhysicsUpdate(IPhysicsObject*)
 W CSimplePhysicsBrush::~CSimplePhysicsBrush()
 W CSimplePhysicsProp* _CreateEntityTemplate<CSimplePhysicsProp>(CSimplePhysicsProp*, char const*)
 W CSimplePhysicsProp::Spawn()
 W CSimplePhysicsProp::VPhysicsUpdate(IPhysicsObject*)
 W CSimplePhysicsProp::~CSimplePhysicsProp()
 W CSingleUserRecipientFilter::~CSingleUserRecipientFilter()
 W CSingleplayRules::FAllowFlashlight()
 W CSingleplayRules::GetTeamID(CBaseEntity*)
 W CSingleplayRules::~CSingleplayRules()
 W CSkipKeys::ParseKeyValue(void*, char const*, char const*)
 W CSkipKeys::SetDefaults(void*)
 W CSkyCamera* _CreateEntityTemplate<CSkyCamera>(CSkyCamera*, char const*)
 W CSmokeGrenade* _CreateEntityTemplate<CSmokeGrenade>(CSmokeGrenade*, char const*)
 W CSmokeGrenade::GetWeaponID() const
 W CSmokeGrenade::~CSmokeGrenade()
 W CSmokeGrenadeProjectile* _CreateEntityTemplate<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile*, char const*)
 W CSmokeGrenadeProjectile::~CSmokeGrenadeProjectile()
 W CSmokeStack* _CreateEntityTemplate<CSmokeStack>(CSmokeStack*, char const*)
 W CSortedEntityList::EntityReportLess(CBaseEntity* const&, CBaseEntity* const&, void*)
 W CSoundControllerImp::LevelShutdownPreEntity()
 W CSoundControllerImp::PreClientUpdate()
 W CSoundControllerImp::SoundGetName(CSoundPatch*)
 W CSoundControllerImp::~CSoundControllerImp()
 W CSoundEmitterSystem::Init()
 W CSoundEmitterSystem::LevelInitPostEntity()
 W CSoundEmitterSystem::LevelInitPreEntity()
 W CSoundEmitterSystem::LevelShutdownPostEntity()
 W CSoundEmitterSystem::Shutdown()
 W CSoundEmitterSystem::TraceEmitSound(char const*, ...)
 W CSoundEmitterSystem::~CSoundEmitterSystem()
 W CSoundEnt* _CreateEntityTemplate<CSoundEnt>(CSoundEnt*, char const*)
 W CSoundEnt::ObjectCaps()
 W CSoundPatchSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CSoundPatchSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CSoundscapeSystem::~CSoundscapeSystem()
 W CSpotlightEnd* _CreateEntityTemplate<CSpotlightEnd>(CSpotlightEnd*, char const*)
 W CSpotlightEnd::ObjectCaps()
 W CSpotlightEnd::~CSpotlightEnd()
 W CSprayCan* _CreateEntityTemplate<CSprayCan>(CSprayCan*, char const*)
 W CSprayCan::ObjectCaps()
 W CSprayCan::~CSprayCan()
 W CSprite* _CreateEntity<CSprite>(CSprite*, char const*)
 W CSprite* _CreateEntityTemplate<CSprite>(CSprite*, char const*)
 W CSprite::BeginFadeOutThink()
 W CSprite::ObjectCaps()
 W CSprite::~CSprite()
 W CSpriteTrail* _CreateEntity<CSpriteTrail>(CSpriteTrail*, char const*)
 W CSpriteTrail* _CreateEntityTemplate<CSpriteTrail>(CSpriteTrail*, char const*)
 W CSpriteTrail::~CSpriteTrail()
 W CStdStringSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CStdStringSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CStdStringSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CStdStringSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CSteamJet* _CreateEntityTemplate<CSteamJet>(CSteamJet*, char const*)
 W CSteamJet::~CSteamJet()
 W CStringTableSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CStringTableSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CStringTableSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CStringTableSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CStripWeapons* _CreateEntityTemplate<CStripWeapons>(CStripWeapons*, char const*)
 W CStripWeapons::~CStripWeapons()
 W CSun* _CreateEntityTemplate<CSun>(CSun*, char const*)
 W CSun::~CSun()
 W CSurroundTest* _CreateEntityTemplate<CSurroundTest>(CSurroundTest*, char const*)
 W CSurroundTest::~CSurroundTest()
 W CTEArmorRicochet::~CTEArmorRicochet()
 W CTEDust::Test(Vector const&, QAngle const&)
 W CTEGaussExplosion::Test(Vector const&, QAngle const&)
 W CTEParticleSystem::~CTEParticleSystem()
 W CTEPlayerAnimEvent::~CTEPlayerAnimEvent()
 W CTEShatterSurface::~CTEShatterSurface()
 W CTankTargetChange* _CreateEntityTemplate<CTankTargetChange>(CTankTargetChange*, char const*)
 W CTankTargetChange::~CTankTargetChange()
 W CTankTrainAI* _CreateEntityTemplate<CTankTrainAI>(CTankTrainAI*, char const*)
 W CTargetCDAudioRep* _CreateEntityTemplate<CTargetCDAudioRep>(CTargetCDAudioRep*, char const*)
 W CTargetCDAudioRep::~CTargetCDAudioRep()
 W CTargetChangeGravity* _CreateEntityTemplate<CTargetChangeGravity>(CTargetChangeGravity*, char const*)
 W CTargetChangeGravity::~CTargetChangeGravity()
 W CTeam* _CreateEntityTemplate<CTeam>(CTeam*, char const*)
 W CTeam::Precache()
 W CTeamRecipientFilter::~CTeamRecipientFilter()
 W CTeamSpawnPoint* _CreateEntityTemplate<CTeamSpawnPoint>(CTeamSpawnPoint*, char const*)
 W CTeamSpawnPoint::~CTeamSpawnPoint()
 W CTeamVehicleSpawnPoint* _CreateEntityTemplate<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*, char const*)
 W CTeamVehicleSpawnPoint::~CTeamVehicleSpawnPoint()
 W CTeamplayRules::GetGameDescription()
 W CTeamplayRules::~CTeamplayRules()
 W CTempEntTester* _CreateEntityTemplate<CTempEntTester>(CTempEntTester*, char const*)
 W CTempEntTester::~CTempEntTester()
 W CTempEntsSystem::ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 W CTempEntsSystem::BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 W CTempEntsSystem::BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 W CTempEntsSystem::BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 W CTempEntsSystem::BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 W CTempEntsSystem::BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 W CTempEntsSystem::BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 W CTempEntsSystem::BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 W CTempEntsSystem::BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 W CTempEntsSystem::BeamSpline(IRecipientFilter&, float, int, Vector*)
 W CTempEntsSystem::BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 W CTempEntsSystem::BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 W CTempEntsSystem::BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 W CTempEntsSystem::BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 W CTempEntsSystem::Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 W CTempEntsSystem::Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 W CTempEntsSystem::DispatchEffect(IRecipientFilter&, float, Vector const&, char const*, CEffectData const&)
 W CTempEntsSystem::Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 W CTempEntsSystem::DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 W CTempEntsSystem::EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 W CTempEntsSystem::Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 W CTempEntsSystem::Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 W CTempEntsSystem::FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 W CTempEntsSystem::GaussExplosion(IRecipientFilter&, float, Vector const&, Vector const&, int)
 W CTempEntsSystem::GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 W CTempEntsSystem::KillPlayerAttachments(IRecipientFilter&, float, int)
 W CTempEntsSystem::LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 W CTempEntsSystem::MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 W CTempEntsSystem::MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 W CTempEntsSystem::PhysicsProp(IRecipientFilter&, float, int, Vector const&, QAngle const&, Vector const&, int)
 W CTempEntsSystem::PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 W CTempEntsSystem::ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 W CTempEntsSystem::ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 W CTempEntsSystem::ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 W CTempEntsSystem::Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 W CTempEntsSystem::Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 W CTempEntsSystem::Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 W CTempEntsSystem::SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 W CTempEntsSystem::WorldDecal(IRecipientFilter&, float, Vector const*, int)
 W CTempEntsSystem::~CTempEntsSystem()
 W CTemplate_SaveRestoreBlockHandler::GetBlockName()
 W CTemplate_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 W CTemplate_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 W CTemplate_SaveRestoreBlockHandler::Save(ISave*)
 W CTemplate_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 W CTemplatesHook::LevelShutdownPostEntity()
 W CTemplatesHook::~CTemplatesHook()
 W CTerrainMorph* _CreateEntityTemplate<CTerrainMorph>(CTerrainMorph*, char const*)
 W CTerrainMorph::~CTerrainMorph()
 W CTesla* _CreateEntityTemplate<CTesla>(CTesla*, char const*)
 W CTesla::~CTesla()
 W CTestEffect* _CreateEntityTemplate<CTestEffect>(CTestEffect*, char const*)
 W CTestEffect::~CTestEffect()
 W CTestTraceline* _CreateEntityTemplate<CTestTraceline>(CTestTraceline*, char const*)
 W CTestTraceline::~CTestTraceline()
 W CTest_ProxyToggle_Networkable* _CreateEntityTemplate<CTest_ProxyToggle_Networkable>(CTest_ProxyToggle_Networkable*, char const*)
 W CTest_ProxyToggle_Networkable::UpdateTransmitState()
 W CTest_ProxyToggle_Networkable::~CTest_ProxyToggle_Networkable()
 W CTextureToggle* _CreateEntityTemplate<CTextureToggle>(CTextureToggle*, char const*)
 W CTextureToggle::~CTextureToggle()
 W CThinkContextsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CThinkContextsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CThinkContextsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CThinkContextsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CThinkSyncTester::ThinkLessFunc(ThinkSync const&, ThinkSync const&)
 W CThrustController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 W CTimedEventQueue<CEnvWindShared::WindAveEvent_t, unsigned short>::CTimedEventQueue(float)
 W CTimedEventQueue<CEnvWindShared::WindVariationEvent_t, unsigned short>::CTimedEventQueue(float)
 W CTimerEntity* _CreateEntityTemplate<CTimerEntity>(CTimerEntity*, char const*)
 W CTimerEntity::~CTimerEntity()
 W CTraceFilter::GetTraceType() const
 W CTraceFilterAgainstEntityList::GetTraceType() const
 W CTraceFilterAgainstEntityList::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterDoor::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterEntitiesOnly::GetTraceType() const
 W CTraceFilterEntity::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterEntityIgnoreOther::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterOnlyNPCsAndPlayer::GetTraceType() const
 W CTraceFilterPlayerAvoidance::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterPlayersNPCs::GetTraceType() const
 W CTraceFilterPlayersNPCs::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterPlayersNPCsPhysicsProps::GetTraceType() const
 W CTraceFilterPlayersNPCsPhysicsProps::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterPushFinal::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterPushMove::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterSimple::SetPassEntity(IHandleEntity*)
 W CTraceFilterSkipNPCs::ShouldHitEntity(IHandleEntity*, int)
 W CTraceFilterWalkableEntities::ShouldHitEntity(IHandleEntity*, int)
 W CTraceListData::EnumElement(IHandleEntity*)
 W CTracePassFilter::ShouldHitEntity(IHandleEntity*, int)
 W CTriggerBrush* _CreateEntityTemplate<CTriggerBrush>(CTriggerBrush*, char const*)
 W CTriggerBrush::InputDisable(inputdata_t&)
 W CTriggerBrush::InputEnable(inputdata_t&)
 W CTriggerBrush::~CTriggerBrush()
 W CTriggerCDAudio* _CreateEntityTemplate<CTriggerCDAudio>(CTriggerCDAudio*, char const*)
 W CTriggerCDAudio::~CTriggerCDAudio()
 W CTriggerCamera* _CreateEntityTemplate<CTriggerCamera>(CTriggerCamera*, char const*)
 W CTriggerCamera::~CTriggerCamera()
 W CTriggerGravity* _CreateEntityTemplate<CTriggerGravity>(CTriggerGravity*, char const*)
 W CTriggerGravity::~CTriggerGravity()
 W CTriggerHurt* _CreateEntityTemplate<CTriggerHurt>(CTriggerHurt*, char const*)
 W CTriggerHurt::~CTriggerHurt()
 W CTriggerImpact* _CreateEntityTemplate<CTriggerImpact>(CTriggerImpact*, char const*)
 W CTriggerImpact::~CTriggerImpact()
 W CTriggerLook* _CreateEntityTemplate<CTriggerLook>(CTriggerLook*, char const*)
 W CTriggerLook::~CTriggerLook()
 W CTriggerMultiple* _CreateEntityTemplate<CTriggerMultiple>(CTriggerMultiple*, char const*)
 W CTriggerMultiple::~CTriggerMultiple()
 W CTriggerOnce* _CreateEntityTemplate<CTriggerOnce>(CTriggerOnce*, char const*)
 W CTriggerOnce::~CTriggerOnce()
 W CTriggerPlayerMovement* _CreateEntityTemplate<CTriggerPlayerMovement>(CTriggerPlayerMovement*, char const*)
 W CTriggerPlayerMovement::~CTriggerPlayerMovement()
 W CTriggerProximity* _CreateEntityTemplate<CTriggerProximity>(CTriggerProximity*, char const*)
 W CTriggerProximity::~CTriggerProximity()
 W CTriggerPush* _CreateEntityTemplate<CTriggerPush>(CTriggerPush*, char const*)
 W CTriggerPush::~CTriggerPush()
 W CTriggerRemove* _CreateEntityTemplate<CTriggerRemove>(CTriggerRemove*, char const*)
 W CTriggerRemove::~CTriggerRemove()
 W CTriggerSave* _CreateEntityTemplate<CTriggerSave>(CTriggerSave*, char const*)
 W CTriggerSave::~CTriggerSave()
 W CTriggerSoundscape* _CreateEntityTemplate<CTriggerSoundscape>(CTriggerSoundscape*, char const*)
 W CTriggerSoundscape::~CTriggerSoundscape()
 W CTriggerTeleport* _CreateEntityTemplate<CTriggerTeleport>(CTriggerTeleport*, char const*)
 W CTriggerTeleport::~CTriggerTeleport()
 W CTriggerToggleSave* _CreateEntityTemplate<CTriggerToggleSave>(CTriggerToggleSave*, char const*)
 W CTriggerToggleSave::InputDisable(inputdata_t&)
 W CTriggerToggleSave::InputEnable(inputdata_t&)
 W CTriggerToggleSave::~CTriggerToggleSave()
 W CTriggerTraceEnum::EnumEntity(IHandleEntity*)
 W CTriggerVPhysicsMotion* _CreateEntityTemplate<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*, char const*)
 W CTriggerVPhysicsMotion::~CTriggerVPhysicsMotion()
 W CTriggerVolume* _CreateEntityTemplate<CTriggerVolume>(CTriggerVolume*, char const*)
 W CTriggerVolume::~CTriggerVolume()
 W CTriggerWind* _CreateEntityTemplate<CTriggerWind>(CTriggerWind*, char const*)
 W CTriggerWind::~CTriggerWind()
 W CUserCmd::~CUserCmd()
 W CUtlCachedFileData<CModelSoundCache>::Count() const
 W CUtlCachedFileData<CModelSoundCache>::FileNameHandleLessFunc(CUtlCachedFileData<CModelSoundCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundCache>::ElementType_t const&)
 W CUtlCachedFileData<CModelSoundCache>::Get(char const*)
 W CUtlCachedFileData<CModelSoundCache>::Init()
 W CUtlCachedFileData<CModelSoundCache>::ManifestExists()
 W CUtlCachedFileData<CModelSoundCache>::RebuildCache(char const*, CModelSoundCache*)
 W CUtlCachedFileData<CModelSoundCache>::Reload()
 W CUtlCachedFileData<CModelSoundCache>::Save()
 W CUtlCachedFileData<CModelSoundCache>::SaveManifest()
 W CUtlCachedFileData<CModelSoundCache>::Shutdown()
 W CUtlCachedFileData<CModelSoundCache>::~CUtlCachedFileData()
 W CUtlCachedFileData<CSceneCache>::Count() const
 W CUtlCachedFileData<CSceneCache>::FileNameHandleLessFunc(CUtlCachedFileData<CSceneCache>::ElementType_t const&, CUtlCachedFileData<CSceneCache>::ElementType_t const&)
 W CUtlCachedFileData<CSceneCache>::ForceRecheckDiskInfo()
 W CUtlCachedFileData<CSceneCache>::Get(char const*)
 W CUtlCachedFileData<CSceneCache>::Init()
 W CUtlCachedFileData<CSceneCache>::ManifestExists()
 W CUtlCachedFileData<CSceneCache>::RebuildCache(char const*, CSceneCache*)
 W CUtlCachedFileData<CSceneCache>::Reload()
 W CUtlCachedFileData<CSceneCache>::Save()
 W CUtlCachedFileData<CSceneCache>::SaveManifest()
 W CUtlCachedFileData<CSceneCache>::Shutdown()
 W CUtlCachedFileData<CSceneCache>::~CUtlCachedFileData()
 W CUtlDict<CDecalEmitterSystem::DecalEntry, int>::CUtlDict(bool, int, int)
 W CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictLessFunc(CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t const&, CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t const&)
 W CUtlDict<CDecalEmitterSystem::DecalEntry, int>::Find(char const*) const
 W CUtlDict<CDecalEmitterSystem::DecalEntry, int>::Insert(char const*, CDecalEmitterSystem::DecalEntry const&)
 W CUtlDict<CDecalEmitterSystem::DecalEntry, int>::Purge()
 W CUtlDict<CDecalEmitterSystem::DecalEntry, int>::~CUtlDict()
 W CUtlDict<CInstancedResponseSystem*, int>::CUtlDict(bool, int, int)
 W CUtlDict<CInstancedResponseSystem*, int>::DictLessFunc(CUtlDict<CInstancedResponseSystem*, int>::DictElement_t const&, CUtlDict<CInstancedResponseSystem*, int>::DictElement_t const&)
 W CUtlDict<CInstancedResponseSystem*, int>::Find(char const*) const
 W CUtlDict<CInstancedResponseSystem*, int>::Insert(char const*, CInstancedResponseSystem* const&)
 W CUtlDict<CInstancedResponseSystem*, int>::RemoveAll()
 W CUtlDict<CInstancedResponseSystem*, int>::~CUtlDict()
 W CUtlDict<CResponseSystem::Enumeration, int>::CUtlDict(bool, int, int)
 W CUtlDict<CResponseSystem::Enumeration, int>::DictLessFunc(CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t const&, CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t const&)
 W CUtlDict<CResponseSystem::Enumeration, int>::Find(char const*) const
 W CUtlDict<CResponseSystem::Enumeration, int>::Insert(char const*, CResponseSystem::Enumeration const&)
 W CUtlDict<CResponseSystem::Enumeration, int>::RemoveAll()
 W CUtlDict<CResponseSystem::Enumeration, int>::~CUtlDict()
 W CUtlDict<CUserMessage*, int>::CUtlDict(bool, int, int)
 W CUtlDict<CUserMessage*, int>::DictLessFunc(CUtlDict<CUserMessage*, int>::DictElement_t const&, CUtlDict<CUserMessage*, int>::DictElement_t const&)
 W CUtlDict<CUserMessage*, int>::Find(char const*) const
 W CUtlDict<CUserMessage*, int>::Insert(char const*, CUserMessage* const&)
 W CUtlDict<CUserMessage*, int>::RemoveAll()
 W CUtlDict<CUserMessage*, int>::~CUtlDict()
 W CUtlDict<ConceptHistory_t, int>::CUtlDict(bool, int, int)
 W CUtlDict<ConceptHistory_t, int>::DictLessFunc(CUtlDict<ConceptHistory_t, int>::DictElement_t const&, CUtlDict<ConceptHistory_t, int>::DictElement_t const&)
 W CUtlDict<ConceptHistory_t, int>::Find(char const*) const
 W CUtlDict<ConceptHistory_t, int>::First() const
 W CUtlDict<ConceptHistory_t, int>::Insert(char const*, ConceptHistory_t const&)
 W CUtlDict<ConceptHistory_t, int>::Next(int) const
 W CUtlDict<ConceptHistory_t, int>::Purge()
 W CUtlDict<ConceptHistory_t, int>::Remove(char const*)
 W CUtlDict<ConceptHistory_t, int>::RemoveAt(int)
 W CUtlDict<ConceptHistory_t, int>::~CUtlDict()
 W CUtlDict<Criteria, int>::CUtlDict(bool, int, int)
 W CUtlDict<Criteria, int>::DictLessFunc(CUtlDict<Criteria, int>::DictElement_t const&, CUtlDict<Criteria, int>::DictElement_t const&)
 W CUtlDict<Criteria, int>::Find(char const*) const
 W CUtlDict<Criteria, int>::Insert(char const*, Criteria const&)
 W CUtlDict<Criteria, int>::RemoveAll()
 W CUtlDict<Criteria, int>::~CUtlDict()
 W CUtlDict<EventGroup, int>::CUtlDict(bool, int, int)
 W CUtlDict<EventGroup, int>::DictLessFunc(CUtlDict<EventGroup, int>::DictElement_t const&, CUtlDict<EventGroup, int>::DictElement_t const&)
 W CUtlDict<EventGroup, int>::Find(char const*) const
 W CUtlDict<EventGroup, int>::Insert(char const*, EventGroup const&)
 W CUtlDict<EventGroup, int>::~CUtlDict()
 W CUtlDict<FileWeaponInfo_t*, unsigned short>::CUtlDict(bool, int, int)
 W CUtlDict<FileWeaponInfo_t*, unsigned short>::DictLessFunc(CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t const&, CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t const&)
 W CUtlDict<FileWeaponInfo_t*, unsigned short>::Find(char const*) const
 W CUtlDict<FileWeaponInfo_t*, unsigned short>::Insert(char const*, FileWeaponInfo_t* const&)
 W CUtlDict<FileWeaponInfo_t*, unsigned short>::~CUtlDict()
 W CUtlDict<IEntityFactory*, unsigned short>::CUtlDict(bool, int, int)
 W CUtlDict<IEntityFactory*, unsigned short>::DictLessFunc(CUtlDict<IEntityFactory*, unsigned short>::DictElement_t const&, CUtlDict<IEntityFactory*, unsigned short>::DictElement_t const&)
 W CUtlDict<IEntityFactory*, unsigned short>::Find(char const*) const
 W CUtlDict<IEntityFactory*, unsigned short>::Insert(char const*, IEntityFactory* const&)
 W CUtlDict<IEntityFactory*, unsigned short>::~CUtlDict()
 W CUtlDict<KeyValues*, int>::CUtlDict(bool, int, int)
 W CUtlDict<KeyValues*, int>::DictLessFunc(CUtlDict<KeyValues*, int>::DictElement_t const&, CUtlDict<KeyValues*, int>::DictElement_t const&)
 W CUtlDict<KeyValues*, int>::Find(char const*) const
 W CUtlDict<KeyValues*, int>::Insert(char const*, KeyValues* const&)
 W CUtlDict<KeyValues*, int>::Remove(char const*)
 W CUtlDict<KeyValues*, int>::RemoveAt(int)
 W CUtlDict<KeyValues*, int>::~CUtlDict()
 W CUtlDict<ResponseGroup, int>::CUtlDict(bool, int, int)
 W CUtlDict<ResponseGroup, int>::DictLessFunc(CUtlDict<ResponseGroup, int>::DictElement_t const&, CUtlDict<ResponseGroup, int>::DictElement_t const&)
 W CUtlDict<ResponseGroup, int>::Find(char const*) const
 W CUtlDict<ResponseGroup, int>::Insert(char const*, ResponseGroup const&)
 W CUtlDict<ResponseGroup, int>::RemoveAll()
 W CUtlDict<ResponseGroup, int>::~CUtlDict()
 W CUtlDict<Rule, int>::CUtlDict(bool, int, int)
 W CUtlDict<Rule, int>::DictLessFunc(CUtlDict<Rule, int>::DictElement_t const&, CUtlDict<Rule, int>::DictElement_t const&)
 W CUtlDict<Rule, int>::Insert(char const*, Rule const&)
 W CUtlDict<Rule, int>::RemoveAll()
 W CUtlDict<Rule, int>::~CUtlDict()
 W CUtlDict<float, int>::CUtlDict(bool, int, int)
 W CUtlDict<float, int>::DictLessFunc(CUtlDict<float, int>::DictElement_t const&, CUtlDict<float, int>::DictElement_t const&)
 W CUtlDict<float, int>::Find(char const*) const
 W CUtlDict<float, int>::Insert(char const*, float const&)
 W CUtlDict<float, int>::Purge()
 W CUtlDict<float, int>::~CUtlDict()
 W CUtlDict<int, int>::CUtlDict(bool, int, int)
 W CUtlDict<int, int>::DictLessFunc(CUtlDict<int, int>::DictElement_t const&, CUtlDict<int, int>::DictElement_t const&)
 W CUtlDict<int, int>::Find(char const*) const
 W CUtlDict<int, int>::Insert(char const*, int const&)
 W CUtlDict<int, int>::Purge()
 W CUtlDict<int, int>::RemoveAll()
 W CUtlDict<int, int>::~CUtlDict()
 W CUtlDict<int, unsigned short>::CUtlDict(bool, int, int)
 W CUtlDict<int, unsigned short>::DictLessFunc(CUtlDict<int, unsigned short>::DictElement_t const&, CUtlDict<int, unsigned short>::DictElement_t const&)
 W CUtlDict<int, unsigned short>::Find(char const*) const
 W CUtlDict<int, unsigned short>::First() const
 W CUtlDict<int, unsigned short>::Insert(char const*, int const&)
 W CUtlDict<int, unsigned short>::Next(unsigned short) const
 W CUtlDict<int, unsigned short>::RemoveAll()
 W CUtlDict<int, unsigned short>::~CUtlDict()
 W CUtlDict<memhandle_t__*, int>::CUtlDict(bool, int, int)
 W CUtlDict<memhandle_t__*, int>::DictLessFunc(CUtlDict<memhandle_t__*, int>::DictElement_t const&, CUtlDict<memhandle_t__*, int>::DictElement_t const&)
 W CUtlDict<memhandle_t__*, int>::Find(char const*) const
 W CUtlDict<memhandle_t__*, int>::Insert(char const*, memhandle_t__* const&)
 W CUtlDict<memhandle_t__*, int>::RemoveAll()
 W CUtlDict<memhandle_t__*, int>::~CUtlDict()
 W CUtlFixedLinkedList<CInfoCameraLink*>::AllocInternal(bool)
 W CUtlFixedLinkedList<CInfoCameraLink*>::CUtlFixedLinkedList(int, int)
 W CUtlFixedLinkedList<CInfoCameraLink*>::ConstructList()
 W CUtlFixedLinkedList<CInfoCameraLink*>::Find(CInfoCameraLink* const&) const
 W CUtlFixedLinkedList<CInfoCameraLink*>::FindAndRemove(CInfoCameraLink* const&)
 W CUtlFixedLinkedList<CInfoCameraLink*>::Free(int)
 W CUtlFixedLinkedList<CInfoCameraLink*>::InsertBefore(int, CInfoCameraLink* const&)
 W CUtlFixedLinkedList<CInfoCameraLink*>::LinkBefore(int, int)
 W CUtlFixedLinkedList<CInfoCameraLink*>::Remove(int)
 W CUtlFixedLinkedList<CInfoCameraLink*>::RemoveAll()
 W CUtlFixedLinkedList<CInfoCameraLink*>::Unlink(int)
 W CUtlFixedLinkedList<CInfoCameraLink*>::~CUtlFixedLinkedList()
 W CUtlFixedLinkedList<LagRecord>::AllocInternal(bool)
 W CUtlFixedLinkedList<LagRecord>::CUtlFixedLinkedList(int, int)
 W CUtlFixedLinkedList<LagRecord>::ConstructList()
 W CUtlFixedLinkedList<LagRecord>::Free(int)
 W CUtlFixedLinkedList<LagRecord>::InsertAfter(int)
 W CUtlFixedLinkedList<LagRecord>::LinkAfter(int, int)
 W CUtlFixedLinkedList<LagRecord>::Purge()
 W CUtlFixedLinkedList<LagRecord>::Remove(int)
 W CUtlFixedLinkedList<LagRecord>::RemoveAll()
 W CUtlFixedLinkedList<LagRecord>::Unlink(int)
 W CUtlFixedLinkedList<LagRecord>::~CUtlFixedLinkedList()
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::Alloc()
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::CUtlFixedMemory(int, int)
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::FirstElement()
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::Grow(int)
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::NextElement(int)
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::Purge()
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::RemoveAll()
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::SetupFreeList(CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::BlockHeader_t*)
 W CUtlFixedMemory<CUtlFixedLinkedList<CInfoCameraLink*>::ListElem_t>::~CUtlFixedMemory()
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::Alloc()
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::CUtlFixedMemory(int, int)
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::FirstElement()
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::Grow(int)
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::NextElement(int)
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::Purge()
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::RemoveAll()
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::SetupFreeList(CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::BlockHeader_t*)
 W CUtlFixedMemory<CUtlFixedLinkedList<LagRecord>::ListElem_t>::~CUtlFixedMemory()
 W CUtlHash<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<CPositionWatcherList>::HashEntry const&, CEntityDataInstantiator<CPositionWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CPositionWatcherList>::HashEntry const&))
 W CUtlHash<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::~CUtlHash()
 W CUtlHash<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&))
 W CUtlHash<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::~CUtlHash()
 W CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&))
 W CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry>::~CUtlHash()
 W CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&))
 W CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry>::~CUtlHash()
 W CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&))
 W CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::~CUtlHash()
 W CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&))
 W CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry>::~CUtlHash()
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::ConstructList()
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::Free(unsigned short)
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::InsertBefore(unsigned short, ActiveGrenade* const&)
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::Purge()
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::PurgeAndDeleteElements()
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::Remove(unsigned short)
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::RemoveAll()
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<ActiveGrenade*, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<BotProfile*, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<BotProfile*, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<BotProfile*, unsigned short>::ConstructList()
 W CUtlLinkedList<BotProfile*, unsigned short>::InsertBefore(unsigned short, BotProfile* const&)
 W CUtlLinkedList<BotProfile*, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<BotProfile*, unsigned short>::Purge()
 W CUtlLinkedList<BotProfile*, unsigned short>::PurgeAndDeleteElements()
 W CUtlLinkedList<BotProfile*, unsigned short>::RemoveAll()
 W CUtlLinkedList<BotProfile*, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<BotProfile*, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::ConstructList()
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::Find(CBaseCombatWeapon* const&) const
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::FindAndRemove(CBaseCombatWeapon* const&)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::Free(unsigned short)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::InsertBefore(unsigned short, CBaseCombatWeapon* const&)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::Purge()
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::Remove(unsigned short)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::RemoveAll()
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CDamageModifier*, int>::AllocInternal(bool)
 W CUtlLinkedList<CDamageModifier*, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CDamageModifier*, int>::ConstructList()
 W CUtlLinkedList<CDamageModifier*, int>::Find(CDamageModifier* const&) const
 W CUtlLinkedList<CDamageModifier*, int>::FindAndRemove(CDamageModifier* const&)
 W CUtlLinkedList<CDamageModifier*, int>::Free(int)
 W CUtlLinkedList<CDamageModifier*, int>::InsertBefore(int, CDamageModifier* const&)
 W CUtlLinkedList<CDamageModifier*, int>::LinkBefore(int, int)
 W CUtlLinkedList<CDamageModifier*, int>::Remove(int)
 W CUtlLinkedList<CDamageModifier*, int>::RemoveAll()
 W CUtlLinkedList<CDamageModifier*, int>::Unlink(int)
 W CUtlLinkedList<CDamageModifier*, int>::~CUtlLinkedList()
 W CUtlLinkedList<CDamageRecord*, int>::AllocInternal(bool)
 W CUtlLinkedList<CDamageRecord*, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CDamageRecord*, int>::ConstructList()
 W CUtlLinkedList<CDamageRecord*, int>::InsertBefore(int)
 W CUtlLinkedList<CDamageRecord*, int>::LinkBefore(int, int)
 W CUtlLinkedList<CDamageRecord*, int>::Purge()
 W CUtlLinkedList<CDamageRecord*, int>::PurgeAndDeleteElements()
 W CUtlLinkedList<CDamageRecord*, int>::RemoveAll()
 W CUtlLinkedList<CDamageRecord*, int>::Unlink(int)
 W CUtlLinkedList<CDamageRecord*, int>::~CUtlLinkedList()
 W CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::ConstructList()
 W CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::RemoveAll()
 W CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::ConstructList()
 W CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::RemoveAll()
 W CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::ConstructList()
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::Free(unsigned short)
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::InsertBefore(unsigned short, CFuncAreaPortalBase* const&)
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::Remove(unsigned short)
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::RemoveAll()
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::ConstructList()
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::Free(unsigned short)
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::InsertBefore(unsigned short, CHandle<CBaseAnimating> const&)
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::Remove(unsigned short)
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::RemoveAll()
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CMapEntityRef, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<CMapEntityRef, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CMapEntityRef, unsigned short>::ConstructList()
 W CUtlLinkedList<CMapEntityRef, unsigned short>::InsertBefore(unsigned short, CMapEntityRef const&)
 W CUtlLinkedList<CMapEntityRef, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<CMapEntityRef, unsigned short>::Purge()
 W CUtlLinkedList<CMapEntityRef, unsigned short>::RemoveAll()
 W CUtlLinkedList<CMapEntityRef, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<CMapEntityRef, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CNavArea*, int>::AllocInternal(bool)
 W CUtlLinkedList<CNavArea*, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CNavArea*, int>::ConstructList()
 W CUtlLinkedList<CNavArea*, int>::Find(CNavArea* const&) const
 W CUtlLinkedList<CNavArea*, int>::FindAndRemove(CNavArea* const&)
 W CUtlLinkedList<CNavArea*, int>::Free(int)
 W CUtlLinkedList<CNavArea*, int>::InsertBefore(int, CNavArea* const&)
 W CUtlLinkedList<CNavArea*, int>::LinkBefore(int, int)
 W CUtlLinkedList<CNavArea*, int>::Remove(int)
 W CUtlLinkedList<CNavArea*, int>::RemoveAll()
 W CUtlLinkedList<CNavArea*, int>::Unlink(int)
 W CUtlLinkedList<CNavArea*, int>::~CUtlLinkedList()
 W CUtlLinkedList<CNavLadder*, int>::AllocInternal(bool)
 W CUtlLinkedList<CNavLadder*, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CNavLadder*, int>::ConstructList()
 W CUtlLinkedList<CNavLadder*, int>::Find(CNavLadder* const&) const
 W CUtlLinkedList<CNavLadder*, int>::FindAndRemove(CNavLadder* const&)
 W CUtlLinkedList<CNavLadder*, int>::Free(int)
 W CUtlLinkedList<CNavLadder*, int>::InsertBefore(int, CNavLadder* const&)
 W CUtlLinkedList<CNavLadder*, int>::LinkBefore(int, int)
 W CUtlLinkedList<CNavLadder*, int>::Remove(int)
 W CUtlLinkedList<CNavLadder*, int>::RemoveAll()
 W CUtlLinkedList<CNavLadder*, int>::Unlink(int)
 W CUtlLinkedList<CNavLadder*, int>::~CUtlLinkedList()
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::AllocInternal(bool)
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::ConstructList()
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::InsertBefore(int, CNavMesh::WalkableSeedSpot const&)
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::LinkBefore(int, int)
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::RemoveAll()
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::Unlink(int)
 W CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::~CUtlLinkedList()
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::ConstructList()
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::InsertBefore(unsigned short)
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::RemoveAll()
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::AllocInternal(bool)
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::CUtlLinkedList(int, int)
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::ConstructList()
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::Free(unsigned short)
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::InsertBefore(unsigned short)
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::LinkBefore(unsigned short, unsigned short)
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::Remove(unsigned short)
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::RemoveAll()
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::Unlink(unsigned short)
 W CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::~CUtlLinkedList()
 W CUtlLinkedList<HidingSpot*, int>::AllocInternal(bool)
 W CUtlLinkedList<HidingSpot*, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<HidingSpot*, int>::ConstructList()
 W CUtlLinkedList<HidingSpot*, int>::InsertBefore(int, HidingSpot* const&)
 W CUtlLinkedList<HidingSpot*, int>::LinkBefore(int, int)
 W CUtlLinkedList<HidingSpot*, int>::Purge()
 W CUtlLinkedList<HidingSpot*, int>::PurgeAndDeleteElements()
 W CUtlLinkedList<HidingSpot*, int>::RemoveAll()
 W CUtlLinkedList<HidingSpot*, int>::Unlink(int)
 W CUtlLinkedList<HidingSpot*, int>::~CUtlLinkedList()
 W CUtlLinkedList<NavConnect, int>::AllocInternal(bool)
 W CUtlLinkedList<NavConnect, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<NavConnect, int>::ConstructList()
 W CUtlLinkedList<NavConnect, int>::Find(NavConnect const&) const
 W CUtlLinkedList<NavConnect, int>::FindAndRemove(NavConnect const&)
 W CUtlLinkedList<NavConnect, int>::Free(int)
 W CUtlLinkedList<NavConnect, int>::InsertBefore(int, NavConnect const&)
 W CUtlLinkedList<NavConnect, int>::LinkBefore(int, int)
 W CUtlLinkedList<NavConnect, int>::Remove(int)
 W CUtlLinkedList<NavConnect, int>::RemoveAll()
 W CUtlLinkedList<NavConnect, int>::Unlink(int)
 W CUtlLinkedList<NavConnect, int>::~CUtlLinkedList()
 W CUtlLinkedList<NavLadderConnect, int>::AllocInternal(bool)
 W CUtlLinkedList<NavLadderConnect, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<NavLadderConnect, int>::ConstructList()
 W CUtlLinkedList<NavLadderConnect, int>::Find(NavLadderConnect const&) const
 W CUtlLinkedList<NavLadderConnect, int>::FindAndRemove(NavLadderConnect const&)
 W CUtlLinkedList<NavLadderConnect, int>::Free(int)
 W CUtlLinkedList<NavLadderConnect, int>::InsertBefore(int, NavLadderConnect const&)
 W CUtlLinkedList<NavLadderConnect, int>::LinkBefore(int, int)
 W CUtlLinkedList<NavLadderConnect, int>::Remove(int)
 W CUtlLinkedList<NavLadderConnect, int>::RemoveAll()
 W CUtlLinkedList<NavLadderConnect, int>::Unlink(int)
 W CUtlLinkedList<NavLadderConnect, int>::~CUtlLinkedList()
 W CUtlLinkedList<SpotEncounter*, int>::AllocInternal(bool)
 W CUtlLinkedList<SpotEncounter*, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<SpotEncounter*, int>::ConstructList()
 W CUtlLinkedList<SpotEncounter*, int>::InsertBefore(int, SpotEncounter* const&)
 W CUtlLinkedList<SpotEncounter*, int>::LinkBefore(int, int)
 W CUtlLinkedList<SpotEncounter*, int>::Purge()
 W CUtlLinkedList<SpotEncounter*, int>::PurgeAndDeleteElements()
 W CUtlLinkedList<SpotEncounter*, int>::RemoveAll()
 W CUtlLinkedList<SpotEncounter*, int>::Unlink(int)
 W CUtlLinkedList<SpotEncounter*, int>::~CUtlLinkedList()
 W CUtlLinkedList<SpotOrder, int>::AllocInternal(bool)
 W CUtlLinkedList<SpotOrder, int>::CUtlLinkedList(int, int)
 W CUtlLinkedList<SpotOrder, int>::ConstructList()
 W CUtlLinkedList<SpotOrder, int>::InsertBefore(int, SpotOrder const&)
 W CUtlLinkedList<SpotOrder, int>::LinkBefore(int, int)
 W CUtlLinkedList<SpotOrder, int>::RemoveAll()
 W CUtlLinkedList<SpotOrder, int>::Unlink(int)
 W CUtlLinkedList<SpotOrder, int>::~CUtlLinkedList()
 W CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::TreeLessFunc(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&)
 W CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::TreeLessFunc(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&)
 W CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::TreeLessFunc(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&)
 W CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::TreeLessFunc(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&)
 W CUtlMap<IPhysicsObject*, int, unsigned short>::TreeLessFunc(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&, CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&)
 W CUtlMap<char const*, ConceptInfo_t*, unsigned short>::TreeLessFunc(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&)
 W CUtlMap<string_t, CSimpleSimTimer, char>::TreeLessFunc(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&, CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&)
 W CUtlMap<unsigned int, Activity, unsigned short>::TreeLessFunc(CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&, CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&)
 W CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlMemory<AIRebalanceInfo_t>::CUtlMemory(int, int)
 W CUtlMemory<AIRebalanceInfo_t>::Grow(int)
 W CUtlMemory<AIRebalanceInfo_t>::IsExternallyAllocated() const
 W CUtlMemory<AIRebalanceInfo_t>::Purge()
 W CUtlMemory<AIRebalanceInfo_t>::~CUtlMemory()
 W CUtlMemory<AISquadEnemyInfo_t>::CUtlMemory(int, int)
 W CUtlMemory<AISquadEnemyInfo_t>::Grow(int)
 W CUtlMemory<AISquadEnemyInfo_t>::IsExternallyAllocated() const
 W CUtlMemory<AISquadEnemyInfo_t>::Purge()
 W CUtlMemory<AISquadEnemyInfo_t>::~CUtlMemory()
 W CUtlMemory<AI_FollowGroup_t*>::CUtlMemory(int, int)
 W CUtlMemory<AI_FollowGroup_t*>::Grow(int)
 W CUtlMemory<AI_FollowGroup_t*>::IsExternallyAllocated() const
 W CUtlMemory<AI_FollowGroup_t*>::Purge()
 W CUtlMemory<AI_FollowGroup_t*>::~CUtlMemory()
 W CUtlMemory<AI_MoveSuggestion_t>::CUtlMemory(int, int)
 W CUtlMemory<AI_MoveSuggestion_t>::Grow(int)
 W CUtlMemory<AI_MoveSuggestion_t>::IsExternallyAllocated() const
 W CUtlMemory<AI_MoveSuggestion_t>::Purge()
 W CUtlMemory<AI_MoveSuggestion_t>::~CUtlMemory()
 W CUtlMemory<AI_NamespaceAddInfo_t>::CUtlMemory(int, int)
 W CUtlMemory<AI_NamespaceAddInfo_t>::Grow(int)
 W CUtlMemory<AI_NamespaceAddInfo_t>::IsExternallyAllocated() const
 W CUtlMemory<AI_NamespaceAddInfo_t>::Purge()
 W CUtlMemory<AI_NamespaceAddInfo_t>::~CUtlMemory()
 W CUtlMemory<AI_NearNode_t>::CUtlMemory(AI_NearNode_t*, int)
 W CUtlMemory<AI_NearNode_t>::CUtlMemory(int, int)
 W CUtlMemory<AI_NearNode_t>::Grow(int)
 W CUtlMemory<AI_NearNode_t>::IsExternallyAllocated() const
 W CUtlMemory<AI_NearNode_t>::Purge()
 W CUtlMemory<AI_NearNode_t>::~CUtlMemory()
 W CUtlMemory<AI_Response*>::CUtlMemory(int, int)
 W CUtlMemory<AI_Response*>::Grow(int)
 W CUtlMemory<AI_Response*>::IsExternallyAllocated() const
 W CUtlMemory<AI_Response*>::Purge()
 W CUtlMemory<AI_Response*>::~CUtlMemory()
 W CUtlMemory<AI_Waypoint_t>::CUtlMemory(int, int)
 W CUtlMemory<AI_Waypoint_t>::Grow(int)
 W CUtlMemory<AI_Waypoint_t>::IsExternallyAllocated() const
 W CUtlMemory<AI_Waypoint_t>::Purge()
 W CUtlMemory<AI_Waypoint_t>::~CUtlMemory()
 W CUtlMemory<Activity>::CUtlMemory(int, int)
 W CUtlMemory<Activity>::Grow(int)
 W CUtlMemory<Activity>::IsExternallyAllocated() const
 W CUtlMemory<Activity>::Purge()
 W CUtlMemory<Activity>::~CUtlMemory()
 W CUtlMemory<BotChatterOutputType>::CUtlMemory(int, int)
 W CUtlMemory<BotChatterOutputType>::Grow(int)
 W CUtlMemory<BotChatterOutputType>::IsExternallyAllocated() const
 W CUtlMemory<BotChatterOutputType>::Purge()
 W CUtlMemory<BotChatterOutputType>::~CUtlMemory()
 W CUtlMemory<BotPhrase*>::CUtlMemory(int, int)
 W CUtlMemory<BotPhrase*>::Grow(int)
 W CUtlMemory<BotPhrase*>::IsExternallyAllocated() const
 W CUtlMemory<BotPhrase*>::Purge()
 W CUtlMemory<BotPhrase*>::~CUtlMemory()
 W CUtlMemory<BotSpeakable*>::CUtlMemory(int, int)
 W CUtlMemory<BotSpeakable*>::Grow(int)
 W CUtlMemory<BotSpeakable*>::IsExternallyAllocated() const
 W CUtlMemory<BotSpeakable*>::Purge()
 W CUtlMemory<BotSpeakable*>::~CUtlMemory()
 W CUtlMemory<CAI_BaseActor*>::CUtlMemory(int, int)
 W CUtlMemory<CAI_BaseActor*>::Grow(int)
 W CUtlMemory<CAI_BaseActor*>::IsExternallyAllocated() const
 W CUtlMemory<CAI_BaseActor*>::Purge()
 W CUtlMemory<CAI_BaseActor*>::~CUtlMemory()
 W CUtlMemory<CAI_BaseNPC*>::CUtlMemory(int, int)
 W CUtlMemory<CAI_BaseNPC*>::Grow(int)
 W CUtlMemory<CAI_BaseNPC*>::IsExternallyAllocated() const
 W CUtlMemory<CAI_BaseNPC*>::Purge()
 W CUtlMemory<CAI_BaseNPC*>::~CUtlMemory()
 W CUtlMemory<CAI_BehaviorBase*>::CUtlMemory(int, int)
 W CUtlMemory<CAI_BehaviorBase*>::IsExternallyAllocated() const
 W CUtlMemory<CAI_BehaviorBase*>::Purge()
 W CUtlMemory<CAI_BehaviorBase*>::~CUtlMemory()
 W CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t>::CUtlMemory(int, int)
 W CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t>::Grow(int)
 W CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t>::IsExternallyAllocated() const
 W CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t>::Purge()
 W CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t>::~CUtlMemory()
 W CUtlMemory<CAI_Hint*>::CUtlMemory(int, int)
 W CUtlMemory<CAI_Hint*>::Grow(int)
 W CUtlMemory<CAI_Hint*>::IsExternallyAllocated() const
 W CUtlMemory<CAI_Hint*>::Purge()
 W CUtlMemory<CAI_Hint*>::~CUtlMemory()
 W CUtlMemory<CAI_InterestTarget_t*>::CUtlMemory(int, int)
 W CUtlMemory<CAI_InterestTarget_t*>::Grow(int)
 W CUtlMemory<CAI_InterestTarget_t*>::IsExternallyAllocated() const
 W CUtlMemory<CAI_InterestTarget_t*>::Purge()
 W CUtlMemory<CAI_InterestTarget_t*>::~CUtlMemory()
 W CUtlMemory<CAI_InterestTarget_t>::CUtlMemory(int, int)
 W CUtlMemory<CAI_InterestTarget_t>::Grow(int)
 W CUtlMemory<CAI_InterestTarget_t>::IsExternallyAllocated() const
 W CUtlMemory<CAI_InterestTarget_t>::Purge()
 W CUtlMemory<CAI_InterestTarget_t>::~CUtlMemory()
 W CUtlMemory<CAI_Link*>::CUtlMemory(int, int)
 W CUtlMemory<CAI_Link*>::Grow(int)
 W CUtlMemory<CAI_Link*>::IsExternallyAllocated() const
 W CUtlMemory<CAI_Link*>::Purge()
 W CUtlMemory<CAI_Link*>::~CUtlMemory()
 W CUtlMemory<CAI_PlaneSolver::CircleObstacles_t>::CUtlMemory(int, int)
 W CUtlMemory<CAI_PlaneSolver::CircleObstacles_t>::Grow(int)
 W CUtlMemory<CAI_PlaneSolver::CircleObstacles_t>::IsExternallyAllocated() const
 W CUtlMemory<CAI_PlaneSolver::CircleObstacles_t>::Purge()
 W CUtlMemory<CAI_PlaneSolver::CircleObstacles_t>::~CUtlMemory()
 W CUtlMemory<CAI_StandoffBehavior::BattleLine_t>::CUtlMemory(int, int)
 W CUtlMemory<CAI_StandoffBehavior::BattleLine_t>::Grow(int)
 W CUtlMemory<CAI_StandoffBehavior::BattleLine_t>::IsExternallyAllocated() const
 W CUtlMemory<CAI_StandoffBehavior::BattleLine_t>::Purge()
 W CUtlMemory<CAI_StandoffBehavior::BattleLine_t>::~CUtlMemory()
 W CUtlMemory<CAnimationLayer>::CUtlMemory(int, int)
 W CUtlMemory<CAnimationLayer>::Grow(int)
 W CUtlMemory<CAnimationLayer>::IsExternallyAllocated() const
 W CUtlMemory<CAnimationLayer>::Purge()
 W CUtlMemory<CAnimationLayer>::~CUtlMemory()
 W CUtlMemory<CBaseEntity*>::CUtlMemory(int, int)
 W CUtlMemory<CBaseEntity*>::Grow(int)
 W CUtlMemory<CBaseEntity*>::IsExternallyAllocated() const
 W CUtlMemory<CBaseEntity*>::Purge()
 W CUtlMemory<CBaseEntity*>::~CUtlMemory()
 W CUtlMemory<CBaseHandle>::CUtlMemory(int, int)
 W CUtlMemory<CBaseHandle>::Grow(int)
 W CUtlMemory<CBaseHandle>::IsExternallyAllocated() const
 W CUtlMemory<CBaseHandle>::Purge()
 W CUtlMemory<CBaseHandle>::~CUtlMemory()
 W CUtlMemory<CBasePlayer*>::CUtlMemory(int, int)
 W CUtlMemory<CBasePlayer*>::Grow(int)
 W CUtlMemory<CBasePlayer*>::IsExternallyAllocated() const
 W CUtlMemory<CBasePlayer*>::Purge()
 W CUtlMemory<CBasePlayer*>::~CUtlMemory()
 W CUtlMemory<CBaseServerVehicle::entryanim_t>::CUtlMemory(int, int)
 W CUtlMemory<CBaseServerVehicle::entryanim_t>::Grow(int)
 W CUtlMemory<CBaseServerVehicle::entryanim_t>::IsExternallyAllocated() const
 W CUtlMemory<CBaseServerVehicle::entryanim_t>::Purge()
 W CUtlMemory<CBaseServerVehicle::entryanim_t>::~CUtlMemory()
 W CUtlMemory<CBaseServerVehicle::exitanim_t>::CUtlMemory(int, int)
 W CUtlMemory<CBaseServerVehicle::exitanim_t>::Grow(int)
 W CUtlMemory<CBaseServerVehicle::exitanim_t>::IsExternallyAllocated() const
 W CUtlMemory<CBaseServerVehicle::exitanim_t>::Purge()
 W CUtlMemory<CBaseServerVehicle::exitanim_t>::~CUtlMemory()
 W CUtlMemory<CBitString>::CUtlMemory(int, int)
 W CUtlMemory<CBitString>::Grow(int)
 W CUtlMemory<CBitString>::IsExternallyAllocated() const
 W CUtlMemory<CBitString>::Purge()
 W CUtlMemory<CBitString>::~CUtlMemory()
 W CUtlMemory<CC4*>::CUtlMemory(int, int)
 W CUtlMemory<CC4*>::Grow(int)
 W CUtlMemory<CC4*>::IsExternallyAllocated() const
 W CUtlMemory<CC4*>::Purge()
 W CUtlMemory<CC4*>::~CUtlMemory()
 W CUtlMemory<CCSBotManager::Zone const*>::CUtlMemory(int, int)
 W CUtlMemory<CCSBotManager::Zone const*>::Grow(int)
 W CUtlMemory<CCSBotManager::Zone const*>::IsExternallyAllocated() const
 W CUtlMemory<CCSBotManager::Zone const*>::Purge()
 W CUtlMemory<CCSBotManager::Zone const*>::~CUtlMemory()
 W CUtlMemory<CChoreoActor*>::CUtlMemory(int, int)
 W CUtlMemory<CChoreoActor*>::Grow(int)
 W CUtlMemory<CChoreoActor*>::IsExternallyAllocated() const
 W CUtlMemory<CChoreoActor*>::Purge()
 W CUtlMemory<CChoreoActor*>::~CUtlMemory()
 W CUtlMemory<CChoreoChannel*>::CUtlMemory(int, int)
 W CUtlMemory<CChoreoChannel*>::Grow(int)
 W CUtlMemory<CChoreoChannel*>::IsExternallyAllocated() const
 W CUtlMemory<CChoreoChannel*>::Purge()
 W CUtlMemory<CChoreoChannel*>::~CUtlMemory()
 W CUtlMemory<CChoreoEvent*>::CUtlMemory(int, int)
 W CUtlMemory<CChoreoEvent*>::Grow(int)
 W CUtlMemory<CChoreoEvent*>::IsExternallyAllocated() const
 W CUtlMemory<CChoreoEvent*>::Purge()
 W CUtlMemory<CChoreoEvent*>::~CUtlMemory()
 W CUtlMemory<CChoreoScene*>::CUtlMemory(int, int)
 W CUtlMemory<CChoreoScene*>::Grow(int)
 W CUtlMemory<CChoreoScene*>::IsExternallyAllocated() const
 W CUtlMemory<CChoreoScene*>::Purge()
 W CUtlMemory<CChoreoScene*>::~CUtlMemory()
 W CUtlMemory<CCommandContext>::CUtlMemory(int, int)
 W CUtlMemory<CCommandContext>::Grow(int)
 W CUtlMemory<CCommandContext>::IsExternallyAllocated() const
 W CUtlMemory<CCommandContext>::Purge()
 W CUtlMemory<CCommandContext>::~CUtlMemory()
 W CUtlMemory<CDecalEmitterSystem::DecalListEntry>::CUtlMemory(int, int)
 W CUtlMemory<CDecalEmitterSystem::DecalListEntry>::Grow(int)
 W CUtlMemory<CDecalEmitterSystem::DecalListEntry>::IsExternallyAllocated() const
 W CUtlMemory<CDecalEmitterSystem::DecalListEntry>::Purge()
 W CUtlMemory<CDecalEmitterSystem::DecalListEntry>::~CUtlMemory()
 W CUtlMemory<CEffectScriptElement>::CUtlMemory(int, int)
 W CUtlMemory<CEffectScriptElement>::Grow(int)
 W CUtlMemory<CEffectScriptElement>::IsExternallyAllocated() const
 W CUtlMemory<CEffectScriptElement>::Purge()
 W CUtlMemory<CEffectScriptElement>::~CUtlMemory()
 W CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::CUtlMemory(int, int)
 W CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::Grow(int)
 W CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::IsExternallyAllocated() const
 W CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::Purge()
 W CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::SetGrowSize(int)
 W CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry>::~CUtlMemory()
 W CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::CUtlMemory(int, int)
 W CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::Grow(int)
 W CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::IsExternallyAllocated() const
 W CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::Purge()
 W CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::SetGrowSize(int)
 W CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry>::~CUtlMemory()
 W CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry>::CUtlMemory(int, int)
 W CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry>::Grow(int)
 W CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry>::IsExternallyAllocated() const
 W CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry>::Purge()
 W CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry>::SetGrowSize(int)
 W CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry>::~CUtlMemory()
 W CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry>::CUtlMemory(int, int)
 W CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry>::Grow(int)
 W CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry>::IsExternallyAllocated() const
 W CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry>::Purge()
 W CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry>::SetGrowSize(int)
 W CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry>::~CUtlMemory()
 W CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::CUtlMemory(int, int)
 W CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::Grow(int)
 W CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::IsExternallyAllocated() const
 W CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::Purge()
 W CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::SetGrowSize(int)
 W CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry>::~CUtlMemory()
 W CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry>::CUtlMemory(int, int)
 W CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry>::Grow(int)
 W CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry>::IsExternallyAllocated() const
 W CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry>::Purge()
 W CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry>::SetGrowSize(int)
 W CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry>::~CUtlMemory()
 W CUtlMemory<CEnvSoundscape*>::CUtlMemory(int, int)
 W CUtlMemory<CEnvSoundscape*>::Grow(int)
 W CUtlMemory<CEnvSoundscape*>::IsExternallyAllocated() const
 W CUtlMemory<CEnvSoundscape*>::Purge()
 W CUtlMemory<CEnvSoundscape*>::~CUtlMemory()
 W CUtlMemory<CEventAbsoluteTag>::CUtlMemory(int, int)
 W CUtlMemory<CEventAbsoluteTag>::Grow(int)
 W CUtlMemory<CEventAbsoluteTag>::IsExternallyAllocated() const
 W CUtlMemory<CEventAbsoluteTag>::Purge()
 W CUtlMemory<CEventAbsoluteTag>::~CUtlMemory()
 W CUtlMemory<CEventRegister*>::CUtlMemory(int, int)
 W CUtlMemory<CEventRegister*>::Grow(int)
 W CUtlMemory<CEventRegister*>::IsExternallyAllocated() const
 W CUtlMemory<CEventRegister*>::Purge()
 W CUtlMemory<CEventRegister*>::~CUtlMemory()
 W CUtlMemory<CEventRelativeTag>::CUtlMemory(int, int)
 W CUtlMemory<CEventRelativeTag>::Grow(int)
 W CUtlMemory<CEventRelativeTag>::IsExternallyAllocated() const
 W CUtlMemory<CEventRelativeTag>::Purge()
 W CUtlMemory<CEventRelativeTag>::~CUtlMemory()
 W CUtlMemory<CExpressionSample>::CUtlMemory(int, int)
 W CUtlMemory<CExpressionSample>::Grow(int)
 W CUtlMemory<CExpressionSample>::IsExternallyAllocated() const
 W CUtlMemory<CExpressionSample>::Purge()
 W CUtlMemory<CExpressionSample>::~CUtlMemory()
 W CUtlMemory<CFish*>::CUtlMemory(int, int)
 W CUtlMemory<CFish*>::Grow(int)
 W CUtlMemory<CFish*>::IsExternallyAllocated() const
 W CUtlMemory<CFish*>::Purge()
 W CUtlMemory<CFish*>::~CUtlMemory()
 W CUtlMemory<CFlexAnimationTrack*>::CUtlMemory(int, int)
 W CUtlMemory<CFlexAnimationTrack*>::Grow(int)
 W CUtlMemory<CFlexAnimationTrack*>::IsExternallyAllocated() const
 W CUtlMemory<CFlexAnimationTrack*>::Purge()
 W CUtlMemory<CFlexAnimationTrack*>::~CUtlMemory()
 W CUtlMemory<CFlexSceneFile*>::CUtlMemory(int, int)
 W CUtlMemory<CFlexSceneFile*>::Grow(int)
 W CUtlMemory<CFlexSceneFile*>::IsExternallyAllocated() const
 W CUtlMemory<CFlexSceneFile*>::Purge()
 W CUtlMemory<CFlexSceneFile*>::~CUtlMemory()
 W CUtlMemory<CFlexTimingTag>::CUtlMemory(int, int)
 W CUtlMemory<CFlexTimingTag>::Grow(int)
 W CUtlMemory<CFlexTimingTag>::IsExternallyAllocated() const
 W CUtlMemory<CFlexTimingTag>::Purge()
 W CUtlMemory<CFlexTimingTag>::~CUtlMemory()
 W CUtlMemory<CFuncLadder*>::CUtlMemory(int, int)
 W CUtlMemory<CFuncLadder*>::Grow(int)
 W CUtlMemory<CFuncLadder*>::IsExternallyAllocated() const
 W CUtlMemory<CFuncLadder*>::Purge()
 W CUtlMemory<CFuncLadder*>::~CUtlMemory()
 W CUtlMemory<CHandle<CAI_BaseNPC> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CAI_BaseNPC> >::Grow(int)
 W CUtlMemory<CHandle<CAI_BaseNPC> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CAI_BaseNPC> >::Purge()
 W CUtlMemory<CHandle<CAI_BaseNPC> >::~CUtlMemory()
 W CUtlMemory<CHandle<CAI_DynamicLink> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CAI_DynamicLink> >::Grow(int)
 W CUtlMemory<CHandle<CAI_DynamicLink> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CAI_DynamicLink> >::Purge()
 W CUtlMemory<CHandle<CAI_DynamicLink> >::~CUtlMemory()
 W CUtlMemory<CHandle<CBaseEntity> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CBaseEntity> >::Grow(int)
 W CUtlMemory<CHandle<CBaseEntity> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CBaseEntity> >::Purge()
 W CUtlMemory<CHandle<CBaseEntity> >::~CUtlMemory()
 W CUtlMemory<CHandle<CBaseFlex> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CBaseFlex> >::Grow(int)
 W CUtlMemory<CHandle<CBaseFlex> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CBaseFlex> >::Purge()
 W CUtlMemory<CHandle<CBaseFlex> >::~CUtlMemory()
 W CUtlMemory<CHandle<CBasePlayer> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CBasePlayer> >::Grow(int)
 W CUtlMemory<CHandle<CBasePlayer> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CBasePlayer> >::Purge()
 W CUtlMemory<CHandle<CBasePlayer> >::~CUtlMemory()
 W CUtlMemory<CHandle<CBasePropDoor> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CBasePropDoor> >::Grow(int)
 W CUtlMemory<CHandle<CBasePropDoor> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CBasePropDoor> >::Purge()
 W CUtlMemory<CHandle<CBasePropDoor> >::~CUtlMemory()
 W CUtlMemory<CHandle<CEnvMicrophone> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CEnvMicrophone> >::Grow(int)
 W CUtlMemory<CHandle<CEnvMicrophone> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CEnvMicrophone> >::Purge()
 W CUtlMemory<CHandle<CEnvMicrophone> >::~CUtlMemory()
 W CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> >::Grow(int)
 W CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> >::Purge()
 W CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> >::~CUtlMemory()
 W CUtlMemory<CHandle<CInfoLadderDismount> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CInfoLadderDismount> >::Grow(int)
 W CUtlMemory<CHandle<CInfoLadderDismount> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CInfoLadderDismount> >::Purge()
 W CUtlMemory<CHandle<CInfoLadderDismount> >::~CUtlMemory()
 W CUtlMemory<CHandle<CMessageEntity> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CMessageEntity> >::Grow(int)
 W CUtlMemory<CHandle<CMessageEntity> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CMessageEntity> >::Purge()
 W CUtlMemory<CHandle<CMessageEntity> >::~CUtlMemory()
 W CUtlMemory<CHandle<CPointTemplate> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CPointTemplate> >::Grow(int)
 W CUtlMemory<CHandle<CPointTemplate> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CPointTemplate> >::Purge()
 W CUtlMemory<CHandle<CPointTemplate> >::~CUtlMemory()
 W CUtlMemory<CHandle<CSceneEntity> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CSceneEntity> >::Grow(int)
 W CUtlMemory<CHandle<CSceneEntity> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CSceneEntity> >::Purge()
 W CUtlMemory<CHandle<CSceneEntity> >::~CUtlMemory()
 W CUtlMemory<CHandle<CTriggerMultiple> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CTriggerMultiple> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CTriggerMultiple> >::Purge()
 W CUtlMemory<CHandle<CTriggerMultiple> >::~CUtlMemory()
 W CUtlMemory<CHandle<CVGuiScreen> >::CUtlMemory(int, int)
 W CUtlMemory<CHandle<CVGuiScreen> >::Grow(int)
 W CUtlMemory<CHandle<CVGuiScreen> >::IsExternallyAllocated() const
 W CUtlMemory<CHandle<CVGuiScreen> >::Purge()
 W CUtlMemory<CHandle<CVGuiScreen> >::~CUtlMemory()
 W CUtlMemory<CHintCriteria::hintZone_t>::CUtlMemory(int, int)
 W CUtlMemory<CHintCriteria::hintZone_t>::Grow(int)
 W CUtlMemory<CHintCriteria::hintZone_t>::IsExternallyAllocated() const
 W CUtlMemory<CHintCriteria::hintZone_t>::Purge()
 W CUtlMemory<CHintCriteria::hintZone_t>::~CUtlMemory()
 W CUtlMemory<CHintMessage*>::CUtlMemory(int, int)
 W CUtlMemory<CHintMessage*>::Grow(int)
 W CUtlMemory<CHintMessage*>::IsExternallyAllocated() const
 W CUtlMemory<CHintMessage*>::Purge()
 W CUtlMemory<CHintMessage*>::~CUtlMemory()
 W CUtlMemory<CHostage*>::CUtlMemory(int, int)
 W CUtlMemory<CHostage*>::Grow(int)
 W CUtlMemory<CHostage*>::IsExternallyAllocated() const
 W CUtlMemory<CHostage*>::Purge()
 W CUtlMemory<CHostage*>::~CUtlMemory()
 W CUtlMemory<CIKTarget>::CUtlMemory(int, int)
 W CUtlMemory<CIKTarget>::Grow(int)
 W CUtlMemory<CIKTarget>::IsExternallyAllocated() const
 W CUtlMemory<CIKTarget>::Purge()
 W CUtlMemory<CIKTarget>::~CUtlMemory()
 W CUtlMemory<CModelSoundCache*>::CUtlMemory(int, int)
 W CUtlMemory<CModelSoundCache*>::Grow(int)
 W CUtlMemory<CModelSoundCache*>::IsExternallyAllocated() const
 W CUtlMemory<CModelSoundCache*>::Purge()
 W CUtlMemory<CModelSoundCache*>::~CUtlMemory()
 W CUtlMemory<CMoveHelperServer::touchlist_t>::CUtlMemory(int, int)
 W CUtlMemory<CMoveHelperServer::touchlist_t>::Grow(int)
 W CUtlMemory<CMoveHelperServer::touchlist_t>::IsExternallyAllocated() const
 W CUtlMemory<CMoveHelperServer::touchlist_t>::Purge()
 W CUtlMemory<CMoveHelperServer::touchlist_t>::~CUtlMemory()
 W CUtlMemory<CNavArea*>::CUtlMemory(int, int)
 W CUtlMemory<CNavArea*>::Grow(int)
 W CUtlMemory<CNavArea*>::IsExternallyAllocated() const
 W CUtlMemory<CNavArea*>::Purge()
 W CUtlMemory<CNavArea*>::~CUtlMemory()
 W CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t>::CUtlMemory(int, int)
 W CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t>::Grow(int)
 W CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t>::IsExternallyAllocated() const
 W CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t>::Purge()
 W CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t>::~CUtlMemory()
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t>::CUtlMemory(int, int)
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t>::Grow(int)
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t>::IsExternallyAllocated() const
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t>::Purge()
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t>::~CUtlMemory()
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t>::CUtlMemory(int, int)
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t>::Grow(int)
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t>::IsExternallyAllocated() const
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t>::Purge()
 W CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t>::~CUtlMemory()
 W CUtlMemory<CPlantedC4*>::CUtlMemory(int, int)
 W CUtlMemory<CPlantedC4*>::Grow(int)
 W CUtlMemory<CPlantedC4*>::IsExternallyAllocated() const
 W CUtlMemory<CPlantedC4*>::Purge()
 W CUtlMemory<CPlantedC4*>::~CUtlMemory()
 W CUtlMemory<CPointTemplate*>::CUtlMemory(int, int)
 W CUtlMemory<CPointTemplate*>::Grow(int)
 W CUtlMemory<CPointTemplate*>::IsExternallyAllocated() const
 W CUtlMemory<CPointTemplate*>::Purge()
 W CUtlMemory<CPointTemplate*>::~CUtlMemory()
 W CUtlMemory<CPropData::propdata_breakablechunk_t>::CUtlMemory(int, int)
 W CUtlMemory<CPropData::propdata_breakablechunk_t>::Grow(int)
 W CUtlMemory<CPropData::propdata_breakablechunk_t>::IsExternallyAllocated() const
 W CUtlMemory<CPropData::propdata_breakablechunk_t>::Purge()
 W CUtlMemory<CPropData::propdata_breakablechunk_t>::~CUtlMemory()
 W CUtlMemory<CResponseSystem::ScriptEntry>::CUtlMemory(int, int)
 W CUtlMemory<CResponseSystem::ScriptEntry>::Grow(int)
 W CUtlMemory<CResponseSystem::ScriptEntry>::IsExternallyAllocated() const
 W CUtlMemory<CResponseSystem::ScriptEntry>::Purge()
 W CUtlMemory<CResponseSystem::ScriptEntry>::~CUtlMemory()
 W CUtlMemory<CSPVert>::CUtlMemory(int, int)
 W CUtlMemory<CSPVert>::Grow(int)
 W CUtlMemory<CSPVert>::IsExternallyAllocated() const
 W CUtlMemory<CSPVert>::Purge()
 W CUtlMemory<CSPVert>::~CUtlMemory()
 W CUtlMemory<CSceneCache*>::CUtlMemory(int, int)
 W CUtlMemory<CSceneCache*>::Grow(int)
 W CUtlMemory<CSceneCache*>::IsExternallyAllocated() const
 W CUtlMemory<CSceneCache*>::Purge()
 W CUtlMemory<CSceneCache*>::~CUtlMemory()
 W CUtlMemory<CSceneEventInfo>::CUtlMemory(int, int)
 W CUtlMemory<CSceneEventInfo>::Grow(int)
 W CUtlMemory<CSceneEventInfo>::IsExternallyAllocated() const
 W CUtlMemory<CSceneEventInfo>::Purge()
 W CUtlMemory<CSceneEventInfo>::~CUtlMemory()
 W CUtlMemory<CSceneManager::CRestoreSceneSound>::CUtlMemory(int, int)
 W CUtlMemory<CSceneManager::CRestoreSceneSound>::Grow(int)
 W CUtlMemory<CSceneManager::CRestoreSceneSound>::IsExternallyAllocated() const
 W CUtlMemory<CSceneManager::CRestoreSceneSound>::Purge()
 W CUtlMemory<CSceneManager::CRestoreSceneSound>::~CUtlMemory()
 W CUtlMemory<CScratchPadGraph::CLineInfo>::CUtlMemory(int, int)
 W CUtlMemory<CScratchPadGraph::CLineInfo>::Grow(int)
 W CUtlMemory<CScratchPadGraph::CLineInfo>::IsExternallyAllocated() const
 W CUtlMemory<CScratchPadGraph::CLineInfo>::Purge()
 W CUtlMemory<CScratchPadGraph::CLineInfo>::~CUtlMemory()
 W CUtlMemory<CSheetSimulator::Spring_t>::CUtlMemory(int, int)
 W CUtlMemory<CSheetSimulator::Spring_t>::Grow(int)
 W CUtlMemory<CSheetSimulator::Spring_t>::IsExternallyAllocated() const
 W CUtlMemory<CSheetSimulator::Spring_t>::Purge()
 W CUtlMemory<CSheetSimulator::Spring_t>::~CUtlMemory()
 W CUtlMemory<CSoundPatch*>::CUtlMemory(int, int)
 W CUtlMemory<CSoundPatch*>::Grow(int)
 W CUtlMemory<CSoundPatch*>::IsExternallyAllocated() const
 W CUtlMemory<CSoundPatch*>::Purge()
 W CUtlMemory<CSoundPatch*>::~CUtlMemory()
 W CUtlMemory<CStressEntityReg*>::CUtlMemory(int, int)
 W CUtlMemory<CStressEntityReg*>::Grow(int)
 W CUtlMemory<CStressEntityReg*>::IsExternallyAllocated() const
 W CUtlMemory<CStressEntityReg*>::Purge()
 W CUtlMemory<CStressEntityReg*>::~CUtlMemory()
 W CUtlMemory<CTeam*>::CUtlMemory(int, int)
 W CUtlMemory<CTeam*>::Grow(int)
 W CUtlMemory<CTeam*>::IsExternallyAllocated() const
 W CUtlMemory<CTeam*>::Purge()
 W CUtlMemory<CTeam*>::~CUtlMemory()
 W CUtlMemory<CTeamSpawnPoint*>::CUtlMemory(int, int)
 W CUtlMemory<CTeamSpawnPoint*>::Grow(int)
 W CUtlMemory<CTeamSpawnPoint*>::IsExternallyAllocated() const
 W CUtlMemory<CTeamSpawnPoint*>::Purge()
 W CUtlMemory<CTeamSpawnPoint*>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<ActiveGrenade*, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<ActiveGrenade*, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<ActiveGrenade*, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<ActiveGrenade*, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<ActiveGrenade*, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<BotProfile*, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<BotProfile*, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<BotProfile*, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<BotProfile*, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<BotProfile*, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CBaseCombatWeapon*, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CDamageModifier*, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CDamageModifier*, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CDamageModifier*, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CDamageModifier*, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CDamageModifier*, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CDamageRecord*, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CDamageRecord*, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CDamageRecord*, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CDamageRecord*, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CDamageRecord*, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CFuncAreaPortalBase*, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CMapEntityRef, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CMapEntityRef, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CMapEntityRef, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CMapEntityRef, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CMapEntityRef, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CNavArea*, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CNavArea*, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CNavArea*, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CNavArea*, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CNavArea*, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CNavLadder*, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CNavLadder*, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CNavLadder*, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CNavLadder*, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CNavLadder*, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CNavMesh::WalkableSeedSpot, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<CUtlMultiList<positionwatcher_t, unsigned short>::List_t, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<HidingSpot*, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<HidingSpot*, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<HidingSpot*, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<HidingSpot*, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<HidingSpot*, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<NavConnect, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<NavConnect, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<NavConnect, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<NavConnect, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<NavConnect, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<NavLadderConnect, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<NavLadderConnect, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<NavLadderConnect, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<NavLadderConnect, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<NavLadderConnect, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<SpotEncounter*, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<SpotEncounter*, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<SpotEncounter*, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<SpotEncounter*, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<SpotEncounter*, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlLinkedList<SpotOrder, int>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlLinkedList<SpotOrder, int>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlLinkedList<SpotOrder, int>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlLinkedList<SpotOrder, int>::ListElem_t>::Purge()
 W CUtlMemory<CUtlLinkedList<SpotOrder, int>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlMultiList<positionwatcher_t, unsigned short>::ListElem_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlMultiList<positionwatcher_t, unsigned short>::ListElem_t>::Grow(int)
 W CUtlMemory<CUtlMultiList<positionwatcher_t, unsigned short>::ListElem_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlMultiList<positionwatcher_t, unsigned short>::ListElem_t>::Purge()
 W CUtlMemory<CUtlMultiList<positionwatcher_t, unsigned short>::ListElem_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Node_t>::CUtlMemory(int, int)
 W CUtlMemory<CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Node_t>::Grow(int)
 W CUtlMemory<CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Node_t>::IsExternallyAllocated() const
 W CUtlMemory<CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Node_t>::Purge()
 W CUtlMemory<CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Node_t>::~CUtlMemory()
 W CUtlMemory<CUtlSymbol>::CUtlMemory(int, int)
 W CUtlMemory<CUtlSymbol>::Grow(int)
 W CUtlMemory<CUtlSymbol>::IsExternallyAllocated() const
 W CUtlMemory<CUtlSymbol>::Purge()
 W CUtlMemory<CUtlSymbol>::~CUtlMemory()
 W CUtlMemory<CUtlSymbolTable::StringPool_t*>::CUtlMemory(int, int)
 W CUtlMemory<CUtlSymbolTable::StringPool_t*>::Grow(int)
 W CUtlMemory<CUtlSymbolTable::StringPool_t*>::IsExternallyAllocated() const
 W CUtlMemory<CUtlSymbolTable::StringPool_t*>::Purge()
 W CUtlMemory<CUtlSymbolTable::StringPool_t*>::~CUtlMemory()
 W CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*>::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*>::Grow(int)
 W CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*>::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*>::Purge()
 W CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*>::~CUtlMemory()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > >::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > >::Grow(int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > >::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > >::Purge()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > >::~CUtlMemory()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > >::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > >::Grow(int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > >::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > >::Purge()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > >::~CUtlMemory()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > >::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > >::Grow(int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > >::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > >::Purge()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > >::~CUtlMemory()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > >::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > >::Grow(int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > >::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > >::Purge()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > >::~CUtlMemory()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > >::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > >::Grow(int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > >::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > >::Purge()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > >::~CUtlMemory()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > >::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > >::Grow(int)
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > >::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > >::Purge()
 W CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > >::~CUtlMemory()
 W CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > >::CUtlMemory(int, int)
 W CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > >::Grow(int)
 W CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > >::IsExternallyAllocated() const
 W CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > >::Purge()
 W CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > >::~CUtlMemory()
 W CUtlMemory<IEntityListener*>::CUtlMemory(int, int)
 W CUtlMemory<IEntityListener*>::Grow(int)
 W CUtlMemory<IEntityListener*>::IsExternallyAllocated() const
 W CUtlMemory<IEntityListener*>::Purge()
 W CUtlMemory<IEntityListener*>::~CUtlMemory()
 W CUtlMemory<IGameSystem*>::CUtlMemory(int, int)
 W CUtlMemory<IGameSystem*>::Grow(int)
 W CUtlMemory<IGameSystem*>::IsExternallyAllocated() const
 W CUtlMemory<IGameSystem*>::Purge()
 W CUtlMemory<IGameSystem*>::~CUtlMemory()
 W CUtlMemory<IHandleEntity*>::CUtlMemory(int, int)
 W CUtlMemory<IHandleEntity*>::Grow(int)
 W CUtlMemory<IHandleEntity*>::IsExternallyAllocated() const
 W CUtlMemory<IHandleEntity*>::Purge()
 W CUtlMemory<IHandleEntity*>::~CUtlMemory()
 W CUtlMemory<ISaveRestoreBlockHandler*>::CUtlMemory(int, int)
 W CUtlMemory<ISaveRestoreBlockHandler*>::Grow(int)
 W CUtlMemory<ISaveRestoreBlockHandler*>::IsExternallyAllocated() const
 W CUtlMemory<ISaveRestoreBlockHandler*>::Purge()
 W CUtlMemory<ISaveRestoreBlockHandler*>::~CUtlMemory()
 W CUtlMemory<IServerNetworkable*>::CUtlMemory(int, int)
 W CUtlMemory<IServerNetworkable*>::Grow(int)
 W CUtlMemory<IServerNetworkable*>::IsExternallyAllocated() const
 W CUtlMemory<IServerNetworkable*>::Purge()
 W CUtlMemory<IServerNetworkable*>::~CUtlMemory()
 W CUtlMemory<ISoundEmitterSystemBase::SoundFile>::CUtlMemory(int, int)
 W CUtlMemory<ISoundEmitterSystemBase::SoundFile>::Grow(int)
 W CUtlMemory<ISoundEmitterSystemBase::SoundFile>::IsExternallyAllocated() const
 W CUtlMemory<ISoundEmitterSystemBase::SoundFile>::Purge()
 W CUtlMemory<ISoundEmitterSystemBase::SoundFile>::~CUtlMemory()
 W CUtlMemory<KeyValues*>::CUtlMemory(int, int)
 W CUtlMemory<KeyValues*>::Grow(int)
 W CUtlMemory<KeyValues*>::IsExternallyAllocated() const
 W CUtlMemory<KeyValues*>::Purge()
 W CUtlMemory<KeyValues*>::~CUtlMemory()
 W CUtlMemory<NPCInterjection>::CUtlMemory(int, int)
 W CUtlMemory<NPCInterjection>::Grow(int)
 W CUtlMemory<NPCInterjection>::IsExternallyAllocated() const
 W CUtlMemory<NPCInterjection>::Purge()
 W CUtlMemory<NPCInterjection>::~CUtlMemory()
 W CUtlMemory<Relationship_t>::CUtlMemory(int, int)
 W CUtlMemory<Relationship_t>::Grow(int)
 W CUtlMemory<Relationship_t>::IsExternallyAllocated() const
 W CUtlMemory<Relationship_t>::Purge()
 W CUtlMemory<Relationship_t>::~CUtlMemory()
 W CUtlMemory<Response>::CUtlMemory(int, int)
 W CUtlMemory<Response>::Grow(int)
 W CUtlMemory<Response>::IsExternallyAllocated() const
 W CUtlMemory<Response>::Purge()
 W CUtlMemory<Response>::~CUtlMemory()
 W CUtlMemory<ResponseContext_t>::CUtlMemory(int, int)
 W CUtlMemory<ResponseContext_t>::Grow(int)
 W CUtlMemory<ResponseContext_t>::IsExternallyAllocated() const
 W CUtlMemory<ResponseContext_t>::Purge()
 W CUtlMemory<ResponseContext_t>::~CUtlMemory()
 W CUtlMemory<SaveRestoreBlockHeader_t>::CUtlMemory(int, int)
 W CUtlMemory<SaveRestoreBlockHeader_t>::Grow(int)
 W CUtlMemory<SaveRestoreBlockHeader_t>::IsExternallyAllocated() const
 W CUtlMemory<SaveRestoreBlockHeader_t>::Purge()
 W CUtlMemory<SaveRestoreBlockHeader_t>::~CUtlMemory()
 W CUtlMemory<SoundCommand_t*>::CUtlMemory(int, int)
 W CUtlMemory<SoundCommand_t*>::Grow(int)
 W CUtlMemory<SoundCommand_t*>::IsExternallyAllocated() const
 W CUtlMemory<SoundCommand_t*>::Purge()
 W CUtlMemory<SoundCommand_t*>::~CUtlMemory()
 W CUtlMemory<TeleportListEntry_t>::CUtlMemory(int, int)
 W CUtlMemory<TeleportListEntry_t>::Grow(int)
 W CUtlMemory<TeleportListEntry_t>::IsExternallyAllocated() const
 W CUtlMemory<TeleportListEntry_t>::Purge()
 W CUtlMemory<TeleportListEntry_t>::~CUtlMemory()
 W CUtlMemory<TemplateEntityData_t*>::CUtlMemory(int, int)
 W CUtlMemory<TemplateEntityData_t*>::Grow(int)
 W CUtlMemory<TemplateEntityData_t*>::IsExternallyAllocated() const
 W CUtlMemory<TemplateEntityData_t*>::Purge()
 W CUtlMemory<TemplateEntityData_t*>::~CUtlMemory()
 W CUtlMemory<UnreachableEnt_t>::CUtlMemory(int, int)
 W CUtlMemory<UnreachableEnt_t>::Grow(int)
 W CUtlMemory<UnreachableEnt_t>::IsExternallyAllocated() const
 W CUtlMemory<UnreachableEnt_t>::Purge()
 W CUtlMemory<UnreachableEnt_t>::~CUtlMemory()
 W CUtlMemory<Vector>::CUtlMemory(int, int)
 W CUtlMemory<Vector>::Grow(int)
 W CUtlMemory<Vector>::IsExternallyAllocated() const
 W CUtlMemory<Vector>::Purge()
 W CUtlMemory<Vector>::~CUtlMemory()
 W CUtlMemory<activitylist_t>::CUtlMemory(int, int)
 W CUtlMemory<activitylist_t>::Grow(int)
 W CUtlMemory<activitylist_t>::IsExternallyAllocated() const
 W CUtlMemory<activitylist_t>::Purge()
 W CUtlMemory<activitylist_t>::~CUtlMemory()
 W CUtlMemory<bool (*)()>::CUtlMemory(int, int)
 W CUtlMemory<bool (*)()>::IsExternallyAllocated() const
 W CUtlMemory<bool (*)()>::Purge()
 W CUtlMemory<bool (*)()>::~CUtlMemory()
 W CUtlMemory<breakmodel_t>::CUtlMemory(int, int)
 W CUtlMemory<breakmodel_t>::Grow(int)
 W CUtlMemory<breakmodel_t>::IsExternallyAllocated() const
 W CUtlMemory<breakmodel_t>::Purge()
 W CUtlMemory<breakmodel_t>::~CUtlMemory()
 W CUtlMemory<char const*>::CUtlMemory(int, int)
 W CUtlMemory<char const*>::Grow(int)
 W CUtlMemory<char const*>::IsExternallyAllocated() const
 W CUtlMemory<char const*>::Purge()
 W CUtlMemory<char const*>::~CUtlMemory()
 W CUtlMemory<char*>::CUtlMemory(int, int)
 W CUtlMemory<char*>::Grow(int)
 W CUtlMemory<char*>::IsExternallyAllocated() const
 W CUtlMemory<char*>::Purge()
 W CUtlMemory<char*>::~CUtlMemory()
 W CUtlMemory<collidelist_t>::CUtlMemory(int, int)
 W CUtlMemory<collidelist_t>::Grow(int)
 W CUtlMemory<collidelist_t>::IsExternallyAllocated() const
 W CUtlMemory<collidelist_t>::Purge()
 W CUtlMemory<collidelist_t>::~CUtlMemory()
 W CUtlMemory<constraint_anchor_t>::CUtlMemory(int, int)
 W CUtlMemory<constraint_anchor_t>::Grow(int)
 W CUtlMemory<constraint_anchor_t>::IsExternallyAllocated() const
 W CUtlMemory<constraint_anchor_t>::Purge()
 W CUtlMemory<constraint_anchor_t>::~CUtlMemory()
 W CUtlMemory<damageevent_t>::CUtlMemory(int, int)
 W CUtlMemory<damageevent_t>::Grow(int)
 W CUtlMemory<damageevent_t>::IsExternallyAllocated() const
 W CUtlMemory<damageevent_t>::Purge()
 W CUtlMemory<damageevent_t>::~CUtlMemory()
 W CUtlMemory<entitynotify_t>::CUtlMemory(int, int)
 W CUtlMemory<entitynotify_t>::Grow(int)
 W CUtlMemory<entitynotify_t>::IsExternallyAllocated() const
 W CUtlMemory<entitynotify_t>::Purge()
 W CUtlMemory<entitynotify_t>::~CUtlMemory()
 W CUtlMemory<eventlist_t>::CUtlMemory(int, int)
 W CUtlMemory<eventlist_t>::Grow(int)
 W CUtlMemory<eventlist_t>::IsExternallyAllocated() const
 W CUtlMemory<eventlist_t>::Purge()
 W CUtlMemory<eventlist_t>::~CUtlMemory()
 W CUtlMemory<float>::CUtlMemory(int, int)
 W CUtlMemory<float>::Grow(int)
 W CUtlMemory<float>::IsExternallyAllocated() const
 W CUtlMemory<float>::Purge()
 W CUtlMemory<float>::~CUtlMemory()
 W CUtlMemory<fluidevent_t>::CUtlMemory(int, int)
 W CUtlMemory<fluidevent_t>::Grow(int)
 W CUtlMemory<fluidevent_t>::IsExternallyAllocated() const
 W CUtlMemory<fluidevent_t>::Purge()
 W CUtlMemory<fluidevent_t>::~CUtlMemory()
 W CUtlMemory<globalentity_t>::CUtlMemory(int, int)
 W CUtlMemory<globalentity_t>::Grow(int)
 W CUtlMemory<globalentity_t>::IsExternallyAllocated() const
 W CUtlMemory<globalentity_t>::Purge()
 W CUtlMemory<globalentity_t>::~CUtlMemory()
 W CUtlMemory<grouptemplate_t>::CUtlMemory(int, int)
 W CUtlMemory<grouptemplate_t>::Grow(int)
 W CUtlMemory<grouptemplate_t>::IsExternallyAllocated() const
 W CUtlMemory<grouptemplate_t>::Purge()
 W CUtlMemory<grouptemplate_t>::~CUtlMemory()
 W CUtlMemory<ikcontextikrule_t>::CUtlMemory(int, int)
 W CUtlMemory<ikcontextikrule_t>::Grow(int)
 W CUtlMemory<ikcontextikrule_t>::IsExternallyAllocated() const
 W CUtlMemory<ikcontextikrule_t>::Purge()
 W CUtlMemory<ikcontextikrule_t>::~CUtlMemory()
 W CUtlMemory<impulseevent_t>::CUtlMemory(int, int)
 W CUtlMemory<impulseevent_t>::Grow(int)
 W CUtlMemory<impulseevent_t>::IsExternallyAllocated() const
 W CUtlMemory<impulseevent_t>::Purge()
 W CUtlMemory<impulseevent_t>::~CUtlMemory()
 W CUtlMemory<inflictorstate_t>::CUtlMemory(int, int)
 W CUtlMemory<inflictorstate_t>::Grow(int)
 W CUtlMemory<inflictorstate_t>::IsExternallyAllocated() const
 W CUtlMemory<inflictorstate_t>::Purge()
 W CUtlMemory<inflictorstate_t>::~CUtlMemory()
 W CUtlMemory<int>::CUtlMemory(int, int)
 W CUtlMemory<int>::Grow(int)
 W CUtlMemory<int>::IsExternallyAllocated() const
 W CUtlMemory<int>::Purge()
 W CUtlMemory<int>::~CUtlMemory()
 W CUtlMemory<magnetted_objects_t>::CUtlMemory(int, int)
 W CUtlMemory<magnetted_objects_t>::Grow(int)
 W CUtlMemory<magnetted_objects_t>::IsExternallyAllocated() const
 W CUtlMemory<magnetted_objects_t>::Purge()
 W CUtlMemory<magnetted_objects_t>::~CUtlMemory()
 W CUtlMemory<masscenteroverride_t>::CUtlMemory(int, int)
 W CUtlMemory<masscenteroverride_t>::Grow(int)
 W CUtlMemory<masscenteroverride_t>::IsExternallyAllocated() const
 W CUtlMemory<masscenteroverride_t>::Purge()
 W CUtlMemory<masscenteroverride_t>::~CUtlMemory()
 W CUtlMemory<memhandle_t__*>::Grow(int)
 W CUtlMemory<memhandle_t__*>::IsExternallyAllocated() const
 W CUtlMemory<penetrateevent_t>::CUtlMemory(int, int)
 W CUtlMemory<penetrateevent_t>::Grow(int)
 W CUtlMemory<penetrateevent_t>::IsExternallyAllocated() const
 W CUtlMemory<penetrateevent_t>::Purge()
 W CUtlMemory<penetrateevent_t>::~CUtlMemory()
 W CUtlMemory<physfollower_t>::CUtlMemory(int, int)
 W CUtlMemory<physfollower_t>::Grow(int)
 W CUtlMemory<physfollower_t>::IsExternallyAllocated() const
 W CUtlMemory<physfollower_t>::Purge()
 W CUtlMemory<physfollower_t>::~CUtlMemory()
 W CUtlMemory<physicssound::impactsound_t>::CUtlMemory(int, int)
 W CUtlMemory<physicssound::impactsound_t>::Grow(int)
 W CUtlMemory<physicssound::impactsound_t>::IsExternallyAllocated() const
 W CUtlMemory<physicssound::impactsound_t>::Purge()
 W CUtlMemory<physicssound::impactsound_t>::~CUtlMemory()
 W CUtlMemory<string_t>::CUtlMemory(int, int)
 W CUtlMemory<string_t>::Grow(int)
 W CUtlMemory<string_t>::IsExternallyAllocated() const
 W CUtlMemory<string_t>::Purge()
 W CUtlMemory<string_t>::~CUtlMemory()
 W CUtlMemory<template_t>::CUtlMemory(int, int)
 W CUtlMemory<template_t>::Grow(int)
 W CUtlMemory<template_t>::IsExternallyAllocated() const
 W CUtlMemory<template_t>::Purge()
 W CUtlMemory<template_t>::~CUtlMemory()
 W CUtlMemory<thinkfunc_t>::CUtlMemory(int, int)
 W CUtlMemory<thinkfunc_t>::Grow(int)
 W CUtlMemory<thinkfunc_t>::IsExternallyAllocated() const
 W CUtlMemory<thinkfunc_t>::Purge()
 W CUtlMemory<thinkfunc_t>::~CUtlMemory()
 W CUtlMemory<touchevent_t>::CUtlMemory(int, int)
 W CUtlMemory<touchevent_t>::Grow(int)
 W CUtlMemory<touchevent_t>::IsExternallyAllocated() const
 W CUtlMemory<touchevent_t>::Purge()
 W CUtlMemory<touchevent_t>::~CUtlMemory()
 W CUtlMemory<unsigned char>::CUtlMemory(int, int)
 W CUtlMemory<unsigned char>::CUtlMemory(unsigned char*, int)
 W CUtlMemory<unsigned char>::Grow(int)
 W CUtlMemory<unsigned char>::IsExternallyAllocated() const
 W CUtlMemory<unsigned char>::Purge()
 W CUtlMemory<unsigned char>::SetExternalBuffer(unsigned char*, int)
 W CUtlMemory<unsigned char>::~CUtlMemory()
 W CUtlMemory<unsigned int>::CUtlMemory(int, int)
 W CUtlMemory<unsigned int>::Grow(int)
 W CUtlMemory<unsigned int>::IsExternallyAllocated() const
 W CUtlMemory<unsigned int>::Purge()
 W CUtlMemory<unsigned int>::~CUtlMemory()
 W CUtlMemory<unsigned short>::CUtlMemory(int, int)
 W CUtlMemory<unsigned short>::Grow(int)
 W CUtlMemory<unsigned short>::IsExternallyAllocated() const
 W CUtlMemory<unsigned short>::Purge()
 W CUtlMemory<unsigned short>::~CUtlMemory()
 W CUtlMemory<vehicle_crashsound_t>::CUtlMemory(int, int)
 W CUtlMemory<vehicle_crashsound_t>::Grow(int)
 W CUtlMemory<vehicle_crashsound_t>::IsExternallyAllocated() const
 W CUtlMemory<vehicle_crashsound_t>::Purge()
 W CUtlMemory<vehicle_crashsound_t>::~CUtlMemory()
 W CUtlMemory<vehicle_gear_t>::CUtlMemory(int, int)
 W CUtlMemory<vehicle_gear_t>::Grow(int)
 W CUtlMemory<vehicle_gear_t>::IsExternallyAllocated() const
 W CUtlMemory<vehicle_gear_t>::Purge()
 W CUtlMemory<vehicle_gear_t>::~CUtlMemory()
 W CUtlMemory<velocityevent_t>::CUtlMemory(int, int)
 W CUtlMemory<velocityevent_t>::Grow(int)
 W CUtlMemory<velocityevent_t>::IsExternallyAllocated() const
 W CUtlMemory<velocityevent_t>::Purge()
 W CUtlMemory<velocityevent_t>::~CUtlMemory()
 W CUtlMemory<virtualgeneric_t>::Grow(int)
 W CUtlMemory<virtualgeneric_t>::IsExternallyAllocated() const
 W CUtlMemory<virtualgroup_t>::Grow(int)
 W CUtlMemory<virtualgroup_t>::IsExternallyAllocated() const
 W CUtlMemory<virtualsequence_t>::Grow(int)
 W CUtlMemory<virtualsequence_t>::IsExternallyAllocated() const
 W CUtlMemory<void (*)(bf_read&)>::CUtlMemory(int, int)
 W CUtlMemory<void (*)(bf_read&)>::IsExternallyAllocated() const
 W CUtlMemory<void (*)(bf_read&)>::Purge()
 W CUtlMemory<void (*)(bf_read&)>::~CUtlMemory()
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::Alloc()
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::CUtlMultiList(int, int)
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::ConstructList()
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::CreateList()
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::InsertBefore(unsigned short, unsigned short)
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::LinkAfter(unsigned short, unsigned short, unsigned short)
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::RemoveAll()
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
 W CUtlMultiList<CResourceLRUBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
 W CUtlMultiList<positionwatcher_t, unsigned short>::Alloc()
 W CUtlMultiList<positionwatcher_t, unsigned short>::CUtlMultiList(int, int)
 W CUtlMultiList<positionwatcher_t, unsigned short>::ConstructList()
 W CUtlMultiList<positionwatcher_t, unsigned short>::CreateList()
 W CUtlMultiList<positionwatcher_t, unsigned short>::DestroyList(unsigned short)
 W CUtlMultiList<positionwatcher_t, unsigned short>::Free(unsigned short)
 W CUtlMultiList<positionwatcher_t, unsigned short>::InsertBefore(unsigned short, unsigned short, positionwatcher_t const&)
 W CUtlMultiList<positionwatcher_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 W CUtlMultiList<positionwatcher_t, unsigned short>::Remove(unsigned short, unsigned short)
 W CUtlMultiList<positionwatcher_t, unsigned short>::RemoveAll()
 W CUtlMultiList<positionwatcher_t, unsigned short>::RemoveAll(unsigned short)
 W CUtlMultiList<positionwatcher_t, unsigned short>::Unlink(unsigned short, unsigned short)
 W CUtlMultiList<positionwatcher_t, unsigned short>::~CUtlMultiList()
 W CUtlPriorityQueue<AI_NearNode_t>::Insert(AI_NearNode_t const&)
 W CUtlPriorityQueue<AI_NearNode_t>::RemoveAtHead()
 W CUtlPriorityQueue<AI_NearNode_t>::SetLessFunc(bool (*)(AI_NearNode_t const&, AI_NearNode_t const&))
 W CUtlPriorityQueue<AI_NearNode_t>::Swap(int, int)
 W CUtlPriorityQueue<CEventRegister*>::Insert(CEventRegister* const&)
 W CUtlPriorityQueue<CEventRegister*>::RemoveAt(int)
 W CUtlPriorityQueue<CEventRegister*>::RemoveAtHead()
 W CUtlPriorityQueue<CEventRegister*>::SetLessFunc(bool (*)(CEventRegister* const&, CEventRegister* const&))
 W CUtlPriorityQueue<CEventRegister*>::Swap(int, int)
 W CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::Insert(CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 W CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::RemoveAtHead()
 W CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::SetLessFunc(bool (*)(CPhysSaveRestoreBlockHandler::QueuedItem_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t const&))
 W CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::Swap(int, int)
 W CUtlPriorityQueue<SoundCommand_t*>::Insert(SoundCommand_t* const&)
 W CUtlPriorityQueue<SoundCommand_t*>::RemoveAt(int)
 W CUtlPriorityQueue<SoundCommand_t*>::RemoveAtHead()
 W CUtlPriorityQueue<SoundCommand_t*>::SetLessFunc(bool (*)(SoundCommand_t* const&, SoundCommand_t* const&))
 W CUtlPriorityQueue<SoundCommand_t*>::Swap(int, int)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Find(CAI_BaseNPC* const&, void*) const
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::FindInsertionPosition(CAI_BaseNPC* const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::FirstInorder() const
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::FreeNode(unsigned short)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Insert(CAI_BaseNPC* const&, void*)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::NewNode()
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::NextInorder(unsigned short) const
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Remove(CAI_BaseNPC* const&)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::RemoveAt(unsigned short)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::RemoveRebalance(unsigned short)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::RotateLeft(unsigned short)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::RotateRight(unsigned short)
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::SetLessFunc(bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&))
 W CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >::Unlink(unsigned short)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Find(CBaseEntity* const&, void*) const
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::FindInsertionPosition(CBaseEntity* const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::Insert(CBaseEntity* const&, void*)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::NewNode()
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::RotateLeft(unsigned short)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::RotateRight(unsigned short)
 W CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >::SetLessFunc(bool (*)(CBaseEntity* const&, CBaseEntity* const&))
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Find(CBaseFlex::FS_LocalToGlobal_t const&, void*) const
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::FindInsertionPosition(CBaseFlex::FS_LocalToGlobal_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::Insert(CBaseFlex::FS_LocalToGlobal_t const&, void*)
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::NewNode()
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::RemoveAll()
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, CLessFuncCallerNormal<CBaseFlex::FS_LocalToGlobal_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Find(CBreakModelsPrecached::breakable_precache_t const&, void*) const
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::FindInsertionPosition(CBreakModelsPrecached::breakable_precache_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::Insert(CBreakModelsPrecached::breakable_precache_t const&, void*)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::NewNode()
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::RemoveAll()
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, CLessFuncCallerNormal<CBreakModelsPrecached::breakable_precache_t> >::SetLessFunc(bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&))
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::FindInsertionPosition(CChoreoEvent* const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::FirstInorder() const
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::Insert(CChoreoEvent* const&, void*)
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::NewNode()
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::NextInorder(unsigned short) const
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::RemoveAll()
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::RotateLeft(unsigned short)
 W CUtlRBTree<CChoreoEvent*, unsigned short, CLessFuncCallerNormal<CChoreoEvent*> >::RotateRight(unsigned short)
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::FindInsertionPosition(CChoreoScene::ActiveList const&, int&, bool&, void*)
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::FirstInorder() const
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::Insert(CChoreoScene::ActiveList const&, void*)
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::InsertAt(int, bool)
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::InsertRebalance(int)
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::NewNode()
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::NextInorder(int) const
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::RotateLeft(int)
 W CUtlRBTree<CChoreoScene::ActiveList, int, CLessFuncCallerNormal<CChoreoScene::ActiveList> >::RotateRight(int)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::FindInsertionPosition(CGameEvent const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::FirstInorder() const
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::FreeNode(unsigned short)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Insert(CGameEvent const&, void*)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::NewNode()
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::NextInorder(unsigned short) const
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::RemoveAt(unsigned short)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::RemoveRebalance(unsigned short)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::RotateLeft(unsigned short)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::RotateRight(unsigned short)
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::SetLessFunc(bool (*)(CGameEvent const&, CGameEvent const&))
 W CUtlRBTree<CGameEvent, unsigned short, CLessFuncCallerNormal<CGameEvent> >::Unlink(unsigned short)
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::FindInsertionPosition(CSceneEntity::SpeakEventSound_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::FirstInorder() const
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::Insert(CSceneEntity::SpeakEventSound_t const&, void*)
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::NewNode()
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::NextInorder(unsigned short) const
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, CLessFuncCallerNormal<CSceneEntity::SpeakEventSound_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Find(CUtlCachedFileData<CModelSoundCache>::ElementType_t const&, void*) const
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::FindInsertionPosition(CUtlCachedFileData<CModelSoundCache>::ElementType_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::FirstInorder() const
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::Insert(CUtlCachedFileData<CModelSoundCache>::ElementType_t const&, void*)
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::NewNode()
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::NextInorder(unsigned short) const
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::RemoveAll()
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlCachedFileData<CModelSoundCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CModelSoundCache>::ElementType_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Find(CUtlCachedFileData<CSceneCache>::ElementType_t const&, void*) const
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::FindInsertionPosition(CUtlCachedFileData<CSceneCache>::ElementType_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::FirstInorder() const
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::Insert(CUtlCachedFileData<CSceneCache>::ElementType_t const&, void*)
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::NewNode()
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::NextInorder(unsigned short) const
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::RemoveAll()
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlCachedFileData<CSceneCache>::ElementType_t, unsigned short, CLessFuncCallerNormal<CUtlCachedFileData<CSceneCache>::ElementType_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Find(CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::Insert(CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CDecalEmitterSystem::DecalEntry, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Find(CUtlDict<CInstancedResponseSystem*, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<CInstancedResponseSystem*, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::Insert(CUtlDict<CInstancedResponseSystem*, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CInstancedResponseSystem*, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Find(CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::Insert(CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CResponseSystem::Enumeration, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Find(CUtlDict<CUserMessage*, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<CUserMessage*, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::Insert(CUtlDict<CUserMessage*, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<CUserMessage*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<CUserMessage*, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Find(CUtlDict<ConceptHistory_t, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<ConceptHistory_t, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::FirstInorder() const
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::FreeNode(int)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Insert(CUtlDict<ConceptHistory_t, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::NextInorder(int) const
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::RemoveAt(int)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::RemoveRebalance(int)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<ConceptHistory_t, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ConceptHistory_t, int>::DictElement_t> >::Unlink(int)
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Find(CUtlDict<Criteria, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<Criteria, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::Insert(CUtlDict<Criteria, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<Criteria, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Criteria, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Find(CUtlDict<EventGroup, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<EventGroup, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::Insert(CUtlDict<EventGroup, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<EventGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<EventGroup, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Find(CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::FindInsertionPosition(CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::Insert(CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<FileWeaponInfo_t*, unsigned short>::DictElement_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Find(CUtlDict<IEntityFactory*, unsigned short>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::FindInsertionPosition(CUtlDict<IEntityFactory*, unsigned short>::DictElement_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::Insert(CUtlDict<IEntityFactory*, unsigned short>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<IEntityFactory*, unsigned short>::DictElement_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Find(CUtlDict<KeyValues*, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<KeyValues*, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::FreeNode(int)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Insert(CUtlDict<KeyValues*, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::RemoveAt(int)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::RemoveRebalance(int)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<KeyValues*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<KeyValues*, int>::DictElement_t> >::Unlink(int)
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Find(CUtlDict<ResponseGroup, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<ResponseGroup, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::Insert(CUtlDict<ResponseGroup, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<ResponseGroup, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<ResponseGroup, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<Rule, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::Insert(CUtlDict<Rule, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<Rule, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<Rule, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Find(CUtlDict<float, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<float, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::Insert(CUtlDict<float, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<float, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<float, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Find(CUtlDict<int, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<int, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::Insert(CUtlDict<int, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<int, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<int, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Find(CUtlDict<int, unsigned short>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::FindInsertionPosition(CUtlDict<int, unsigned short>::DictElement_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::FirstInorder() const
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::Insert(CUtlDict<int, unsigned short>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::NextInorder(unsigned short) const
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlDict<int, unsigned short>::DictElement_t, unsigned short, CLessFuncCallerNormal<CUtlDict<int, unsigned short>::DictElement_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Find(CUtlDict<memhandle_t__*, int>::DictElement_t const&, void*) const
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::FindInsertionPosition(CUtlDict<memhandle_t__*, int>::DictElement_t const&, int&, bool&, void*)
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::Insert(CUtlDict<memhandle_t__*, int>::DictElement_t const&, void*)
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::InsertAt(int, bool)
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::InsertRebalance(int)
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::LinkToParent(int, int, bool)
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::NewNode()
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::RemoveAll()
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::RotateLeft(int)
 W CUtlRBTree<CUtlDict<memhandle_t__*, int>::DictElement_t, int, CLessFuncCallerNormal<CUtlDict<memhandle_t__*, int>::DictElement_t> >::RotateRight(int)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Find(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::FindInsertionPosition(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&, unsigned char&, bool&, void*)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::FirstInorder() const
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::FreeNode(unsigned char)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Insert(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::InsertAt(unsigned char, bool)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::InsertRebalance(unsigned char)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::LinkToParent(unsigned char, unsigned char, bool)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::NextInorder(unsigned char) const
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::RemoveAll()
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::RemoveAt(unsigned char)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::RemoveRebalance(unsigned char)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::RotateLeft(unsigned char)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::RotateRight(unsigned char)
 W CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t> >::Unlink(unsigned char)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Find(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::FindInsertionPosition(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::FirstInorder() const
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::FreeNode(unsigned short)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Insert(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::NextInorder(unsigned short) const
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::RemoveAll()
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::RemoveAt(unsigned short)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::RemoveRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t> >::Unlink(unsigned short)
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Find(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::FindInsertionPosition(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::Insert(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::RemoveAll()
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Find(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::FreeNode(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Insert(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Remove(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::RemoveAll()
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::RemoveAt(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::RemoveRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t> >::Unlink(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Find(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::FreeNode(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Insert(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Remove(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::RemoveAll()
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::RemoveAt(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::RemoveRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t> >::Unlink(unsigned short)
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Find(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::FindInsertionPosition(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::Insert(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Find(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::FindInsertionPosition(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&, char&, bool&, void*)
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::FirstInorder() const
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::Insert(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::InsertAt(char, bool)
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::InsertRebalance(char)
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::LinkToParent(char, char, bool)
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::NextInorder(char) const
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::RemoveAll()
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::RotateLeft(char)
 W CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CLessFuncCallerNormal<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t> >::RotateRight(char)
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Find(CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&, void*) const
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::FindInsertionPosition(CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::Insert(CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&, void*)
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::NewNode()
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::RemoveAll()
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CLessFuncCallerNormal<CUtlMap<unsigned int, Activity, unsigned short>::Node_t> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Find(CUtlSymbolTable::CStringPoolIndex const&, void*) const
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::FindInsertionPosition(CUtlSymbolTable::CStringPoolIndex const&, unsigned short&, bool&, void*)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::Insert(CUtlSymbolTable::CStringPoolIndex const&, void*)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::InsertRebalance(unsigned short)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::NewNode()
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::RemoveAll()
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::RotateLeft(unsigned short)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::RotateRight(unsigned short)
 W CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CLessFuncCallerUserData<CUtlSymbolTable::CStringPoolIndex> >::SetLessFunc(bool (*)(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&, void*))
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Find(ThinkSync const&, void*) const
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::FindInsertionPosition(ThinkSync const&, unsigned short&, bool&, void*)
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::FirstInorder() const
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::Insert(ThinkSync const&, void*)
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::InsertRebalance(unsigned short)
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::NewNode()
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::NextInorder(unsigned short) const
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::RemoveAll()
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::RotateLeft(unsigned short)
 W CUtlRBTree<ThinkSync, unsigned short, CLessFuncCallerNormal<ThinkSync> >::RotateRight(unsigned short)
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Find(TokenNameLookup const&, void*) const
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::FindInsertionPosition(TokenNameLookup const&, int&, bool&, void*)
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::Insert(TokenNameLookup const&, void*)
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::InsertAt(int, bool)
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::InsertRebalance(int)
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::LinkToParent(int, int, bool)
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::NewNode()
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::RotateLeft(int)
 W CUtlRBTree<TokenNameLookup, int, CLessFuncCallerNormal<TokenNameLookup> >::RotateRight(int)
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Find(char const* const&, void*) const
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::FindInsertionPosition(char const* const&, unsigned short&, bool&, void*)
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::FirstInorder() const
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::Insert(char const* const&, void*)
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::InsertRebalance(unsigned short)
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::NewNode()
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::NextInorder(unsigned short) const
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::RemoveAll()
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::RotateLeft(unsigned short)
 W CUtlRBTree<char const*, unsigned short, CLessFuncCallerNormal<char const*> >::RotateRight(unsigned short)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Find(int const&, void*) const
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::FindInsertionPosition(int const&, unsigned short&, bool&, void*)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::Insert(int const&, void*)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::InsertAt(unsigned short, bool)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::InsertRebalance(unsigned short)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::LinkToParent(unsigned short, unsigned short, bool)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::NewNode()
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::RotateLeft(unsigned short)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::RotateRight(unsigned short)
 W CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >::SetLessFunc(bool (*)(int const&, int const&))
 W CUtlSortVector<CBaseEntity*>::CUtlSortVector(bool (*)(CBaseEntity* const&, CBaseEntity* const&, void*), int, int)
 W CUtlSortVector<CBaseEntity*>::FindLessOrEqual(CBaseEntity* const&) const
 W CUtlSortVector<CBaseEntity*>::Insert(CBaseEntity* const&)
 W CUtlSymbolDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlSymbolDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlSymbolDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlSymbolDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVector<AIRebalanceInfo_t, CUtlMemory<AIRebalanceInfo_t> >::GrowVector(int)
 W CUtlVector<AIRebalanceInfo_t, CUtlMemory<AIRebalanceInfo_t> >::InsertBefore(int)
 W CUtlVector<AIRebalanceInfo_t, CUtlMemory<AIRebalanceInfo_t> >::RemoveAll()
 W CUtlVector<AIRebalanceInfo_t, CUtlMemory<AIRebalanceInfo_t> >::ShiftElementsRight(int, int)
 W CUtlVector<AIRebalanceInfo_t, CUtlMemory<AIRebalanceInfo_t> >::Sort(int (*)(AIRebalanceInfo_t const*, AIRebalanceInfo_t const*))
 W CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >::FastRemove(int)
 W CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >::GrowVector(int)
 W CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >::InsertBefore(int)
 W CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >::RemoveAll()
 W CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >::SetCount(int)
 W CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >::ShiftElementsRight(int, int)
 W CUtlVector<AI_FollowGroup_t*, CUtlMemory<AI_FollowGroup_t*> >::FastRemove(int)
 W CUtlVector<AI_FollowGroup_t*, CUtlMemory<AI_FollowGroup_t*> >::GrowVector(int)
 W CUtlVector<AI_FollowGroup_t*, CUtlMemory<AI_FollowGroup_t*> >::InsertBefore(int, AI_FollowGroup_t* const&)
 W CUtlVector<AI_FollowGroup_t*, CUtlMemory<AI_FollowGroup_t*> >::RemoveAll()
 W CUtlVector<AI_FollowGroup_t*, CUtlMemory<AI_FollowGroup_t*> >::ShiftElementsRight(int, int)
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::AddVectorToTail(CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> > const&)
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::CopyArray(AI_MoveSuggestion_t const*, int)
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::EnsureCapacity(int)
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::GrowVector(int)
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::InsertBefore(int, AI_MoveSuggestion_t const&)
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::RemoveAll()
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::SetCount(int)
 W CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t> >::ShiftElementsRight(int, int)
 W CUtlVector<AI_NamespaceAddInfo_t, CUtlMemory<AI_NamespaceAddInfo_t> >::GrowVector(int)
 W CUtlVector<AI_NamespaceAddInfo_t, CUtlMemory<AI_NamespaceAddInfo_t> >::InsertBefore(int, AI_NamespaceAddInfo_t const&)
 W CUtlVector<AI_NamespaceAddInfo_t, CUtlMemory<AI_NamespaceAddInfo_t> >::RemoveAll()
 W CUtlVector<AI_NamespaceAddInfo_t, CUtlMemory<AI_NamespaceAddInfo_t> >::ShiftElementsRight(int, int)
 W CUtlVector<AI_NamespaceAddInfo_t, CUtlMemory<AI_NamespaceAddInfo_t> >::Sort(int (*)(AI_NamespaceAddInfo_t const*, AI_NamespaceAddInfo_t const*))
 W CUtlVector<AI_NearNode_t, CUtlMemory<AI_NearNode_t> >::FastRemove(int)
 W CUtlVector<AI_NearNode_t, CUtlMemory<AI_NearNode_t> >::GrowVector(int)
 W CUtlVector<AI_NearNode_t, CUtlMemory<AI_NearNode_t> >::InsertBefore(int)
 W CUtlVector<AI_NearNode_t, CUtlMemory<AI_NearNode_t> >::RemoveAll()
 W CUtlVector<AI_NearNode_t, CUtlMemory<AI_NearNode_t> >::ShiftElementsRight(int, int)
 W CUtlVector<AI_Response*, CUtlMemory<AI_Response*> >::GrowVector(int)
 W CUtlVector<AI_Response*, CUtlMemory<AI_Response*> >::InsertBefore(int, AI_Response* const&)
 W CUtlVector<AI_Response*, CUtlMemory<AI_Response*> >::RemoveAll()
 W CUtlVector<AI_Response*, CUtlMemory<AI_Response*> >::ShiftElementsRight(int, int)
 W CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >::GrowVector(int)
 W CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >::InsertBefore(int, AI_Waypoint_t const&)
 W CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >::RemoveAll()
 W CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >::SetCount(int)
 W CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >::ShiftElementsRight(int, int)
 W CUtlVector<Activity, CUtlMemory<Activity> >::Find(Activity const&) const
 W CUtlVector<Activity, CUtlMemory<Activity> >::GrowVector(int)
 W CUtlVector<Activity, CUtlMemory<Activity> >::InsertBefore(int, Activity const&)
 W CUtlVector<Activity, CUtlMemory<Activity> >::RemoveAll()
 W CUtlVector<Activity, CUtlMemory<Activity> >::ShiftElementsRight(int, int)
 W CUtlVector<BotChatterOutputType, CUtlMemory<BotChatterOutputType> >::GrowVector(int)
 W CUtlVector<BotChatterOutputType, CUtlMemory<BotChatterOutputType> >::InsertBefore(int, BotChatterOutputType const&)
 W CUtlVector<BotChatterOutputType, CUtlMemory<BotChatterOutputType> >::RemoveAll()
 W CUtlVector<BotChatterOutputType, CUtlMemory<BotChatterOutputType> >::ShiftElementsRight(int, int)
 W CUtlVector<BotPhrase*, CUtlMemory<BotPhrase*> >::GrowVector(int)
 W CUtlVector<BotPhrase*, CUtlMemory<BotPhrase*> >::InsertBefore(int, BotPhrase* const&)
 W CUtlVector<BotPhrase*, CUtlMemory<BotPhrase*> >::RemoveAll()
 W CUtlVector<BotPhrase*, CUtlMemory<BotPhrase*> >::ShiftElementsRight(int, int)
 W CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >::GrowVector(int)
 W CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >::InsertBefore(int, BotSpeakable* const&)
 W CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >::RemoveAll()
 W CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_BaseActor*, CUtlMemory<CAI_BaseActor*> >::GrowVector(int)
 W CUtlVector<CAI_BaseActor*, CUtlMemory<CAI_BaseActor*> >::InsertBefore(int, CAI_BaseActor* const&)
 W CUtlVector<CAI_BaseActor*, CUtlMemory<CAI_BaseActor*> >::RemoveAll()
 W CUtlVector<CAI_BaseActor*, CUtlMemory<CAI_BaseActor*> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*> >::EnsureCapacity(int)
 W CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*> >::FastRemove(int)
 W CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*> >::Find(CAI_BaseNPC* const&) const
 W CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*> >::GrowVector(int)
 W CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*> >::InsertBefore(int, CAI_BaseNPC* const&)
 W CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*> >::RemoveAll()
 W CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_BehaviorBase*, CUtlMemory<CAI_BehaviorBase*> >::RemoveAll()
 W CUtlVector<CAI_BlendedMotor::AI_Movementscript_t, CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t> >::GrowVector(int)
 W CUtlVector<CAI_BlendedMotor::AI_Movementscript_t, CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t> >::InsertBefore(int, CAI_BlendedMotor::AI_Movementscript_t const&)
 W CUtlVector<CAI_BlendedMotor::AI_Movementscript_t, CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t> >::RemoveAll()
 W CUtlVector<CAI_BlendedMotor::AI_Movementscript_t, CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*> >::GrowVector(int)
 W CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*> >::InsertBefore(int, CAI_Hint* const&)
 W CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*> >::RemoveAll()
 W CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_InterestTarget_t*, CUtlMemory<CAI_InterestTarget_t*> >::GrowVector(int)
 W CUtlVector<CAI_InterestTarget_t*, CUtlMemory<CAI_InterestTarget_t*> >::InsertBefore(int, CAI_InterestTarget_t* const&)
 W CUtlVector<CAI_InterestTarget_t*, CUtlMemory<CAI_InterestTarget_t*> >::RemoveAll()
 W CUtlVector<CAI_InterestTarget_t*, CUtlMemory<CAI_InterestTarget_t*> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t> >::GrowVector(int)
 W CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t> >::InsertBefore(int)
 W CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t> >::Remove(int)
 W CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t> >::RemoveAll()
 W CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t> >::SetCount(int)
 W CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t> >::ShiftElementsLeft(int, int)
 W CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_Link*, CUtlMemory<CAI_Link*> >::GrowVector(int)
 W CUtlVector<CAI_Link*, CUtlMemory<CAI_Link*> >::InsertBefore(int, CAI_Link* const&)
 W CUtlVector<CAI_Link*, CUtlMemory<CAI_Link*> >::RemoveAll()
 W CUtlVector<CAI_Link*, CUtlMemory<CAI_Link*> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_PlaneSolver::CircleObstacles_t, CUtlMemory<CAI_PlaneSolver::CircleObstacles_t> >::GrowVector(int)
 W CUtlVector<CAI_PlaneSolver::CircleObstacles_t, CUtlMemory<CAI_PlaneSolver::CircleObstacles_t> >::InsertBefore(int, CAI_PlaneSolver::CircleObstacles_t const&)
 W CUtlVector<CAI_PlaneSolver::CircleObstacles_t, CUtlMemory<CAI_PlaneSolver::CircleObstacles_t> >::RemoveAll()
 W CUtlVector<CAI_PlaneSolver::CircleObstacles_t, CUtlMemory<CAI_PlaneSolver::CircleObstacles_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CAI_StandoffBehavior::BattleLine_t, CUtlMemory<CAI_StandoffBehavior::BattleLine_t> >::GrowVector(int)
 W CUtlVector<CAI_StandoffBehavior::BattleLine_t, CUtlMemory<CAI_StandoffBehavior::BattleLine_t> >::InsertBefore(int, CAI_StandoffBehavior::BattleLine_t const&)
 W CUtlVector<CAI_StandoffBehavior::BattleLine_t, CUtlMemory<CAI_StandoffBehavior::BattleLine_t> >::RemoveAll()
 W CUtlVector<CAI_StandoffBehavior::BattleLine_t, CUtlMemory<CAI_StandoffBehavior::BattleLine_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::EnsureCapacity(int)
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::GrowVector(int)
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::InsertBefore(int)
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::RemoveAll()
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::RemoveMultiple(int, int)
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::SetCount(int)
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::ShiftElementsLeft(int, int)
 W CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >::ShiftElementsRight(int, int)
 W CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >::FastRemove(int)
 W CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >::Find(CBaseEntity* const&) const
 W CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >::GrowVector(int)
 W CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >::InsertBefore(int, CBaseEntity* const&)
 W CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >::RemoveAll()
 W CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >::SetCount(int)
 W CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >::ShiftElementsRight(int, int)
 W CUtlVector<CBaseHandle, CUtlMemory<CBaseHandle> >::FastRemove(int)
 W CUtlVector<CBaseHandle, CUtlMemory<CBaseHandle> >::GrowVector(int)
 W CUtlVector<CBaseHandle, CUtlMemory<CBaseHandle> >::InsertBefore(int, CBaseHandle const&)
 W CUtlVector<CBaseHandle, CUtlMemory<CBaseHandle> >::RemoveAll()
 W CUtlVector<CBaseHandle, CUtlMemory<CBaseHandle> >::ShiftElementsRight(int, int)
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::Find(CBasePlayer* const&) const
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::FindAndRemove(CBasePlayer* const&)
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::GrowVector(int)
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::InsertBefore(int, CBasePlayer* const&)
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::Remove(int)
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::RemoveAll()
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*> >::ShiftElementsRight(int, int)
 W CUtlVector<CBaseServerVehicle::entryanim_t, CUtlMemory<CBaseServerVehicle::entryanim_t> >::GrowVector(int)
 W CUtlVector<CBaseServerVehicle::entryanim_t, CUtlMemory<CBaseServerVehicle::entryanim_t> >::InsertBefore(int)
 W CUtlVector<CBaseServerVehicle::entryanim_t, CUtlMemory<CBaseServerVehicle::entryanim_t> >::RemoveAll()
 W CUtlVector<CBaseServerVehicle::entryanim_t, CUtlMemory<CBaseServerVehicle::entryanim_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CBaseServerVehicle::exitanim_t, CUtlMemory<CBaseServerVehicle::exitanim_t> >::GrowVector(int)
 W CUtlVector<CBaseServerVehicle::exitanim_t, CUtlMemory<CBaseServerVehicle::exitanim_t> >::InsertBefore(int)
 W CUtlVector<CBaseServerVehicle::exitanim_t, CUtlMemory<CBaseServerVehicle::exitanim_t> >::RemoveAll()
 W CUtlVector<CBaseServerVehicle::exitanim_t, CUtlMemory<CBaseServerVehicle::exitanim_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CBitString, CUtlMemory<CBitString> >::GrowVector(int)
 W CUtlVector<CBitString, CUtlMemory<CBitString> >::RemoveAll()
 W CUtlVector<CBitString, CUtlMemory<CBitString> >::SetCount(int)
 W CUtlVector<CBitString, CUtlMemory<CBitString> >::ShiftElementsRight(int, int)
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::Find(CC4* const&) const
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::FindAndRemove(CC4* const&)
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::GrowVector(int)
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::InsertBefore(int, CC4* const&)
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::Remove(int)
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::RemoveAll()
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CC4*, CUtlMemory<CC4*> >::ShiftElementsRight(int, int)
 W CUtlVector<CCSBotManager::Zone const*, CUtlMemory<CCSBotManager::Zone const*> >::GrowVector(int)
 W CUtlVector<CCSBotManager::Zone const*, CUtlMemory<CCSBotManager::Zone const*> >::InsertBefore(int, CCSBotManager::Zone const* const&)
 W CUtlVector<CCSBotManager::Zone const*, CUtlMemory<CCSBotManager::Zone const*> >::RemoveAll()
 W CUtlVector<CCSBotManager::Zone const*, CUtlMemory<CCSBotManager::Zone const*> >::ShiftElementsRight(int, int)
 W CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*> >::GrowVector(int)
 W CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*> >::InsertBefore(int, CChoreoActor* const&)
 W CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*> >::Remove(int)
 W CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*> >::RemoveAll()
 W CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*> >::ShiftElementsRight(int, int)
 W CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*> >::GrowVector(int)
 W CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*> >::InsertBefore(int, CChoreoChannel* const&)
 W CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*> >::Remove(int)
 W CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*> >::RemoveAll()
 W CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*> >::ShiftElementsRight(int, int)
 W CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >::Find(CChoreoEvent* const&) const
 W CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >::GrowVector(int)
 W CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >::InsertBefore(int, CChoreoEvent* const&)
 W CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >::Remove(int)
 W CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >::RemoveAll()
 W CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*> >::ShiftElementsRight(int, int)
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::Find(CChoreoScene* const&) const
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::FindAndRemove(CChoreoScene* const&)
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::GrowVector(int)
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::InsertBefore(int, CChoreoScene* const&)
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::Remove(int)
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::RemoveAll()
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*> >::ShiftElementsRight(int, int)
 W CUtlVector<CCommandContext, CUtlMemory<CCommandContext> >::GrowVector(int)
 W CUtlVector<CCommandContext, CUtlMemory<CCommandContext> >::InsertBefore(int)
 W CUtlVector<CCommandContext, CUtlMemory<CCommandContext> >::Remove(int)
 W CUtlVector<CCommandContext, CUtlMemory<CCommandContext> >::RemoveAll()
 W CUtlVector<CCommandContext, CUtlMemory<CCommandContext> >::ShiftElementsLeft(int, int)
 W CUtlVector<CCommandContext, CUtlMemory<CCommandContext> >::ShiftElementsRight(int, int)
 W CUtlVector<CDecalEmitterSystem::DecalListEntry, CUtlMemory<CDecalEmitterSystem::DecalListEntry> >::GrowVector(int)
 W CUtlVector<CDecalEmitterSystem::DecalListEntry, CUtlMemory<CDecalEmitterSystem::DecalListEntry> >::InsertBefore(int, CDecalEmitterSystem::DecalListEntry const&)
 W CUtlVector<CDecalEmitterSystem::DecalListEntry, CUtlMemory<CDecalEmitterSystem::DecalListEntry> >::RemoveAll()
 W CUtlVector<CDecalEmitterSystem::DecalListEntry, CUtlMemory<CDecalEmitterSystem::DecalListEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CEffectScriptElement, CUtlMemory<CEffectScriptElement> >::GrowVector(int)
 W CUtlVector<CEffectScriptElement, CUtlMemory<CEffectScriptElement> >::InsertBefore(int, CEffectScriptElement const&)
 W CUtlVector<CEffectScriptElement, CUtlMemory<CEffectScriptElement> >::RemoveAll()
 W CUtlVector<CEffectScriptElement, CUtlMemory<CEffectScriptElement> >::ShiftElementsRight(int, int)
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::CopyArray(CEntityDataInstantiator<CPositionWatcherList>::HashEntry const*, int)
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::GrowVector(int)
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::InsertBefore(int, CEntityDataInstantiator<CPositionWatcherList>::HashEntry const&)
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::Remove(int)
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::RemoveAll()
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::SetCount(int)
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::CopyArray(CEntityDataInstantiator<ModelWidthScale>::HashEntry const*, int)
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::GrowVector(int)
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::InsertBefore(int, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::Remove(int)
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::RemoveAll()
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::SetCount(int)
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::CopyArray(CEntityDataInstantiator<StepSimulationData>::HashEntry const*, int)
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::GrowVector(int)
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::InsertBefore(int, CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::Remove(int)
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::RemoveAll()
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::SetCount(int)
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::CopyArray(CEntityDataInstantiator<groundlink_t>::HashEntry const*, int)
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::GrowVector(int)
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::InsertBefore(int, CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::Remove(int)
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::RemoveAll()
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::SetCount(int)
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::CopyArray(CEntityDataInstantiator<physicspushlist_t>::HashEntry const*, int)
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::GrowVector(int)
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::InsertBefore(int, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::Remove(int)
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::RemoveAll()
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::SetCount(int)
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::CopyArray(CEntityDataInstantiator<touchlink_t>::HashEntry const*, int)
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::GrowVector(int)
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::InsertBefore(int, CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::Remove(int)
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::RemoveAll()
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::SetCount(int)
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::Find(CEnvSoundscape* const&) const
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::FindAndRemove(CEnvSoundscape* const&)
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::GrowVector(int)
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::InsertBefore(int, CEnvSoundscape* const&)
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::Remove(int)
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::RemoveAll()
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*> >::ShiftElementsRight(int, int)
 W CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag> >::GrowVector(int)
 W CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag> >::InsertBefore(int, CEventAbsoluteTag const&)
 W CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag> >::Remove(int)
 W CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag> >::RemoveAll()
 W CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag> >::ShiftElementsRight(int, int)
 W CUtlVector<CEventRegister*, CUtlMemory<CEventRegister*> >::FastRemove(int)
 W CUtlVector<CEventRegister*, CUtlMemory<CEventRegister*> >::GrowVector(int)
 W CUtlVector<CEventRegister*, CUtlMemory<CEventRegister*> >::InsertBefore(int)
 W CUtlVector<CEventRegister*, CUtlMemory<CEventRegister*> >::RemoveAll()
 W CUtlVector<CEventRegister*, CUtlMemory<CEventRegister*> >::ShiftElementsRight(int, int)
 W CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag> >::GrowVector(int)
 W CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag> >::InsertBefore(int, CEventRelativeTag const&)
 W CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag> >::Remove(int)
 W CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag> >::RemoveAll()
 W CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag> >::ShiftElementsLeft(int, int)
 W CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag> >::ShiftElementsRight(int, int)
 W CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample> >::GrowVector(int)
 W CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample> >::InsertBefore(int)
 W CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample> >::InsertBefore(int, CExpressionSample const&)
 W CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample> >::Remove(int)
 W CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample> >::RemoveAll()
 W CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample> >::ShiftElementsLeft(int, int)
 W CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample> >::ShiftElementsRight(int, int)
 W CUtlVector<CFish*, CUtlMemory<CFish*> >::GrowVector(int)
 W CUtlVector<CFish*, CUtlMemory<CFish*> >::InsertBefore(int, CFish* const&)
 W CUtlVector<CFish*, CUtlMemory<CFish*> >::RemoveAll()
 W CUtlVector<CFish*, CUtlMemory<CFish*> >::ShiftElementsRight(int, int)
 W CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*> >::GrowVector(int)
 W CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*> >::InsertBefore(int, CFlexAnimationTrack* const&)
 W CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*> >::Remove(int)
 W CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*> >::RemoveAll()
 W CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*> >::ShiftElementsRight(int, int)
 W CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*> >::GrowVector(int)
 W CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*> >::InsertBefore(int, CFlexSceneFile* const&)
 W CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*> >::Remove(int)
 W CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*> >::RemoveAll()
 W CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*> >::ShiftElementsRight(int, int)
 W CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag> >::GrowVector(int)
 W CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag> >::InsertBefore(int, CFlexTimingTag const&)
 W CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag> >::Remove(int)
 W CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag> >::RemoveAll()
 W CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag> >::ShiftElementsLeft(int, int)
 W CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag> >::ShiftElementsRight(int, int)
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::Find(CFuncLadder* const&) const
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::FindAndRemove(CFuncLadder* const&)
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::GrowVector(int)
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::InsertBefore(int, CFuncLadder* const&)
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::Remove(int)
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::RemoveAll()
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*> >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >::FastRemove(int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >::GrowVector(int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >::InsertBefore(int, CHandle<CAI_BaseNPC> const&)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >::RemoveAll()
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >::SetCount(int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemoryFixed<CHandle<CAI_BaseNPC>, 16u> >::Find(CHandle<CAI_BaseNPC> const&) const
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemoryFixed<CHandle<CAI_BaseNPC>, 16u> >::GrowVector(int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemoryFixed<CHandle<CAI_BaseNPC>, 16u> >::InsertBefore(int, CHandle<CAI_BaseNPC> const&)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemoryFixed<CHandle<CAI_BaseNPC>, 16u> >::Remove(int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemoryFixed<CHandle<CAI_BaseNPC>, 16u> >::RemoveAll()
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemoryFixed<CHandle<CAI_BaseNPC>, 16u> >::ShiftElementsLeft(int, int)
 W CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemoryFixed<CHandle<CAI_BaseNPC>, 16u> >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CAI_DynamicLink>, CUtlMemory<CHandle<CAI_DynamicLink> > >::FastRemove(int)
 W CUtlVector<CHandle<CAI_DynamicLink>, CUtlMemory<CHandle<CAI_DynamicLink> > >::GrowVector(int)
 W CUtlVector<CHandle<CAI_DynamicLink>, CUtlMemory<CHandle<CAI_DynamicLink> > >::InsertBefore(int, CHandle<CAI_DynamicLink> const&)
 W CUtlVector<CHandle<CAI_DynamicLink>, CUtlMemory<CHandle<CAI_DynamicLink> > >::RemoveAll()
 W CUtlVector<CHandle<CAI_DynamicLink>, CUtlMemory<CHandle<CAI_DynamicLink> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::FastRemove(int)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::Find(CHandle<CBaseEntity> const&) const
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::FindAndRemove(CHandle<CBaseEntity> const&)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::GrowVector(int)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::HasElement(CHandle<CBaseEntity> const&) const
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::InsertBefore(int, CHandle<CBaseEntity> const&)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::Remove(int)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::RemoveAll()
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::SetCount(int)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::ShiftElementsLeft(int, int)
 W CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >::GrowVector(int)
 W CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >::RemoveAll()
 W CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >::SetCount(int)
 W CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::CopyArray(CHandle<CBasePlayer> const*, int)
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::Find(CHandle<CBasePlayer> const&) const
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::GrowVector(int)
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::HasElement(CHandle<CBasePlayer> const&) const
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::InsertBefore(int, CHandle<CBasePlayer> const&)
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::RemoveAll()
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::SetCount(int)
 W CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CBasePropDoor>, CUtlMemory<CHandle<CBasePropDoor> > >::GrowVector(int)
 W CUtlVector<CHandle<CBasePropDoor>, CUtlMemory<CHandle<CBasePropDoor> > >::InsertBefore(int, CHandle<CBasePropDoor> const&)
 W CUtlVector<CHandle<CBasePropDoor>, CUtlMemory<CHandle<CBasePropDoor> > >::RemoveAll()
 W CUtlVector<CHandle<CBasePropDoor>, CUtlMemory<CHandle<CBasePropDoor> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::FastRemove(int)
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::Find(CHandle<CEnvMicrophone> const&) const
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::FindAndRemove(CHandle<CEnvMicrophone> const&)
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::GrowVector(int)
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::InsertBefore(int, CHandle<CEnvMicrophone> const&)
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::Remove(int)
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::RemoveAll()
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::ShiftElementsLeft(int, int)
 W CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::Find(CHandle<CEnvPlayerSurfaceTrigger> const&) const
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::FindAndRemove(CHandle<CEnvPlayerSurfaceTrigger> const&)
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::GrowVector(int)
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::InsertBefore(int, CHandle<CEnvPlayerSurfaceTrigger> const&)
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::Remove(int)
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::RemoveAll()
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::ShiftElementsLeft(int, int)
 W CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount> > >::Find(CHandle<CInfoLadderDismount> const&) const
 W CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount> > >::GrowVector(int)
 W CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount> > >::InsertBefore(int, CHandle<CInfoLadderDismount> const&)
 W CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount> > >::RemoveAll()
 W CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::Find(CHandle<CMessageEntity> const&) const
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::FindAndRemove(CHandle<CMessageEntity> const&)
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::GrowVector(int)
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::InsertBefore(int, CHandle<CMessageEntity> const&)
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::Remove(int)
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::RemoveAll()
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::ShiftElementsLeft(int, int)
 W CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CPointTemplate>, CUtlMemory<CHandle<CPointTemplate> > >::GrowVector(int)
 W CUtlVector<CHandle<CPointTemplate>, CUtlMemory<CHandle<CPointTemplate> > >::InsertBefore(int, CHandle<CPointTemplate> const&)
 W CUtlVector<CHandle<CPointTemplate>, CUtlMemory<CHandle<CPointTemplate> > >::RemoveAll()
 W CUtlVector<CHandle<CPointTemplate>, CUtlMemory<CHandle<CPointTemplate> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::Find(CHandle<CSceneEntity> const&) const
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::FindAndRemove(CHandle<CSceneEntity> const&)
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::GrowVector(int)
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::InsertBefore(int, CHandle<CSceneEntity> const&)
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::Remove(int)
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::RemoveAll()
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::SetCount(int)
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::ShiftElementsLeft(int, int)
 W CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHandle<CTriggerMultiple>, CUtlMemory<CHandle<CTriggerMultiple> > >::RemoveAll()
 W CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >::GrowVector(int)
 W CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >::InsertBefore(int)
 W CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >::RemoveAll()
 W CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >::SetCount(int)
 W CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >::ShiftElementsRight(int, int)
 W CUtlVector<CHintCriteria::hintZone_t, CUtlMemory<CHintCriteria::hintZone_t> >::GrowVector(int)
 W CUtlVector<CHintCriteria::hintZone_t, CUtlMemory<CHintCriteria::hintZone_t> >::InsertBefore(int)
 W CUtlVector<CHintCriteria::hintZone_t, CUtlMemory<CHintCriteria::hintZone_t> >::RemoveAll()
 W CUtlVector<CHintCriteria::hintZone_t, CUtlMemory<CHintCriteria::hintZone_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CHintMessage*, CUtlMemory<CHintMessage*> >::GrowVector(int)
 W CUtlVector<CHintMessage*, CUtlMemory<CHintMessage*> >::InsertBefore(int, CHintMessage* const&)
 W CUtlVector<CHintMessage*, CUtlMemory<CHintMessage*> >::Remove(int)
 W CUtlVector<CHintMessage*, CUtlMemory<CHintMessage*> >::RemoveAll()
 W CUtlVector<CHintMessage*, CUtlMemory<CHintMessage*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CHintMessage*, CUtlMemory<CHintMessage*> >::ShiftElementsRight(int, int)
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::Find(CHostage* const&) const
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::FindAndRemove(CHostage* const&)
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::GrowVector(int)
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::InsertBefore(int, CHostage* const&)
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::Remove(int)
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::RemoveAll()
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CHostage*, CUtlMemory<CHostage*> >::ShiftElementsRight(int, int)
 W CUtlVector<CIKTarget, CUtlMemory<CIKTarget> >::EnsureCapacity(int)
 W CUtlVector<CIKTarget, CUtlMemory<CIKTarget> >::GrowVector(int)
 W CUtlVector<CIKTarget, CUtlMemory<CIKTarget> >::RemoveAll()
 W CUtlVector<CIKTarget, CUtlMemory<CIKTarget> >::SetCount(int)
 W CUtlVector<CIKTarget, CUtlMemory<CIKTarget> >::ShiftElementsRight(int, int)
 W CUtlVector<CModelSoundCache*, CUtlMemory<CModelSoundCache*> >::GrowVector(int)
 W CUtlVector<CModelSoundCache*, CUtlMemory<CModelSoundCache*> >::InsertBefore(int, CModelSoundCache* const&)
 W CUtlVector<CModelSoundCache*, CUtlMemory<CModelSoundCache*> >::RemoveAll()
 W CUtlVector<CModelSoundCache*, CUtlMemory<CModelSoundCache*> >::ShiftElementsRight(int, int)
 W CUtlVector<CMoveHelperServer::touchlist_t, CUtlMemory<CMoveHelperServer::touchlist_t> >::GrowVector(int)
 W CUtlVector<CMoveHelperServer::touchlist_t, CUtlMemory<CMoveHelperServer::touchlist_t> >::InsertBefore(int)
 W CUtlVector<CMoveHelperServer::touchlist_t, CUtlMemory<CMoveHelperServer::touchlist_t> >::RemoveAll()
 W CUtlVector<CMoveHelperServer::touchlist_t, CUtlMemory<CMoveHelperServer::touchlist_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CNavArea*, CUtlMemory<CNavArea*> >::GrowVector(int)
 W CUtlVector<CNavArea*, CUtlMemory<CNavArea*> >::InsertBefore(int, CNavArea* const&)
 W CUtlVector<CNavArea*, CUtlMemory<CNavArea*> >::RemoveAll()
 W CUtlVector<CNavArea*, CUtlMemory<CNavArea*> >::ShiftElementsRight(int, int)
 W CUtlVector<CPhysSaveRestoreBlockHandler::QueuedItem_t, CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t> >::FastRemove(int)
 W CUtlVector<CPhysSaveRestoreBlockHandler::QueuedItem_t, CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t> >::GrowVector(int)
 W CUtlVector<CPhysSaveRestoreBlockHandler::QueuedItem_t, CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t> >::InsertBefore(int)
 W CUtlVector<CPhysSaveRestoreBlockHandler::QueuedItem_t, CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t> >::RemoveAll()
 W CUtlVector<CPhysSaveRestoreBlockHandler::QueuedItem_t, CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CPhysicsPushedEntities::PhysicsPushedInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t> >::GrowVector(int)
 W CUtlVector<CPhysicsPushedEntities::PhysicsPushedInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t> >::InsertBefore(int)
 W CUtlVector<CPhysicsPushedEntities::PhysicsPushedInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t> >::RemoveAll()
 W CUtlVector<CPhysicsPushedEntities::PhysicsPushedInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CPhysicsPushedEntities::PhysicsPusherInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t> >::GrowVector(int)
 W CUtlVector<CPhysicsPushedEntities::PhysicsPusherInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t> >::InsertBefore(int)
 W CUtlVector<CPhysicsPushedEntities::PhysicsPusherInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t> >::RemoveAll()
 W CUtlVector<CPhysicsPushedEntities::PhysicsPusherInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::Find(CPlantedC4* const&) const
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::FindAndRemove(CPlantedC4* const&)
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::GrowVector(int)
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::InsertBefore(int, CPlantedC4* const&)
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::Remove(int)
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::RemoveAll()
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CPlantedC4*, CUtlMemory<CPlantedC4*> >::ShiftElementsRight(int, int)
 W CUtlVector<CPointTemplate*, CUtlMemory<CPointTemplate*> >::GrowVector(int)
 W CUtlVector<CPointTemplate*, CUtlMemory<CPointTemplate*> >::InsertBefore(int, CPointTemplate* const&)
 W CUtlVector<CPointTemplate*, CUtlMemory<CPointTemplate*> >::RemoveAll()
 W CUtlVector<CPointTemplate*, CUtlMemory<CPointTemplate*> >::ShiftElementsRight(int, int)
 W CUtlVector<CPropData::propdata_breakablechunk_t, CUtlMemory<CPropData::propdata_breakablechunk_t> >::GrowVector(int)
 W CUtlVector<CPropData::propdata_breakablechunk_t, CUtlMemory<CPropData::propdata_breakablechunk_t> >::InsertBefore(int)
 W CUtlVector<CPropData::propdata_breakablechunk_t, CUtlMemory<CPropData::propdata_breakablechunk_t> >::RemoveAll()
 W CUtlVector<CPropData::propdata_breakablechunk_t, CUtlMemory<CPropData::propdata_breakablechunk_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CResponseSystem::ScriptEntry, CUtlMemory<CResponseSystem::ScriptEntry> >::GrowVector(int)
 W CUtlVector<CResponseSystem::ScriptEntry, CUtlMemory<CResponseSystem::ScriptEntry> >::InsertBefore(int, CResponseSystem::ScriptEntry const&)
 W CUtlVector<CResponseSystem::ScriptEntry, CUtlMemory<CResponseSystem::ScriptEntry> >::Remove(int)
 W CUtlVector<CResponseSystem::ScriptEntry, CUtlMemory<CResponseSystem::ScriptEntry> >::RemoveAll()
 W CUtlVector<CResponseSystem::ScriptEntry, CUtlMemory<CResponseSystem::ScriptEntry> >::ShiftElementsLeft(int, int)
 W CUtlVector<CResponseSystem::ScriptEntry, CUtlMemory<CResponseSystem::ScriptEntry> >::ShiftElementsRight(int, int)
 W CUtlVector<CSPVert, CUtlMemory<CSPVert> >::GrowVector(int)
 W CUtlVector<CSPVert, CUtlMemory<CSPVert> >::RemoveAll()
 W CUtlVector<CSPVert, CUtlMemory<CSPVert> >::SetCount(int)
 W CUtlVector<CSPVert, CUtlMemory<CSPVert> >::ShiftElementsRight(int, int)
 W CUtlVector<CSceneCache*, CUtlMemory<CSceneCache*> >::GrowVector(int)
 W CUtlVector<CSceneCache*, CUtlMemory<CSceneCache*> >::InsertBefore(int, CSceneCache* const&)
 W CUtlVector<CSceneCache*, CUtlMemory<CSceneCache*> >::RemoveAll()
 W CUtlVector<CSceneCache*, CUtlMemory<CSceneCache*> >::ShiftElementsRight(int, int)
 W CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo> >::GrowVector(int)
 W CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo> >::InsertBefore(int, CSceneEventInfo const&)
 W CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo> >::Remove(int)
 W CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo> >::RemoveAll()
 W CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo> >::ShiftElementsLeft(int, int)
 W CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo> >::ShiftElementsRight(int, int)
 W CUtlVector<CSceneManager::CRestoreSceneSound, CUtlMemory<CSceneManager::CRestoreSceneSound> >::GrowVector(int)
 W CUtlVector<CSceneManager::CRestoreSceneSound, CUtlMemory<CSceneManager::CRestoreSceneSound> >::InsertBefore(int, CSceneManager::CRestoreSceneSound const&)
 W CUtlVector<CSceneManager::CRestoreSceneSound, CUtlMemory<CSceneManager::CRestoreSceneSound> >::RemoveAll()
 W CUtlVector<CSceneManager::CRestoreSceneSound, CUtlMemory<CSceneManager::CRestoreSceneSound> >::ShiftElementsRight(int, int)
 W CUtlVector<CScratchPadGraph::CLineInfo, CUtlMemory<CScratchPadGraph::CLineInfo> >::GrowVector(int)
 W CUtlVector<CScratchPadGraph::CLineInfo, CUtlMemory<CScratchPadGraph::CLineInfo> >::InsertBefore(int, CScratchPadGraph::CLineInfo const&)
 W CUtlVector<CScratchPadGraph::CLineInfo, CUtlMemory<CScratchPadGraph::CLineInfo> >::RemoveAll()
 W CUtlVector<CScratchPadGraph::CLineInfo, CUtlMemory<CScratchPadGraph::CLineInfo> >::ShiftElementsRight(int, int)
 W CUtlVector<CSheetSimulator::Spring_t, CUtlMemory<CSheetSimulator::Spring_t> >::GrowVector(int)
 W CUtlVector<CSheetSimulator::Spring_t, CUtlMemory<CSheetSimulator::Spring_t> >::InsertBefore(int)
 W CUtlVector<CSheetSimulator::Spring_t, CUtlMemory<CSheetSimulator::Spring_t> >::RemoveAll()
 W CUtlVector<CSheetSimulator::Spring_t, CUtlMemory<CSheetSimulator::Spring_t> >::ShiftElementsRight(int, int)
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::FastRemove(int)
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::Find(CSoundPatch* const&) const
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::FindAndRemove(CSoundPatch* const&)
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::GrowVector(int)
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::InsertBefore(int, CSoundPatch* const&)
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::Remove(int)
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::RemoveAll()
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*> >::ShiftElementsRight(int, int)
 W CUtlVector<CStressEntityReg*, CUtlMemory<CStressEntityReg*> >::GrowVector(int)
 W CUtlVector<CStressEntityReg*, CUtlMemory<CStressEntityReg*> >::InsertBefore(int, CStressEntityReg* const&)
 W CUtlVector<CStressEntityReg*, CUtlMemory<CStressEntityReg*> >::RemoveAll()
 W CUtlVector<CStressEntityReg*, CUtlMemory<CStressEntityReg*> >::ShiftElementsRight(int, int)
 W CUtlVector<CTeam*, CUtlMemory<CTeam*> >::GrowVector(int)
 W CUtlVector<CTeam*, CUtlMemory<CTeam*> >::InsertBefore(int, CTeam* const&)
 W CUtlVector<CTeam*, CUtlMemory<CTeam*> >::RemoveAll()
 W CUtlVector<CTeam*, CUtlMemory<CTeam*> >::ShiftElementsRight(int, int)
 W CUtlVector<CTeamSpawnPoint*, CUtlMemory<CTeamSpawnPoint*> >::GrowVector(int)
 W CUtlVector<CTeamSpawnPoint*, CUtlMemory<CTeamSpawnPoint*> >::InsertBefore(int, CTeamSpawnPoint* const&)
 W CUtlVector<CTeamSpawnPoint*, CUtlMemory<CTeamSpawnPoint*> >::Remove(int)
 W CUtlVector<CTeamSpawnPoint*, CUtlMemory<CTeamSpawnPoint*> >::RemoveAll()
 W CUtlVector<CTeamSpawnPoint*, CUtlMemory<CTeamSpawnPoint*> >::ShiftElementsLeft(int, int)
 W CUtlVector<CTeamSpawnPoint*, CUtlMemory<CTeamSpawnPoint*> >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol> >::Find(CUtlSymbol const&) const
 W CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol> >::GrowVector(int)
 W CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol> >::InsertBefore(int, CUtlSymbol const&)
 W CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol> >::RemoveAll()
 W CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol> >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*> >::GrowVector(int)
 W CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*> >::InsertBefore(int, CUtlSymbolTable::StringPool_t* const&)
 W CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*> >::RemoveAll()
 W CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*> >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*, CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*> >::GrowVector(int)
 W CUtlVector<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*, CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*> >::InsertBefore(int, CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >* const&)
 W CUtlVector<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*, CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*> >::RemoveAll()
 W CUtlVector<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*, CUtlMemory<CUtlVector<BotSpeakable*, CUtlMemory<BotSpeakable*> >*> >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > > >::GrowVector(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > > >::RemoveAll()
 W CUtlVector<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > > >::SetCount(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CPositionWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CPositionWatcherList>::HashEntry> > > >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > > >::GrowVector(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > > >::RemoveAll()
 W CUtlVector<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > > >::SetCount(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry> > > >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > > >::GrowVector(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > > >::RemoveAll()
 W CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > > >::SetCount(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry> > > >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > > >::GrowVector(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > > >::RemoveAll()
 W CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > > >::SetCount(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry> > > >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > > >::GrowVector(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > > >::RemoveAll()
 W CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > > >::SetCount(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry> > > >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > > >::GrowVector(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > > >::RemoveAll()
 W CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > > >::SetCount(int)
 W CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry> > > >::ShiftElementsRight(int, int)
 W CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > > >::GrowVector(int)
 W CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > > >::RemoveAll()
 W CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > > >::SetCount(int)
 W CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> > > >::ShiftElementsRight(int, int)
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::Find(IEntityListener* const&) const
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::FindAndRemove(IEntityListener* const&)
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::GrowVector(int)
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::InsertBefore(int, IEntityListener* const&)
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::Remove(int)
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::RemoveAll()
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::ShiftElementsLeft(int, int)
 W CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*> >::ShiftElementsRight(int, int)
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::Find(IGameSystem* const&) const
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::FindAndRemove(IGameSystem* const&)
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::GrowVector(int)
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::InsertBefore(int, IGameSystem* const&)
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::Remove(int)
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::RemoveAll()
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::ShiftElementsLeft(int, int)
 W CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*> >::ShiftElementsRight(int, int)
 W CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*> >::Find(IHandleEntity* const&) const
 W CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*> >::GrowVector(int)
 W CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*> >::InsertBefore(int, IHandleEntity* const&)
 W CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*> >::RemoveAll()
 W CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*> >::SetCount(int)
 W CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*> >::ShiftElementsRight(int, int)
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::Find(ISaveRestoreBlockHandler* const&) const
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::FindAndRemove(ISaveRestoreBlockHandler* const&)
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::GrowVector(int)
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::InsertBefore(int, ISaveRestoreBlockHandler* const&)
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::Remove(int)
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::RemoveAll()
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::ShiftElementsLeft(int, int)
 W CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*> >::ShiftElementsRight(int, int)
 W CUtlVector<IServerNetworkable*, CUtlMemory<IServerNetworkable*> >::GrowVector(int)
 W CUtlVector<IServerNetworkable*, CUtlMemory<IServerNetworkable*> >::InsertBefore(int, IServerNetworkable* const&)
 W CUtlVector<IServerNetworkable*, CUtlMemory<IServerNetworkable*> >::RemoveAll()
 W CUtlVector<IServerNetworkable*, CUtlMemory<IServerNetworkable*> >::ShiftElementsRight(int, int)
 W CUtlVector<ISoundEmitterSystemBase::SoundFile, CUtlMemory<ISoundEmitterSystemBase::SoundFile> >::GrowVector(int)
 W CUtlVector<ISoundEmitterSystemBase::SoundFile, CUtlMemory<ISoundEmitterSystemBase::SoundFile> >::InsertBefore(int, ISoundEmitterSystemBase::SoundFile const&)
 W CUtlVector<ISoundEmitterSystemBase::SoundFile, CUtlMemory<ISoundEmitterSystemBase::SoundFile> >::RemoveAll()
 W CUtlVector<ISoundEmitterSystemBase::SoundFile, CUtlMemory<ISoundEmitterSystemBase::SoundFile> >::ShiftElementsRight(int, int)
 W CUtlVector<KeyValues*, CUtlMemory<KeyValues*> >::GrowVector(int)
 W CUtlVector<KeyValues*, CUtlMemory<KeyValues*> >::InsertBefore(int, KeyValues* const&)
 W CUtlVector<KeyValues*, CUtlMemory<KeyValues*> >::RemoveAll()
 W CUtlVector<KeyValues*, CUtlMemory<KeyValues*> >::ShiftElementsRight(int, int)
 W CUtlVector<NPCInterjection, CUtlMemory<NPCInterjection> >::GrowVector(int)
 W CUtlVector<NPCInterjection, CUtlMemory<NPCInterjection> >::InsertBefore(int, NPCInterjection const&)
 W CUtlVector<NPCInterjection, CUtlMemory<NPCInterjection> >::RemoveAll()
 W CUtlVector<NPCInterjection, CUtlMemory<NPCInterjection> >::ShiftElementsRight(int, int)
 W CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >::FastRemove(int)
 W CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >::GrowVector(int)
 W CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >::InsertBefore(int)
 W CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >::RemoveAll()
 W CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >::SetCount(int)
 W CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >::ShiftElementsRight(int, int)
 W CUtlVector<Response, CUtlMemory<Response> >::GrowVector(int)
 W CUtlVector<Response, CUtlMemory<Response> >::InsertBefore(int, Response const&)
 W CUtlVector<Response, CUtlMemory<Response> >::RemoveAll()
 W CUtlVector<Response, CUtlMemory<Response> >::ShiftElementsRight(int, int)
 W CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >::GrowVector(int)
 W CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >::InsertBefore(int, ResponseContext_t const&)
 W CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >::Remove(int)
 W CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >::RemoveAll()
 W CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >::SetCount(int)
 W CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >::ShiftElementsLeft(int, int)
 W CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >::ShiftElementsRight(int, int)
 W CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >::GrowVector(int)
 W CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >::RemoveAll()
 W CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >::SetCount(int)
 W CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >::ShiftElementsRight(int, int)
 W CUtlVector<SoundCommand_t*, CUtlMemory<SoundCommand_t*> >::FastRemove(int)
 W CUtlVector<SoundCommand_t*, CUtlMemory<SoundCommand_t*> >::GrowVector(int)
 W CUtlVector<SoundCommand_t*, CUtlMemory<SoundCommand_t*> >::InsertBefore(int)
 W CUtlVector<SoundCommand_t*, CUtlMemory<SoundCommand_t*> >::RemoveAll()
 W CUtlVector<SoundCommand_t*, CUtlMemory<SoundCommand_t*> >::ShiftElementsRight(int, int)
 W CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t> >::GrowVector(int)
 W CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t> >::InsertBefore(int, TeleportListEntry_t const&)
 W CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t> >::RemoveAll()
 W CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t> >::ShiftElementsRight(int, int)
 W CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*> >::GrowVector(int)
 W CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*> >::InsertBefore(int, TemplateEntityData_t* const&)
 W CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*> >::RemoveAll()
 W CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*> >::ShiftElementsRight(int, int)
 W CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >::FastRemove(int)
 W CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >::GrowVector(int)
 W CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >::InsertBefore(int)
 W CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >::RemoveAll()
 W CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >::SetCount(int)
 W CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >::ShiftElementsRight(int, int)
 W CUtlVector<Vector, CUtlMemory<Vector> >::GrowVector(int)
 W CUtlVector<Vector, CUtlMemory<Vector> >::InsertBefore(int, Vector const&)
 W CUtlVector<Vector, CUtlMemory<Vector> >::RemoveAll()
 W CUtlVector<Vector, CUtlMemory<Vector> >::ShiftElementsRight(int, int)
 W CUtlVector<activitylist_t, CUtlMemory<activitylist_t> >::GrowVector(int)
 W CUtlVector<activitylist_t, CUtlMemory<activitylist_t> >::InsertBefore(int)
 W CUtlVector<activitylist_t, CUtlMemory<activitylist_t> >::RemoveAll()
 W CUtlVector<activitylist_t, CUtlMemory<activitylist_t> >::ShiftElementsRight(int, int)
 W CUtlVector<bool (*)(), CUtlMemory<bool (*)()> >::RemoveAll()
 W CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t> >::GrowVector(int)
 W CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t> >::InsertBefore(int)
 W CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t> >::RemoveAll()
 W CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t> >::ShiftElementsRight(int, int)
 W CUtlVector<char const*, CUtlMemory<char const*> >::GrowVector(int)
 W CUtlVector<char const*, CUtlMemory<char const*> >::InsertBefore(int, char const* const&)
 W CUtlVector<char const*, CUtlMemory<char const*> >::RemoveAll()
 W CUtlVector<char const*, CUtlMemory<char const*> >::ShiftElementsRight(int, int)
 W CUtlVector<char const*, CUtlMemory<char const*> >::Sort(int (*)(char const* const*, char const* const*))
 W CUtlVector<char*, CUtlMemory<char*> >::GrowVector(int)
 W CUtlVector<char*, CUtlMemory<char*> >::InsertBefore(int, char* const&)
 W CUtlVector<char*, CUtlMemory<char*> >::RemoveAll()
 W CUtlVector<char*, CUtlMemory<char*> >::ShiftElementsRight(int, int)
 W CUtlVector<collidelist_t, CUtlMemory<collidelist_t> >::GrowVector(int)
 W CUtlVector<collidelist_t, CUtlMemory<collidelist_t> >::InsertBefore(int, collidelist_t const&)
 W CUtlVector<collidelist_t, CUtlMemory<collidelist_t> >::RemoveAll()
 W CUtlVector<collidelist_t, CUtlMemory<collidelist_t> >::ShiftElementsRight(int, int)
 W CUtlVector<constraint_anchor_t, CUtlMemory<constraint_anchor_t> >::GrowVector(int)
 W CUtlVector<constraint_anchor_t, CUtlMemory<constraint_anchor_t> >::InsertBefore(int)
 W CUtlVector<constraint_anchor_t, CUtlMemory<constraint_anchor_t> >::RemoveAll()
 W CUtlVector<constraint_anchor_t, CUtlMemory<constraint_anchor_t> >::ShiftElementsRight(int, int)
 W CUtlVector<damageevent_t, CUtlMemory<damageevent_t> >::GrowVector(int)
 W CUtlVector<damageevent_t, CUtlMemory<damageevent_t> >::InsertBefore(int)
 W CUtlVector<damageevent_t, CUtlMemory<damageevent_t> >::RemoveAll()
 W CUtlVector<damageevent_t, CUtlMemory<damageevent_t> >::ShiftElementsRight(int, int)
 W CUtlVector<entitynotify_t, CUtlMemory<entitynotify_t> >::FastRemove(int)
 W CUtlVector<entitynotify_t, CUtlMemory<entitynotify_t> >::GrowVector(int)
 W CUtlVector<entitynotify_t, CUtlMemory<entitynotify_t> >::InsertBefore(int)
 W CUtlVector<entitynotify_t, CUtlMemory<entitynotify_t> >::RemoveAll()
 W CUtlVector<entitynotify_t, CUtlMemory<entitynotify_t> >::ShiftElementsRight(int, int)
 W CUtlVector<eventlist_t, CUtlMemory<eventlist_t> >::GrowVector(int)
 W CUtlVector<eventlist_t, CUtlMemory<eventlist_t> >::InsertBefore(int)
 W CUtlVector<eventlist_t, CUtlMemory<eventlist_t> >::RemoveAll()
 W CUtlVector<eventlist_t, CUtlMemory<eventlist_t> >::ShiftElementsRight(int, int)
 W CUtlVector<float, CUtlMemory<float> >::GrowVector(int)
 W CUtlVector<float, CUtlMemory<float> >::RemoveAll()
 W CUtlVector<float, CUtlMemory<float> >::SetCount(int)
 W CUtlVector<float, CUtlMemory<float> >::ShiftElementsRight(int, int)
 W CUtlVector<fluidevent_t, CUtlMemory<fluidevent_t> >::FastRemove(int)
 W CUtlVector<fluidevent_t, CUtlMemory<fluidevent_t> >::GrowVector(int)
 W CUtlVector<fluidevent_t, CUtlMemory<fluidevent_t> >::InsertBefore(int)
 W CUtlVector<fluidevent_t, CUtlMemory<fluidevent_t> >::RemoveAll()
 W CUtlVector<fluidevent_t, CUtlMemory<fluidevent_t> >::ShiftElementsRight(int, int)
 W CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >::GrowVector(int)
 W CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >::InsertBefore(int, globalentity_t const&)
 W CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >::RemoveAll()
 W CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >::SetCount(int)
 W CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >::ShiftElementsRight(int, int)
 W CUtlVector<grouptemplate_t, CUtlMemory<grouptemplate_t> >::GrowVector(int)
 W CUtlVector<grouptemplate_t, CUtlMemory<grouptemplate_t> >::InsertBefore(int, grouptemplate_t const&)
 W CUtlVector<grouptemplate_t, CUtlMemory<grouptemplate_t> >::RemoveAll()
 W CUtlVector<grouptemplate_t, CUtlMemory<grouptemplate_t> >::ShiftElementsRight(int, int)
 W CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >::CopyArray(ikcontextikrule_t const*, int)
 W CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >::GrowVector(int)
 W CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >::InsertBefore(int)
 W CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >::RemoveAll()
 W CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >::SetCount(int)
 W CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t> >::ShiftElementsRight(int, int)
 W CUtlVector<impulseevent_t, CUtlMemory<impulseevent_t> >::GrowVector(int)
 W CUtlVector<impulseevent_t, CUtlMemory<impulseevent_t> >::InsertBefore(int)
 W CUtlVector<impulseevent_t, CUtlMemory<impulseevent_t> >::RemoveAll()
 W CUtlVector<impulseevent_t, CUtlMemory<impulseevent_t> >::ShiftElementsRight(int, int)
 W CUtlVector<inflictorstate_t, CUtlMemory<inflictorstate_t> >::GrowVector(int)
 W CUtlVector<inflictorstate_t, CUtlMemory<inflictorstate_t> >::InsertBefore(int)
 W CUtlVector<inflictorstate_t, CUtlMemory<inflictorstate_t> >::RemoveAll()
 W CUtlVector<inflictorstate_t, CUtlMemory<inflictorstate_t> >::ShiftElementsRight(int, int)
 W CUtlVector<int, CUtlMemory<int> >::EnsureCapacity(int)
 W CUtlVector<int, CUtlMemory<int> >::Find(int const&) const
 W CUtlVector<int, CUtlMemory<int> >::FindAndRemove(int const&)
 W CUtlVector<int, CUtlMemory<int> >::GrowVector(int)
 W CUtlVector<int, CUtlMemory<int> >::InsertBefore(int, int const&)
 W CUtlVector<int, CUtlMemory<int> >::Remove(int)
 W CUtlVector<int, CUtlMemory<int> >::RemoveAll()
 W CUtlVector<int, CUtlMemory<int> >::SetCount(int)
 W CUtlVector<int, CUtlMemory<int> >::ShiftElementsLeft(int, int)
 W CUtlVector<int, CUtlMemory<int> >::ShiftElementsRight(int, int)
 W CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >::GrowVector(int)
 W CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >::InsertBefore(int, magnetted_objects_t const&)
 W CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >::Remove(int)
 W CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >::RemoveAll()
 W CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >::SetCount(int)
 W CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >::ShiftElementsLeft(int, int)
 W CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >::ShiftElementsRight(int, int)
 W CUtlVector<masscenteroverride_t, CUtlMemory<masscenteroverride_t> >::FastRemove(int)
 W CUtlVector<masscenteroverride_t, CUtlMemory<masscenteroverride_t> >::GrowVector(int)
 W CUtlVector<masscenteroverride_t, CUtlMemory<masscenteroverride_t> >::InsertBefore(int, masscenteroverride_t const&)
 W CUtlVector<masscenteroverride_t, CUtlMemory<masscenteroverride_t> >::RemoveAll()
 W CUtlVector<masscenteroverride_t, CUtlMemory<masscenteroverride_t> >::ShiftElementsRight(int, int)
 W CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*> >::GrowVector(int)
 W CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*> >::InsertBefore(int, memhandle_t__* const&)
 W CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*> >::ShiftElementsRight(int, int)
 W CUtlVector<penetrateevent_t, CUtlMemory<penetrateevent_t> >::FastRemove(int)
 W CUtlVector<penetrateevent_t, CUtlMemory<penetrateevent_t> >::GrowVector(int)
 W CUtlVector<penetrateevent_t, CUtlMemory<penetrateevent_t> >::InsertBefore(int)
 W CUtlVector<penetrateevent_t, CUtlMemory<penetrateevent_t> >::RemoveAll()
 W CUtlVector<penetrateevent_t, CUtlMemory<penetrateevent_t> >::ShiftElementsRight(int, int)
 W CUtlVector<physfollower_t, CUtlMemory<physfollower_t> >::EnsureCount(int)
 W CUtlVector<physfollower_t, CUtlMemory<physfollower_t> >::GrowVector(int)
 W CUtlVector<physfollower_t, CUtlMemory<physfollower_t> >::InsertBefore(int)
 W CUtlVector<physfollower_t, CUtlMemory<physfollower_t> >::RemoveAll()
 W CUtlVector<physfollower_t, CUtlMemory<physfollower_t> >::ShiftElementsRight(int, int)
 W CUtlVector<physicssound::impactsound_t, CUtlMemory<physicssound::impactsound_t> >::GrowVector(int)
 W CUtlVector<physicssound::impactsound_t, CUtlMemory<physicssound::impactsound_t> >::InsertBefore(int)
 W CUtlVector<physicssound::impactsound_t, CUtlMemory<physicssound::impactsound_t> >::RemoveAll()
 W CUtlVector<physicssound::impactsound_t, CUtlMemory<physicssound::impactsound_t> >::ShiftElementsRight(int, int)
 W CUtlVector<string_t, CUtlMemory<string_t> >::GrowVector(int)
 W CUtlVector<string_t, CUtlMemory<string_t> >::InsertBefore(int, string_t const&)
 W CUtlVector<string_t, CUtlMemory<string_t> >::RemoveAll()
 W CUtlVector<string_t, CUtlMemory<string_t> >::ShiftElementsRight(int, int)
 W CUtlVector<template_t, CUtlMemory<template_t> >::GrowVector(int)
 W CUtlVector<template_t, CUtlMemory<template_t> >::InsertBefore(int, template_t const&)
 W CUtlVector<template_t, CUtlMemory<template_t> >::RemoveAll()
 W CUtlVector<template_t, CUtlMemory<template_t> >::SetCount(int)
 W CUtlVector<template_t, CUtlMemory<template_t> >::ShiftElementsRight(int, int)
 W CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >::GrowVector(int)
 W CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >::InsertBefore(int, thinkfunc_t const&)
 W CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >::RemoveAll()
 W CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >::SetCount(int)
 W CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >::ShiftElementsRight(int, int)
 W CUtlVector<touchevent_t, CUtlMemory<touchevent_t> >::GrowVector(int)
 W CUtlVector<touchevent_t, CUtlMemory<touchevent_t> >::InsertBefore(int)
 W CUtlVector<touchevent_t, CUtlMemory<touchevent_t> >::RemoveAll()
 W CUtlVector<touchevent_t, CUtlMemory<touchevent_t> >::ShiftElementsRight(int, int)
 W CUtlVector<unsigned int, CUtlMemory<unsigned int> >::Find(unsigned int const&) const
 W CUtlVector<unsigned int, CUtlMemory<unsigned int> >::GrowVector(int)
 W CUtlVector<unsigned int, CUtlMemory<unsigned int> >::HasElement(unsigned int const&) const
 W CUtlVector<unsigned int, CUtlMemory<unsigned int> >::InsertBefore(int, unsigned int const&)
 W CUtlVector<unsigned int, CUtlMemory<unsigned int> >::RemoveAll()
 W CUtlVector<unsigned int, CUtlMemory<unsigned int> >::ShiftElementsRight(int, int)
 W CUtlVector<unsigned short, CUtlMemory<unsigned short> >::FastRemove(int)
 W CUtlVector<unsigned short, CUtlMemory<unsigned short> >::GrowVector(int)
 W CUtlVector<unsigned short, CUtlMemory<unsigned short> >::InsertBefore(int, unsigned short const&)
 W CUtlVector<unsigned short, CUtlMemory<unsigned short> >::RemoveAll()
 W CUtlVector<unsigned short, CUtlMemory<unsigned short> >::SetCount(int)
 W CUtlVector<unsigned short, CUtlMemory<unsigned short> >::ShiftElementsRight(int, int)
 W CUtlVector<unsigned short, CUtlMemory<unsigned short> >::Sort(int (*)(unsigned short const*, unsigned short const*))
 W CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >::GrowVector(int)
 W CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >::InsertBefore(int)
 W CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >::RemoveAll()
 W CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >::SetCount(int)
 W CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >::ShiftElementsRight(int, int)
 W CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >::GrowVector(int)
 W CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >::InsertBefore(int)
 W CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >::RemoveAll()
 W CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >::SetCount(int)
 W CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >::ShiftElementsRight(int, int)
 W CUtlVector<velocityevent_t, CUtlMemory<velocityevent_t> >::GrowVector(int)
 W CUtlVector<velocityevent_t, CUtlMemory<velocityevent_t> >::InsertBefore(int)
 W CUtlVector<velocityevent_t, CUtlMemory<velocityevent_t> >::RemoveAll()
 W CUtlVector<velocityevent_t, CUtlMemory<velocityevent_t> >::ShiftElementsRight(int, int)
 W CUtlVector<virtualgeneric_t, CUtlMemory<virtualgeneric_t> >::GrowVector(int)
 W CUtlVector<virtualgeneric_t, CUtlMemory<virtualgeneric_t> >::InsertBefore(int, virtualgeneric_t const&)
 W CUtlVector<virtualgeneric_t, CUtlMemory<virtualgeneric_t> >::ShiftElementsRight(int, int)
 W CUtlVector<virtualgroup_t, CUtlMemory<virtualgroup_t> >::GrowVector(int)
 W CUtlVector<virtualgroup_t, CUtlMemory<virtualgroup_t> >::InsertBefore(int)
 W CUtlVector<virtualgroup_t, CUtlMemory<virtualgroup_t> >::ShiftElementsRight(int, int)
 W CUtlVector<virtualsequence_t, CUtlMemory<virtualsequence_t> >::GrowVector(int)
 W CUtlVector<virtualsequence_t, CUtlMemory<virtualsequence_t> >::InsertBefore(int, virtualsequence_t const&)
 W CUtlVector<virtualsequence_t, CUtlMemory<virtualsequence_t> >::ShiftElementsRight(int, int)
 W CUtlVector<void (*)(bf_read&), CUtlMemory<void (*)(bf_read&)> >::RemoveAll()
 W CUtlVectorDataOps<CAI_InterestTarget, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CAI_InterestTarget, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CAI_InterestTarget, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CAI_InterestTarget, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >, 12>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >, 12>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >, 12>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >, 12>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC> > >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity> > >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex> > >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer> > >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity> > >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen> > >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int> >, 5>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int> >, 5>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int> >, 5>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int> >, 5>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CVGuiScreen* _CreateEntityTemplate<CVGuiScreen>(CVGuiScreen*, char const*)
 W CVGuiScreen::~CVGuiScreen()
 W CVariantSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 W CVariantSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 W CVariantSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 W CVariantSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 W CVoiceGameMgrHelper::CanPlayerHearPlayer(CBasePlayer*, CBasePlayer*)
 W CVoiceGameMgrHelper::~CVoiceGameMgrHelper()
 W CWaterBullet* _CreateEntityTemplate<CWaterBullet>(CWaterBullet*, char const*)
 W CWaterBullet::~CWaterBullet()
 W CWaterLODControl* _CreateEntityTemplate<CWaterLODControl>(CWaterLODControl*, char const*)
 W CWaterLODControl::ObjectCaps()
 W CWaterLODControl::~CWaterLODControl()
 W CWaterTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 W CWeaponAWP* _CreateEntityTemplate<CWeaponAWP>(CWeaponAWP*, char const*)
 W CWeaponAWP::GetWeaponID() const
 W CWeaponAWP::~CWeaponAWP()
 W CWeaponAug* _CreateEntityTemplate<CWeaponAug>(CWeaponAug*, char const*)
 W CWeaponAug::GetWeaponID() const
 W CWeaponAug::~CWeaponAug()
 W CWeaponCSBase* _CreateEntityTemplate<CWeaponCSBase>(CWeaponCSBase*, char const*)
 W CWeaponCSBase::GetWeaponID() const
 W CWeaponCSBase::IsSilenced() const
 W CWeaponCSBase::~CWeaponCSBase()
 W CWeaponCSBaseGun* _CreateEntityTemplate<CWeaponCSBaseGun>(CWeaponCSBaseGun*, char const*)
 W CWeaponCSBaseGun::~CWeaponCSBaseGun()
 W CWeaponCubemap* _CreateEntityTemplate<CWeaponCubemap>(CWeaponCubemap*, char const*)
 W CWeaponCubemap::HasAnyAmmo()
 W CWeaponCubemap::~CWeaponCubemap()
 W CWeaponCycler* _CreateEntityTemplate<CWeaponCycler>(CWeaponCycler*, char const*)
 W CWeaponCycler::~CWeaponCycler()
 W CWeaponElite* _CreateEntityTemplate<CWeaponElite>(CWeaponElite*, char const*)
 W CWeaponElite::GetWeaponID() const
 W CWeaponElite::~CWeaponElite()
 W CWeaponFamas* _CreateEntityTemplate<CWeaponFamas>(CWeaponFamas*, char const*)
 W CWeaponFamas::GetWeaponID() const
 W CWeaponFamas::~CWeaponFamas()
 W CWeaponFiveSeven* _CreateEntityTemplate<CWeaponFiveSeven>(CWeaponFiveSeven*, char const*)
 W CWeaponFiveSeven::GetWeaponID() const
 W CWeaponFiveSeven::~CWeaponFiveSeven()
 W CWeaponG3SG1* _CreateEntityTemplate<CWeaponG3SG1>(CWeaponG3SG1*, char const*)
 W CWeaponG3SG1::GetWeaponID() const
 W CWeaponG3SG1::~CWeaponG3SG1()
 W CWeaponGalil* _CreateEntityTemplate<CWeaponGalil>(CWeaponGalil*, char const*)
 W CWeaponGalil::GetWeaponID() const
 W CWeaponGalil::~CWeaponGalil()
 W CWeaponGlock* _CreateEntityTemplate<CWeaponGlock>(CWeaponGlock*, char const*)
 W CWeaponGlock::GetWeaponID() const
 W CWeaponGlock::~CWeaponGlock()
 W CWeaponList::LevelShutdownPostEntity()
 W CWeaponList::~CWeaponList()
 W CWeaponM249* _CreateEntityTemplate<CWeaponM249>(CWeaponM249*, char const*)
 W CWeaponM249::GetWeaponID() const
 W CWeaponM249::~CWeaponM249()
 W CWeaponM3* _CreateEntityTemplate<CWeaponM3>(CWeaponM3*, char const*)
 W CWeaponM3::GetWeaponID() const
 W CWeaponM3::~CWeaponM3()
 W CWeaponM4A1* _CreateEntityTemplate<CWeaponM4A1>(CWeaponM4A1*, char const*)
 W CWeaponM4A1::GetWeaponID() const
 W CWeaponM4A1::IsSilenced() const
 W CWeaponM4A1::~CWeaponM4A1()
 W CWeaponMAC10* _CreateEntityTemplate<CWeaponMAC10>(CWeaponMAC10*, char const*)
 W CWeaponMAC10::GetWeaponID() const
 W CWeaponMAC10::~CWeaponMAC10()
 W CWeaponMP5Navy* _CreateEntityTemplate<CWeaponMP5Navy>(CWeaponMP5Navy*, char const*)
 W CWeaponMP5Navy::GetWeaponID() const
 W CWeaponMP5Navy::~CWeaponMP5Navy()
 W CWeaponP228* _CreateEntityTemplate<CWeaponP228>(CWeaponP228*, char const*)
 W CWeaponP228::GetWeaponID() const
 W CWeaponP228::~CWeaponP228()
 W CWeaponP90* _CreateEntityTemplate<CWeaponP90>(CWeaponP90*, char const*)
 W CWeaponP90::GetWeaponID() const
 W CWeaponP90::~CWeaponP90()
 W CWeaponSG550* _CreateEntityTemplate<CWeaponSG550>(CWeaponSG550*, char const*)
 W CWeaponSG550::GetWeaponID() const
 W CWeaponSG550::~CWeaponSG550()
 W CWeaponSG552* _CreateEntityTemplate<CWeaponSG552>(CWeaponSG552*, char const*)
 W CWeaponSG552::GetWeaponID() const
 W CWeaponSG552::~CWeaponSG552()
 W CWeaponScout* _CreateEntityTemplate<CWeaponScout>(CWeaponScout*, char const*)
 W CWeaponScout::GetWeaponID() const
 W CWeaponScout::~CWeaponScout()
 W CWeaponTMP* _CreateEntityTemplate<CWeaponTMP>(CWeaponTMP*, char const*)
 W CWeaponTMP::GetWeaponID() const
 W CWeaponTMP::~CWeaponTMP()
 W CWeaponUMP45* _CreateEntityTemplate<CWeaponUMP45>(CWeaponUMP45*, char const*)
 W CWeaponUMP45::GetWeaponID() const
 W CWeaponUMP45::~CWeaponUMP45()
 W CWeaponUSP* _CreateEntityTemplate<CWeaponUSP>(CWeaponUSP*, char const*)
 W CWeaponUSP::GetWeaponID() const
 W CWeaponUSP::IsSilenced() const
 W CWeaponUSP::~CWeaponUSP()
 W CWeaponXM1014* _CreateEntityTemplate<CWeaponXM1014>(CWeaponXM1014*, char const*)
 W CWeaponXM1014::GetWeaponID() const
 W CWeaponXM1014::~CWeaponXM1014()
 W CWindowPane* _CreateEntityTemplate<CWindowPane>(CWindowPane*, char const*)
 W CWindowPane::~CWindowPane()
 W CWorld* _CreateEntityTemplate<CWorld>(CWorld*, char const*)
 W CWorld::RequiredEdictIndex()
 W CWorld::VPhysicsCollision(int, gamevcollisionevent_t*)
 W CWorld::VPhysicsFriction(IPhysicsObject*, float, int, int)
 W CWorldItem* _CreateEntityTemplate<CWorldItem>(CWorldItem*, char const*)
 W CWorldItem::~CWorldItem()
 W CWreckage* _CreateEntityTemplate<CWreckage>(CWreckage*, char const*)
 W CWreckage::~CWreckage()
 W CaselessStringLessThan(char const* const&, char const* const&)
 W DebugConnectMsg(int, int, char const*, ...)
 W DefuseBombState::GetName() const
 W EntityParticleTrailInfo_t::NetworkStateChanged()
 W EscapeFromBombState::GetName() const
 W FetchBombState::GetName() const
 W FilterDamageType* _CreateEntityTemplate<FilterDamageType>(FilterDamageType*, char const*)
 W FilterDamageType::PassesDamageFilterImpl(CTakeDamageInfo const&)
 W FilterDamageType::PassesFilterImpl(CBaseEntity*)
 W FilterDamageType::~FilterDamageType()
 W FilterTeam* _CreateEntityTemplate<FilterTeam>(FilterTeam*, char const*)
 W FilterTeam::PassesFilterImpl(CBaseEntity*)
 W FilterTeam::~FilterTeam()
 W FollowState::GetName() const
 W HideState::GetName() const
 W HidingSpot::~HidingSpot()
 W HuntState::GetName() const
 W IEffects::~IEffects()
 W IEntityDataInstantiator::~IEntityDataInstantiator()
 W IEntityListener::OnEntityCreated(CBaseEntity*)
 W IEntityListener::OnEntityDeleted(CBaseEntity*)
 W IEntityListener::OnEntitySpawned(CBaseEntity*)
 W IGameEventListener2::~IGameEventListener2()
 W IGameMovement::~IGameMovement()
 W IHLTVDirector::~IHLTVDirector()
 W IHandleEntity::~IHandleEntity()
 W IMoveHelper::~IMoveHelper()
 W IMoveHelperServer::~IMoveHelperServer()
 W IPhysicsCollisionEvent::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
 W IPhysicsCollisionEvent::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
 W IPredictionSystem::~IPredictionSystem()
 W IRecipientFilter::~IRecipientFilter()
 W IRestore::~IRestore()
 W ISave::~ISave()
 W ISaveRestoreOps* GetBitstringDataOps<CFixedBitString<32> >(CFixedBitString<32>*)
 W IServerEntity::~IServerEntity()
 W IServerGameEnts::~IServerGameEnts()
 W IServerNetworkable::~IServerNetworkable()
 W IServerUnknown::~IServerUnknown()
 W ITempEntsSystem::~ITempEntsSystem()
 W IVoiceGameMgrHelper::~IVoiceGameMgrHelper()
 W IdleState::GetName() const
 W InvestigateNoiseState::GetName() const
 W MoveToState::GetName() const
 W MovieExplosion* _CreateEntityTemplate<MovieExplosion>(MovieExplosion*, char const*)
 W MovieExplosion::~MovieExplosion()
 W OpenDoorState::GetName() const
 W ParticleSmokeGrenade* _CreateEntityTemplate<ParticleSmokeGrenade>(ParticleSmokeGrenade*, char const*)
 W ParticleSmokeGrenade::~ParticleSmokeGrenade()
 W PlantBombState::GetName() const
 W SinCos(float, float*, float*)
 W UseEntityState::GetName() const
 W UtlVectorTemplate<CAnimationLayer, CUtlMemory<CAnimationLayer> >::EnsureCapacity(void*, int, int)
 W _SSE_RSqrtAccurate(float)
 W _SSE_RSqrtFast(float)
 W __cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const
 W audioparams_t::NetworkStateChanged()
 W bf_write::WriteUBitLong(unsigned int, int, bool)
 W bool ForEachHostage<FarthestHostage>(FarthestHostage&)
 W bool ForEachPlayer<CheckLookAt>(CheckLookAt&)
 W bool ForEachPlayer<DrawTravelTime>(DrawTravelTime&)
 W bool ForEachPlayer<FOVClearOfFriends>(FOVClearOfFriends&)
 W bool ForEachPlayer<IsLadderFreeFunctor>(IsLadderFreeFunctor&)
 W bool ForEachPlayer<SetHumanTeamFunctor>(SetHumanTeamFunctor&)
 W bool NavAreaBuildPath<ApproachAreaCost>(CNavArea*, CNavArea*, Vector const*, ApproachAreaCost&, CNavArea**)
 W bool NavAreaBuildPath<HostagePathCost>(CNavArea*, CNavArea*, Vector const*, HostagePathCost&, CNavArea**)
 W bool NavAreaBuildPath<PathCost>(CNavArea*, CNavArea*, Vector const*, PathCost&, CNavArea**)
 W bool NavAreaBuildPath<ShortestPathCost>(CNavArea*, CNavArea*, Vector const*, ShortestPathCost&, CNavArea**)
 W bool __gnu_cxx::operator==<char const*, std::string>(__gnu_cxx::__normal_iterator<char const*, std::string> const&, __gnu_cxx::__normal_iterator<char const*, std::string> const&)
 W bool __gnu_cxx::operator==<char*, std::string>(__gnu_cxx::__normal_iterator<char*, std::string> const&, __gnu_cxx::__normal_iterator<char*, std::string> const&)
 W char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)
 W char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)
 W char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)
 W flexsetting_t::psetting(unsigned char*, int, flexweight_t**) const
 W flexsettinghdr_t::pTranslatedSetting(int) const
 W float NavAreaTravelDistance<PathCost>(CNavArea*, CNavArea*, PathCost&)
 W float NavAreaTravelDistance<ShortestPathCost>(CNavArea*, CNavArea*, ShortestPathCost&)
 W float NavAreaTravelDistance<ShortestPathCost>(Vector const&, Vector const&, ShortestPathCost&)
 W fogparams_t::NetworkStateChanged()
 W non-virtual thunk to CAI_BaseHumanoid::OnMoveBlocked(AIMoveResult_t*)
 W non-virtual thunk to CAI_BaseNPC::CalcYawSpeed()
 W non-virtual thunk to CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W non-virtual thunk to CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W non-virtual thunk to CAI_BasePhysicsFlyingBot::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_BestEnemy()
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GatherConditions()
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetDefaultNavGoalTolerance()
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetReasonableFacingDist()
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsInterruptable()
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_NPC_TranslateActivity(Activity)
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_SelectSchedule()
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldPlayerAvoid()
 W non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_TranslateSchedule(int)
 W non-virtual thunk to CAI_Expresser::IsValidResponse(ResponseType_t, char const*)
 W non-virtual thunk to CAI_GoalEntity::OnEntityCreated(CBaseEntity*)
 W non-virtual thunk to CAI_GoalEntity::OnEntityDeleted(CBaseEntity*)
 W non-virtual thunk to CAI_LeadGoal::GetConceptModifiers(char const*)
 W non-virtual thunk to CAI_LeadGoal::OnEvent(int)
 W non-virtual thunk to CAI_LeadGoal_Weapon::GetConceptModifiers(char const*)
 W non-virtual thunk to CAI_Navigator::CalcYawSpeed()
 W non-virtual thunk to CAI_Navigator::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W non-virtual thunk to CAI_Navigator::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W non-virtual thunk to CAI_Navigator::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W non-virtual thunk to CAI_Navigator::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W non-virtual thunk to CAI_Navigator::OnMoveBlocked(AIMoveResult_t*)
 W non-virtual thunk to CAI_Navigator::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 W non-virtual thunk to CAI_Navigator::OnMoveStalled(AILocalMoveGoal_t const&)
 W non-virtual thunk to CAI_Navigator::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 W non-virtual thunk to CAI_PlayerAlly::OnSpokeConcept(char const*)
 W non-virtual thunk to CAI_PlayerAlly::OnStartSpeaking()
 W non-virtual thunk to CAI_SpeechFilter::OnEntityCreated(CBaseEntity*)
 W non-virtual thunk to CAI_SpeechFilter::OnEntityDeleted(CBaseEntity*)
 W non-virtual thunk to CBreakable::GetBasePropData()
 W non-virtual thunk to CBreakable::GetBreakableCount()
 W non-virtual thunk to CBreakable::GetBreakableModel()
 W non-virtual thunk to CBreakable::GetBreakableSkin()
 W non-virtual thunk to CBreakable::GetDmgModBullet()
 W non-virtual thunk to CBreakable::GetDmgModClub()
 W non-virtual thunk to CBreakable::GetDmgModExplosive()
 W non-virtual thunk to CBreakable::GetExplosiveDamage()
 W non-virtual thunk to CBreakable::GetExplosiveRadius()
 W non-virtual thunk to CBreakable::GetMaxBreakableSize()
 W non-virtual thunk to CBreakable::GetMultiplayerBreakMode() const
 W non-virtual thunk to CBreakable::GetPhysicsDamageTable()
 W non-virtual thunk to CBreakable::GetPhysicsMode()
 W non-virtual thunk to CBreakable::HasInteraction(propdata_interactions_t)
 W non-virtual thunk to CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CBreakable::SetBasePropData(string_t)
 W non-virtual thunk to CBreakable::SetBreakableCount(int)
 W non-virtual thunk to CBreakable::SetBreakableModel(string_t)
 W non-virtual thunk to CBreakable::SetBreakableSkin(int)
 W non-virtual thunk to CBreakable::SetDmgModBullet(float)
 W non-virtual thunk to CBreakable::SetDmgModClub(float)
 W non-virtual thunk to CBreakable::SetDmgModExplosive(float)
 W non-virtual thunk to CBreakable::SetExplosiveDamage(float)
 W non-virtual thunk to CBreakable::SetExplosiveRadius(float)
 W non-virtual thunk to CBreakable::SetInteraction(propdata_interactions_t)
 W non-virtual thunk to CBreakable::SetMaxBreakableSize(int)
 W non-virtual thunk to CBreakable::SetMultiplayerBreakMode(mp_break_t)
 W non-virtual thunk to CBreakable::SetPhysicsDamageTable(string_t)
 W non-virtual thunk to CBreakable::SetPhysicsMode(int)
 W non-virtual thunk to CBreakable::SetPropDataBlocksLOS(bool)
 W non-virtual thunk to CBreakable::SetPropDataIsAIWalkable(bool)
 W non-virtual thunk to CBreakableProp::GetBasePropData()
 W non-virtual thunk to CBreakableProp::GetBreakableCount()
 W non-virtual thunk to CBreakableProp::GetBreakableModel()
 W non-virtual thunk to CBreakableProp::GetBreakableSkin()
 W non-virtual thunk to CBreakableProp::GetDmgModBullet()
 W non-virtual thunk to CBreakableProp::GetDmgModClub()
 W non-virtual thunk to CBreakableProp::GetDmgModExplosive()
 W non-virtual thunk to CBreakableProp::GetExplosiveDamage()
 W non-virtual thunk to CBreakableProp::GetExplosiveRadius()
 W non-virtual thunk to CBreakableProp::GetMaxBreakableSize()
 W non-virtual thunk to CBreakableProp::GetMultiplayerBreakMode() const
 W non-virtual thunk to CBreakableProp::GetPhysicsDamageTable()
 W non-virtual thunk to CBreakableProp::GetPhysicsMode()
 W non-virtual thunk to CBreakableProp::HasInteraction(propdata_interactions_t)
 W non-virtual thunk to CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 W non-virtual thunk to CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CBreakableProp::PhysGunLaunchAngularImpulse()
 W non-virtual thunk to CBreakableProp::PreferredCarryAngles()
 W non-virtual thunk to CBreakableProp::SetBasePropData(string_t)
 W non-virtual thunk to CBreakableProp::SetBreakableCount(int)
 W non-virtual thunk to CBreakableProp::SetBreakableModel(string_t)
 W non-virtual thunk to CBreakableProp::SetBreakableSkin(int)
 W non-virtual thunk to CBreakableProp::SetDmgModBullet(float)
 W non-virtual thunk to CBreakableProp::SetDmgModClub(float)
 W non-virtual thunk to CBreakableProp::SetDmgModExplosive(float)
 W non-virtual thunk to CBreakableProp::SetExplosiveDamage(float)
 W non-virtual thunk to CBreakableProp::SetExplosiveRadius(float)
 W non-virtual thunk to CBreakableProp::SetInteraction(propdata_interactions_t)
 W non-virtual thunk to CBreakableProp::SetMaxBreakableSize(int)
 W non-virtual thunk to CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 W non-virtual thunk to CBreakableProp::SetPhysicsDamageTable(string_t)
 W non-virtual thunk to CBreakableProp::SetPhysicsMode(int)
 W non-virtual thunk to CBreakableProp::SetPropDataBlocksLOS(bool)
 W non-virtual thunk to CBreakableProp::SetPropDataIsAIWalkable(bool)
 W non-virtual thunk to CCSEventLog::Init()
 W non-virtual thunk to CCSEventLog::~CCSEventLog()
 W non-virtual thunk to CCSHLTVDirector::GetModEvents()
 W non-virtual thunk to CCSHLTVDirector::SetHLTVServer(IHLTVServer*)
 W non-virtual thunk to CCSHLTVDirector::~CCSHLTVDirector()
 W non-virtual thunk to CCSPlayer::CSAnim_CanMove()
 W non-virtual thunk to CCSPlayer::CSAnim_GetActiveWeapon()
 W non-virtual thunk to CCSPlayerAnimState::DoAnimationEvent(PlayerAnimEvent_t)
 W non-virtual thunk to CCSPlayerAnimState::IsThrowingGrenade()
 W non-virtual thunk to CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 W non-virtual thunk to CCollisionEvent::ObjectSleep(IPhysicsObject*)
 W non-virtual thunk to CCollisionEvent::ObjectWake(IPhysicsObject*)
 W non-virtual thunk to CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 W non-virtual thunk to CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 W non-virtual thunk to CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 W non-virtual thunk to CDecalEmitterSystem::Init()
 W non-virtual thunk to CDecalEmitterSystem::LevelInitPreEntity()
 W non-virtual thunk to CDecalEmitterSystem::Shutdown()
 W non-virtual thunk to CDecalEmitterSystem::~CDecalEmitterSystem()
 W non-virtual thunk to CDefaultResponseSystem::Init()
 W non-virtual thunk to CDefaultResponseSystem::LevelInitPostEntity()
 W non-virtual thunk to CDefaultResponseSystem::LevelInitPreEntity()
 W non-virtual thunk to CDefaultResponseSystem::Shutdown()
 W non-virtual thunk to CDefaultResponseSystem::~CDefaultResponseSystem()
 W non-virtual thunk to CDirtySpatialPartitionEntityList::OnPreQuery()
 W non-virtual thunk to CEventLog::Init()
 W non-virtual thunk to CEventLog::Shutdown()
 W non-virtual thunk to CEventLog::~CEventLog()
 W non-virtual thunk to CFishPool::FireGameEvent(IGameEvent*)
 W non-virtual thunk to CFishPool::~CFishPool()
 W non-virtual thunk to CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CHLTVDirector::FrameUpdatePostEntityThink()
 W non-virtual thunk to CHLTVDirector::GetDelay()
 W non-virtual thunk to CHLTVDirector::GetDirectorTick()
 W non-virtual thunk to CHLTVDirector::GetHLTVServer()
 W non-virtual thunk to CHLTVDirector::GetModEvents()
 W non-virtual thunk to CHLTVDirector::GetPVSEntity()
 W non-virtual thunk to CHLTVDirector::GetPVSOrigin()
 W non-virtual thunk to CHLTVDirector::Init()
 W non-virtual thunk to CHLTVDirector::IsActive()
 W non-virtual thunk to CHLTVDirector::LevelInitPostEntity()
 W non-virtual thunk to CHLTVDirector::SetHLTVServer(IHLTVServer*)
 W non-virtual thunk to CHLTVDirector::Shutdown()
 W non-virtual thunk to CHLTVDirector::~CHLTVDirector()
 W non-virtual thunk to CHostage::CSAnim_CanMove()
 W non-virtual thunk to CHostage::CSAnim_GetActiveWeapon()
 W non-virtual thunk to CHostage::Crouch()
 W non-virtual thunk to CHostage::GetCentroid() const
 W non-virtual thunk to CHostage::GetEyes() const
 W non-virtual thunk to CHostage::GetFeet() const
 W non-virtual thunk to CHostage::GetLastKnownArea() const
 W non-virtual thunk to CHostage::GetMoveAngle() const
 W non-virtual thunk to CHostage::GetSimpleGroundHeightWithFloor(Vector const&, float*, Vector*)
 W non-virtual thunk to CHostage::IsCrouching() const
 W non-virtual thunk to CHostage::IsJumping() const
 W non-virtual thunk to CHostage::IsRunning() const
 W non-virtual thunk to CHostage::IsUsingLadder() const
 W non-virtual thunk to CHostage::Jump()
 W non-virtual thunk to CHostage::OnMoveToFailure(Vector const&, CImprovLocomotor::MoveToFailureType)
 W non-virtual thunk to CHostage::OnMoveToSuccess(Vector const&)
 W non-virtual thunk to CHostage::Run()
 W non-virtual thunk to CHostage::StandUp()
 W non-virtual thunk to CHostage::StartLadder(CNavLadder const*, NavTraverseType, Vector const&, Vector const&)
 W non-virtual thunk to CHostage::TrackPath(Vector const&, float)
 W non-virtual thunk to CHostage::TraverseLadder(CNavLadder const*, NavTraverseType, Vector const&, Vector const&, float)
 W non-virtual thunk to CHostage::Walk()
 W non-virtual thunk to CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 W non-virtual thunk to CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 W non-virtual thunk to CLagCompensationManager::StartLagCompensation(CBasePlayer*, CUserCmd*)
 W non-virtual thunk to CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 W non-virtual thunk to CNotifyList::OnEntityCreated(CBaseEntity*)
 W non-virtual thunk to CNotifyList::OnEntityDeleted(CBaseEntity*)
 W non-virtual thunk to CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 W non-virtual thunk to CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CPhysBox::PreferredCarryAngles()
 W non-virtual thunk to CPhysBoxMultiplayer::GetMass()
 W non-virtual thunk to CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 W non-virtual thunk to CPhysBoxMultiplayer::IsAsleep()
 W non-virtual thunk to CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 W non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 W non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 W non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetAllModels()
 W non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 W non-virtual thunk to CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 W non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 W non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 W non-virtual thunk to CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 W non-virtual thunk to CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CPhysicsPropMultiplayer::GetMass()
 W non-virtual thunk to CPhysicsPropMultiplayer::GetMultiplayerPhysicsMode()
 W non-virtual thunk to CPhysicsPropMultiplayer::GetPhysicsMode()
 W non-virtual thunk to CPhysicsPropMultiplayer::IsAsleep()
 W non-virtual thunk to CPhysicsPropMultiplayer::SetPhysicsMode(int)
 W non-virtual thunk to CPlayerInfo::ChangeTeam(int)
 W non-virtual thunk to CPlayerInfo::GetAbsAngles()
 W non-virtual thunk to CPlayerInfo::GetAbsOrigin()
 W non-virtual thunk to CPlayerInfo::GetArmorValue()
 W non-virtual thunk to CPlayerInfo::GetDeathCount()
 W non-virtual thunk to CPlayerInfo::GetFragCount()
 W non-virtual thunk to CPlayerInfo::GetHealth()
 W non-virtual thunk to CPlayerInfo::GetLastUserCommand()
 W non-virtual thunk to CPlayerInfo::GetMaxHealth()
 W non-virtual thunk to CPlayerInfo::GetModelName()
 W non-virtual thunk to CPlayerInfo::GetName()
 W non-virtual thunk to CPlayerInfo::GetNetworkIDString()
 W non-virtual thunk to CPlayerInfo::GetPlayerMaxs()
 W non-virtual thunk to CPlayerInfo::GetPlayerMins()
 W non-virtual thunk to CPlayerInfo::GetTeamIndex()
 W non-virtual thunk to CPlayerInfo::GetUserID()
 W non-virtual thunk to CPlayerInfo::GetWeaponName()
 W non-virtual thunk to CPlayerInfo::IsConnected()
 W non-virtual thunk to CPlayerInfo::IsDead()
 W non-virtual thunk to CPlayerInfo::IsFakeClient()
 W non-virtual thunk to CPlayerInfo::IsHLTV()
 W non-virtual thunk to CPlayerInfo::IsInAVehicle()
 W non-virtual thunk to CPlayerInfo::IsObserver()
 W non-virtual thunk to CPlayerInfo::IsPlayer()
 W non-virtual thunk to CPropJeep::AllowBlockedExit(CBasePlayer*, int)
 W non-virtual thunk to CPropJeep::CanExitVehicle(CBaseEntity*)
 W non-virtual thunk to CPropJeep::EnterVehicle(CBasePlayer*)
 W non-virtual thunk to CPropJeep::ExitVehicle(int)
 W non-virtual thunk to CPropJeep::ProcessMovement(CBasePlayer*, CMoveData*)
 W non-virtual thunk to CPropJeep::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 W non-virtual thunk to CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CPropVehicleDriveable::AllowBlockedExit(CBasePlayer*, int)
 W non-virtual thunk to CPropVehicleDriveable::AllowMidairExit(CBasePlayer*, int)
 W non-virtual thunk to CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 W non-virtual thunk to CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 W non-virtual thunk to CPropVehicleDriveable::EnterVehicle(CBasePlayer*)
 W non-virtual thunk to CPropVehicleDriveable::ExitVehicle(int)
 W non-virtual thunk to CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 W non-virtual thunk to CPropVehicleDriveable::GetDriver()
 W non-virtual thunk to CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 W non-virtual thunk to CPropVehicleDriveable::PreExitVehicle(CBasePlayer*, int)
 W non-virtual thunk to CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 W non-virtual thunk to CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 W non-virtual thunk to CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 W non-virtual thunk to CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 W non-virtual thunk to CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 W non-virtual thunk to CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 W non-virtual thunk to CRagdollProp::PhysGunLaunchAngularImpulse()
 W non-virtual thunk to CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 W non-virtual thunk to CRotorWashShooter::DoWashPush(float, Vector const&)
 W non-virtual thunk to CServerNetworkProperty::FireEvent()
 W non-virtual thunk to CSoundControllerImp::LevelShutdownPreEntity()
 W non-virtual thunk to CSoundControllerImp::OnRestore()
 W non-virtual thunk to CSoundControllerImp::PreClientUpdate()
 W non-virtual thunk to CSoundControllerImp::~CSoundControllerImp()
 W non-virtual thunk to CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 W sky3dparams_t::NetworkStateChanged()
 W sky3dparams_t::NetworkVar_fog::NetworkStateChanged()
 W std::_List_base<AI_Follower_t, std::allocator<AI_Follower_t> >::_M_clear()
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned int, std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned int, unsigned int)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned int, unsigned int, std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned int, char, std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()
 W std::domain_error::~domain_error()
 W std::invalid_argument::~invalid_argument()
 W std::length_error::~length_error()
 W std::list<AI_Follower_t, std::allocator<AI_Follower_t> >::erase(std::_List_iterator<AI_Follower_t>)
 W std::list<AI_Follower_t, std::allocator<AI_Follower_t> >::insert(std::_List_iterator<AI_Follower_t>, AI_Follower_t const&)
 W std::out_of_range::~out_of_range()
 W std::overflow_error::~overflow_error()
 W std::range_error::~range_error()
 W std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)
 W std::string::_M_check(unsigned int, char const*) const
 W std::string::_M_data() const
 W std::string::_M_data(char*)
 W std::string::_M_ibegin() const
 W std::string::_M_iend() const
 W std::string::_M_leak()
 W std::string::_M_leak_hard()
 W std::string::_M_limit(unsigned int, unsigned int) const
 W std::string::_M_mutate(unsigned int, unsigned int, unsigned int)
 W std::string::_M_rep() const
 W std::string::_M_replace_aux(unsigned int, unsigned int, unsigned int, char)
 W std::string::_M_replace_safe(unsigned int, unsigned int, char const*, unsigned int)
 W std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned int)
 W std::string::_Rep::_M_destroy(std::allocator<char> const&)
 W std::string::_Rep::_M_dispose(std::allocator<char> const&)
 W std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)
 W std::string::_Rep::_M_is_leaked() const
 W std::string::_Rep::_M_is_shared() const
 W std::string::_Rep::_M_refcopy()
 W std::string::_Rep::_M_refdata()
 W std::string::_Rep::_M_set_leaked()
 W std::string::_Rep::_M_set_sharable()
 W std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)
 W std::string::_Rep::_S_empty_rep()
 W std::string::_S_construct(unsigned int, char, std::allocator<char> const&)
 W std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)
 W std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)
 W std::string::_S_copy_chars(char*, char const*, char const*)
 W std::string::_S_copy_chars(char*, char*, char*)
 W std::string::_S_empty_rep()
 W std::string::append(char const*)
 W std::string::append(char const*, unsigned int)
 W std::string::append(std::string const&)
 W std::string::append(std::string const&, unsigned int, unsigned int)
 W std::string::append(unsigned int, char)
 W std::string::assign(char const*)
 W std::string::assign(char const*, unsigned int)
 W std::string::assign(std::string const&)
 W std::string::assign(std::string const&, unsigned int, unsigned int)
 W std::string::assign(unsigned int, char)
 W std::string::at(unsigned int)
 W std::string::at(unsigned int) const
 W std::string::begin()
 W std::string::begin() const
 W std::string::c_str() const
 W std::string::capacity() const
 W std::string::clear()
 W std::string::compare(char const*) const
 W std::string::compare(std::string const&) const
 W std::string::compare(unsigned int, unsigned int, char const*) const
 W std::string::compare(unsigned int, unsigned int, char const*, unsigned int) const
 W std::string::compare(unsigned int, unsigned int, std::string const&) const
 W std::string::compare(unsigned int, unsigned int, std::string const&, unsigned int, unsigned int) const
 W std::string::copy(char*, unsigned int, unsigned int) const
 W std::string::data() const
 W std::string::empty() const
 W std::string::end()
 W std::string::end() const
 W std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)
 W std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)
 W std::string::erase(unsigned int, unsigned int)
 W std::string::find(char const*, unsigned int) const
 W std::string::find(char const*, unsigned int, unsigned int) const
 W std::string::find(char, unsigned int) const
 W std::string::find(std::string const&, unsigned int) const
 W std::string::find_first_not_of(char const*, unsigned int) const
 W std::string::find_first_not_of(char const*, unsigned int, unsigned int) const
 W std::string::find_first_not_of(char, unsigned int) const
 W std::string::find_first_not_of(std::string const&, unsigned int) const
 W std::string::find_first_of(char const*, unsigned int) const
 W std::string::find_first_of(char const*, unsigned int, unsigned int) const
 W std::string::find_first_of(char, unsigned int) const
 W std::string::find_first_of(std::string const&, unsigned int) const
 W std::string::find_last_not_of(char const*, unsigned int) const
 W std::string::find_last_not_of(char const*, unsigned int, unsigned int) const
 W std::string::find_last_not_of(char, unsigned int) const
 W std::string::find_last_not_of(std::string const&, unsigned int) const
 W std::string::find_last_of(char const*, unsigned int) const
 W std::string::find_last_of(char const*, unsigned int, unsigned int) const
 W std::string::find_last_of(char, unsigned int) const
 W std::string::find_last_of(std::string const&, unsigned int) const
 W std::string::get_allocator() const
 W std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)
 W std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned int, char)
 W std::string::insert(unsigned int, char const*)
 W std::string::insert(unsigned int, char const*, unsigned int)
 W std::string::insert(unsigned int, std::string const&)
 W std::string::insert(unsigned int, std::string const&, unsigned int, unsigned int)
 W std::string::insert(unsigned int, unsigned int, char)
 W std::string::length() const
 W std::string::max_size() const
 W std::string::operator+=(char const*)
 W std::string::operator+=(char)
 W std::string::operator+=(std::string const&)
 W std::string::operator=(char const*)
 W std::string::operator=(char)
 W std::string::operator=(std::string const&)
 W std::string::operator[](unsigned int)
 W std::string::operator[](unsigned int) const
 W std::string::push_back(char)
 W std::string::rbegin()
 W std::string::rbegin() const
 W std::string::rend()
 W std::string::rend() const
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned int)
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)
 W std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned int, char)
 W std::string::replace(unsigned int, unsigned int, char const*)
 W std::string::replace(unsigned int, unsigned int, char const*, unsigned int)
 W std::string::replace(unsigned int, unsigned int, std::string const&)
 W std::string::replace(unsigned int, unsigned int, std::string const&, unsigned int, unsigned int)
 W std::string::replace(unsigned int, unsigned int, unsigned int, char)
 W std::string::reserve(unsigned int)
 W std::string::resize(unsigned int)
 W std::string::resize(unsigned int, char)
 W std::string::rfind(char const*, unsigned int) const
 W std::string::rfind(char const*, unsigned int, unsigned int) const
 W std::string::rfind(char, unsigned int) const
 W std::string::rfind(std::string const&, unsigned int) const
 W std::string::size() const
 W std::string::substr(unsigned int, unsigned int) const
 W std::string::swap(std::string&)
 W std::underflow_error::~underflow_error()
 W virtual thunk to CBasePlayerAnimState::ClearAnimationState()
 W virtual thunk to CBasePlayerAnimState::GetRenderAngles()
 W virtual thunk to CBasePlayerAnimState::Release()
 W virtual thunk to CBasePlayerAnimState::Update(float, float)
 W virtual thunk to CCSPlayerAnimState::ClearAnimationState()
 W void SearchSurroundingAreas<CollectArriveFirstSpotsFunctor>(CNavArea*, Vector const&, CollectArriveFirstSpotsFunctor&, float)
 W void SearchSurroundingAreas<CollectHidingSpotsFunctor>(CNavArea*, Vector const&, CollectHidingSpotsFunctor&, float)
 W void SearchSurroundingAreas<CollectRetreatSpotsFunctor>(CNavArea*, Vector const&, CollectRetreatSpotsFunctor&, float)
 W void SearchSurroundingAreas<FollowTargetCollector>(CNavArea*, Vector const&, FollowTargetCollector&, float)
 W void SearchSurroundingAreas<PlaceFloodFillFunctor>(CNavArea*, Vector const&, PlaceFloodFillFunctor&, float)
 W void SetDefLessFunc<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char> >(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>&)
 W void SetDefLessFunc<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short> >(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>&)
 W void SetDefLessFunc<CUtlMap<CPhysCollide const*, BBox_t, unsigned short> >(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>&)
 W void SetDefLessFunc<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short> >(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>&)
 W void SetDefLessFunc<CUtlMap<IPhysicsObject*, int, unsigned short> >(CUtlMap<IPhysicsObject*, int, unsigned short>&)
 W void SetDefLessFunc<CUtlMap<unsigned int, Activity, unsigned short> >(CUtlMap<unsigned int, Activity, unsigned short>&)
 W void SetDefLessFunc<CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> > >(CUtlRBTree<CAI_BaseNPC*, unsigned short, CLessFuncCallerNormal<CAI_BaseNPC*> >&)
 W void SetDefLessFunc<CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> > >(CUtlRBTree<CBaseEntity*, unsigned short, CLessFuncCallerNormal<CBaseEntity*> >&)
 W void SetDefLessFunc<CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> > >(CUtlRBTree<int, unsigned short, CLessFuncCallerNormal<int> >&)
 Warning
 _Jv_RegisterClasses
 _Unwind_Resume
 __cxa_allocate_exception
 __cxa_atexit@@GLIBC_2.1.3
 __cxa_call_unexpected
 __cxa_finalize@@GLIBC_2.1.3
 __cxa_free_exception
 __cxa_pure_virtual
 __cxa_throw
 __dynamic_cast
 __gmon_start__
 __gxx_personality_v0
 __strtod_internal@@GLIBC_2.0
 __strtol_internal@@GLIBC_2.0
 __strtoul_internal@@GLIBC_2.0
 acos@@GLIBC_2.0
 acosf@@GLIBC_2.0
 asin@@GLIBC_2.0
 b (anonymous namespace)::__g_CreateCPlayerInfoManagerIPlayerInfoManager_V1_reg
 b (anonymous namespace)::s_PlayerInfoManager_V1
 b ACT_DOOR_LOCKED
 b ACT_DOOR_OPEN
 b AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)::warningCount
 b Bias(float, float)::lastExponent
 b CAI_AllySpeechManager::GetConceptInfo(char const*)::conceptInfoMap
 b CAI_BaseNPC::CallNPCThink()::iPrevTick
 b CAI_BaseNPC::CallNPCThink()::nThinksInTick
 b CAI_BaseNPC::CallNPCThink()::npcTimeThisFrame
 b CAI_BaseNPC::CallNPCThink()::pHostTimescale
 b CAI_BaseNPC::CallNPCThink()::rebalanceCandidates
 b CAI_BaseNPC::FindNamedEntity(char const*)::playerwarningcount
 b CAI_BaseNPC::FindNamedEntity(char const*)::selfwarningcount
 b CAI_BaseNPC::MaintainSchedule()::fInitializedTimeLimit
 b CAI_BaseNPC::MaintainSchedule()::timeLimit
 b CAI_BaseNPC::NPCThink()::timer
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::lastWarnActivity
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::pLastWarn
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::timeLastWarn
 b CAI_BaseNPC::TranslateActivity(Activity, Activity*)::sUniqueActivities
 b CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerEyePosition
 b CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerForward
 b CAI_BasePhysicsFlyingBot::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)::count
 b CAI_FollowBehavior::GetFollowPoint()::invalid
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::endDrawNode
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::flDrawDuration
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::startDrawNode
 b CAI_Path::BaseGoalPosition() const::vecResult
 b CAI_Path::NextWaypointPos() const::invalid
 b CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLine(Vector const&, Vector const&, int, int, int, bool)::overCounter
 b CAI_TacticalServices::FindCoverNode(Vector const&, Vector const&, Vector const&, float, float)::nSearchRandomizer
 b CAI_TacticalServices::FindLosNode(Vector const&, Vector const&, float, float, float, Vector const&)::nSearchRandomizer
 b CAI_TrackPather::TargetPathAcrossDirection() const::s_Result
 b CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b CBaseCombatWeapon::GetBulletSpread()::cone
 b CBaseEntity::FireBullets(FireBulletsInfo_t const&)::tracerCount
 b CBaseEntity::KeyValue(char const*, char const*)::szBuf
 b CBaseEntity::TakeDamage(CTakeDamageInfo const&)::warningCount
 b CBasePlayer::CheckTimeBasedDamage()::gtbdPrev
 b CBasePlayer::EyeAngles()::angEyeWorld
 b CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)::iSkipStep
 b CBasePlayerAnimState::CalcSequenceIndex(char const*, ...)::dict
 b CBasePropDoor::RegisterPrivateActivities()::bRegistered
 b CBeam::GetAbsEndPos() const::vecAbsPos
 b CCSBot::FindMostDangerousThreat()::placeRank
 b CCSBotManager::GetRandomPositionInZone(CCSBotManager::Zone const*) const::pos
 b CCSPlayerAnimState::CalcSequenceIndex(char const*, ...)::dict
 b CC_KDTreeTest()::vecTargets
 b CC_Player_SetModel()::szName
 b CChoreoEvent::GetBoundedRamp(int)::nullend
 b CChoreoEvent::GetBoundedRamp(int)::nullstart
 b CChoreoEvent::GetDescription()::description
 b CChoreoScene::GetBoundedSceneRamp(int)::nullend
 b CChoreoScene::GetBoundedSceneRamp(int)::nullstart
 b CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b CCollisionProperty::CollisionToWorldTransform() const::s_nIndex
 b CFlexAnimationTrack::GetBoundedSample(int, int)::nullend
 b CFlexAnimationTrack::GetBoundedSample(int, int)::nullstart
 b CHostage::GetCentroid() const::centroid
 b CHostage::GetEyes() const::eyes
 b CHostage::GetFeet() const::feet
 b CHostage::Spawn()::index
 b CIKContext::AddAutoplayLocks(Vector*, Quaternion*)::boneToWorld
 b CIKContext::AddSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)::boneToWorld
 b CIKContext::SolveAutoplayLocks(Vector*, Quaternion*)::boneToWorld
 b CIKContext::SolveSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)::boneToWorld
 b CNavArea::Draw() const::blink
 b CNavArea::Draw() const::blinkOn
 b CNavArea::GetCorner(NavCornerType) const::pos
 b CNavMesh::GetFilename() const::filename
 b CONSOLE_ECHO(char*, ...)::szStr
 b CPredictableId::Describe() const::desc
 b CResponseSystem::ParseRule()::instancedCriteria
 b CResponseSystem::ResponseWarning(char const*, ...)::string
 b CSGameState::GetRandomFreeHostagePosition() const::freePos
 b CSave::Log(char const*, _fieldtypes, void*, int)::szBuf
 b CSave::Log(char const*, _fieldtypes, void*, int)::szTempBuf
 b CServerGameDLL::GameFrame(bool)::skipframe
 b CTestTraceline::Spin()::traceline_spin
 b CTextStat::GetTextStatsList()::theList
 b CUtlSymbol::Initialize()::symbolsInitialized
 b CWeaponCSBase::GetBulletSpread()::cone
 b CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::pos2
 b CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::pos3
 b CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::q2
 b CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::q3
 b ChannelToString(int)::sz
 b DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::nameHolder
 b DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::nameHolder
 b DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::nameHolder
 b DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::nameHolder
 b DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::nameHolder
 b DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::nameHolder
 b DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::nameHolder
 b DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::nameHolder
 b DataMapInit<AI_Response>(AI_Response*)::nameHolder
 b DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 b DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::nameHolder
 b DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::nameHolder
 b DataMapInit<CAISound>(CAISound*)::nameHolder
 b DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::nameHolder
 b DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::nameHolder
 b DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::nameHolder
 b DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::nameHolder
 b DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::nameHolder
 b DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::nameHolder
 b DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::nameHolder
 b DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::nameHolder
 b DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::nameHolder
 b DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::dataDesc
 b DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 b DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::dataDesc
 b DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::nameHolder
 b DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 b DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 b DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::nameHolder
 b DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::nameHolder
 b DataMapInit<CAI_Enemies>(CAI_Enemies*)::nameHolder
 b DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 b DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::nameHolder
 b DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::nameHolder
 b DataMapInit<CAI_FreePass>(CAI_FreePass*)::nameHolder
 b DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::nameHolder
 b DataMapInit<CAI_Hint>(CAI_Hint*)::nameHolder
 b DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::nameHolder
 b DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::nameHolder
 b DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::nameHolder
 b DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::nameHolder
 b DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::dataDesc
 b DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::nameHolder
 b DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::nameHolder
 b DataMapInit<CAI_Motor>(CAI_Motor*)::nameHolder
 b DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::nameHolder
 b DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::nameHolder
 b DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::nameHolder
 b DataMapInit<CAI_Navigator>(CAI_Navigator*)::nameHolder
 b DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::nameHolder
 b DataMapInit<CAI_Path>(CAI_Path*)::nameHolder
 b DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::nameHolder
 b DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::nameHolder
 b DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::nameHolder
 b DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::nameHolder
 b DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::nameHolder
 b DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::nameHolder
 b DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::nameHolder
 b DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::nameHolder
 b DataMapInit<CAI_Senses>(CAI_Senses*)::nameHolder
 b DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::nameHolder
 b DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::nameHolder
 b DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::nameHolder
 b DataMapInit<CAI_Squad>(CAI_Squad*)::nameHolder
 b DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::nameHolder
 b DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::nameHolder
 b DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::dataDesc
 b DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::nameHolder
 b DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::nameHolder
 b DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 b DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 b DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 b DataMapInit<CAssaultPoint>(CAssaultPoint*)::nameHolder
 b DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 b DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 b DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 b DataMapInit<CBaseCSGrenade>(CBaseCSGrenade*)::nameHolder
 b DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::nameHolder
 b DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 b DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 b DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 b DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 b DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 b DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 b DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 b DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 b DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 b DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 b DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 b DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 b DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 b DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 b DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 b DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 b DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 b DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 b DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 b DataMapInit<CBeam>(CBeam*)::nameHolder
 b DataMapInit<CBlendingCycler>(CBlendingCycler*)::nameHolder
 b DataMapInit<CBlood>(CBlood*)::nameHolder
 b DataMapInit<CBombTarget>(CBombTarget*)::nameHolder
 b DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 b DataMapInit<CBreakable>(CBreakable*)::nameHolder
 b DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 b DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 b DataMapInit<CBubbling>(CBubbling*)::nameHolder
 b DataMapInit<CBuyZone>(CBuyZone*)::nameHolder
 b DataMapInit<CCSBot>(CCSBot*)::dataDesc
 b DataMapInit<CCSBot>(CCSBot*)::nameHolder
 b DataMapInit<CCSPlayer>(CCSPlayer*)::nameHolder
 b DataMapInit<CCSPlayerResource>(CCSPlayerResource*)::dataDesc
 b DataMapInit<CCSPlayerResource>(CCSPlayerResource*)::nameHolder
 b DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 b DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 b DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 b DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 b DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 b DataMapInit<CCredits>(CCredits*)::nameHolder
 b DataMapInit<CCycler>(CCycler*)::nameHolder
 b DataMapInit<CDecal>(CDecal*)::nameHolder
 b DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 b DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 b DataMapInit<CEmbers>(CEmbers*)::nameHolder
 b DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 b DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 b DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 b DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 b DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 b DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 b DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 b DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 b DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 b DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 b DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 b DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 b DataMapInit<CEnvFunnel>(CEnvFunnel*)::dataDesc
 b DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 b DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 b DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 b DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 b DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 b DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 b DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 b DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 b DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 b DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 b DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 b DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 b DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 b DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 b DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 b DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::dataDesc
 b DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 b DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 b DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 b DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 b DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 b DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 b DataMapInit<CEventAction>(CEventAction*)::nameHolder
 b DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 b DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 b DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 b DataMapInit<CFilterName>(CFilterName*)::nameHolder
 b DataMapInit<CFire>(CFire*)::nameHolder
 b DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 b DataMapInit<CFish>(CFish*)::dataDesc
 b DataMapInit<CFish>(CFish*)::nameHolder
 b DataMapInit<CFishPool>(CFishPool*)::nameHolder
 b DataMapInit<CFlashbang>(CFlashbang*)::dataDesc
 b DataMapInit<CFlashbang>(CFlashbang*)::nameHolder
 b DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 b DataMapInit<CFlextalkActor>(CFlextalkActor*)::nameHolder
 b DataMapInit<CFogController>(CFogController*)::nameHolder
 b DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 b DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 b DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 b DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 b DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 b DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 b DataMapInit<CFuncMonitor>(CFuncMonitor*)::nameHolder
 b DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 b DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 b DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 b DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 b DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 b DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 b DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 b DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 b DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 b DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 b DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 b DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 b DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 b DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 b DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 b DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 b DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 b DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 b DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 b DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 b DataMapInit<CGameScore>(CGameScore*)::nameHolder
 b DataMapInit<CGameText>(CGameText*)::nameHolder
 b DataMapInit<CGameUI>(CGameUI*)::nameHolder
 b DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 b DataMapInit<CGenericActor>(CGenericActor*)::nameHolder
 b DataMapInit<CGib>(CGib*)::nameHolder
 b DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 b DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 b DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 b DataMapInit<CHEGrenade>(CHEGrenade*)::dataDesc
 b DataMapInit<CHEGrenade>(CHEGrenade*)::nameHolder
 b DataMapInit<CHostage>(CHostage*)::nameHolder
 b DataMapInit<CHostageRescueZone>(CHostageRescueZone*)::nameHolder
 b DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::nameHolder
 b DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::nameHolder
 b DataMapInit<CInfoViewParameters>(CInfoViewParameters*)::nameHolder
 b DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 b DataMapInit<CItem>(CItem*)::nameHolder
 b DataMapInit<CItemDefuser>(CItemDefuser*)::nameHolder
 b DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 b DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 b DataMapInit<CKnife>(CKnife*)::nameHolder
 b DataMapInit<CLight>(CLight*)::nameHolder
 b DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 b DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 b DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 b DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 b DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 b DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 b DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 b DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 b DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 b DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 b DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 b DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 b DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 b DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 b DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 b DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 b DataMapInit<CMessage>(CMessage*)::nameHolder
 b DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 b DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 b DataMapInit<CMotorController>(CMotorController*)::nameHolder
 b DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 b DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 b DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 b DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::dataDesc
 b DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::nameHolder
 b DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::nameHolder
 b DataMapInit<CNodeEnt>(CNodeEnt*)::nameHolder
 b DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 b DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 b DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 b DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 b DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 b DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 b DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 b DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::dataDesc
 b DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 b DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 b DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 b DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 b DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 b DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 b DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 b DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 b DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 b DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 b DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 b DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 b DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 b DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 b DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 b DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 b DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 b DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 b DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 b DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::dataDesc
 b DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::nameHolder
 b DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 b DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 b DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 b DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 b DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 b DataMapInit<CPlantedC4>(CPlantedC4*)::nameHolder
 b DataMapInit<CPlasma>(CPlasma*)::nameHolder
 b DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 b DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 b DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 b DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 b DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 b DataMapInit<CPointCamera>(CPointCamera*)::nameHolder
 b DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 b DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 b DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 b DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 b DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 b DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 b DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 b DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 b DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 b DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 b DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 b DataMapInit<CPropJeep>(CPropJeep*)::nameHolder
 b DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 b DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 b DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 b DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 b DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 b DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 b DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 b DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 b DataMapInit<CRallyPoint>(CRallyPoint*)::nameHolder
 b DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 b DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 b DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 b DataMapInit<CRopeAnchor>(CRopeAnchor*)::nameHolder
 b DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 b DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 b DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 b DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 b DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 b DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 b DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 b DataMapInit<CScriptedTarget>(CScriptedTarget*)::nameHolder
 b DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 b DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 b DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 b DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 b DataMapInit<CSmokeGrenade>(CSmokeGrenade*)::dataDesc
 b DataMapInit<CSmokeGrenade>(CSmokeGrenade*)::nameHolder
 b DataMapInit<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile*)::nameHolder
 b DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 b DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 b DataMapInit<CSound>(CSound*)::nameHolder
 b DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 b DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 b DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 b DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 b DataMapInit<CSprite>(CSprite*)::nameHolder
 b DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 b DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 b DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 b DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 b DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 b DataMapInit<CSun>(CSun*)::nameHolder
 b DataMapInit<CSurroundTest>(CSurroundTest*)::nameHolder
 b DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 b DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 b DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 b DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 b DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 b DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::nameHolder
 b DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::nameHolder
 b DataMapInit<CTerrainMorph>(CTerrainMorph*)::nameHolder
 b DataMapInit<CTesla>(CTesla*)::nameHolder
 b DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 b DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 b DataMapInit<CThrustController>(CThrustController*)::nameHolder
 b DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 b DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 b DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 b DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 b DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 b DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 b DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 b DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 b DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::dataDesc
 b DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 b DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 b DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 b DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 b DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 b DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 b DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 b DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 b DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 b DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 b DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 b DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 b DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 b DataMapInit<CWeaponAWP>(CWeaponAWP*)::nameHolder
 b DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::nameHolder
 b DataMapInit<CWeaponCycler>(CWeaponCycler*)::nameHolder
 b DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 b DataMapInit<CWorld>(CWorld*)::nameHolder
 b DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 b DataMapInit<CWreckage>(CWreckage*)::nameHolder
 b DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 b DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 b DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 b DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 b DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 b DataMapInit<HintNodeData>(HintNodeData*)::nameHolder
 b DataMapInit<JeepWaterData_t>(JeepWaterData_t*)::nameHolder
 b DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 b DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 b DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 b DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 b DataMapInit<Response>(Response*)::nameHolder
 b DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 b DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 b DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 b DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 b DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 b DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::nameHolder
 b DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 b DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 b DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 b DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 b DataMapInit<locksound_t>(locksound_t*)::nameHolder
 b DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 b DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 b DataMapInit<template_t>(template_t*)::nameHolder
 b DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 b DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 b DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 b DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 b DescribeAxis(int)::sz
 b EntityFactoryDictionary()::s_EntityFactory
 b GetAmmoDef()::bInitted
 b GetBspFilename(char const*)::bspFilename
 b GetDecoratedSkinName(char const*, char const*)::buf
 b GetPhysObjSaveRestoreOps(PhysInterfaceId_t)::inited
 b GetSceneManager()::s_SceneManager
 b GetSequenceLinearMotion(studiohdr_t*, int, float const*, Vector*)::msgCount
 b ISoundEmitterSystemBase::CSoundParametersInternal::PitchToString()::sz
 b ISoundEmitterSystemBase::CSoundParametersInternal::SoundLevelToString()::sz
 b ISoundEmitterSystemBase::CSoundParametersInternal::VolumeToString()::sz
 b InitializeCharacterSets()::s_CharacterSetInitialized
 b KeyValues::ReadToken(char**, bool&)::buf
 b MD5_Print(unsigned char*, int)::szReturn
 b MissingSceneWarning(char const*)::missing
 b MoveHelperServer()::s_MoveHelperServer
 b NumAsString(int)::buf
 b ParseFile(char const*, char*, bool*, characterset_s*)::com_ignorecolons
 b PhysFrame(float)::lastObjectCount
 b PitchToString(float)::sz
 b PredMapInit<CAK47>(CAK47*)::predDesc
 b PredMapInit<CBaseAnimating>(CBaseAnimating*)::predDesc
 b PredMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::predDesc
 b PredMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::predDesc
 b PredMapInit<CBaseEntity>(CBaseEntity*)::predDesc
 b PredMapInit<CBaseFlex>(CBaseFlex*)::predDesc
 b PredMapInit<CBaseParticleEntity>(CBaseParticleEntity*)::predDesc
 b PredMapInit<CBasePlayer>(CBasePlayer*)::predDesc
 b PredMapInit<CDEagle>(CDEagle*)::predDesc
 b PredMapInit<CFlashbang>(CFlashbang*)::predDesc
 b PredMapInit<CHEGrenade>(CHEGrenade*)::predDesc
 b PredMapInit<CPlantedC4>(CPlantedC4*)::predDesc
 b PredMapInit<CPlayerLocalData>(CPlayerLocalData*)::predDesc
 b PredMapInit<CPlayerState>(CPlayerState*)::predDesc
 b PredMapInit<CSmokeGrenade>(CSmokeGrenade*)::predDesc
 b PredMapInit<CSpriteTrail>(CSpriteTrail*)::predDesc
 b PredMapInit<CWeaponAWP>(CWeaponAWP*)::predDesc
 b PredMapInit<CWeaponAug>(CWeaponAug*)::predDesc
 b PredMapInit<CWeaponCSBaseGun>(CWeaponCSBaseGun*)::predDesc
 b PredMapInit<CWeaponFamas>(CWeaponFamas*)::predDesc
 b PredMapInit<CWeaponFiveSeven>(CWeaponFiveSeven*)::predDesc
 b PredMapInit<CWeaponG3SG1>(CWeaponG3SG1*)::predDesc
 b PredMapInit<CWeaponGalil>(CWeaponGalil*)::predDesc
 b PredMapInit<CWeaponGlock>(CWeaponGlock*)::predDesc
 b PredMapInit<CWeaponM249>(CWeaponM249*)::predDesc
 b PredMapInit<CWeaponM3>(CWeaponM3*)::predDesc
 b PredMapInit<CWeaponM4A1>(CWeaponM4A1*)::predDesc
 b PredMapInit<CWeaponMAC10>(CWeaponMAC10*)::predDesc
 b PredMapInit<CWeaponMP5Navy>(CWeaponMP5Navy*)::predDesc
 b PredMapInit<CWeaponP228>(CWeaponP228*)::predDesc
 b PredMapInit<CWeaponP90>(CWeaponP90*)::predDesc
 b PredMapInit<CWeaponSG550>(CWeaponSG550*)::predDesc
 b PredMapInit<CWeaponSG552>(CWeaponSG552*)::predDesc
 b PredMapInit<CWeaponScout>(CWeaponScout*)::predDesc
 b PredMapInit<CWeaponTMP>(CWeaponTMP*)::predDesc
 b PredMapInit<CWeaponUMP45>(CWeaponUMP45*)::predDesc
 b PredMapInit<CWeaponXM1014>(CWeaponXM1014*)::predDesc
 b ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_SendProps
 b ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 b ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 b ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 b ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 b ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 b ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 b ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 b ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_SendProps
 b ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 b ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 b ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 b ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 b ServerClassInit<DT_CHostage::ignored>(DT_CHostage::ignored*)::g_SendProps
 b ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)::g_SendProps
 b ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)::g_SendProps
 b ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)::g_SendProps
 b ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)::g_SendProps
 b ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)::g_SendProps
 b ServerClassInit<DT_CSPlayerResource::ignored>(DT_CSPlayerResource::ignored*)::g_SendProps
 b ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)::g_SendProps
 b ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)::g_SendProps
 b ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 b ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 b ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 b ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 b ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 b ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 b ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 b ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 b ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 b ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 b ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 b ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 b ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 b ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 b ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 b ServerClassInit<DT_Flashbang::ignored>(DT_Flashbang::ignored*)::g_SendProps
 b ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 b ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 b ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 b ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_SendProps
 b ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 b ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 b ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 b ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 b ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 b ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 b ServerClassInit<DT_HEGrenade::ignored>(DT_HEGrenade::ignored*)::g_SendProps
 b ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 b ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 b ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_SendProps
 b ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 b ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 b ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 b ServerClassInit<DT_LocalActiveWeaponKnifeData::ignored>(DT_LocalActiveWeaponKnifeData::ignored*)::g_SendProps
 b ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 b ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 b ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 b ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 b ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 b ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 b ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 b ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 b ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 b ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 b ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 b ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_SendProps
 b ServerClassInit<DT_PlantedC4::ignored>(DT_PlantedC4::ignored*)::g_SendProps
 b ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 b ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 b ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 b ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_SendProps
 b ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 b ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_SendProps
 b ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_SendProps
 b ServerClassInit<DT_PropJeep::ignored>(DT_PropJeep::ignored*)::g_SendProps
 b ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 b ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 b ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 b ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 b ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 b ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 b ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 b ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 b ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 b ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 b ServerClassInit<DT_SmokeGrenade::ignored>(DT_SmokeGrenade::ignored*)::g_SendProps
 b ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 b ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 b ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 b ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 b ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 b ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 b ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 b ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 b ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 b ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 b ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 b ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 b ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 b ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 b ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)::g_SendProps
 b ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 b ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 b ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 b ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 b ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 b ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 b ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 b ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 b ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 b ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 b ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 b ServerClassInit<DT_TEPlantBomb::ignored>(DT_TEPlantBomb::ignored*)::g_SendProps
 b ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_SendProps
 b ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 b ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 b ServerClassInit<DT_TERadioIcon::ignored>(DT_TERadioIcon::ignored*)::g_SendProps
 b ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 b ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 b ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 b ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 b ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 b ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 b ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 b ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 b ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_SendProps
 b ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 b ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 b ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 b ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 b ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponAK47::ignored>(DT_WeaponAK47::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponAWP::ignored>(DT_WeaponAWP::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponAug::ignored>(DT_WeaponAug::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponC4::ignored>(DT_WeaponC4::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponDEagle::ignored>(DT_WeaponDEagle::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponElite::ignored>(DT_WeaponElite::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponFamas::ignored>(DT_WeaponFamas::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponFiveSeven::ignored>(DT_WeaponFiveSeven::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponG3SG1::ignored>(DT_WeaponG3SG1::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponGalil::ignored>(DT_WeaponGalil::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponGlock::ignored>(DT_WeaponGlock::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponKnife::ignored>(DT_WeaponKnife::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponM249::ignored>(DT_WeaponM249::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponM3::ignored>(DT_WeaponM3::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponM4A1::ignored>(DT_WeaponM4A1::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponMAC10::ignored>(DT_WeaponMAC10::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponMP5Navy::ignored>(DT_WeaponMP5Navy::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponP228::ignored>(DT_WeaponP228::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponP90::ignored>(DT_WeaponP90::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponSG550::ignored>(DT_WeaponSG550::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponSG552::ignored>(DT_WeaponSG552::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponScout::ignored>(DT_WeaponScout::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponTMP::ignored>(DT_WeaponTMP::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponUMP45::ignored>(DT_WeaponUMP45::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponUSP::ignored>(DT_WeaponUSP::ignored*)::g_SendProps
 b ServerClassInit<DT_WeaponXM1014::ignored>(DT_WeaponXM1014::ignored*)::g_SendProps
 b SharedVarArgs(char*, ...)::curstring
 b SharedVarArgs(char*, ...)::string
 b SoundLevelToString(soundlevel_t)::sz
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::pvs
 b UTIL_VarArgs(char*, ...)::string
 b VolumeToString(float)::sz
 b WaveTrace(char const*, char const*)::s_WaveTrace
 b _ChannelToString(int)::sz
 b _PitchToString(float)::sz
 b _SoundLevelToString(soundlevel_t)::sz
 b _VolumeToString(float)::sz
 b __g_CServerGameEnts_singleton
 b __g_CreateCEffectsServerIEffects_reg
 b __g_CreateCGameMovementIGameMovement_reg
 b __g_CreateCHLTVDirectorIHLTVDirector_reg
 b __g_CreateCPlayerInfoManagerIPlayerInfoManager_reg
 b __g_CreateCPluginBotManagerIBotManager_reg
 b __g_CreateCPluginHelpersCheckIPluginHelpersCheck_reg
 b __g_CreateCServerGameClientsIServerGameClients_reg
 b __g_CreateCServerGameDLLIServerGameDLL_reg
 b __g_CreateCServerGameEntsIServerGameEnts_reg
 b __g_GameRulesRegister_CCSGameRules
 b __g_GameRulesRegister_CMultiplayRules
 b __g_GameRulesRegister_CTeamplayRules
 b _firesmoke
 b _plasma
 b ai_ally_speech_manager
 b ai_battle_line
 b ai_changehintgroup
 b ai_changetarget
 b ai_clear_bad_links_command
 b ai_debug_node_connect_command
 b ai_disable
 b ai_dump_hints_command
 b ai_goal_assault
 b ai_goal_follow
 b ai_goal_lead
 b ai_goal_lead_weapon
 b ai_goal_standoff
 b ai_hint
 b ai_network
 b ai_next_hull
 b ai_nodes
 b ai_reloadresponsesystems_command
 b ai_resume
 b ai_script_conditions
 b ai_set_move_height_epsilon_command
 b ai_show_connect
 b ai_show_connect_fly
 b ai_show_connect_jump
 b ai_show_graph_connect
 b ai_show_grid
 b ai_show_hints
 b ai_show_hull
 b ai_show_node_command
 b ai_show_visibility
 b ai_sound
 b ai_speechfilter
 b ai_step
 b ainet_generate_report_command
 b ainet_generate_report_only_command
 b air_density
 b aiscripted_schedule
 b aitesthull
 b ambient_generic
 b ammoDef
 b ammo_338mag
 b ammo_357sig
 b ammo_45acp
 b ammo_50ae
 b ammo_556mm
 b ammo_556mm_box
 b ammo_57mm
 b ammo_762mm
 b ammo_9mm
 b ammo_buckshot
 b announceTimer
 b assault_assaultpoint
 b assault_rallypoint
 b autobuy
 b beam
 b blockedID
 b blockedIDCount
 b bloodspray
 b bot_add_command
 b bot_add_ct_command
 b bot_add_t_command
 b bot_all_weapons_command
 b bot_goto_mark_command
 b bot_kick_command
 b bot_kill_command
 b bot_knives_only_command
 b bot_pistols_only_command
 b bot_snipers_only_command
 b buddha
 b bugswap
 b cast_hull_command
 b cast_ray_command
 b cc_lookup_crc
 b ch_createairboat
 b ch_createjeep
 b clear_debug_overlays_command
 b completed.1
 b constraintevents
 b cosTable
 b creditsdone
 b cs_bot
 b cs_gamerules
 b cs_player_manager
 b cs_ragdoll
 b cs_stacking_num_levels
 b cs_team_manager
 b cycler
 b cycler_actor
 b cycler_blender
 b cycler_flex
 b cycler_weapon
 b cycler_wreckage
 b defaultresponsesytem
 b dispcoll_drawplane
 b drawcross
 b drawline
 b dump_globals_command
 b dynamic_prop
 b ent_absbox
 b ent_bbox
 b ent_dump
 b ent_fire
 b ent_info
 b ent_messages
 b ent_name
 b ent_pause
 b ent_pivot
 b ent_rbox
 b ent_remove
 b ent_remove_all
 b ent_setname
 b ent_show_response_criteria
 b ent_step
 b ent_text
 b entity_blocker
 b entityflame
 b env_beam
 b env_beverage
 b env_blood
 b env_bubbles
 b env_credits
 b env_detail_controller
 b env_dustpuff
 b env_effectscript
 b env_embers
 b env_entity_dissolver
 b env_entity_igniter
 b env_entity_maker
 b env_explosion
 b env_fade
 b env_fire
 b env_firesensor
 b env_firesource
 b env_fog_controller
 b env_funnel
 b env_global
 b env_glow
 b env_gunfire
 b env_hudhint
 b env_laser
 b env_lightglow
 b env_message
 b env_microphone
 b env_movieexplosion
 b env_muzzleflash
 b env_particle_trail
 b env_particlefire
 b env_particlelight
 b env_particlescript
 b env_particlesmokegrenade
 b env_physexplosion
 b env_physimpact
 b env_physwire
 b env_player_surface_trigger
 b env_quadraticbeam
 b env_ragdoll_boogie
 b env_rotorshooter
 b env_screenoverlay
 b env_shake
 b env_shooter
 b env_smokestack
 b env_soundscape
 b env_soundscape_proxy
 b env_soundscape_triggerable
 b env_spark
 b env_splash
 b env_sprite
 b env_spritetrail
 b env_steam
 b env_steamjet
 b env_sun
 b env_terrainmorph
 b env_texturetoggle
 b env_tracer
 b env_wind
 b env_zoom
 b event_queue_saveload_proxy
 b fadein
 b fadeout
 b filter_activator_class
 b filter_activator_name
 b filter_activator_team
 b filter_base
 b filter_damage_type
 b filter_multi
 b firetarget
 b fish
 b flashbang_projectile
 b fov
 b funCBaseFlex
 b func_areaportal
 b func_areaportalwindow
 b func_bomb_target
 b func_breakable
 b func_breakable_surf
 b func_brush
 b func_button
 b func_buyzone
 b func_clip_vphysics
 b func_conveyor
 b func_door
 b func_door_rotating
 b func_dustcloud
 b func_dustmotes
 b func_fish_pool
 b func_guntarget
 b func_hostage_rescue
 b func_illusionary
 b func_ladderendpoint
 b func_lod
 b func_monitor
 b func_movelinear
 b func_occluder
 b func_physbox
 b func_physbox_multiplayer
 b func_plat
 b func_platrot
 b func_precipitation
 b func_pushable
 b func_rot_button
 b func_rotating
 b func_smokevolume
 b func_tanktrain
 b func_trackautochange
 b func_trackchange
 b func_tracktrain
 b func_train
 b func_traincontrols
 b func_useableladder
 b func_vehicleclip
 b func_wall
 b func_wall_toggle
 b func_water
 b func_water_analog
 b gGlobalState
 b gNullWeaponInfo
 b gSizes
 b g_AISystemHook
 b g_ActivityDataOps
 b g_AimManager
 b g_AnchorList
 b g_BitBufErrorHandler
 b g_BreakModelsPrecached
 b g_BreakSet
 b g_BreakSetIncludingColons
 b g_CAI_BaseNPC_ClassReg
 b g_CAK47_ClassReg
 b g_CBaseAnimatingOverlay_ClassReg
 b g_CBaseAnimating_ClassReg
 b g_CBaseCSGrenadeProjectile_ClassReg
 b g_CBaseCSGrenade_ClassReg
 b g_CBaseCombatCharacter_ClassReg
 b g_CBaseCombatWeapon_ClassReg
 b g_CBaseDoor_ClassReg
 b g_CBaseEntity_ClassReg
 b g_CBaseFlex_ClassReg
 b g_CBaseGrenade_ClassReg
 b g_CBaseParticleEntity_ClassReg
 b g_CBasePlayer_ClassReg
 b g_CBasePropDoor_ClassReg
 b g_CBaseTempEntity_ClassReg
 b g_CBaseViewModel_ClassReg
 b g_CBeam_ClassReg
 b g_CBoneFollower_ClassReg
 b g_CBreakableProp_ClassReg
 b g_CBreakableSurface_ClassReg
 b g_CC4_ClassReg
 b g_CCSGameRulesProxy_ClassReg
 b g_CCSPlayerResource_ClassReg
 b g_CCSPlayer_ClassReg
 b g_CCSRagdoll_ClassReg
 b g_CCSTeam_ClassReg
 b g_CDEagle_ClassReg
 b g_CDynamicLight_ClassReg
 b g_CDynamicProp_ClassReg
 b g_CEmbers_ClassReg
 b g_CEntityDissolve_ClassReg
 b g_CEntityFlame_ClassReg
 b g_CEntityParticleTrail_ClassReg
 b g_CEnvDetailController_ClassReg
 b g_CEnvParticleScript_ClassReg
 b g_CEnvQuadraticBeam_ClassReg
 b g_CEnvScreenOverlay_ClassReg
 b g_CEnvWind_ClassReg
 b g_CFireSmoke_ClassReg
 b g_CFish_ClassReg
 b g_CFlashbang_ClassReg
 b g_CFuncAreaPortalWindow_ClassReg
 b g_CFuncConveyor_ClassReg
 b g_CFuncLadder_ClassReg
 b g_CFuncMonitor_ClassReg
 b g_CFuncOccluder_ClassReg
 b g_CFuncSmokeVolume_ClassReg
 b g_CFuncTrackTrain_ClassReg
 b g_CFunc_Dust_ClassReg
 b g_CFunc_LOD_ClassReg
 b g_CGameRulesProxy_ClassReg
 b g_CHEGrenade_ClassReg
 b g_CHandleTest_ClassReg
 b g_CHostage_ClassReg
 b g_CInfoLadderDismount_ClassReg
 b g_CInfoLightingRelative_ClassReg
 b g_CKnife_ClassReg
 b g_CLightGlow_ClassReg
 b g_CMaterialModifyControl_ClassReg
 b g_CParticleFire_ClassReg
 b g_CPhysBoxMultiplayer_ClassReg
 b g_CPhysBox_ClassReg
 b g_CPhysMagnet_ClassReg
 b g_CPhysicsPropMultiplayer_ClassReg
 b g_CPhysicsProp_ClassReg
 b g_CPlantedC4_ClassReg
 b g_CPlasma_ClassReg
 b g_CPlayerResource_ClassReg
 b g_CPointCamera_ClassReg
 b g_CPrecipitation_ClassReg
 b g_CPredictedViewModel_ClassReg
 b g_CPropJeep_ClassReg
 b g_CPropVehicleDriveable_ClassReg
 b g_CRagdollManager_ClassReg
 b g_CRagdollPropAttached_ClassReg
 b g_CRagdollProp_ClassReg
 b g_CRopeKeyframe_ClassReg
 b g_CSViewVectors
 b g_CShadowControl_ClassReg
 b g_CSmokeGrenade_ClassReg
 b g_CSmokeStack_ClassReg
 b g_CSpotlightEnd_ClassReg
 b g_CSpriteTrail_ClassReg
 b g_CSprite_ClassReg
 b g_CSteamJet_ClassReg
 b g_CSun_ClassReg
 b g_CTEArmorRicochet_ClassReg
 b g_CTEBSPDecal_ClassReg
 b g_CTEBaseBeam_ClassReg
 b g_CTEBeamEntPoint_ClassReg
 b g_CTEBeamEnts_ClassReg
 b g_CTEBeamFollow_ClassReg
 b g_CTEBeamLaser_ClassReg
 b g_CTEBeamPoints_ClassReg
 b g_CTEBeamRingPoint_ClassReg
 b g_CTEBeamRing_ClassReg
 b g_CTEBeamSpline_ClassReg
 b g_CTEBloodSprite_ClassReg
 b g_CTEBloodStream_ClassReg
 b g_CTEBreakModel_ClassReg
 b g_CTEBubbleTrail_ClassReg
 b g_CTEBubbles_ClassReg
 b g_CTEDecal_ClassReg
 b g_CTEDust_ClassReg
 b g_CTEDynamicLight_ClassReg
 b g_CTEEffectDispatch_ClassReg
 b g_CTEEnergySplash_ClassReg
 b g_CTEExplosion_ClassReg
 b g_CTEFireBullets_ClassReg
 b g_CTEFizz_ClassReg
 b g_CTEFootprintDecal_ClassReg
 b g_CTEGaussExplosion_ClassReg
 b g_CTEGlowSprite_ClassReg
 b g_CTEImpact_ClassReg
 b g_CTEKillPlayerAttachments_ClassReg
 b g_CTELargeFunnel_ClassReg
 b g_CTEMetalSparks_ClassReg
 b g_CTEMuzzleFlash_ClassReg
 b g_CTEParticleSystem_ClassReg
 b g_CTEPhysicsProp_ClassReg
 b g_CTEPlantBomb_ClassReg
 b g_CTEPlayerAnimEvent_ClassReg
 b g_CTEPlayerDecal_ClassReg
 b g_CTEProjectedDecal_ClassReg
 b g_CTERadioIcon_ClassReg
 b g_CTEShatterSurface_ClassReg
 b g_CTEShowLine_ClassReg
 b g_CTESmoke_ClassReg
 b g_CTESparks_ClassReg
 b g_CTESpriteSpray_ClassReg
 b g_CTESprite_ClassReg
 b g_CTEWorldDecal_ClassReg
 b g_CTeam_ClassReg
 b g_CTesla_ClassReg
 b g_CTestTraceline_ClassReg
 b g_CTest_ProxyToggle_Networkable_ClassReg
 b g_CVGuiScreen_ClassReg
 b g_CWaterBullet_ClassReg
 b g_CWaterLODControl_ClassReg
 b g_CWeaponAWP_ClassReg
 b g_CWeaponAug_ClassReg
 b g_CWeaponCSBaseGun_ClassReg
 b g_CWeaponCSBase_ClassReg
 b g_CWeaponCubemap_ClassReg
 b g_CWeaponCycler_ClassReg
 b g_CWeaponElite_ClassReg
 b g_CWeaponFamas_ClassReg
 b g_CWeaponFiveSeven_ClassReg
 b g_CWeaponG3SG1_ClassReg
 b g_CWeaponGalil_ClassReg
 b g_CWeaponGlock_ClassReg
 b g_CWeaponM249_ClassReg
 b g_CWeaponM3_ClassReg
 b g_CWeaponM4A1_ClassReg
 b g_CWeaponMAC10_ClassReg
 b g_CWeaponMP5Navy_ClassReg
 b g_CWeaponP228_ClassReg
 b g_CWeaponP90_ClassReg
 b g_CWeaponSG550_ClassReg
 b g_CWeaponSG552_ClassReg
 b g_CWeaponScout_ClassReg
 b g_CWeaponTMP_ClassReg
 b g_CWeaponUMP45_ClassReg
 b g_CWeaponUSP_ClassReg
 b g_CWeaponXM1014_ClassReg
 b g_CWorld_ClassReg
 b g_CheckCCNamesSingleton
 b g_CheckNamesSingleton
 b g_CleanupDefaultRelationships
 b g_CleanupSymbolTable
 b g_CloseCaptionCRCToTokenLookup
 b g_CloseCaptionCRCToTokenLookupSymbols
 b g_ConVarAccessor
 b g_Controller
 b g_DataObjectAccessSystem
 b g_DecalSystem
 b g_DefaultViewVectors
 b g_DeleteList
 b g_EdictTouchLinks
 b g_EntityGroundLinks
 b g_EntityListSystem
 b g_GameMovement
 b g_GameStringPool
 b g_GlobalSymbolDataOps
 b g_Helper
 b g_HighestActivity
 b g_HighestEvent
 b g_InRestore
 b g_LagCompensationManager
 b g_Mathlib_GammaToLinear
 b g_Mathlib_LinearToGamma
 b g_MessageEntities
 b g_ModelSoundsCache
 b g_MoveData
 b g_MovieExplosion_ClassReg
 b g_NotifyList
 b g_OneWayTransition
 b g_ParticleSmokeGrenade_ClassReg
 b g_PhysAverageSimTime
 b g_PlayerMove
 b g_PositionWatcherList
 b g_PostClientManager
 b g_Predictables
 b g_RecipientFilterPredictionSystem
 b g_RestoredEntities
 b g_SceneCache
 b g_SoundEmitterSystem
 b g_StudioBoneCache
 b g_TEArmorRicochet
 b g_TEBSPDecal
 b g_TEBeamEntPoint
 b g_TEBeamEnts
 b g_TEBeamFollow
 b g_TEBeamLaser
 b g_TEBeamPoints
 b g_TEBeamRing
 b g_TEBeamRingPoint
 b g_TEBeamSpline
 b g_TEBloodSprite
 b g_TEBloodStream
 b g_TEBreakModel
 b g_TEBubbleTrail
 b g_TEBubbles
 b g_TEDecal
 b g_TEDust
 b g_TEDynamicLight
 b g_TEEffectDispatch
 b g_TEEnergySplash
 b g_TEExplosion
 b g_TEFireBullets
 b g_TEFizz
 b g_TEFootprintDecal
 b g_TEGaussExplosion
 b g_TEGlowSprite
 b g_TEImpact
 b g_TEKillPlayerAttachments
 b g_TELargeFunnel
 b g_TEMetalSparks
 b g_TEMuzzleFlash
 b g_TEPlantBomb
 b g_TEPlayerAnimEvent
 b g_TEPlayerDecal
 b g_TEProjectedDecal
 b g_TERadioIcon
 b g_TEShatterSurface
 b g_TEShowLine
 b g_TESmoke
 b g_TESparks
 b g_TESprite
 b g_TESpriteSpray
 b g_TESystem
 b g_TEWorldDecal
 b g_TeleportStack
 b g_Templates
 b g_ThinkChecker
 b g_TokenProcessor
 b g_TouchManager
 b g_TouchTrace
 b g_UserMessages
 b g_WorldEntity
 b g_bPermitDirectSoundPrecache
 b g_fInCleanupDelete
 b g_iDebuggingTransition
 b g_nCommandClientIndex
 b g_pClassnameSpawnPriority
 b g_pClientPutInServerOverride
 b g_pMsgBuffer
 b g_pPrecacheRegisters
 b g_pShadowEntities
 b g_pSoundEnt
 b g_pTestObj
 b game_end
 b game_player_equip
 b game_player_team
 b game_ragdoll_manager
 b game_score
 b game_text
 b game_ui
 b game_weapon_manager
 b game_zone_player
 b generic_actor
 b gib
 b gibshooter
 b give
 b god
 b grenade
 b groundlist
 b guard variable for CAI_AllySpeechManager::GetConceptInfo(char const*)::conceptInfoMap
 b guard variable for CAI_BaseNPC::CallNPCThink()::rebalanceCandidates
 b guard variable for CAI_BaseNPC::MaintainSchedule()::timeLimit
 b guard variable for CAI_BaseNPC::NPCThink()::timer
 b guard variable for CAI_BaseNPC::TranslateActivity(Activity, Activity*)::sUniqueActivities
 b guard variable for CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerEyePosition
 b guard variable for CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerForward
 b guard variable for CAI_FollowBehavior::GetFollowPoint()::invalid
 b guard variable for CAI_Path::BaseGoalPosition() const::vecResult
 b guard variable for CAI_Path::NextWaypointPos() const::invalid
 b guard variable for CAI_TrackPather::TargetPathAcrossDirection() const::s_Result
 b guard variable for CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b guard variable for CBaseCombatWeapon::GetBulletSpread()::cone
 b guard variable for CBasePlayer::EyeAngles()::angEyeWorld
 b guard variable for CBasePlayerAnimState::CalcSequenceIndex(char const*, ...)::dict
 b guard variable for CBeam::GetAbsEndPos() const::vecAbsPos
 b guard variable for CCSBotManager::GetRandomPositionInZone(CCSBotManager::Zone const*) const::pos
 b guard variable for CCSPlayerAnimState::CalcSequenceIndex(char const*, ...)::dict
 b guard variable for CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b guard variable for CHostage::GetCentroid() const::centroid
 b guard variable for CHostage::GetEyes() const::eyes
 b guard variable for CHostage::GetFeet() const::feet
 b guard variable for CIKContext::AddAutoplayLocks(Vector*, Quaternion*)::boneToWorld
 b guard variable for CIKContext::AddSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)::boneToWorld
 b guard variable for CIKContext::SolveAutoplayLocks(Vector*, Quaternion*)::boneToWorld
 b guard variable for CIKContext::SolveSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)::boneToWorld
 b guard variable for CNavArea::Draw() const::blink
 b guard variable for CNavArea::GetCorner(NavCornerType) const::pos
 b guard variable for CSGameState::GetRandomFreeHostagePosition() const::freePos
 b guard variable for CTestTraceline::Spin()::traceline_spin
 b guard variable for CTextStat::GetTextStatsList()::theList
 b guard variable for CWeaponCSBase::GetBulletSpread()::cone
 b guard variable for CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::pos2
 b guard variable for CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::pos3
 b guard variable for CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::q2
 b guard variable for CalcPoseSingle(studiohdr_t const*, Vector*, Quaternion*, int, float, float const*, int, float)::q3
 b guard variable for DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::nameHolder
 b guard variable for DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::nameHolder
 b guard variable for DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::dataDesc
 b guard variable for DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::nameHolder
 b guard variable for DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::nameHolder
 b guard variable for DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::nameHolder
 b guard variable for DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::nameHolder
 b guard variable for DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::nameHolder
 b guard variable for DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::nameHolder
 b guard variable for DataMapInit<AI_Response>(AI_Response*)::nameHolder
 b guard variable for DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 b guard variable for DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::nameHolder
 b guard variable for DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::nameHolder
 b guard variable for DataMapInit<CAISound>(CAISound*)::nameHolder
 b guard variable for DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::nameHolder
 b guard variable for DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::dataDesc
 b guard variable for DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::nameHolder
 b guard variable for DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::nameHolder
 b guard variable for DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::nameHolder
 b guard variable for DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::dataDesc
 b guard variable for DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::nameHolder
 b guard variable for DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::nameHolder
 b guard variable for DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::dataDesc
 b guard variable for DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::nameHolder
 b guard variable for DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::dataDesc
 b guard variable for DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::nameHolder
 b guard variable for DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::dataDesc
 b guard variable for DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::nameHolder
 b guard variable for DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 b guard variable for DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::nameHolder
 b guard variable for DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 b guard variable for DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 b guard variable for DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::nameHolder
 b guard variable for DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::nameHolder
 b guard variable for DataMapInit<CAI_Enemies>(CAI_Enemies*)::nameHolder
 b guard variable for DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 b guard variable for DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::dataDesc
 b guard variable for DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::nameHolder
 b guard variable for DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::nameHolder
 b guard variable for DataMapInit<CAI_FreePass>(CAI_FreePass*)::nameHolder
 b guard variable for DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::dataDesc
 b guard variable for DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::nameHolder
 b guard variable for DataMapInit<CAI_Hint>(CAI_Hint*)::dataDesc
 b guard variable for DataMapInit<CAI_Hint>(CAI_Hint*)::nameHolder
 b guard variable for DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::nameHolder
 b guard variable for DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::nameHolder
 b guard variable for DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::dataDesc
 b guard variable for DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::nameHolder
 b guard variable for DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::nameHolder
 b guard variable for DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::nameHolder
 b guard variable for DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::nameHolder
 b guard variable for DataMapInit<CAI_Motor>(CAI_Motor*)::dataDesc
 b guard variable for DataMapInit<CAI_Motor>(CAI_Motor*)::nameHolder
 b guard variable for DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::nameHolder
 b guard variable for DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::nameHolder
 b guard variable for DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::nameHolder
 b guard variable for DataMapInit<CAI_Navigator>(CAI_Navigator*)::nameHolder
 b guard variable for DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::dataDesc
 b guard variable for DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::nameHolder
 b guard variable for DataMapInit<CAI_Path>(CAI_Path*)::dataDesc
 b guard variable for DataMapInit<CAI_Path>(CAI_Path*)::nameHolder
 b guard variable for DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::nameHolder
 b guard variable for DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::dataDesc
 b guard variable for DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::nameHolder
 b guard variable for DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::nameHolder
 b guard variable for DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::nameHolder
 b guard variable for DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::dataDesc
 b guard variable for DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::nameHolder
 b guard variable for DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::dataDesc
 b guard variable for DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::nameHolder
 b guard variable for DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::dataDesc
 b guard variable for DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::nameHolder
 b guard variable for DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::dataDesc
 b guard variable for DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::nameHolder
 b guard variable for DataMapInit<CAI_Senses>(CAI_Senses*)::dataDesc
 b guard variable for DataMapInit<CAI_Senses>(CAI_Senses*)::nameHolder
 b guard variable for DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::nameHolder
 b guard variable for DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::nameHolder
 b guard variable for DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::nameHolder
 b guard variable for DataMapInit<CAI_Squad>(CAI_Squad*)::dataDesc
 b guard variable for DataMapInit<CAI_Squad>(CAI_Squad*)::nameHolder
 b guard variable for DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::nameHolder
 b guard variable for DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::nameHolder
 b guard variable for DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::nameHolder
 b guard variable for DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::nameHolder
 b guard variable for DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 b guard variable for DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 b guard variable for DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 b guard variable for DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 b guard variable for DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 b guard variable for DataMapInit<CAssaultPoint>(CAssaultPoint*)::dataDesc
 b guard variable for DataMapInit<CAssaultPoint>(CAssaultPoint*)::nameHolder
 b guard variable for DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 b guard variable for DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 b guard variable for DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 b guard variable for DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 b guard variable for DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 b guard variable for DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 b guard variable for DataMapInit<CBaseCSGrenade>(CBaseCSGrenade*)::nameHolder
 b guard variable for DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::dataDesc
 b guard variable for DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::nameHolder
 b guard variable for DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 b guard variable for DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 b guard variable for DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 b guard variable for DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 b guard variable for DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 b guard variable for DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 b guard variable for DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 b guard variable for DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 b guard variable for DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 b guard variable for DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 b guard variable for DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 b guard variable for DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 b guard variable for DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 b guard variable for DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 b guard variable for DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 b guard variable for DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 b guard variable for DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 b guard variable for DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 b guard variable for DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 b guard variable for DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 b guard variable for DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 b guard variable for DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 b guard variable for DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 b guard variable for DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 b guard variable for DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 b guard variable for DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 b guard variable for DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 b guard variable for DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 b guard variable for DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 b guard variable for DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 b guard variable for DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 b guard variable for DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 b guard variable for DataMapInit<CBeam>(CBeam*)::nameHolder
 b guard variable for DataMapInit<CBlendingCycler>(CBlendingCycler*)::nameHolder
 b guard variable for DataMapInit<CBlood>(CBlood*)::nameHolder
 b guard variable for DataMapInit<CBombTarget>(CBombTarget*)::dataDesc
 b guard variable for DataMapInit<CBombTarget>(CBombTarget*)::nameHolder
 b guard variable for DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 b guard variable for DataMapInit<CBreakable>(CBreakable*)::dataDesc
 b guard variable for DataMapInit<CBreakable>(CBreakable*)::nameHolder
 b guard variable for DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 b guard variable for DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 b guard variable for DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 b guard variable for DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 b guard variable for DataMapInit<CBubbling>(CBubbling*)::dataDesc
 b guard variable for DataMapInit<CBubbling>(CBubbling*)::nameHolder
 b guard variable for DataMapInit<CBuyZone>(CBuyZone*)::dataDesc
 b guard variable for DataMapInit<CBuyZone>(CBuyZone*)::nameHolder
 b guard variable for DataMapInit<CCSBot>(CCSBot*)::nameHolder
 b guard variable for DataMapInit<CCSPlayer>(CCSPlayer*)::dataDesc
 b guard variable for DataMapInit<CCSPlayer>(CCSPlayer*)::nameHolder
 b guard variable for DataMapInit<CCSPlayerResource>(CCSPlayerResource*)::nameHolder
 b guard variable for DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 b guard variable for DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 b guard variable for DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 b guard variable for DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 b guard variable for DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 b guard variable for DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 b guard variable for DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 b guard variable for DataMapInit<CCredits>(CCredits*)::dataDesc
 b guard variable for DataMapInit<CCredits>(CCredits*)::nameHolder
 b guard variable for DataMapInit<CCycler>(CCycler*)::nameHolder
 b guard variable for DataMapInit<CDecal>(CDecal*)::dataDesc
 b guard variable for DataMapInit<CDecal>(CDecal*)::nameHolder
 b guard variable for DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 b guard variable for DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 b guard variable for DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 b guard variable for DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 b guard variable for DataMapInit<CEmbers>(CEmbers*)::dataDesc
 b guard variable for DataMapInit<CEmbers>(CEmbers*)::nameHolder
 b guard variable for DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 b guard variable for DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 b guard variable for DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 b guard variable for DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 b guard variable for DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 b guard variable for DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 b guard variable for DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 b guard variable for DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 b guard variable for DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 b guard variable for DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 b guard variable for DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 b guard variable for DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 b guard variable for DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 b guard variable for DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 b guard variable for DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 b guard variable for DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 b guard variable for DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 b guard variable for DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 b guard variable for DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 b guard variable for DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 b guard variable for DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 b guard variable for DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 b guard variable for DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 b guard variable for DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 b guard variable for DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 b guard variable for DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 b guard variable for DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 b guard variable for DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 b guard variable for DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 b guard variable for DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 b guard variable for DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 b guard variable for DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 b guard variable for DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 b guard variable for DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 b guard variable for DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 b guard variable for DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 b guard variable for DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 b guard variable for DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 b guard variable for DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 b guard variable for DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 b guard variable for DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 b guard variable for DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 b guard variable for DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 b guard variable for DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 b guard variable for DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 b guard variable for DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 b guard variable for DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 b guard variable for DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 b guard variable for DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 b guard variable for DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 b guard variable for DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 b guard variable for DataMapInit<CEventAction>(CEventAction*)::nameHolder
 b guard variable for DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 b guard variable for DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 b guard variable for DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 b guard variable for DataMapInit<CFilterName>(CFilterName*)::nameHolder
 b guard variable for DataMapInit<CFire>(CFire*)::dataDesc
 b guard variable for DataMapInit<CFire>(CFire*)::nameHolder
 b guard variable for DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 b guard variable for DataMapInit<CFish>(CFish*)::nameHolder
 b guard variable for DataMapInit<CFishPool>(CFishPool*)::dataDesc
 b guard variable for DataMapInit<CFishPool>(CFishPool*)::nameHolder
 b guard variable for DataMapInit<CFlashbang>(CFlashbang*)::nameHolder
 b guard variable for DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 b guard variable for DataMapInit<CFlextalkActor>(CFlextalkActor*)::nameHolder
 b guard variable for DataMapInit<CFogController>(CFogController*)::nameHolder
 b guard variable for DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 b guard variable for DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 b guard variable for DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 b guard variable for DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 b guard variable for DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 b guard variable for DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 b guard variable for DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 b guard variable for DataMapInit<CFuncMonitor>(CFuncMonitor*)::nameHolder
 b guard variable for DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 b guard variable for DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 b guard variable for DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 b guard variable for DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 b guard variable for DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 b guard variable for DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 b guard variable for DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 b guard variable for DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 b guard variable for DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 b guard variable for DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 b guard variable for DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 b guard variable for DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 b guard variable for DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 b guard variable for DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 b guard variable for DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 b guard variable for DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 b guard variable for DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 b guard variable for DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 b guard variable for DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 b guard variable for DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 b guard variable for DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 b guard variable for DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 b guard variable for DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 b guard variable for DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 b guard variable for DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 b guard variable for DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 b guard variable for DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 b guard variable for DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 b guard variable for DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 b guard variable for DataMapInit<CGameScore>(CGameScore*)::nameHolder
 b guard variable for DataMapInit<CGameText>(CGameText*)::nameHolder
 b guard variable for DataMapInit<CGameUI>(CGameUI*)::dataDesc
 b guard variable for DataMapInit<CGameUI>(CGameUI*)::nameHolder
 b guard variable for DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 b guard variable for DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 b guard variable for DataMapInit<CGenericActor>(CGenericActor*)::nameHolder
 b guard variable for DataMapInit<CGib>(CGib*)::dataDesc
 b guard variable for DataMapInit<CGib>(CGib*)::nameHolder
 b guard variable for DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 b guard variable for DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 b guard variable for DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 b guard variable for DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 b guard variable for DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 b guard variable for DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 b guard variable for DataMapInit<CHEGrenade>(CHEGrenade*)::nameHolder
 b guard variable for DataMapInit<CHostage>(CHostage*)::dataDesc
 b guard variable for DataMapInit<CHostage>(CHostage*)::nameHolder
 b guard variable for DataMapInit<CHostageRescueZone>(CHostageRescueZone*)::dataDesc
 b guard variable for DataMapInit<CHostageRescueZone>(CHostageRescueZone*)::nameHolder
 b guard variable for DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::nameHolder
 b guard variable for DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::nameHolder
 b guard variable for DataMapInit<CInfoViewParameters>(CInfoViewParameters*)::nameHolder
 b guard variable for DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 b guard variable for DataMapInit<CItem>(CItem*)::dataDesc
 b guard variable for DataMapInit<CItem>(CItem*)::nameHolder
 b guard variable for DataMapInit<CItemDefuser>(CItemDefuser*)::dataDesc
 b guard variable for DataMapInit<CItemDefuser>(CItemDefuser*)::nameHolder
 b guard variable for DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 b guard variable for DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 b guard variable for DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 b guard variable for DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 b guard variable for DataMapInit<CKnife>(CKnife*)::dataDesc
 b guard variable for DataMapInit<CKnife>(CKnife*)::nameHolder
 b guard variable for DataMapInit<CLight>(CLight*)::dataDesc
 b guard variable for DataMapInit<CLight>(CLight*)::nameHolder
 b guard variable for DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 b guard variable for DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 b guard variable for DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 b guard variable for DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 b guard variable for DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 b guard variable for DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 b guard variable for DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 b guard variable for DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 b guard variable for DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 b guard variable for DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 b guard variable for DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 b guard variable for DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 b guard variable for DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 b guard variable for DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 b guard variable for DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 b guard variable for DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 b guard variable for DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 b guard variable for DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 b guard variable for DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 b guard variable for DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 b guard variable for DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 b guard variable for DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 b guard variable for DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 b guard variable for DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 b guard variable for DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 b guard variable for DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 b guard variable for DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 b guard variable for DataMapInit<CMessage>(CMessage*)::dataDesc
 b guard variable for DataMapInit<CMessage>(CMessage*)::nameHolder
 b guard variable for DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 b guard variable for DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 b guard variable for DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 b guard variable for DataMapInit<CMotorController>(CMotorController*)::nameHolder
 b guard variable for DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 b guard variable for DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 b guard variable for DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 b guard variable for DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 b guard variable for DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::nameHolder
 b guard variable for DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::nameHolder
 b guard variable for DataMapInit<CNodeEnt>(CNodeEnt*)::nameHolder
 b guard variable for DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 b guard variable for DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 b guard variable for DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 b guard variable for DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 b guard variable for DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 b guard variable for DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 b guard variable for DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 b guard variable for DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 b guard variable for DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 b guard variable for DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 b guard variable for DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 b guard variable for DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 b guard variable for DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 b guard variable for DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 b guard variable for DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 b guard variable for DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 b guard variable for DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 b guard variable for DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 b guard variable for DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 b guard variable for DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 b guard variable for DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 b guard variable for DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 b guard variable for DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 b guard variable for DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 b guard variable for DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 b guard variable for DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 b guard variable for DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 b guard variable for DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 b guard variable for DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 b guard variable for DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 b guard variable for DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 b guard variable for DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 b guard variable for DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 b guard variable for DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 b guard variable for DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 b guard variable for DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 b guard variable for DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 b guard variable for DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 b guard variable for DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 b guard variable for DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::nameHolder
 b guard variable for DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 b guard variable for DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 b guard variable for DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 b guard variable for DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 b guard variable for DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 b guard variable for DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 b guard variable for DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 b guard variable for DataMapInit<CPlantedC4>(CPlantedC4*)::dataDesc
 b guard variable for DataMapInit<CPlantedC4>(CPlantedC4*)::nameHolder
 b guard variable for DataMapInit<CPlasma>(CPlasma*)::nameHolder
 b guard variable for DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 b guard variable for DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 b guard variable for DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 b guard variable for DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 b guard variable for DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 b guard variable for DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 b guard variable for DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 b guard variable for DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 b guard variable for DataMapInit<CPointCamera>(CPointCamera*)::dataDesc
 b guard variable for DataMapInit<CPointCamera>(CPointCamera*)::nameHolder
 b guard variable for DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 b guard variable for DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 b guard variable for DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 b guard variable for DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 b guard variable for DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 b guard variable for DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 b guard variable for DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 b guard variable for DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 b guard variable for DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 b guard variable for DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 b guard variable for DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 b guard variable for DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 b guard variable for DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 b guard variable for DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 b guard variable for DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 b guard variable for DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 b guard variable for DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 b guard variable for DataMapInit<CPropJeep>(CPropJeep*)::dataDesc
 b guard variable for DataMapInit<CPropJeep>(CPropJeep*)::nameHolder
 b guard variable for DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 b guard variable for DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 b guard variable for DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 b guard variable for DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 b guard variable for DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 b guard variable for DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 b guard variable for DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 b guard variable for DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 b guard variable for DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 b guard variable for DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 b guard variable for DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 b guard variable for DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 b guard variable for DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 b guard variable for DataMapInit<CRallyPoint>(CRallyPoint*)::dataDesc
 b guard variable for DataMapInit<CRallyPoint>(CRallyPoint*)::nameHolder
 b guard variable for DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 b guard variable for DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 b guard variable for DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 b guard variable for DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 b guard variable for DataMapInit<CRopeAnchor>(CRopeAnchor*)::dataDesc
 b guard variable for DataMapInit<CRopeAnchor>(CRopeAnchor*)::nameHolder
 b guard variable for DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 b guard variable for DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 b guard variable for DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 b guard variable for DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 b guard variable for DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 b guard variable for DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 b guard variable for DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 b guard variable for DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 b guard variable for DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 b guard variable for DataMapInit<CScriptedTarget>(CScriptedTarget*)::dataDesc
 b guard variable for DataMapInit<CScriptedTarget>(CScriptedTarget*)::nameHolder
 b guard variable for DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 b guard variable for DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 b guard variable for DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 b guard variable for DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 b guard variable for DataMapInit<CSmokeGrenade>(CSmokeGrenade*)::nameHolder
 b guard variable for DataMapInit<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile*)::dataDesc
 b guard variable for DataMapInit<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile*)::nameHolder
 b guard variable for DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 b guard variable for DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 b guard variable for DataMapInit<CSound>(CSound*)::nameHolder
 b guard variable for DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 b guard variable for DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 b guard variable for DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 b guard variable for DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 b guard variable for DataMapInit<CSprite>(CSprite*)::dataDesc
 b guard variable for DataMapInit<CSprite>(CSprite*)::nameHolder
 b guard variable for DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 b guard variable for DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 b guard variable for DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 b guard variable for DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 b guard variable for DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 b guard variable for DataMapInit<CSun>(CSun*)::nameHolder
 b guard variable for DataMapInit<CSurroundTest>(CSurroundTest*)::dataDesc
 b guard variable for DataMapInit<CSurroundTest>(CSurroundTest*)::nameHolder
 b guard variable for DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 b guard variable for DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 b guard variable for DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 b guard variable for DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 b guard variable for DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 b guard variable for DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 b guard variable for DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::dataDesc
 b guard variable for DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::nameHolder
 b guard variable for DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::dataDesc
 b guard variable for DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::nameHolder
 b guard variable for DataMapInit<CTerrainMorph>(CTerrainMorph*)::dataDesc
 b guard variable for DataMapInit<CTerrainMorph>(CTerrainMorph*)::nameHolder
 b guard variable for DataMapInit<CTesla>(CTesla*)::dataDesc
 b guard variable for DataMapInit<CTesla>(CTesla*)::nameHolder
 b guard variable for DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 b guard variable for DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 b guard variable for DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 b guard variable for DataMapInit<CThrustController>(CThrustController*)::nameHolder
 b guard variable for DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 b guard variable for DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 b guard variable for DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 b guard variable for DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 b guard variable for DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 b guard variable for DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 b guard variable for DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 b guard variable for DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 b guard variable for DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 b guard variable for DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 b guard variable for DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 b guard variable for DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 b guard variable for DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 b guard variable for DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 b guard variable for DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 b guard variable for DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 b guard variable for DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 b guard variable for DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 b guard variable for DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 b guard variable for DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 b guard variable for DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 b guard variable for DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 b guard variable for DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 b guard variable for DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 b guard variable for DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 b guard variable for DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 b guard variable for DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 b guard variable for DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 b guard variable for DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 b guard variable for DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 b guard variable for DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 b guard variable for DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 b guard variable for DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 b guard variable for DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 b guard variable for DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 b guard variable for DataMapInit<CWeaponAWP>(CWeaponAWP*)::dataDesc
 b guard variable for DataMapInit<CWeaponAWP>(CWeaponAWP*)::nameHolder
 b guard variable for DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::dataDesc
 b guard variable for DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::nameHolder
 b guard variable for DataMapInit<CWeaponCycler>(CWeaponCycler*)::nameHolder
 b guard variable for DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 b guard variable for DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 b guard variable for DataMapInit<CWorld>(CWorld*)::nameHolder
 b guard variable for DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 b guard variable for DataMapInit<CWreckage>(CWreckage*)::nameHolder
 b guard variable for DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 b guard variable for DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 b guard variable for DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 b guard variable for DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 b guard variable for DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 b guard variable for DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 b guard variable for DataMapInit<HintNodeData>(HintNodeData*)::nameHolder
 b guard variable for DataMapInit<JeepWaterData_t>(JeepWaterData_t*)::nameHolder
 b guard variable for DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 b guard variable for DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 b guard variable for DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 b guard variable for DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 b guard variable for DataMapInit<Response>(Response*)::nameHolder
 b guard variable for DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 b guard variable for DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 b guard variable for DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 b guard variable for DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 b guard variable for DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 b guard variable for DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::nameHolder
 b guard variable for DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 b guard variable for DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 b guard variable for DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 b guard variable for DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 b guard variable for DataMapInit<locksound_t>(locksound_t*)::nameHolder
 b guard variable for DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 b guard variable for DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 b guard variable for DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 b guard variable for DataMapInit<template_t>(template_t*)::nameHolder
 b guard variable for DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 b guard variable for DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 b guard variable for DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 b guard variable for DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 b guard variable for DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 b guard variable for EntityFactoryDictionary()::s_EntityFactory
 b guard variable for GetSceneManager()::s_SceneManager
 b guard variable for MissingSceneWarning(char const*)::missing
 b guard variable for MoveHelperServer()::s_MoveHelperServer
 b guard variable for ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CHostage::ignored>(DT_CHostage::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSPlayerResource::ignored>(DT_CSPlayerResource::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Flashbang::ignored>(DT_Flashbang::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_HEGrenade::ignored>(DT_HEGrenade::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_LocalActiveWeaponKnifeData::ignored>(DT_LocalActiveWeaponKnifeData::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PlantedC4::ignored>(DT_PlantedC4::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PropJeep::ignored>(DT_PropJeep::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_SmokeGrenade::ignored>(DT_SmokeGrenade::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEPlantBomb::ignored>(DT_TEPlantBomb::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TERadioIcon::ignored>(DT_TERadioIcon::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponAK47::ignored>(DT_WeaponAK47::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponAWP::ignored>(DT_WeaponAWP::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponAug::ignored>(DT_WeaponAug::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponC4::ignored>(DT_WeaponC4::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponDEagle::ignored>(DT_WeaponDEagle::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponElite::ignored>(DT_WeaponElite::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponFamas::ignored>(DT_WeaponFamas::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponFiveSeven::ignored>(DT_WeaponFiveSeven::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponG3SG1::ignored>(DT_WeaponG3SG1::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponGalil::ignored>(DT_WeaponGalil::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponGlock::ignored>(DT_WeaponGlock::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponKnife::ignored>(DT_WeaponKnife::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponM249::ignored>(DT_WeaponM249::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponM3::ignored>(DT_WeaponM3::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponM4A1::ignored>(DT_WeaponM4A1::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponMAC10::ignored>(DT_WeaponMAC10::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponMP5Navy::ignored>(DT_WeaponMP5Navy::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponP228::ignored>(DT_WeaponP228::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponP90::ignored>(DT_WeaponP90::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponSG550::ignored>(DT_WeaponSG550::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponSG552::ignored>(DT_WeaponSG552::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponScout::ignored>(DT_WeaponScout::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponTMP::ignored>(DT_WeaponTMP::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponUMP45::ignored>(DT_WeaponUMP45::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponUSP::ignored>(DT_WeaponUSP::ignored*)::g_SendProps
 b guard variable for ServerClassInit<DT_WeaponXM1014::ignored>(DT_WeaponXM1014::ignored*)::g_SendProps
 b guard variable for UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b guard variable for WaveTrace(char const*, char const*)::s_WaveTrace
 b handle_dummy
 b handle_test
 b hegrenade_projectile
 b hostage_entity
 b hullcolor
 b hurtme
 b ice_sbox
 b ice_sboxes_initialised
 b info_camera_link
 b info_constraint_anchor
 b info_hint
 b info_intermission
 b info_ladder
 b info_ladder_dismount
 b info_landmark
 b info_lighting_relative
 b info_map_parameters
 b info_mass_center
 b info_node
 b info_node_air
 b info_node_air_hint
 b info_node_climb
 b info_node_hint
 b info_node_link
 b info_node_link_controller
 b info_null
 b info_player_counterterrorist
 b info_player_deathmatch
 b info_player_logo
 b info_player_start
 b info_player_teamspawn
 b info_player_terrorist
 b info_projecteddecal
 b info_target
 b info_teleport_destination
 b info_vehicle_groundspawn
 b info_view_parameters
 b infodecal
 b instanced_scripted_scene
 b item_assaultsuit
 b item_defuser
 b item_kevlar
 b item_nvgs
 b item_sodacan
 b kdtree_test
 b keyframe_rope
 b keyframe_track
 b kill
 b lastMsgTime
 b light
 b light_dynamic
 b light_environment
 b light_glspot
 b light_spot
 b lineartoscreen
 b lineartotexture
 b logic_auto
 b logic_autosave
 b logic_branch
 b logic_case
 b logic_choreographed_scene
 b logic_collision_pair
 b logic_compare
 b logic_lineto
 b logic_measure_movement
 b logic_multicompare
 b logic_navigation
 b logic_proximity
 b logic_relay
 b logic_timer
 b m_WeaponInfoDatabase
 b map_setbombradius_command
 b map_showbombradius_command
 b map_showspawnpoints_command
 b material_modify_control
 b math_colorblend
 b math_counter
 b math_remap
 b model_studio
 b momentary_door
 b momentary_rot_button
 b monster_furniture
 b monster_generic
 b motdfile
 b move_keyframed
 b move_rope
 b multisource
 b nav_analyze
 b nav_avoid
 b nav_begin_area
 b nav_build_ladder
 b nav_check_file_consistency
 b nav_check_floor
 b nav_clear_walkable_marks
 b nav_compress_id
 b nav_connect
 b nav_corner_lower
 b nav_corner_place_on_ground
 b nav_corner_raise
 b nav_corner_select
 b nav_crouch
 b nav_delete
 b nav_disconnect
 b nav_dont_hide
 b nav_end_area
 b nav_generate
 b nav_generate_incremental
 b nav_jump
 b nav_ladder_flip
 b nav_load
 b nav_make_sniper_spots
 b nav_mark
 b nav_mark_unnamed
 b nav_mark_walkable
 b nav_merge
 b nav_no_hostages
 b nav_no_jump
 b nav_place_floodfill
 b nav_place_list
 b nav_place_pick
 b nav_place_replace
 b nav_precise
 b nav_remove_unused_jump_areas
 b nav_run
 b nav_save
 b nav_set_place_mode
 b nav_show_ladder_bounds
 b nav_splice
 b nav_split
 b nav_stand
 b nav_stop
 b nav_strip
 b nav_toggle_place_mode
 b nav_toggle_place_painting
 b nav_transient
 b nav_unmark
 b nav_update_blocked
 b nav_use_place
 b nav_walk
 b nav_warp_to_mark
 b nextPitch
 b noclip
 b npc_ammo_deplete_command
 b npc_bipass
 b npc_combat
 b npc_conditions
 b npc_create
 b npc_create_aimed
 b npc_destroy
 b npc_destroy_unselected
 b npc_enemies
 b npc_focus
 b npc_freeze
 b npc_furniture
 b npc_go
 b npc_go_do_run
 b npc_go_random
 b npc_heal_command
 b npc_kill
 b npc_nearest
 b npc_reset
 b npc_route
 b npc_select
 b npc_speakall_command
 b npc_squads
 b npc_steering
 b npc_steering_all
 b npc_task_text
 b npc_tasks
 b npc_thinknow_command
 b npc_vehicledriver
 b npc_viewcone
 b num_teams
 b old_armor
 b path_corner
 b path_corner_crash
 b path_track
 b phys_ballsocket
 b phys_bone_follower
 b phys_constraint
 b phys_constraintsystem
 b phys_convert
 b phys_hinge
 b phys_keepupright
 b phys_lengthconstraint
 b phys_magnet
 b phys_motor
 b phys_penetration_error_time
 b phys_pulleyconstraint
 b phys_ragdollconstraint
 b phys_ragdollmagnet
 b phys_slideconstraint
 b phys_spring
 b phys_thruster
 b phys_torque
 b physics_budget_command
 b physics_cannister
 b physics_debug_entity_command
 b physics_entity_solver
 b physics_highlight_active_command
 b physics_npc_solver
 b physics_prop
 b physics_prop_ragdoll
 b physics_report_active_command
 b physics_select_command
 b physicsshadowupdate_render
 b physswap
 b picker
 b placeDirectory
 b planted_c4
 b player
 b playerCallback
 b player_loadsaved
 b player_manager
 b player_speedmod
 b player_weaponstrip
 b point_anglesensor
 b point_angularvelocitysensor
 b point_camera
 b point_clientcommand
 b point_devshot_camera
 b point_enable_motion_fixup
 b point_hurt
 b point_message
 b point_playermoveconstraint
 b point_servercommand
 b point_spotlight
 b point_surroundtest
 b point_teleport
 b point_template
 b point_tesla
 b point_viewcontrol
 b precache_function_EditNav_Precache
 b precache_function_EffectsPrecache
 b precache_other_entityflame
 b precache_other_item_defuser
 b precache_other_planted_c4
 b precache_other_player
 b precache_other_spraycan
 b precache_other_vgui_screen
 b precache_weapon_flashbang_projectile
 b precache_weapon_hegrenade_projectile
 b precache_weapon_smokegrenade_projectile
 b precache_weapon_weapon_ak47
 b precache_weapon_weapon_aug
 b precache_weapon_weapon_awp
 b precache_weapon_weapon_c4
 b precache_weapon_weapon_deagle
 b precache_weapon_weapon_elite
 b precache_weapon_weapon_famas
 b precache_weapon_weapon_fiveseven
 b precache_weapon_weapon_flashbang
 b precache_weapon_weapon_g3sg1
 b precache_weapon_weapon_galil
 b precache_weapon_weapon_glock
 b precache_weapon_weapon_hegrenade
 b precache_weapon_weapon_knife
 b precache_weapon_weapon_m249
 b precache_weapon_weapon_m3
 b precache_weapon_weapon_m4a1
 b precache_weapon_weapon_mac10
 b precache_weapon_weapon_mp5navy
 b precache_weapon_weapon_p228
 b precache_weapon_weapon_p90
 b precache_weapon_weapon_scout
 b precache_weapon_weapon_sg550
 b precache_weapon_weapon_sg552
 b precache_weapon_weapon_smokegrenade
 b precache_weapon_weapon_tmp
 b precache_weapon_weapon_ump45
 b precache_weapon_weapon_usp
 b precache_weapon_weapon_xm1014
 b predicted_viewmodel
 b prop_debug
 b prop_door_rotating
 b prop_dynamic
 b prop_dynamic_ornament
 b prop_dynamic_override
 b prop_physics
 b prop_physics_multiplayer
 b prop_physics_override
 b prop_physics_respawnable
 b prop_ragdoll
 b prop_ragdoll_attached
 b prop_sphere
 b prop_vehicle
 b prop_vehicle_driveable
 b raggib
 b rebuy
 b replaydelay
 b report_entities_command
 b report_simthinklist_command
 b report_soundpatch_command
 b report_touchlinks_command
 b rgv3tStuckTable
 b rope_anchor
 b s_BotManager
 b s_BraceCharacters
 b s_BulletGroupCounter
 b s_DirtyKDTree
 b s_EffectServer
 b s_GameSystems
 b s_HLTVDirector
 b s_IKSaveRestoreOp
 b s_Microphones
 b s_PlayerInfoManager
 b s_PushedEntities
 b s_RemoveImmediateSemaphore
 b s_SoundPatchSaveRestoreOps
 b s_TEPhysicsProp
 b s_b3DNowEnabled
 b s_bMMXEnabled
 b s_bMathlibInitialized
 b s_bSSE2Enabled
 b s_bSSEEnabled
 b s_bSystemsInitted
 b s_detailController
 b s_factories
 b s_iBeamSprite
 b s_pClassLists
 b s_pMapName
 b s_pSystemList
 b s_shared_token
 b s_vecWindVelocity
 b say
 b say_team
 b scene_allowoverrides
 b scene_flush_command
 b scene_forcecombined
 b scene_manager
 b scene_maxcaptionradious
 b scene_print
 b scene_showfaceto
 b scene_showlook
 b scene_showmoveto
 b scripted_scene
 b scripted_sentence
 b scripted_sequence
 b scripted_target
 b setang
 b setmodel
 b setpos
 b shadow_control
 b shake
 b showtriggers_toggle
 b simple_physics_brush
 b simple_physics_prop
 b sky_camera
 b smokegrenade_projectile
 b smoothstairs
 b soundent
 b soundpatch_captionlength
 b soundscape_flush_command
 b spark_shower
 b spotlight_end
 b spraycan
 b st_szNextMap
 b st_szNextSpot
 b surfaceprop_command
 b sv_alternateticks
 b sv_debugresponses
 b sv_dumpresponses
 b sv_findsoundname_command
 b sv_showhitboxes
 b sv_showladders
 b sv_soundemitter_filecheck_command
 b sv_soundemitter_flush_command
 b sv_soundemitter_trace
 b sv_soundscape_printdebuginfo_command
 b sv_thinktimecheck
 b tanktrain_ai
 b tanktrain_aitarget
 b target_cdaudio
 b target_changegravity
 b te_tester
 b team_manager
 b team_names
 b team_scores
 b tectonic
 b test_dispatcheffect
 b test_effect
 b test_entity_blocker
 b test_proxytoggle
 b test_traceline
 b texgammatable
 b texturetolinear
 b timeleft_command
 b trigger
 b trigger_autosave
 b trigger_brush
 b trigger_cdaudio
 b trigger_changelevel
 b trigger_gravity
 b trigger_hurt
 b trigger_impact
 b trigger_look
 b trigger_multiple
 b trigger_once
 b trigger_playermovement
 b trigger_proximity
 b trigger_push
 b trigger_remove
 b trigger_soundscape
 b trigger_teleport
 b trigger_togglesave
 b trigger_transition
 b trigger_vphysics_motion
 b trigger_wind
 b tv_delay
 b use
 b variant_t::ToString() const::szBuf
 b vec2_invalid
 b vec2_origin
 b vgui_screen
 b vgui_screen_team
 b viewmodel
 b voxeltree_box
 b voxeltree_playerview
 b voxeltree_sphere
 b voxeltree_view
 b water_lod_control
 b waterbullet
 b wc_air_edit_further
 b wc_air_edit_nearer
 b wc_air_node_edit
 b wc_create
 b wc_destroy
 b wc_destroy_undo
 b wc_link_edit
 b wc_update_entity_command
 b weapon_ak47
 b weapon_aug
 b weapon_awp
 b weapon_basecsgrenade
 b weapon_c4
 b weapon_cs_base
 b weapon_csbase_gun
 b weapon_cubemap
 b weapon_deagle
 b weapon_elite
 b weapon_famas
 b weapon_fiveseven
 b weapon_flashbang
 b weapon_g3sg1
 b weapon_galil
 b weapon_glock
 b weapon_hegrenade
 b weapon_knife
 b weapon_m249
 b weapon_m3
 b weapon_m4a1
 b weapon_mac10
 b weapon_mp5navy
 b weapon_p228
 b weapon_p90
 b weapon_scout
 b weapon_sg550
 b weapon_sg552
 b weapon_smokegrenade
 b weapon_tmp
 b weapon_ump45
 b weapon_usp
 b weapon_xm1014
 b window_pane
 b world_items
 b worldspawn
 cos@@GLIBC_2.0
 cosf@@GLIBC_2.0
 d AI_DEFAULT_STANDOFF_PARAMS
 d AI_SAVE_RESTORE_VERSION
 d ActivityList_RegisterSharedActivity(char const*, int)::lastActivityIndex
 d Bias(float, float)::lastAmt
 d BotStatement::Update()::speak
 d CAI_BaseNPC::AddActivityToSR(char const*, int)::lastActID
 d CAI_BaseNPC::CallNPCThink()::frameTimeLimit
 d CAI_BaseNPC::CallNPCThink()::iPrevFrame
 d CAI_BaseNPC::ClearSenseConditions()::conditionsToClear
 d CAI_BaseNPC::DrawDebugTextOverlays()::pMoveNames
 d CAI_BaseNPC::DrawDebugTextOverlays()::pStateNames
 d CAI_BaseNPC::IsScheduleValid()::pError
 d CAI_BaseNPC::NPCThink()::g_DecisionIntervals
 d CAI_BaseNPC::NPCThink()::ppszEfficiencies
 d CAI_BaseNPC::NPCThink()::ppszMoveEfficiencies
 d CAI_BaseNPC::OnListened()::conditionsToClear
 d CAI_BaseNPC::OnLooked(int)::conditionsToClear
 d CAI_BaseNPC::ReportAIState()::pStateNames
 d CAI_BaseNPC::UpdateEfficiency(bool)::iPrevFrame
 d CAI_BaseNPC::UpdateEfficiency(bool)::mappings
 d CAI_ExpresserHost_DoModifyOrAppendCriteria(CAI_BaseNPC*, AI_CriteriaSet&)::pStateNames
 d CAI_Motor::MoveNormalExecute(AILocalMoveGoal_t const&)::moveResults
 d CAI_Navigator::Move(float)::failures
 d CAI_Navigator::SimplifyPathForward(float)::fullScanParams
 d CAI_Navigator::SimplifyPathQuick()::quickScanParams
 d CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLines(Vector const&, Vector const&, Vector const&, AIMoveTrace_t const&, AIMoveTrace_t const&, bool)::s_TriangulationColor
 d CAI_ScriptConditions::EvalState(CAI_ScriptConditions::EvalArgs_t const&)::stateVals
 d CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)::forcedStatesMap
 d CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)::g_DamageConditions
 d CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)::g_GeneralConditions
 d CBaseCombatWeapon::GetProficiencyValues()::defaultWeaponProficiencyTable
 d CBaseRopePhysics::ApplyConstraints(CSimplePhysics::CNode*, int)::nIterations
 d CBaseRopePhysics::Simulate(float)::flEnergy
 d CCSBot::GetDispositionName() const::name
 d CCSBot::GetMoraleName() const::name
 d CCSBot::GetTaskName() const::name
 d CCSBotManager::OnServerShutdown(IGameEvent*)::botVars
 d CCSHLTVDirector::GetModEvents()::s_modevents
 d CCSPlayer::State_LookupInfo(CSPlayerState)::playerStateInfos
 d CC_KDTreeTest()::bFirst
 d CDecal::StaticDecal()::CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)::ppszIgnoredClasses
 d CEnvMicrophone::Spawn()::nFlags
 d CGlobalState::DumpGlobals()::estates
 d CHLTVDirector::GetModEvents()::s_modevents
 d CNavNode::CNavNode(Vector const&, Vector const&, CNavNode*)::nextID
 d CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)::lastName
 d ConCommandBase::Create(char const*, char const*, int)::empty_string
 d ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(ConVar*, char const*))::empty_string
 d CreateStuckTable()::firsttime
 d DW.ref.__gxx_personality_v0
 d DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::dataDesc
 d DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::dataDesc
 d DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::dataDesc
 d DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::dataDesc
 d DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::dataDesc
 d DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::dataDesc
 d DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::dataDesc
 d DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::dataDesc
 d DataMapInit<AI_Response>(AI_Response*)::dataDesc
 d DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::dataDesc
 d DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::dataDesc
 d DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::dataDesc
 d DataMapInit<CAISound>(CAISound*)::dataDesc
 d DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::dataDesc
 d DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::dataDesc
 d DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::dataDesc
 d DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::dataDesc
 d DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::dataDesc
 d DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::dataDesc
 d DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::dataDesc
 d DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::dataDesc
 d DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::dataDesc
 d DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::dataDesc
 d DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::dataDesc
 d DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::dataDesc
 d DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::dataDesc
 d DataMapInit<CAI_Enemies>(CAI_Enemies*)::dataDesc
 d DataMapInit<CAI_Expresser>(CAI_Expresser*)::dataDesc
 d DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::dataDesc
 d DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::dataDesc
 d DataMapInit<CAI_FreePass>(CAI_FreePass*)::dataDesc
 d DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::dataDesc
 d DataMapInit<CAI_Hint>(CAI_Hint*)::dataDesc
 d DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::dataDesc
 d DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::dataDesc
 d DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::dataDesc
 d DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::dataDesc
 d DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::dataDesc
 d DataMapInit<CAI_Motor>(CAI_Motor*)::dataDesc
 d DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::dataDesc
 d DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::dataDesc
 d DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::dataDesc
 d DataMapInit<CAI_Navigator>(CAI_Navigator*)::dataDesc
 d DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::dataDesc
 d DataMapInit<CAI_Path>(CAI_Path*)::dataDesc
 d DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::dataDesc
 d DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::dataDesc
 d DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::dataDesc
 d DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::dataDesc
 d DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::dataDesc
 d DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::dataDesc
 d DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::dataDesc
 d DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::dataDesc
 d DataMapInit<CAI_Senses>(CAI_Senses*)::dataDesc
 d DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::dataDesc
 d DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::dataDesc
 d DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::dataDesc
 d DataMapInit<CAI_Squad>(CAI_Squad*)::dataDesc
 d DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::dataDesc
 d DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::dataDesc
 d DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::dataDesc
 d DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 d DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 d DataMapInit<CAreaPortal>(CAreaPortal*)::dataDesc
 d DataMapInit<CAssaultPoint>(CAssaultPoint*)::dataDesc
 d DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 d DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 d DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 d DataMapInit<CBaseCSGrenade>(CBaseCSGrenade*)::dataDesc
 d DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::dataDesc
 d DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 d DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 d DataMapInit<CBaseDMStart>(CBaseDMStart*)::dataDesc
 d DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 d DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 d DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 d DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 d DataMapInit<CBaseFire>(CBaseFire*)::dataDesc
 d DataMapInit<CBaseFlex>(CBaseFlex*)::dataDesc
 d DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 d DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::dataDesc
 d DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 d DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 d DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 d DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 d DataMapInit<CBaseToggle>(CBaseToggle*)::dataDesc
 d DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 d DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::dataDesc
 d DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 d DataMapInit<CBeam>(CBeam*)::dataDesc
 d DataMapInit<CBlendingCycler>(CBlendingCycler*)::dataDesc
 d DataMapInit<CBlood>(CBlood*)::dataDesc
 d DataMapInit<CBombTarget>(CBombTarget*)::dataDesc
 d DataMapInit<CBoneFollower>(CBoneFollower*)::dataDesc
 d DataMapInit<CBreakable>(CBreakable*)::dataDesc
 d DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 d DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 d DataMapInit<CBubbling>(CBubbling*)::dataDesc
 d DataMapInit<CBuyZone>(CBuyZone*)::dataDesc
 d DataMapInit<CCSPlayer>(CCSPlayer*)::dataDesc
 d DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 d DataMapInit<CCollisionProperty>(CCollisionProperty*)::dataDesc
 d DataMapInit<CConstantForceController>(CConstantForceController*)::dataDesc
 d DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::dataDesc
 d DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 d DataMapInit<CCredits>(CCredits*)::dataDesc
 d DataMapInit<CCycler>(CCycler*)::dataDesc
 d DataMapInit<CDecal>(CDecal*)::dataDesc
 d DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 d DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 d DataMapInit<CEmbers>(CEmbers*)::dataDesc
 d DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 d DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 d DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::dataDesc
 d DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 d DataMapInit<CEnvBeverage>(CEnvBeverage*)::dataDesc
 d DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::dataDesc
 d DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 d DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 d DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 d DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 d DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 d DataMapInit<CEnvFireSource>(CEnvFireSource*)::dataDesc
 d DataMapInit<CEnvGlobal>(CEnvGlobal*)::dataDesc
 d DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 d DataMapInit<CEnvHudHint>(CEnvHudHint*)::dataDesc
 d DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 d DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 d DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::dataDesc
 d DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::dataDesc
 d DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 d DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::dataDesc
 d DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 d DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 d DataMapInit<CEnvShooter>(CEnvShooter*)::dataDesc
 d DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 d DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::dataDesc
 d DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 d DataMapInit<CEnvSplash>(CEnvSplash*)::dataDesc
 d DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 d DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 d DataMapInit<CEnvZoom>(CEnvZoom*)::dataDesc
 d DataMapInit<CEventAction>(CEventAction*)::dataDesc
 d DataMapInit<CEventQueue>(CEventQueue*)::dataDesc
 d DataMapInit<CFilterClass>(CFilterClass*)::dataDesc
 d DataMapInit<CFilterMultiple>(CFilterMultiple*)::dataDesc
 d DataMapInit<CFilterName>(CFilterName*)::dataDesc
 d DataMapInit<CFire>(CFire*)::dataDesc
 d DataMapInit<CFireSmoke>(CFireSmoke*)::dataDesc
 d DataMapInit<CFishPool>(CFishPool*)::dataDesc
 d DataMapInit<CFlexCycler>(CFlexCycler*)::dataDesc
 d DataMapInit<CFlextalkActor>(CFlextalkActor*)::dataDesc
 d DataMapInit<CFogController>(CFogController*)::dataDesc
 d DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::dataDesc
 d DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::dataDesc
 d DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::dataDesc
 d DataMapInit<CFuncBrush>(CFuncBrush*)::dataDesc
 d DataMapInit<CFuncConveyor>(CFuncConveyor*)::dataDesc
 d DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 d DataMapInit<CFuncMonitor>(CFuncMonitor*)::dataDesc
 d DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 d DataMapInit<CFuncOccluder>(CFuncOccluder*)::dataDesc
 d DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 d DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::dataDesc
 d DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 d DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::dataDesc
 d DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 d DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::dataDesc
 d DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 d DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 d DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 d DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 d DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::dataDesc
 d DataMapInit<CFuncWall>(CFuncWall*)::dataDesc
 d DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::dataDesc
 d DataMapInit<CFunc_Dust>(CFunc_Dust*)::dataDesc
 d DataMapInit<CFunc_LOD>(CFunc_LOD*)::dataDesc
 d DataMapInit<CGameEnd>(CGameEnd*)::dataDesc
 d DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::dataDesc
 d DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 d DataMapInit<CGameScore>(CGameScore*)::dataDesc
 d DataMapInit<CGameText>(CGameText*)::dataDesc
 d DataMapInit<CGameUI>(CGameUI*)::dataDesc
 d DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 d DataMapInit<CGenericActor>(CGenericActor*)::dataDesc
 d DataMapInit<CGib>(CGib*)::dataDesc
 d DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 d DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 d DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 d DataMapInit<CHostage>(CHostage*)::dataDesc
 d DataMapInit<CHostageRescueZone>(CHostageRescueZone*)::dataDesc
 d DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::dataDesc
 d DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::dataDesc
 d DataMapInit<CInfoViewParameters>(CInfoViewParameters*)::dataDesc
 d DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::dataDesc
 d DataMapInit<CItem>(CItem*)::dataDesc
 d DataMapInit<CItemDefuser>(CItemDefuser*)::dataDesc
 d DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 d DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 d DataMapInit<CKnife>(CKnife*)::dataDesc
 d DataMapInit<CLight>(CLight*)::dataDesc
 d DataMapInit<CLightGlow>(CLightGlow*)::dataDesc
 d DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 d DataMapInit<CLogicAutosave>(CLogicAutosave*)::dataDesc
 d DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 d DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 d DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::dataDesc
 d DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 d DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 d DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 d DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 d DataMapInit<CLogicNavigation>(CLogicNavigation*)::dataDesc
 d DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 d DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::dataDesc
 d DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 d DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 d DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 d DataMapInit<CMessage>(CMessage*)::dataDesc
 d DataMapInit<CMessageEntity>(CMessageEntity*)::dataDesc
 d DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 d DataMapInit<CMotorController>(CMotorController*)::dataDesc
 d DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::dataDesc
 d DataMapInit<CMultiDamage>(CMultiDamage*)::dataDesc
 d DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 d DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::dataDesc
 d DataMapInit<CNodeEnt>(CNodeEnt*)::dataDesc
 d DataMapInit<COrnamentProp>(COrnamentProp*)::dataDesc
 d DataMapInit<CParticleFire>(CParticleFire*)::dataDesc
 d DataMapInit<CParticleLight>(CParticleLight*)::dataDesc
 d DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 d DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::dataDesc
 d DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 d DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 d DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 d DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 d DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 d DataMapInit<CPhysExplosion>(CPhysExplosion*)::dataDesc
 d DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 d DataMapInit<CPhysHinge>(CPhysHinge*)::dataDesc
 d DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 d DataMapInit<CPhysLength>(CPhysLength*)::dataDesc
 d DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 d DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 d DataMapInit<CPhysPulley>(CPhysPulley*)::dataDesc
 d DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::dataDesc
 d DataMapInit<CPhysThruster>(CPhysThruster*)::dataDesc
 d DataMapInit<CPhysTorque>(CPhysTorque*)::dataDesc
 d DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 d DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::dataDesc
 d DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 d DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 d DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 d DataMapInit<CPhysicsShake>(CPhysicsShake*)::dataDesc
 d DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 d DataMapInit<CPhysicsWind>(CPhysicsWind*)::dataDesc
 d DataMapInit<CPhysicsWire>(CPhysicsWire*)::dataDesc
 d DataMapInit<CPlantedC4>(CPlantedC4*)::dataDesc
 d DataMapInit<CPlasma>(CPlasma*)::dataDesc
 d DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::dataDesc
 d DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 d DataMapInit<CPlayerState>(CPlayerState*)::dataDesc
 d DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 d DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 d DataMapInit<CPointCamera>(CPointCamera*)::dataDesc
 d DataMapInit<CPointClientCommand>(CPointClientCommand*)::dataDesc
 d DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 d DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 d DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 d DataMapInit<CPointServerCommand>(CPointServerCommand*)::dataDesc
 d DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 d DataMapInit<CPointTeleport>(CPointTeleport*)::dataDesc
 d DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 d DataMapInit<CPrecipitation>(CPrecipitation*)::dataDesc
 d DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 d DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::dataDesc
 d DataMapInit<CPropJeep>(CPropJeep*)::dataDesc
 d DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 d DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 d DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 d DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::dataDesc
 d DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::dataDesc
 d DataMapInit<CRagdollManager>(CRagdollManager*)::dataDesc
 d DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 d DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 d DataMapInit<CRallyPoint>(CRallyPoint*)::dataDesc
 d DataMapInit<CRandSimTimer>(CRandSimTimer*)::dataDesc
 d DataMapInit<CRandStopwatch>(CRandStopwatch*)::dataDesc
 d DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 d DataMapInit<CRopeAnchor>(CRopeAnchor*)::dataDesc
 d DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::dataDesc
 d DataMapInit<CRotDoor>(CRotDoor*)::dataDesc
 d DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::dataDesc
 d DataMapInit<CRuleEntity>(CRuleEntity*)::dataDesc
 d DataMapInit<CRulePointEntity>(CRulePointEntity*)::dataDesc
 d DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 d DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 d DataMapInit<CScriptedTarget>(CScriptedTarget*)::dataDesc
 d DataMapInit<CShadowControl>(CShadowControl*)::dataDesc
 d DataMapInit<CSimTimer>(CSimTimer*)::dataDesc
 d DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::dataDesc
 d DataMapInit<CSkyCamera>(CSkyCamera*)::dataDesc
 d DataMapInit<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile*)::dataDesc
 d DataMapInit<CSmokeStack>(CSmokeStack*)::dataDesc
 d DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::dataDesc
 d DataMapInit<CSound>(CSound*)::dataDesc
 d DataMapInit<CSoundEnt>(CSoundEnt*)::dataDesc
 d DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::dataDesc
 d DataMapInit<CSoundPatch>(CSoundPatch*)::dataDesc
 d DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::dataDesc
 d DataMapInit<CSprite>(CSprite*)::dataDesc
 d DataMapInit<CSpriteTrail>(CSpriteTrail*)::dataDesc
 d DataMapInit<CSteamJet>(CSteamJet*)::dataDesc
 d DataMapInit<CStopwatch>(CStopwatch*)::dataDesc
 d DataMapInit<CStopwatchBase>(CStopwatchBase*)::dataDesc
 d DataMapInit<CStripWeapons>(CStripWeapons*)::dataDesc
 d DataMapInit<CSun>(CSun*)::dataDesc
 d DataMapInit<CSurroundTest>(CSurroundTest*)::dataDesc
 d DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::dataDesc
 d DataMapInit<CTankTargetChange>(CTankTargetChange*)::dataDesc
 d DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 d DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::dataDesc
 d DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::dataDesc
 d DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::dataDesc
 d DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::dataDesc
 d DataMapInit<CTerrainMorph>(CTerrainMorph*)::dataDesc
 d DataMapInit<CTesla>(CTesla*)::dataDesc
 d DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 d DataMapInit<CTextureToggle>(CTextureToggle*)::dataDesc
 d DataMapInit<CThrustController>(CThrustController*)::dataDesc
 d DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 d DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 d DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 d DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 d DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 d DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 d DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 d DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 d DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 d DataMapInit<CTriggerPush>(CTriggerPush*)::dataDesc
 d DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 d DataMapInit<CTriggerSave>(CTriggerSave*)::dataDesc
 d DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 d DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::dataDesc
 d DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::dataDesc
 d DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 d DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 d DataMapInit<CVGuiScreen>(CVGuiScreen*)::dataDesc
 d DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 d DataMapInit<CWaterLODControl>(CWaterLODControl*)::dataDesc
 d DataMapInit<CWeaponAWP>(CWeaponAWP*)::dataDesc
 d DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::dataDesc
 d DataMapInit<CWeaponCycler>(CWeaponCycler*)::dataDesc
 d DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 d DataMapInit<CWorld>(CWorld*)::dataDesc
 d DataMapInit<CWorldItem>(CWorldItem*)::dataDesc
 d DataMapInit<CWreckage>(CWreckage*)::dataDesc
 d DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::dataDesc
 d DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::dataDesc
 d DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 d DataMapInit<FilterDamageType>(FilterDamageType*)::dataDesc
 d DataMapInit<FilterTeam>(FilterTeam*)::dataDesc
 d DataMapInit<HintNodeData>(HintNodeData*)::dataDesc
 d DataMapInit<JeepWaterData_t>(JeepWaterData_t*)::dataDesc
 d DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::dataDesc
 d DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::dataDesc
 d DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::dataDesc
 d DataMapInit<Relationship_t>(Relationship_t*)::dataDesc
 d DataMapInit<Response>(Response*)::dataDesc
 d DataMapInit<ResponseContext_t>(ResponseContext_t*)::dataDesc
 d DataMapInit<ResponseGroup>(ResponseGroup*)::dataDesc
 d DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::dataDesc
 d DataMapInit<SoundCommand_t>(SoundCommand_t*)::dataDesc
 d DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::dataDesc
 d DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::dataDesc
 d DataMapInit<audioparams_t>(audioparams_t*)::dataDesc
 d DataMapInit<entitytable_t>(entitytable_t*)::dataDesc
 d DataMapInit<fogparams_t>(fogparams_t*)::dataDesc
 d DataMapInit<globalentity_t>(globalentity_t*)::dataDesc
 d DataMapInit<locksound_t>(locksound_t*)::dataDesc
 d DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 d DataMapInit<sky3dparams_t>(sky3dparams_t*)::dataDesc
 d DataMapInit<template_t>(template_t*)::dataDesc
 d DataMapInit<thinkfunc_t>(thinkfunc_t*)::dataDesc
 d DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::dataDesc
 d DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::dataDesc
 d DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 d GetMassEquivalent(float)::masstext
 d HostageModel
 d PHYS_SAVE_RESTORE_VERSION
 d PredMapInit<CBaseCSGrenade>(CBaseCSGrenade*)::predDesc
 d PredMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::predDesc
 d PredMapInit<CBaseGrenade>(CBaseGrenade*)::predDesc
 d PredMapInit<CBaseViewModel>(CBaseViewModel*)::predDesc
 d PredMapInit<CBeam>(CBeam*)::predDesc
 d PredMapInit<CC4>(CC4*)::predDesc
 d PredMapInit<CCSPlayer>(CCSPlayer*)::predDesc
 d PredMapInit<CCollisionProperty>(CCollisionProperty*)::predDesc
 d PredMapInit<CKnife>(CKnife*)::predDesc
 d PredMapInit<CSprite>(CSprite*)::predDesc
 d PredMapInit<CWeaponCSBase>(CWeaponCSBase*)::predDesc
 d PredMapInit<CWeaponElite>(CWeaponElite*)::predDesc
 d PredMapInit<CWeaponUSP>(CWeaponUSP*)::predDesc
 d RESPONSESYSTEM_SAVE_RESTORE_VERSION
 d RadiusFlash(Vector, CBaseEntity*, CBaseEntity*, float, int, int)::flRadius
 d ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_pSendTableName
 d ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_pSendTableName
 d ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CHostage::ignored>(DT_CHostage::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSPlayerResource::ignored>(DT_CSPlayerResource::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)::g_pSendTableName
 d ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_pSendTableName
 d ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_pSendTableName
 d ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_pSendTableName
 d ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_pSendTableName
 d ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Flashbang::ignored>(DT_Flashbang::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_pSendTableName
 d ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_pSendTableName
 d ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_pSendTableName
 d ServerClassInit<DT_HEGrenade::ignored>(DT_HEGrenade::ignored*)::g_pSendTableName
 d ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_pSendTableName
 d ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_pSendTableName
 d ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_pSendTableName
 d ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_pSendTableName
 d ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_pSendTableName
 d ServerClassInit<DT_LocalActiveWeaponKnifeData::ignored>(DT_LocalActiveWeaponKnifeData::ignored*)::g_pSendTableName
 d ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_pSendTableName
 d ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_pSendTableName
 d ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_pSendTableName
 d ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_pSendTableName
 d ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_pSendTableName
 d ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_pSendTableName
 d ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PlantedC4::ignored>(DT_PlantedC4::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PropJeep::ignored>(DT_PropJeep::ignored*)::g_pSendTableName
 d ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_pSendTableName
 d ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_pSendTableName
 d ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_pSendTableName
 d ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_pSendTableName
 d ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_pSendTableName
 d ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_pSendTableName
 d ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_pSendTableName
 d ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_pSendTableName
 d ServerClassInit<DT_SmokeGrenade::ignored>(DT_SmokeGrenade::ignored*)::g_pSendTableName
 d ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_pSendTableName
 d ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_pSendTableName
 d ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_pSendTableName
 d ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEPlantBomb::ignored>(DT_TEPlantBomb::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TERadioIcon::ignored>(DT_TERadioIcon::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_pSendTableName
 d ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_pSendTableName
 d ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_pSendTableName
 d ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponAK47::ignored>(DT_WeaponAK47::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponAWP::ignored>(DT_WeaponAWP::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponAug::ignored>(DT_WeaponAug::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponC4::ignored>(DT_WeaponC4::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponDEagle::ignored>(DT_WeaponDEagle::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponElite::ignored>(DT_WeaponElite::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponFamas::ignored>(DT_WeaponFamas::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponFiveSeven::ignored>(DT_WeaponFiveSeven::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponG3SG1::ignored>(DT_WeaponG3SG1::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponGalil::ignored>(DT_WeaponGalil::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponGlock::ignored>(DT_WeaponGlock::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponKnife::ignored>(DT_WeaponKnife::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponM249::ignored>(DT_WeaponM249::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponM3::ignored>(DT_WeaponM3::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponM4A1::ignored>(DT_WeaponM4A1::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponMAC10::ignored>(DT_WeaponMAC10::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponMP5Navy::ignored>(DT_WeaponMP5Navy::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponP228::ignored>(DT_WeaponP228::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponP90::ignored>(DT_WeaponP90::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponSG550::ignored>(DT_WeaponSG550::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponSG552::ignored>(DT_WeaponSG552::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponScout::ignored>(DT_WeaponScout::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponTMP::ignored>(DT_WeaponTMP::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponUMP45::ignored>(DT_WeaponUMP45::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponUSP::ignored>(DT_WeaponUSP::ignored*)::g_pSendTableName
 d ServerClassInit<DT_WeaponXM1014::ignored>(DT_WeaponXM1014::ignored*)::g_pSendTableName
 d TEMPLATE_SAVE_RESTORE_VERSION
 d UTIL_DrawBox(Extent*, int, int, int, int)::edge
 d UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastCluster
 d __CTOR_END__
 d __CTOR_LIST__
 d __DTOR_END__
 d __DTOR_LIST__
 d __JCR_END__
 d __JCR_LIST__
 d __dso_handle
 d gDamageTableRegistry
 d gTitleComments
 d g_AI_MoveSuggWeights
 d g_AntlionFollowFormation
 d g_AntlionFollowFormationSlots
 d g_CCNameMap
 d g_CommanderFollowFormation
 d g_CommanderFollowFormationSlots
 d g_DefaultLightstyles
 d g_MediumFollowFormation
 d g_MediumFollowFormationSlots
 d g_NameMap
 d g_NullSurface
 d g_ProficiencyNames
 d g_SimpleFollowFormation
 d g_SimpleFollowFormationSlots
 d g_TightFollowFormation
 d g_TightFollowFormationSlots
 d g_WideFollowFormation
 d g_WideFollowFormationSlots
 d g_bCleanupDatObject
 d g_bEnableProxy
 d g_pChannelNames
 d g_pPitchLookup
 d g_pSoundLevels
 d g_pVolumeLevels
 d glassAngularTable
 d glassLinearTable
 d npcAngularTable
 d npcLinearTable
 d p.0
 d playerAngularTable
 d playerLinearTable
 d playerVehicleAngularTable
 d playerVehicleLinearTable
 d primaryWeaponBuyInfoCT
 d primaryWeaponBuyInfoT
 d s_BraceChars
 d s_BuildReverseMap
 d s_ExtIndices
 d s_LastFileLoadingFrom
 d s_MatIndices
 d s_PreserveEnts
 d s_WeaponAliasInfo
 d s_pElectroThinkContext
 d s_pFadeScaleThink
 d s_pRetireContext
 d s_pZapContext
 d s_shared_quote
 d secondaryWeaponBuyInfoCT
 d secondaryWeaponBuyInfoT
 dcgettext@@GLIBC_2.0
 dlclose@@GLIBC_2.0
 dlerror@@GLIBC_2.0
 dlopen@@GLIBC_2.1
 dlsym@@GLIBC_2.0
 expf@@GLIBC_2.0
 free@@GLIBC_2.0
 g_ClockSpeedMillisecondsMultiplier
 g_ClockSpeedSecondsMultiplier
 g_VProfCurrentProfile
 g_pMemAlloc
 g_pVCR
 getcwd@@GLIBC_2.0
 isalnum@@GLIBC_2.0
 isspace@@GLIBC_2.0
 log10@@GLIBC_2.0
 log@@GLIBC_2.0
 logf@@GLIBC_2.0
 malloc@@GLIBC_2.0
 memchr@@GLIBC_2.0
 memcpy@@GLIBC_2.0
 memmove@@GLIBC_2.0
 memset@@GLIBC_2.0
 pow@@GLIBC_2.0
 printf@@GLIBC_2.0
 qsort@@GLIBC_2.0
 r AI_NAVIGATOR_SAVE_VERSION
 r CAI_BaseNPC::StartNPC()::nextThinkTimes
 r CAI_BaseNPC::UpdateEfficiency(bool)::stateBase
 r GenerationStepSize
 r HalfHumanWidth
 r JumpHeight
 r SF_MULTI_INIT
 r StepHeight
 r __FRAME_END__
 r ice_keyrot
 r ice_pbox
 r ice_smod
 r ice_sxor
 r pulCRCTable
 r s_WeaponAliasTranslationInfo
 realloc@@GLIBC_2.0
 sin@@GLIBC_2.0
 sinf@@GLIBC_2.0
 snprintf@@GLIBC_2.0
 sscanf@@GLIBC_2.0
 std::bad_alloc::~bad_alloc()
 std::bad_cast::~bad_cast()
 std::bad_exception::~bad_exception()
 std::bad_typeid::~bad_typeid()
 std::exception::~exception()
 std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const
 std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const
 std::type_info::__is_function_p() const
 std::type_info::__is_pointer_p() const
 std::type_info::~type_info()
 strcasecmp@@GLIBC_2.0
 strcat@@GLIBC_2.0
 strchr@@GLIBC_2.0
 strcmp@@GLIBC_2.0
 strcpy@@GLIBC_2.0
 strdup@@GLIBC_2.0
 strlen@@GLIBC_2.0
 strncasecmp@@GLIBC_2.0
 strstr@@GLIBC_2.0
 strtok@@GLIBC_2.0
 t (anonymous namespace)::__CreateCPlayerInfoManagerIPlayerInfoManager_V1_interface()
 t AIMsgGuts(CAI_BaseNPC*, unsigned int, char const*)
 t AnalysisProgress(char const*, int, int, bool)
 t AutoBuy()
 t BuildTeleportList_r(CBaseEntity*, CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t> >&)
 t CCSGameRules::CleanUpMap()::CCSMapEntityFilter::CreateNextEntity(char const*)
 t CCSGameRules::CleanUpMap()::CCSMapEntityFilter::ShouldCreateEntity(char const*)
 t CC_EntFireAutoCompletionFunc(char const*, char (*) [64])
 t CC_FadeIn()
 t CC_FadeOut()
 t CC_LookupCaptionCRC()
 t CDecal::StaticDecal()::CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)
 t CalcAnimation(studiohdr_t const*, Vector*, Quaternion*, int, int, float, int)
 t CallbackHighlight(CBaseEntity*)
 t CallbackReport(CBaseEntity*)
 t ChoreEventStartTimeLessFunc(CChoreoEvent* const&, CChoreoEvent* const&)
 t CommandNavCheckFloor()
 t CommandNavUpdateBlocked()
 t CompareSpawnOrder(HierarchicalSpawn_t*, HierarchicalSpawn_t*)
 t ComputeBoxOffset(Ray_t const&)
 t ComputeCenterMatrix(Vector const&, QAngle const&, Vector const&, Vector const&, matrix3x4_t&)
 t ComputeSeparatingPlane(matrix3x4_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, cplane_t*)
 t ComputeSpawnHierarchyDepth_r(CBaseEntity*)
 t CopySceneFileIntoMemory(char const*, void**)
 t CreateAirboat(CBasePlayer*)
 t CreateJeep(CBasePlayer*)
 t CreditsDone_f()
 t DescribeGroundList(CBaseEntity*)
 t FindPassableSpace(CBasePlayer*, Vector const&, float, Vector&)
 t GameEventLessFunc(CGameEvent const&, CGameEvent const&)
 t GetAllChildren_r(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*> >&)
 t GetFadeParms(float&, color32_s&)
 t GetRouteColor(Navigation_t, int)
 t MD5Transform(unsigned int*, unsigned int const*)
 t MarkVPhysicsDebug(CBaseEntity*)
 t OutputVPhysicsDebugInfo(CBaseEntity*)
 t PhysFrame(float)
 t PhysicsCheckSweep(CBaseEntity*, Vector const&, Vector const&, CGameTrace*)
 t PlaceNameAutocompleteCallback(char const*, char (*) [64])
 t PrefixChanged(ConVar*, char const*)
 t Rebuy()
 t Scene_Printf(char const*, ...)
 t SelectSpawnSpot(char const*)
 t SendProxy_Empty(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_PredictableIdToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_SendPredictableId(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 t SendProxy_Solid(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_SolidFlags(SendProp const*, void const*, void const*, DVariant*, int, int)
 t ShouldStopProcessingTasks(CAI_BaseNPC*, CFastTimer&, CCycleCount const&)
 t TestEntityTriggerIntersection_Accurate(CBaseEntity*, CBaseEntity*)
 t TokenCRCLessFunc(TokenNameLookup const&, TokenNameLookup const&)
 t UTIL_FindClientInPVSGuts(edict_t*, unsigned char*, unsigned int)
 t UTIL_GetNewCheckClient(int)
 t VoiceServerDebug(char const*, ...)
 t __CreateCEffectsServerIEffects_interface()
 t __CreateCGameMovementIGameMovement_interface()
 t __CreateCHLTVDirectorIHLTVDirector_interface()
 t __CreateCPlayerInfoManagerIPlayerInfoManager_interface()
 t __CreateCPluginBotManagerIBotManager_interface()
 t __CreateCPluginHelpersCheckIPluginHelpersCheck_interface()
 t __CreateCServerGameClientsIServerGameClients_interface()
 t __CreateCServerGameDLLIServerGameDLL_interface()
 t __CreateCServerGameEntsIServerGameEnts_interface()
 t __do_global_ctors_aux
 t __do_global_dtors_aux
 t __i686.get_pc_thunk.bx
 t __static_initialization_and_destruction_0(int, int)
 t __tcf_0
 t __tcf_1
 t __tcf_10
 t __tcf_11
 t __tcf_12
 t __tcf_13
 t __tcf_14
 t __tcf_15
 t __tcf_16
 t __tcf_17
 t __tcf_18
 t __tcf_19
 t __tcf_2
 t __tcf_20
 t __tcf_21
 t __tcf_3
 t __tcf_4
 t __tcf_5
 t __tcf_6
 t __tcf_7
 t __tcf_8
 t __tcf_9
 t ai_clear_bad_links()
 t ai_debug_node_connect()
 t ai_dump_hints()
 t ai_reloadresponsesystems()
 t ai_set_move_height_epsilon()
 t ai_show_node()
 t ainet_generate_report()
 t ainet_generate_report_only()
 t atexit
 t bot_add()
 t bot_add_ct()
 t bot_add_t()
 t bot_all_weapons()
 t bot_goto_mark()
 t bot_kick()
 t bot_kill()
 t bot_knives_only()
 t bot_pistols_only()
 t bot_snipers_only()
 t call_gmon_start
 t cast_hull()
 t cast_ray()
 t clear_debug_overlays()
 t dump_globals()
 t frame_dummy
 t global constructors keyed to (anonymous namespace)::CPlayerInfoManager_V1::GetPlayerInfo(edict_t*)
 t global constructors keyed to .._dlls_.._public_scratchpad3d.cpp_CF14568D_C47434FA
 t global constructors keyed to .._dlls_cstrike_bot_cs_bot_weapon_id.cpp_FDF1F060_13561728
 t global constructors keyed to .._dlls_cstrike_item_ammo.cpp_FDF1F060_9AA8C967
 t global constructors keyed to .._dlls_cstrike_item_assaultsuit.cpp_FDF1F060_A89B17D3
 t global constructors keyed to .._dlls_cstrike_item_kevlar.cpp_FDF1F060_E09ED9AB
 t global constructors keyed to .._dlls_cstrike_item_nvgs.cpp_FDF1F060_C5DCBB76
 t global constructors keyed to .._dlls_stdafx.cpp_FDF1F060_B0ADF6B9
 t global constructors keyed to .._dlls_tempmonster.cpp_FDF1F060_1A5658C0
 t global constructors keyed to AI_CriteriaSet::AI_CriteriaSet()
 t global constructors keyed to AI_EnemyInfo_t::s_Allocator
 t global constructors keyed to AI_LeadArgs_t::m_DataMap
 t global constructors keyed to AI_Waypoint_t::s_Allocator
 t global constructors keyed to AttackState::OnEnter(CCSBot*)
 t global constructors keyed to BotDifficultyName
 t global constructors keyed to CAI_BaseFlyingBot::m_DataMap
 t global constructors keyed to CAI_BaseHumanoid::HandleInteraction(int, void*, CBaseCombatCharacter*)
 t global constructors keyed to CAI_BaseNPC::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 t global constructors keyed to CAI_BaseNPC::GetConditionID(char const*)
 t global constructors keyed to CAI_BaseNPC::OccupyStrategySlot(int)
 t global constructors keyed to CAI_BaseNPC::ScheduleInList(char const*, CAI_Schedule**, int)
 t global constructors keyed to CAI_BaseNPC::gm_SquadSlotNamespace
 t global constructors keyed to CAI_BaseNPC::m_pActivitySR
 t global constructors keyed to CAI_BaseNPC::m_pEventSR
 t global constructors keyed to CAI_BaseNPCFlyerNew::CAI_BaseNPCFlyerNew()
 t global constructors keyed to CAI_BasePhysicsFlyingBot::m_DataMap
 t global constructors keyed to CAI_BlendedMotor::m_DataMap
 t global constructors keyed to CAI_DynamicLinkController::m_DataMap
 t global constructors keyed to CAI_GlobalNamespace::CAI_GlobalNamespace()
 t global constructors keyed to CAI_GoalEntity::m_DataMap
 t global constructors keyed to CAI_InterestTarget_t::IsThis(CBaseEntity*)
 t global constructors keyed to CAI_Link::DestNodeID(int)
 t global constructors keyed to CAI_LookTarget::m_DataMap
 t global constructors keyed to CAI_Motor::m_DataMap
 t global constructors keyed to CAI_MoveAndShootOverlay::m_DataMap
 t global constructors keyed to CAI_MoveMonitor::m_DataMap
 t global constructors keyed to CAI_MoveSolver::VisualizeRegulations(Vector const&)
 t global constructors keyed to CAI_Node::GetLink(int)
 t global constructors keyed to CAI_Path::m_DataMap
 t global constructors keyed to CAI_PlaneSolver::CAI_PlaneSolver(CAI_BaseNPC*)
 t global constructors keyed to CAI_RappelBehavior::m_DataMap
 t global constructors keyed to CAI_ScriptedSequence::m_DataMap
 t global constructors keyed to CAI_SpeechFilter::m_DataMap
 t global constructors keyed to CAI_TacticalServices::m_DataMap
 t global constructors keyed to CAI_TestHull::pTestHull
 t global constructors keyed to CAK47::GetClassName()
 t global constructors keyed to CAmmoDef::GetAmmoOfIndex(int)
 t global constructors keyed to CAreaPortal::m_DataMap
 t global constructors keyed to CAutoGameSystem::CAutoGameSystem()
 t global constructors keyed to CBaseButton::m_DataMap
 t global constructors keyed to CBaseCSGrenade::GetClassName()
 t global constructors keyed to CBaseCSGrenadeProjectile::m_DataMap
 t global constructors keyed to CBaseCombatCharacter::WeaponCount() const
 t global constructors keyed to CBaseCombatWeapon::CBaseCombatWeapon()
 t global constructors keyed to CBaseDoor::m_DataMap
 t global constructors keyed to CBaseEntity::m_bInDebugSelect
 t global constructors keyed to CBaseFilter::m_DataMap
 t global constructors keyed to CBaseFire::m_DataMap
 t global constructors keyed to CBaseFlex::GetClassName()
 t global constructors keyed to CBaseGrenade::m_DataMap
 t global constructors keyed to CBaseParticleEntity::GetClassName()
 t global constructors keyed to CBasePlatTrain::m_DataMap
 t global constructors keyed to CBasePlayer::GetTimeBase() const
 t global constructors keyed to CBaseRopePhysics::CBaseRopePhysics(CSimplePhysics::CNode*, int, CRopeSpring*, float*)
 t global constructors keyed to CBaseTempEntity::GetClassName()
 t global constructors keyed to CBaseTransmitProxy::CBaseTransmitProxy(CBaseEntity*)
 t global constructors keyed to CBaseViewModel::CBaseViewModel()
 t global constructors keyed to CBaseViewModel::m_DataMap
 t global constructors keyed to CBombTarget::m_DataMap
 t global constructors keyed to CBoneCache::CreateResource(bonecacheparams_t const&)
 t global constructors keyed to CBubbling::m_DataMap
 t global constructors keyed to CBuyZone::m_DataMap
 t global constructors keyed to CCSAmmoDef::AddAmmoCost(char const*, int, int)
 t global constructors keyed to CCSBot::ComputePathPositions()
 t global constructors keyed to CCSBot::FireWeaponAtEnemy()
 t global constructors keyed to CCSBot::IsNoiseHeard() const
 t global constructors keyed to CCSBot::IsRadioCommand(RadioType) const
 t global constructors keyed to CCSBot::OnAudibleEvent(IGameEvent*, CBasePlayer*, float, PriorityType, bool, bool, Vector const*)
 t global constructors keyed to CCSBot::OnBombPickedUp(IGameEvent*)
 t global constructors keyed to CCSBot::OnPlayerDeath(IGameEvent*)
 t global constructors keyed to CCSBot::OnWeaponFire(IGameEvent*)
 t global constructors keyed to CCSBot::SetState(BotState*)
 t global constructors keyed to CCSBot::UpdateLookAngles()
 t global constructors keyed to CCSBot::Upkeep()
 t global constructors keyed to CCSBot::m_DataMap
 t global constructors keyed to CCSHLTVDirector::SetHLTVServer(IHLTVServer*)
 t global constructors keyed to CCSPlayerResource::GetClassName()
 t global constructors keyed to CCSTeam::GetClassName()
 t global constructors keyed to CC_AI_Disable()
 t global constructors keyed to CChoreoEvent::s_nGlobalID
 t global constructors keyed to CChoreoScene::choreoprintf(int, char const*, ...)
 t global constructors keyed to CConstantForceController::m_DataMap
 t global constructors keyed to CConstraintAnchor::m_DataMap
 t global constructors keyed to CCycler::m_DataMap
 t global constructors keyed to CDEagle::GetClassName()
 t global constructors keyed to CDamageModifier::CDamageModifier()
 t global constructors keyed to CDecal::m_DataMap
 t global constructors keyed to CDirtySpatialPartitionEntityList::CDirtySpatialPartitionEntityList()
 t global constructors keyed to CDynamicLight::m_DataMap
 t global constructors keyed to CEntInfo::ClearLinks()
 t global constructors keyed to CEntityBlocker::Create(Vector const&, Vector const&, Vector const&, CBaseEntity*, bool)
 t global constructors keyed to CEntityDissolve::m_DataMap
 t global constructors keyed to CEntityFlame::m_DataMap
 t global constructors keyed to CEntityParticleTrail::m_DataMap
 t global constructors keyed to CEnvDetailController::GetClassName()
 t global constructors keyed to CEnvEntityMaker::m_DataMap
 t global constructors keyed to CEnvFade::m_DataMap
 t global constructors keyed to CEnvHudHint::m_DataMap
 t global constructors keyed to CEnvLaser::m_DataMap
 t global constructors keyed to CEnvMicrophone::m_DataMap
 t global constructors keyed to CEnvParticleScript::m_DataMap
 t global constructors keyed to CEnvPlayerSurfaceTrigger::m_DataMap
 t global constructors keyed to CEnvScreenOverlay::m_DataMap
 t global constructors keyed to CEnvSoundscapeProxy::m_DataMap
 t global constructors keyed to CEnvWindShared::CEnvWindShared()
 t global constructors keyed to CEnvZoom::m_DataMap
 t global constructors keyed to CEventAction::m_DataMap
 t global constructors keyed to CEventLog::CEventLog()
 t global constructors keyed to CEventRegister::CEventRegister()
 t global constructors keyed to CFlashbang::GetClassName()
 t global constructors keyed to CFogController::s_pFogController
 t global constructors keyed to CFuncAreaPortalWindow::GetClassName()
 t global constructors keyed to CFuncBrush::m_DataMap
 t global constructors keyed to CFuncLadder::s_Ladders
 t global constructors keyed to CFuncLadderEndPoint::Activate()
 t global constructors keyed to CFuncMonitor::m_DataMap
 t global constructors keyed to CFuncMoveLinear::m_DataMap
 t global constructors keyed to CFuncOccluder::GetClassName()
 t global constructors keyed to CFuncSmokeVolume::m_DataMap
 t global constructors keyed to CFuncWall::m_DataMap
 t global constructors keyed to CFunc_Dust::GetClassName()
 t global constructors keyed to CFunc_LOD::GetClassName()
 t global constructors keyed to CGameRulesRegister::s_pHead
 t global constructors keyed to CGameTrace::DidHitWorld() const
 t global constructors keyed to CGameUI::m_DataMap
 t global constructors keyed to CGenericNPC::Classify()
 t global constructors keyed to CGib::m_DataMap
 t global constructors keyed to CGunTarget::m_DataMap
 t global constructors keyed to CHEGrenade::GetClassName()
 t global constructors keyed to CHEGrenadeProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, float)
 t global constructors keyed to CHLTVDirector::CHLTVDirector()
 t global constructors keyed to CHandleTest::GetClassName()
 t global constructors keyed to CHintCriteria::CHintCriteria()
 t global constructors keyed to CHintMessage::CHintMessage(char const*, CUtlVector<char const*, CUtlMemory<char const*> >*, float)
 t global constructors keyed to CHostageRescueZone::m_DataMap
 t global constructors keyed to CInfoIntermission::Spawn()
 t global constructors keyed to CInfoViewParameters::m_DataMap
 t global constructors keyed to CItemDefuser::m_DataMap
 t global constructors keyed to CLight::m_DataMap
 t global constructors keyed to CLightGlow::GetClassName()
 t global constructors keyed to CLogicAuto::m_DataMap
 t global constructors keyed to CLogicCompareInteger::m_DataMap
 t global constructors keyed to CLogicMeasureMovement::m_DataMap
 t global constructors keyed to CLogicNavigation::m_DataMap
 t global constructors keyed to CLogicRelay::m_DataMap
 t global constructors keyed to CMaterialModifyControl::m_DataMap
 t global constructors keyed to CMessage::m_DataMap
 t global constructors keyed to CMessageEntity::m_DataMap
 t global constructors keyed to CNavArea::m_nextID
 t global constructors keyed to CNavLadder::m_nextID
 t global constructors keyed to CNavPath::ComputePathPositions()
 t global constructors keyed to CParticleFire::GetClassName()
 t global constructors keyed to CParticleLight::m_DataMap
 t global constructors keyed to CPathCorner::m_DataMap
 t global constructors keyed to CPathTrack::m_DataMap
 t global constructors keyed to CPhysicsNPCSolver::m_DataMap
 t global constructors keyed to CPhysicsShake::m_DataMap
 t global constructors keyed to CPlane::CPlane()
 t global constructors keyed to CPlasma::GetClassName()
 t global constructors keyed to CPlayerMove::CPlayerMove()
 t global constructors keyed to CPlayerResource::GetClassName()
 t global constructors keyed to CPointAngleSensor::m_DataMap
 t global constructors keyed to CPointAngularVelocitySensor::m_DataMap
 t global constructors keyed to CPointEntity::Spawn()
 t global constructors keyed to CPointHurt::m_DataMap
 t global constructors keyed to CPointPlayerMoveConstraint::m_DataMap
 t global constructors keyed to CPointSpotlight::m_DataMap
 t global constructors keyed to CPointTeleport::m_DataMap
 t global constructors keyed to CPrecacheRegister::CPrecacheRegister(void (*)(void*), void const*)
 t global constructors keyed to CPredictableId::CPredictableId()
 t global constructors keyed to CPredictedViewModel::GetClassName()
 t global constructors keyed to CRagdollBoogie::m_DataMap
 t global constructors keyed to CRagdollManager::GetClassName()
 t global constructors keyed to CRecipientFilter::CRecipientFilter()
 t global constructors keyed to CRopeKeyframe::GetClassName()
 t global constructors keyed to CRuleEntity::m_DataMap
 t global constructors keyed to CSGameState::CSGameState(CCSBot*)
 t global constructors keyed to CSceneManager::m_DataMap
 t global constructors keyed to CScratchPadGraph::CScratchPadGraph()
 t global constructors keyed to CServerNetworkProperty::CServerNetworkProperty()
 t global constructors keyed to CShadowControl::m_DataMap
 t global constructors keyed to CSheetSimulator::CSheetSimulator(void (*)(Vector const&, Vector const&, unsigned int, int, CGameTrace*), void (*)(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, int, CGameTrace*))
 t global constructors keyed to CShower::Spawn()
 t global constructors keyed to CSimplePhysics::CSimplePhysics()
 t global constructors keyed to CSimpleSimTimer::m_DataMap
 t global constructors keyed to CSingleplayRules::IsMultiplayer()
 t global constructors keyed to CSmokeGrenade::GetClassName()
 t global constructors keyed to CSmokeGrenadeProjectile::m_DataMap
 t global constructors keyed to CSmokeStack::GetClassName()
 t global constructors keyed to CSound::m_DataMap
 t global constructors keyed to CSoundEnvelope::m_DataMap
 t global constructors keyed to CSpotlightEnd::GetClassName()
 t global constructors keyed to CSprite::m_DataMap
 t global constructors keyed to CSpriteTrail::m_DataMap
 t global constructors keyed to CSteamJet::GetClassName()
 t global constructors keyed to CStressEntityReg::s_pHead
 t global constructors keyed to CSun::GetClassName()
 t global constructors keyed to CSurroundTest::m_DataMap
 t global constructors keyed to CTEBSPDecal::CTEBSPDecal(char const*)
 t global constructors keyed to CTEBaseBeam::CTEBaseBeam(char const*)
 t global constructors keyed to CTEBeamEntPoint::CTEBeamEntPoint(char const*)
 t global constructors keyed to CTEBeamEnts::CTEBeamEnts(char const*)
 t global constructors keyed to CTEBeamFollow::CTEBeamFollow(char const*)
 t global constructors keyed to CTEBeamLaser::CTEBeamLaser(char const*)
 t global constructors keyed to CTEBeamPoints::CTEBeamPoints(char const*)
 t global constructors keyed to CTEBeamRing::CTEBeamRing(char const*)
 t global constructors keyed to CTEBeamRingPoint::CTEBeamRingPoint(char const*)
 t global constructors keyed to CTEBeamSpline::CTEBeamSpline(char const*)
 t global constructors keyed to CTEBloodSprite::CTEBloodSprite(char const*)
 t global constructors keyed to CTEBloodStream::CTEBloodStream(char const*)
 t global constructors keyed to CTEBreakModel::CTEBreakModel(char const*)
 t global constructors keyed to CTEBubbleTrail::CTEBubbleTrail(char const*)
 t global constructors keyed to CTEBubbles::CTEBubbles(char const*)
 t global constructors keyed to CTEDecal::CTEDecal(char const*)
 t global constructors keyed to CTEDynamicLight::CTEDynamicLight(char const*)
 t global constructors keyed to CTEEffectDispatch::CTEEffectDispatch(char const*)
 t global constructors keyed to CTEEnergySplash::CTEEnergySplash(char const*)
 t global constructors keyed to CTEExplosion::CTEExplosion(char const*)
 t global constructors keyed to CTEFireBullets::CTEFireBullets(char const*)
 t global constructors keyed to CTEFizz::CTEFizz(char const*)
 t global constructors keyed to CTEFootprintDecal::GetClassName()
 t global constructors keyed to CTEGaussExplosion::CTEGaussExplosion(char const*)
 t global constructors keyed to CTEGlowSprite::CTEGlowSprite(char const*)
 t global constructors keyed to CTEImpact::CTEImpact(char const*)
 t global constructors keyed to CTEKillPlayerAttachments::CTEKillPlayerAttachments(char const*)
 t global constructors keyed to CTELargeFunnel::CTELargeFunnel(char const*)
 t global constructors keyed to CTEMetalSparks::CTEMetalSparks(char const*)
 t global constructors keyed to CTEMuzzleFlash::CTEMuzzleFlash(char const*)
 t global constructors keyed to CTEParticleSystem::GetClassName()
 t global constructors keyed to CTEPhysicsProp::CTEPhysicsProp(char const*)
 t global constructors keyed to CTEPlayerDecal::CTEPlayerDecal(char const*)
 t global constructors keyed to CTEProjectedDecal::CTEProjectedDecal(char const*)
 t global constructors keyed to CTERadioIcon::CTERadioIcon(char const*)
 t global constructors keyed to CTEShatterSurface::CTEShatterSurface(char const*)
 t global constructors keyed to CTEShowLine::CTEShowLine(char const*)
 t global constructors keyed to CTESmoke::CTESmoke(char const*)
 t global constructors keyed to CTESparks::CTESparks(char const*)
 t global constructors keyed to CTESprite::CTESprite(char const*)
 t global constructors keyed to CTESpriteSpray::CTESpriteSpray(char const*)
 t global constructors keyed to CTEWorldDecal::CTEWorldDecal(char const*)
 t global constructors keyed to CTargetCDAudioRep::m_DataMap
 t global constructors keyed to CTeamSpawnPoint::m_DataMap
 t global constructors keyed to CTempEntTester::Create(Vector const&, QAngle const&, char const*, char const*)
 t global constructors keyed to CTerrainMorph::Spawn(CTerrainMorphParams&)
 t global constructors keyed to CTesla::m_DataMap
 t global constructors keyed to CTestTraceline::GetClassName()
 t global constructors keyed to CTextureToggle::m_DataMap
 t global constructors keyed to CThrustController::m_DataMap
 t global constructors keyed to CUserMessages::CUserMessages()
 t global constructors keyed to CUtlSymbol::s_pSymbolTable
 t global constructors keyed to CVGuiScreen::GetClassName()
 t global constructors keyed to CWaterBullet::m_DataMap
 t global constructors keyed to CWaterLODControl::m_DataMap
 t global constructors keyed to CWeaponAWP::GetClassName()
 t global constructors keyed to CWeaponAug::GetClassName()
 t global constructors keyed to CWeaponCSBaseGun::GetClassName()
 t global constructors keyed to CWeaponCubemap::GetClassName()
 t global constructors keyed to CWeaponElite::GetClassName()
 t global constructors keyed to CWeaponFamas::GetClassName()
 t global constructors keyed to CWeaponFiveSeven::GetClassName()
 t global constructors keyed to CWeaponG3SG1::GetClassName()
 t global constructors keyed to CWeaponGalil::GetClassName()
 t global constructors keyed to CWeaponGlock::GetClassName()
 t global constructors keyed to CWeaponM249::GetClassName()
 t global constructors keyed to CWeaponM3::GetClassName()
 t global constructors keyed to CWeaponM4A1::GetClassName()
 t global constructors keyed to CWeaponMAC10::GetClassName()
 t global constructors keyed to CWeaponMP5Navy::GetClassName()
 t global constructors keyed to CWeaponP228::GetClassName()
 t global constructors keyed to CWeaponP90::GetClassName()
 t global constructors keyed to CWeaponSG550::GetClassName()
 t global constructors keyed to CWeaponSG552::GetClassName()
 t global constructors keyed to CWeaponScout::GetClassName()
 t global constructors keyed to CWeaponTMP::GetClassName()
 t global constructors keyed to CWeaponUMP45::GetClassName()
 t global constructors keyed to CWeaponUSP::GetClassName()
 t global constructors keyed to CWeaponXM1014::GetClassName()
 t global constructors keyed to CWindowPane::m_DataMap
 t global constructors keyed to CWorldItem::m_DataMap
 t global constructors keyed to CalcRopeStartingConditions(Vector const&, Vector const&, int, float, float*, float*)
 t global constructors keyed to CheckForEntitiesAlongSegment(Vector const&, Vector const&, Vector const&, Vector const&, CPushAwayEnumerator*)
 t global constructors keyed to CreateEntityByName(char const*, int)
 t global constructors keyed to CreatePlayerAnimState(CBaseAnimatingOverlay*, ICSPlayerAnimStateHelpers*, LegAnimType_t, bool)
 t global constructors keyed to DT_EffectData::g_SendTable
 t global constructors keyed to DT_Local::g_SendTable
 t global constructors keyed to DebugCheckEHandleAccess(void*)
 t global constructors keyed to DefuseBombState::OnEnter(CCSBot*)
 t global constructors keyed to DoSpark(CBaseEntity*, Vector const&, int, int, bool, Vector const&)
 t global constructors keyed to DrawBattleLines
 t global constructors keyed to Editor_BeginSession(char const*, int, bool)
 t global constructors keyed to EntityFactoryDictionary()
 t global constructors keyed to EntityParticleTrailInfo_t::EntityParticleTrailInfo_t()
 t global constructors keyed to EscapeFromBombState::OnEnter(CCSBot*)
 t global constructors keyed to ExtractBbox(studiohdr_t*, int, Vector&, Vector&)
 t global constructors keyed to FetchBombState::OnEnter(CCSBot*)
 t global constructors keyed to FinishClientPutInServer(CCSPlayer*)
 t global constructors keyed to FollowState::OnEnter(CCSBot*)
 t global constructors keyed to GameStringSystem()
 t global constructors keyed to GetBspFilename(char const*)
 t global constructors keyed to GetDeathPoseActivity(CBaseAnimating*, CTakeDamageInfo const&)
 t global constructors keyed to GetLocalPlayer()
 t global constructors keyed to GetRandomSpotAtPlace(unsigned int)
 t global constructors keyed to GetWeaponProficiencyName(WeaponProficiency_t)
 t global constructors keyed to GlobalEntity_SetState(int, GLOBALESTATE)
 t global constructors keyed to HideState::OnEnter(CCSBot*)
 t global constructors keyed to Human_Hull
 t global constructors keyed to HuntState::OnEnter(CCSBot*)
 t global constructors keyed to IMoveHelper::sm_pSingleton
 t global constructors keyed to IdleState::OnEnter(CCSBot*)
 t global constructors keyed to InternalBitBufErrorHandler(BitBufErrorType, char const*)
 t global constructors keyed to IntersectRayWithTriangle(Ray_t const&, Vector const&, Vector const&, Vector const&, bool)
 t global constructors keyed to InvestigateNoiseState::AttendCurrentNoise(CCSBot*)
 t global constructors keyed to IsAmmoType(int, char const*)
 t global constructors keyed to IsSpotOccupied(CBaseEntity*, Vector const&)
 t global constructors keyed to IsStaticPointEntity(CBaseEntity*)
 t global constructors keyed to MapEntity_ExtractValue(char const*, char const*, char*)
 t global constructors keyed to MoveToState::OnEnter(CCSBot*)
 t global constructors keyed to MovieExplosion::GetClassName()
 t global constructors keyed to NWCEdit::IsWCVersionValid()
 t global constructors keyed to NavColors
 t global constructors keyed to OpenDoorState::OnEnter(CCSBot*)
 t global constructors keyed to Opposite
 t global constructors keyed to ParseKeyvalue(void*, typedescription_t*, int, char const*, char const*)
 t global constructors keyed to ParseVector(KeyValues*, char const*, Vector&)
 t global constructors keyed to ParticleSmokeGrenade::GetClassName()
 t global constructors keyed to PercentageOfFlashForPlayer(CBaseEntity*, Vector, CBaseEntity*)
 t global constructors keyed to PhysBlockHeader_t::m_DataMap
 t global constructors keyed to PhysicsSplash(IPhysicsFluidController*, IPhysicsObject*, CBaseEntity*)
 t global constructors keyed to Pickup_ForcePlayerToDropThisObject(CBaseEntity*)
 t global constructors keyed to PlantBombState::OnEnter(CCSBot*)
 t global constructors keyed to RegisterUserMessages()
 t global constructors keyed to RememberCRC(unsigned long const&, char const*)
 t global constructors keyed to Response::m_DataMap
 t global constructors keyed to ScratchPad_DrawWorldToScratchPad(IScratchPad3D*, unsigned long)
 t global constructors keyed to SendProxy_Color32ToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 t global constructors keyed to SendProxy_TestProxyToggle(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 t global constructors keyed to SetupLightNormalFromProps(QAngle const&, float, float, Vector&)
 t global constructors keyed to SetupMatrixIdentity()
 t global constructors keyed to SharedVarArgs(char*, ...)
 t global constructors keyed to StartGroupingSounds()
 t global constructors keyed to StrLess(char const* const&, char const* const&)
 t global constructors keyed to TerrainMod_Add(TerrainModType, CTerrainModParams const&)
 t global constructors keyed to Test_CreateEntity()
 t global constructors keyed to TextToSoundLevel(char const*)
 t global constructors keyed to TheBots
 t global constructors keyed to TheNavMesh
 t global constructors keyed to UTIL_FunctionToName(datamap_t*, void*)
 t global constructors keyed to UTIL_IsNameTaken(char const*, bool)
 t global constructors keyed to UTIL_RemoveHierarchy(CBaseEntity*)
 t global constructors keyed to UnlinkChild(CBaseEntity*, CBaseEntity*)
 t global constructors keyed to UseEntityState::OnEnter(CCSBot*)
 t global constructors keyed to UtlVector_InitializeAllocatedElements(CAnimationLayer*, int)
 t global constructors keyed to WriteUsercmd(bf_write*, CUserCmd*, CUserCmd*)
 t global constructors keyed to __CreateGameRules_CCSGameRules()
 t global constructors keyed to __CreateGameRules_CMultiplayRules()
 t global constructors keyed to __CreateGameRules_CTeamplayRules()
 t global constructors keyed to ai_debug_assault
 t global constructors keyed to ai_debug_directnavprobe
 t global constructors keyed to ai_debug_follow
 t global constructors keyed to ai_debug_ragdoll_magnets
 t global constructors keyed to ai_debug_speech
 t global constructors keyed to ai_moveprobe_debug
 t global constructors keyed to ai_no_node_cache
 t global constructors keyed to ai_no_select_box
 t global constructors keyed to ai_sequence_debug
 t global constructors keyed to ai_show_hull_attacks
 t global constructors keyed to ai_simulate_task_overtime
 t global constructors keyed to bot_loadout
 t global constructors keyed to cs_ShowStateTransitions
 t global constructors keyed to cv_bot_traceview
 t global constructors keyed to debug_physimpact
 t global constructors keyed to debugscriptconditions
 t global constructors keyed to decalsystem
 t global constructors keyed to displaysoundlist
 t global constructors keyed to ent_debugkeys
 t global constructors keyed to fire_maxabsorb
 t global constructors keyed to fish_dormant
 t global constructors keyed to flex_looktime
 t global constructors keyed to flex_minplayertime
 t global constructors keyed to func_break_max_pieces
 t global constructors keyed to gDefaultPlayerImpactDamageTable
 t global constructors keyed to gEntList
 t global constructors keyed to g_AI_SaveRestoreBlockHandler
 t global constructors keyed to g_AI_SchedulesManager
 t global constructors keyed to g_AI_SensedObjectsManager
 t global constructors keyed to g_AI_SquadManager
 t global constructors keyed to g_ActivityList
 t global constructors keyed to g_AreaPortals
 t global constructors keyed to g_BitStringEndMasks
 t global constructors keyed to g_BotUpkeepInterval
 t global constructors keyed to g_ClassInfos
 t global constructors keyed to g_DebugConnectNode1
 t global constructors keyed to g_EventList
 t global constructors keyed to g_InfoCameraLinkList
 t global constructors keyed to g_KeyFrames
 t global constructors keyed to g_KeyValuesErrorStack
 t global constructors keyed to g_Language
 t global constructors keyed to g_MapEntityRefs
 t global constructors keyed to g_PlayerModEnable
 t global constructors keyed to g_PointCameraList
 t global constructors keyed to g_RagdollLVManager
 t global constructors keyed to g_SkyList
 t global constructors keyed to g_SoundscapeSystem
 t global constructors keyed to g_Teams
 t global constructors keyed to g_TextStatsMgr
 t global constructors keyed to g_autoBuyInfo
 t global constructors keyed to g_bBehaviorHost_PreventBaseClassGatherConditions
 t global constructors keyed to g_bMovementOptimizations
 t global constructors keyed to g_bUnget
 t global constructors keyed to g_botInitProfile
 t global constructors keyed to g_debug_doors
 t global constructors keyed to g_debug_trackpather
 t global constructors keyed to g_debug_transitions
 t global constructors keyed to g_debug_vehiclebase
 t global constructors keyed to g_debug_vehicledriver
 t global constructors keyed to g_debug_vehiclesound
 t global constructors keyed to g_fDrawLines
 t global constructors keyed to g_iDevShotCameraCount
 t global constructors keyed to g_interactionScriptedTarget
 t global constructors keyed to g_iszPhysicsPropClassname
 t global constructors keyed to g_pEffects
 t global constructors keyed to g_pGameMovement
 t global constructors keyed to g_pMapInfo
 t global constructors keyed to g_pMoveData
 t global constructors keyed to g_pPositionInterpolators
 t global constructors keyed to g_ppszGoalTypes
 t global constructors keyed to g_ppszTaskFailureText
 t global constructors keyed to g_sModelIndexC4Glow
 t global constructors keyed to g_sModelIndexLaser
 t global constructors keyed to g_vecAttackDir
 t global constructors keyed to gamestatsuploader
 t global constructors keyed to head_hull_mins
 t global constructors keyed to hud_jeephint_numentries
 t global constructors keyed to linksallocated
 t global constructors keyed to m_nDebugOverlayIndex
 t global constructors keyed to mp_feetyawrate
 t global constructors keyed to mp_forcecamera
 t global constructors keyed to mp_hostagepenalty
 t global constructors keyed to mp_logdetail
 t global constructors keyed to nav_show_area_info
 t global constructors keyed to nav_slope_limit
 t global constructors keyed to npc_sentences
 t global constructors keyed to npc_vphysics
 t global constructors keyed to pWeaponSoundCategories
 t global constructors keyed to phys_pushscale
 t global constructors keyed to physics
 t global constructors keyed to physicssound::PlayImpactSounds(physicssound::soundlist_t&)
 t global constructors keyed to r_vehicleDrawDebug
 t global constructors keyed to r_visualizetraces
 t global constructors keyed to rgdpvpreset
 t global constructors keyed to s_ElementNames
 t global constructors keyed to s_PluginCheck
 t global constructors keyed to s_pFadeOutContext
 t global constructors keyed to sk_ally_regen_time
 t global constructors keyed to studiohdr_t::FindModel(void**, char const*) const
 t global constructors keyed to sv_cheats
 t global constructors keyed to sv_gravity
 t global constructors keyed to sv_noclipduringpause
 t global constructors keyed to sv_pushaway_clientside_size
 t global constructors keyed to sv_pushaway_force
 t global constructors keyed to sv_showimpacts
 t global constructors keyed to sv_unlag
 t global constructors keyed to te
 t global constructors keyed to template_debug
 t global constructors keyed to template_t::m_DataMap
 t global constructors keyed to test_nav_opt
 t global constructors keyed to variant_t::SetEntity(CBaseEntity*)
 t global constructors keyed to vcollide_wireframe
 t global constructors keyed to vec3_origin
 t global constructors keyed to virtualmodel_t::AppendSequences(int, studiohdr_t const*)
 t global destructors keyed to AI_EnemyInfo_t::s_Allocator
 t global destructors keyed to AI_Waypoint_t::s_Allocator
 t global destructors keyed to CAI_BaseNPC::ScheduleInList(char const*, CAI_Schedule**, int)
 t global destructors keyed to CAI_BaseNPC::gm_SquadSlotNamespace
 t global destructors keyed to CAI_BlendedMotor::m_DataMap
 t global destructors keyed to CAI_MoveMonitor::m_DataMap
 t global destructors keyed to CAI_Path::m_DataMap
 t global destructors keyed to CAK47::GetClassName()
 t global destructors keyed to CAutoGameSystem::CAutoGameSystem()
 t global destructors keyed to CBaseCSGrenade::GetClassName()
 t global destructors keyed to CBaseCSGrenadeProjectile::m_DataMap
 t global destructors keyed to CBaseCombatWeapon::CBaseCombatWeapon()
 t global destructors keyed to CBaseDoor::m_DataMap
 t global destructors keyed to CBaseEntity::m_bInDebugSelect
 t global destructors keyed to CBaseFire::m_DataMap
 t global destructors keyed to CBaseFlex::GetClassName()
 t global destructors keyed to CBaseGrenade::m_DataMap
 t global destructors keyed to CBaseParticleEntity::GetClassName()
 t global destructors keyed to CBasePlatTrain::m_DataMap
 t global destructors keyed to CBasePlayer::GetTimeBase() const
 t global destructors keyed to CBaseTempEntity::GetClassName()
 t global destructors keyed to CBaseViewModel::CBaseViewModel()
 t global destructors keyed to CBoneCache::CreateResource(bonecacheparams_t const&)
 t global destructors keyed to CBubbling::m_DataMap
 t global destructors keyed to CCSHLTVDirector::SetHLTVServer(IHLTVServer*)
 t global destructors keyed to CCSPlayerResource::GetClassName()
 t global destructors keyed to CCSTeam::GetClassName()
 t global destructors keyed to CC_AI_Disable()
 t global destructors keyed to CConstraintAnchor::m_DataMap
 t global destructors keyed to CCycler::m_DataMap
 t global destructors keyed to CDEagle::GetClassName()
 t global destructors keyed to CDecal::m_DataMap
 t global destructors keyed to CDirtySpatialPartitionEntityList::CDirtySpatialPartitionEntityList()
 t global destructors keyed to CDynamicLight::m_DataMap
 t global destructors keyed to CEntityBlocker::Create(Vector const&, Vector const&, Vector const&, CBaseEntity*, bool)
 t global destructors keyed to CEntityDissolve::m_DataMap
 t global destructors keyed to CEntityFlame::m_DataMap
 t global destructors keyed to CEntityParticleTrail::m_DataMap
 t global destructors keyed to CEnvDetailController::GetClassName()
 t global destructors keyed to CEnvFade::m_DataMap
 t global destructors keyed to CEnvMicrophone::m_DataMap
 t global destructors keyed to CEnvParticleScript::m_DataMap
 t global destructors keyed to CEnvPlayerSurfaceTrigger::m_DataMap
 t global destructors keyed to CEnvScreenOverlay::m_DataMap
 t global destructors keyed to CEventAction::m_DataMap
 t global destructors keyed to CFlashbang::GetClassName()
 t global destructors keyed to CFuncAreaPortalWindow::GetClassName()
 t global destructors keyed to CFuncLadder::s_Ladders
 t global destructors keyed to CFuncMonitor::m_DataMap
 t global destructors keyed to CFuncOccluder::GetClassName()
 t global destructors keyed to CFuncSmokeVolume::m_DataMap
 t global destructors keyed to CFuncWall::m_DataMap
 t global destructors keyed to CFunc_Dust::GetClassName()
 t global destructors keyed to CFunc_LOD::GetClassName()
 t global destructors keyed to CHEGrenade::GetClassName()
 t global destructors keyed to CHLTVDirector::CHLTVDirector()
 t global destructors keyed to CHandleTest::GetClassName()
 t global destructors keyed to CHintCriteria::CHintCriteria()
 t global destructors keyed to CLightGlow::GetClassName()
 t global destructors keyed to CMaterialModifyControl::m_DataMap
 t global destructors keyed to CMessage::m_DataMap
 t global destructors keyed to CMessageEntity::m_DataMap
 t global destructors keyed to CNavArea::m_nextID
 t global destructors keyed to CParticleFire::GetClassName()
 t global destructors keyed to CPhysicsNPCSolver::m_DataMap
 t global destructors keyed to CPhysicsShake::m_DataMap
 t global destructors keyed to CPlasma::GetClassName()
 t global destructors keyed to CPlayerResource::GetClassName()
 t global destructors keyed to CPredictedViewModel::GetClassName()
 t global destructors keyed to CRagdollManager::GetClassName()
 t global destructors keyed to CRecipientFilter::CRecipientFilter()
 t global destructors keyed to CRopeKeyframe::GetClassName()
 t global destructors keyed to CSceneManager::m_DataMap
 t global destructors keyed to CShadowControl::m_DataMap
 t global destructors keyed to CSmokeGrenade::GetClassName()
 t global destructors keyed to CSmokeStack::GetClassName()
 t global destructors keyed to CSoundEnvelope::m_DataMap
 t global destructors keyed to CSpotlightEnd::GetClassName()
 t global destructors keyed to CSprite::m_DataMap
 t global destructors keyed to CSpriteTrail::m_DataMap
 t global destructors keyed to CSteamJet::GetClassName()
 t global destructors keyed to CStressEntityReg::s_pHead
 t global destructors keyed to CSun::GetClassName()
 t global destructors keyed to CTEBSPDecal::CTEBSPDecal(char const*)
 t global destructors keyed to CTEBaseBeam::CTEBaseBeam(char const*)
 t global destructors keyed to CTEBeamEntPoint::CTEBeamEntPoint(char const*)
 t global destructors keyed to CTEBeamEnts::CTEBeamEnts(char const*)
 t global destructors keyed to CTEBeamFollow::CTEBeamFollow(char const*)
 t global destructors keyed to CTEBeamLaser::CTEBeamLaser(char const*)
 t global destructors keyed to CTEBeamPoints::CTEBeamPoints(char const*)
 t global destructors keyed to CTEBeamRing::CTEBeamRing(char const*)
 t global destructors keyed to CTEBeamRingPoint::CTEBeamRingPoint(char const*)
 t global destructors keyed to CTEBeamSpline::CTEBeamSpline(char const*)
 t global destructors keyed to CTEBloodSprite::CTEBloodSprite(char const*)
 t global destructors keyed to CTEBloodStream::CTEBloodStream(char const*)
 t global destructors keyed to CTEBreakModel::CTEBreakModel(char const*)
 t global destructors keyed to CTEBubbleTrail::CTEBubbleTrail(char const*)
 t global destructors keyed to CTEBubbles::CTEBubbles(char const*)
 t global destructors keyed to CTEDecal::CTEDecal(char const*)
 t global destructors keyed to CTEDynamicLight::CTEDynamicLight(char const*)
 t global destructors keyed to CTEEffectDispatch::CTEEffectDispatch(char const*)
 t global destructors keyed to CTEEnergySplash::CTEEnergySplash(char const*)
 t global destructors keyed to CTEExplosion::CTEExplosion(char const*)
 t global destructors keyed to CTEFireBullets::CTEFireBullets(char const*)
 t global destructors keyed to CTEFizz::CTEFizz(char const*)
 t global destructors keyed to CTEFootprintDecal::GetClassName()
 t global destructors keyed to CTEGaussExplosion::CTEGaussExplosion(char const*)
 t global destructors keyed to CTEGlowSprite::CTEGlowSprite(char const*)
 t global destructors keyed to CTEImpact::CTEImpact(char const*)
 t global destructors keyed to CTEKillPlayerAttachments::CTEKillPlayerAttachments(char const*)
 t global destructors keyed to CTELargeFunnel::CTELargeFunnel(char const*)
 t global destructors keyed to CTEMetalSparks::CTEMetalSparks(char const*)
 t global destructors keyed to CTEMuzzleFlash::CTEMuzzleFlash(char const*)
 t global destructors keyed to CTEParticleSystem::GetClassName()
 t global destructors keyed to CTEPhysicsProp::CTEPhysicsProp(char const*)
 t global destructors keyed to CTEPlayerDecal::CTEPlayerDecal(char const*)
 t global destructors keyed to CTEProjectedDecal::CTEProjectedDecal(char const*)
 t global destructors keyed to CTERadioIcon::CTERadioIcon(char const*)
 t global destructors keyed to CTEShatterSurface::CTEShatterSurface(char const*)
 t global destructors keyed to CTEShowLine::CTEShowLine(char const*)
 t global destructors keyed to CTESmoke::CTESmoke(char const*)
 t global destructors keyed to CTESparks::CTESparks(char const*)
 t global destructors keyed to CTESprite::CTESprite(char const*)
 t global destructors keyed to CTESpriteSpray::CTESpriteSpray(char const*)
 t global destructors keyed to CTEWorldDecal::CTEWorldDecal(char const*)
 t global destructors keyed to CTesla::m_DataMap
 t global destructors keyed to CTestTraceline::GetClassName()
 t global destructors keyed to CUserMessages::CUserMessages()
 t global destructors keyed to CUtlSymbol::s_pSymbolTable
 t global destructors keyed to CVGuiScreen::GetClassName()
 t global destructors keyed to CWaterBullet::m_DataMap
 t global destructors keyed to CWaterLODControl::m_DataMap
 t global destructors keyed to CWeaponAWP::GetClassName()
 t global destructors keyed to CWeaponAug::GetClassName()
 t global destructors keyed to CWeaponCSBaseGun::GetClassName()
 t global destructors keyed to CWeaponCubemap::GetClassName()
 t global destructors keyed to CWeaponElite::GetClassName()
 t global destructors keyed to CWeaponFamas::GetClassName()
 t global destructors keyed to CWeaponFiveSeven::GetClassName()
 t global destructors keyed to CWeaponG3SG1::GetClassName()
 t global destructors keyed to CWeaponGalil::GetClassName()
 t global destructors keyed to CWeaponGlock::GetClassName()
 t global destructors keyed to CWeaponM249::GetClassName()
 t global destructors keyed to CWeaponM3::GetClassName()
 t global destructors keyed to CWeaponM4A1::GetClassName()
 t global destructors keyed to CWeaponMAC10::GetClassName()
 t global destructors keyed to CWeaponMP5Navy::GetClassName()
 t global destructors keyed to CWeaponP228::GetClassName()
 t global destructors keyed to CWeaponP90::GetClassName()
 t global destructors keyed to CWeaponSG550::GetClassName()
 t global destructors keyed to CWeaponSG552::GetClassName()
 t global destructors keyed to CWeaponScout::GetClassName()
 t global destructors keyed to CWeaponTMP::GetClassName()
 t global destructors keyed to CWeaponUMP45::GetClassName()
 t global destructors keyed to CWeaponUSP::GetClassName()
 t global destructors keyed to CWeaponXM1014::GetClassName()
 t global destructors keyed to CWindowPane::m_DataMap
 t global destructors keyed to DT_EffectData::g_SendTable
 t global destructors keyed to DT_Local::g_SendTable
 t global destructors keyed to DrawBattleLines
 t global destructors keyed to EntityFactoryDictionary()
 t global destructors keyed to EntityParticleTrailInfo_t::EntityParticleTrailInfo_t()
 t global destructors keyed to GameStringSystem()
 t global destructors keyed to GetBspFilename(char const*)
 t global destructors keyed to GlobalEntity_SetState(int, GLOBALESTATE)
 t global destructors keyed to IsAmmoType(int, char const*)
 t global destructors keyed to IsStaticPointEntity(CBaseEntity*)
 t global destructors keyed to MovieExplosion::GetClassName()
 t global destructors keyed to NWCEdit::IsWCVersionValid()
 t global destructors keyed to ParticleSmokeGrenade::GetClassName()
 t global destructors keyed to PhysBlockHeader_t::m_DataMap
 t global destructors keyed to RememberCRC(unsigned long const&, char const*)
 t global destructors keyed to Response::m_DataMap
 t global destructors keyed to SendProxy_TestProxyToggle(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 t global destructors keyed to Test_CreateEntity()
 t global destructors keyed to TheBots
 t global destructors keyed to TheNavMesh
 t global destructors keyed to UTIL_FunctionToName(datamap_t*, void*)
 t global destructors keyed to UtlVector_InitializeAllocatedElements(CAnimationLayer*, int)
 t global destructors keyed to __CreateGameRules_CCSGameRules()
 t global destructors keyed to __CreateGameRules_CMultiplayRules()
 t global destructors keyed to ai_debug_assault
 t global destructors keyed to ai_debug_directnavprobe
 t global destructors keyed to ai_debug_follow
 t global destructors keyed to ai_debug_ragdoll_magnets
 t global destructors keyed to ai_debug_speech
 t global destructors keyed to ai_moveprobe_debug
 t global destructors keyed to ai_no_node_cache
 t global destructors keyed to ai_no_select_box
 t global destructors keyed to ai_sequence_debug
 t global destructors keyed to ai_show_hull_attacks
 t global destructors keyed to ai_simulate_task_overtime
 t global destructors keyed to bot_loadout
 t global destructors keyed to cs_ShowStateTransitions
 t global destructors keyed to cv_bot_traceview
 t global destructors keyed to debug_physimpact
 t global destructors keyed to debugscriptconditions
 t global destructors keyed to decalsystem
 t global destructors keyed to displaysoundlist
 t global destructors keyed to ent_debugkeys
 t global destructors keyed to fire_maxabsorb
 t global destructors keyed to fish_dormant
 t global destructors keyed to flex_looktime
 t global destructors keyed to flex_minplayertime
 t global destructors keyed to func_break_max_pieces
 t global destructors keyed to gEntList
 t global destructors keyed to g_AI_SensedObjectsManager
 t global destructors keyed to g_ActivityList
 t global destructors keyed to g_AreaPortals
 t global destructors keyed to g_DebugConnectNode1
 t global destructors keyed to g_EventList
 t global destructors keyed to g_InfoCameraLinkList
 t global destructors keyed to g_Language
 t global destructors keyed to g_MapEntityRefs
 t global destructors keyed to g_PlayerModEnable
 t global destructors keyed to g_PointCameraList
 t global destructors keyed to g_RagdollLVManager
 t global destructors keyed to g_SkyList
 t global destructors keyed to g_SoundscapeSystem
 t global destructors keyed to g_Teams
 t global destructors keyed to g_bMovementOptimizations
 t global destructors keyed to g_debug_doors
 t global destructors keyed to g_debug_trackpather
 t global destructors keyed to g_debug_transitions
 t global destructors keyed to g_debug_vehiclebase
 t global destructors keyed to g_debug_vehicledriver
 t global destructors keyed to g_debug_vehiclesound
 t global destructors keyed to g_iDevShotCameraCount
 t global destructors keyed to g_pEffects
 t global destructors keyed to g_pGameMovement
 t global destructors keyed to g_pMoveData
 t global destructors keyed to g_ppszGoalTypes
 t global destructors keyed to g_sModelIndexC4Glow
 t global destructors keyed to g_sModelIndexLaser
 t global destructors keyed to gamestatsuploader
 t global destructors keyed to head_hull_mins
 t global destructors keyed to hud_jeephint_numentries
 t global destructors keyed to linksallocated
 t global destructors keyed to m_nDebugOverlayIndex
 t global destructors keyed to mp_feetyawrate
 t global destructors keyed to mp_forcecamera
 t global destructors keyed to mp_hostagepenalty
 t global destructors keyed to mp_logdetail
 t global destructors keyed to nav_show_area_info
 t global destructors keyed to nav_slope_limit
 t global destructors keyed to npc_sentences
 t global destructors keyed to npc_vphysics
 t global destructors keyed to pWeaponSoundCategories
 t global destructors keyed to phys_pushscale
 t global destructors keyed to physicssound::PlayImpactSounds(physicssound::soundlist_t&)
 t global destructors keyed to r_vehicleDrawDebug
 t global destructors keyed to r_visualizetraces
 t global destructors keyed to s_pFadeOutContext
 t global destructors keyed to sk_ally_regen_time
 t global destructors keyed to sv_cheats
 t global destructors keyed to sv_gravity
 t global destructors keyed to sv_noclipduringpause
 t global destructors keyed to sv_pushaway_clientside_size
 t global destructors keyed to sv_pushaway_force
 t global destructors keyed to sv_showimpacts
 t global destructors keyed to sv_unlag
 t global destructors keyed to te
 t global destructors keyed to template_debug
 t global destructors keyed to template_t::m_DataMap
 t global destructors keyed to test_nav_opt
 t global destructors keyed to vcollide_wireframe
 t ice_sboxes_init()
 t map_setbombradius()
 t map_showbombradius()
 t map_showspawnpoints()
 t npc_ammo_deplete()
 t npc_heal()
 t npc_speakall()
 t npc_thinknow()
 t physics_budget()
 t physics_debug_entity()
 t physics_highlight_active()
 t physics_report_active()
 t physics_select()
 t report_entities()
 t report_simthinklist()
 t report_soundpatch()
 t report_touchlinks()
 t scene_flush()
 t soundscape_flush()
 t splitX(CNavArea*)
 t splitY(CNavArea*)
 t surfaceprop()
 t sv_findsoundname()
 t sv_soundemitter_filecheck()
 t sv_soundemitter_flush()
 t sv_soundscape_printdebuginfo()
 t timeleft()
 t wc_update_entity()
 tan@@GLIBC_2.0
 tolower@@GLIBC_2.0
 typeinfo for std::bad_alloc
 typeinfo for std::bad_cast
 typeinfo for std::bad_exception
 typeinfo for std::bad_typeid
 typeinfo for std::exception
 typeinfo for std::type_info
 vsnprintf@@GLIBC_2.0
 vsprintf@@GLIBC_2.0
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__si_class_type_info
 vtable for __cxxabiv1::__vmi_class_type_info
 vtable for std::bad_alloc
 vtable for std::bad_cast
 vtable for std::bad_exception
 vtable for std::bad_typeid
 vtune
 wcslen@@GLIBC_2.0
